<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__xml_8c" kind="file" language="C++">
    <compoundname>ml_xml.c</compoundname>
    <includes refid="ml__xml_8h" local="yes">ml_xml.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes refid="ml__stream_8h" local="yes">ml_stream.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">expat.h</includes>
    <includes local="no">regex.h</includes>
    <includes local="yes">ml_xml_init.c</includes>
    <incdepgraph>
      <node id="14">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>ml_stream.h</label>
        <link refid="ml__stream_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_xml.c</label>
        <link refid="ml__xml_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ml_xml.h</label>
        <link refid="ml__xml_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="21">
        <label>expat.h</label>
      </node>
      <node id="19">
        <label>gc/gc.h</label>
      </node>
      <node id="17">
        <label>limits.h</label>
      </node>
      <node id="16">
        <label>ml_config.h</label>
      </node>
      <node id="23">
        <label>ml_xml_init.c</label>
      </node>
      <node id="22">
        <label>regex.h</label>
      </node>
      <node id="7">
        <label>setjmp.h</label>
      </node>
      <node id="12">
        <label>stdarg.h</label>
      </node>
      <node id="15">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>stdio.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="11">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structml__xml__node__t" prot="public">ml_xml_node_t</innerclass>
    <innerclass refid="structml__xml__element__t" prot="public">ml_xml_element_t</innerclass>
    <innerclass refid="structml__xml__grower__t" prot="public">ml_xml_grower_t</innerclass>
    <innerclass refid="structml__xml__grow__state__t" prot="public">ml_xml_grow_state_t</innerclass>
    <innerclass refid="structml__xml__filter__t" prot="public">ml_xml_filter_t</innerclass>
    <innerclass refid="structml__xml__iterator__t" prot="public">ml_xml_iterator_t</innerclass>
    <innerclass refid="structml__xml__recursive__t" prot="public">ml_xml_recursive_t</innerclass>
    <innerclass refid="structxml__stack__t" prot="public">xml_stack_t</innerclass>
    <innerclass refid="structxml__parser__t" prot="public">xml_parser_t</innerclass>
    <innerclass refid="structml__xml__stream__state__t" prot="public">ml_xml_stream_state_t</innerclass>
    <innerclass refid="structml__xml__parser__t" prot="public">ml_xml_parser_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__xml_8c_1aebec330325aff5cbc7d9c9248e2cae4a" prot="public" static="no">
        <name>ML_CATEGORY</name>
        <initializer>&quot;xml&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="13" column="10" bodyfile="src/ml_xml.c" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__xml_8c_1ae2c376ecd2d6a893213e53d700be0520" prot="public" static="no">
        <name>ML_XML_STACK_SIZE</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="15" column="9" bodyfile="src/ml_xml.c" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__xml_8c_1ace88edce2babe552864c2a9b574bf222" prot="public" static="no">
        <name>MLXmlSequenceT</name>
        <initializer>MLSequenceT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="636" column="9" bodyfile="src/ml_xml.c" bodystart="636" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__xml_8c_1a621cf60e6da9f9b56d76b0ce41be98eb" prot="public" static="no">
        <name>MLXmlDoubledT</name>
        <initializer>MLDoubledT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="637" column="9" bodyfile="src/ml_xml.c" bodystart="637" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__xml_8c_1a17700fa990a9afa5d36fe23009d3aec0" prot="public" static="no">
        <name>MLXmlChainedT</name>
        <initializer>MLChainedT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="638" column="9" bodyfile="src/ml_xml.c" bodystart="638" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__xml_8c_1a11ae860c376b942da21a498f95505ac4" prot="public" static="no">
        <name>ML_XML_ITERATOR</name>
        <param><defname>NAME</defname></param>
        <param><defname>TYPE</defname></param>
        <param><defname>FIELD</defname></param>
        <param><defname>DOC</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="810" column="9" bodyfile="src/ml_xml.c" bodystart="790" bodyend="864"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ml__xml_8c_1a8532db14eb1d0fbd911629f00046431c" prot="public" static="no">
        <type>struct xml_stack_t</type>
        <definition>typedef struct xml_stack_t xml_stack_t</definition>
        <argsstring></argsstring>
        <name>xml_stack_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1348" column="26" bodyfile="src/ml_xml.c" bodystart="1348" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="ml__xml_8c_1a0503be6c969ccd3ffd36791e288986ef" prot="public" static="yes" mutable="no">
        <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref></type>
        <definition>stringmap_t MLXmlTags[1]</definition>
        <argsstring>[1]</argsstring>
        <name>MLXmlTags</name>
        <initializer>= {STRINGMAP_INIT}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="144" column="20" bodyfile="src/ml_xml.c" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="variable" id="ml__xml_8c_1a2ddee4a84b6bee62fca996492e869fa6" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t* IndexMethod</definition>
        <argsstring></argsstring>
        <name>IndexMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="588" column="19" declfile="src/ml_xml.c" declline="588" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="ml__xml_8c_1a06900e8c4bd0e008c160cbfe4ba7319f" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLDoubledT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLDoubledT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="625" column="18" declfile="src/ml_xml.c" declline="625" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__xml_8c_1abf51dc53e32504044c18e880e63ca1f8" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLChainedT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLChainedT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="626" column="18" declfile="src/ml_xml.c" declline="626" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__xml_8c_1a471de3dba85157e1d9137169aa0790d3" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLXmlParserT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLXmlParserT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1606" column="18" declfile="src/ml_xml.c" declline="1606" declcolumn="18"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__xml_8c_1ab6df0d53e981883c29a20dc3d9c9edb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLXmlT,(), &quot;xml&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLXmlT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;xml&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="24" column="1" declfile="src/ml_xml.c" declline="24" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a07c6efe0e12fff645a11d211b4320d32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_xml_node_parent</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_xml_node_parent</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="27" column="12" bodyfile="src/ml_xml.c" bodystart="27" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1afebed035e291d888c7de9e2e560c0b23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_xml_node_next</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_xml_node_next</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="31" column="12" bodyfile="src/ml_xml.c" bodystart="31" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1acb350762cd9cfc2efcbdd81e8fed2172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_xml_node_prev</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_xml_node_prev</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="35" column="12" bodyfile="src/ml_xml.c" bodystart="35" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a6664c573e51d67189409191c43e78cc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;parent&quot;, MLXmlT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;parent&quot;</type>
        </param>
        <param>
          <type>MLXmlT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="39" column="1" bodyfile="src/ml_xml.c" bodystart="39" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ad67cd6620799ff887a7af031d0456151" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;index&quot;, MLXmlT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;index&quot;</type>
        </param>
        <param>
          <type>MLXmlT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="47" column="1" bodyfile="src/ml_xml.c" bodystart="47" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a3e64f60836ce0feb2878b37524c51acd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;prev&quot;, MLXmlT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;prev&quot;</type>
        </param>
        <param>
          <type>MLXmlT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="55" column="1" bodyfile="src/ml_xml.c" bodystart="55" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1abf6f5b37384fd3842bd470d3b546b66c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;next&quot;, MLXmlT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;next&quot;</type>
        </param>
        <param>
          <type>MLXmlT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="63" column="1" bodyfile="src/ml_xml.c" bodystart="63" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ad03d0c6908fdd465d4a59bb02e2ca620" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLXmlT, ml_state_t *Caller, ml_xml_node_t *Node)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLXmlT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref> *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="71" column="13" bodyfile="src/ml_xml.c" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1af613c71f2b2b2ede0d823643972285ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLXmlT, ml_state_t *Caller, ml_xml_node_t *Node)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLXmlT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref> *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="75" column="13" bodyfile="src/ml_xml.c" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a0695afc69dd364f3154734384a36c47e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLXmlT, ml_state_t *Caller, ml_xml_node_t *Node)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLXmlT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref> *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="79" column="13" bodyfile="src/ml_xml.c" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a694d564be88c927ff8859919c34a402c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLXmlEscape)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLXmlEscape</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="83" column="1" bodyfile="src/ml_xml.c" bodystart="83" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a3024255ffff6b8df4c27e0ace72c528f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLXmlTextT,(MLXmlT, MLStringT), &quot;xml::text&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLXmlTextT</type>
        </param>
        <param>
          <type>(MLXmlT, MLStringT)</type>
        </param>
        <param>
          <type>&quot;xml::text&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="113" column="1" declfile="src/ml_xml.c" declline="113" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ac4a9b8c517d33a5c66193264883c496b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref> *</type>
        <definition>ml_xml_node_t * ml_xml_text</definition>
        <argsstring>(const char *Content, int Length)</argsstring>
        <name>ml_xml_text</name>
        <param>
          <type>const char *</type>
          <declname>Content</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="116" column="15" bodyfile="src/ml_xml.c" bodystart="116" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a3587e98cda6e3b26cd46cee44384f3b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref> *</type>
        <definition>ml_xml_node_t * ml_xml_text_copy</definition>
        <argsstring>(const char *Content, int Length)</argsstring>
        <name>ml_xml_text_copy</name>
        <param>
          <type>const char *</type>
          <declname>Content</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="124" column="15" bodyfile="src/ml_xml.c" bodystart="124" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1aec73eb8f97613c8b240b8e507ec82a65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;text&quot;, MLXmlTextT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;text&quot;</type>
        </param>
        <param>
          <type>MLXmlTextT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="136" column="1" bodyfile="src/ml_xml.c" bodystart="136" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a775813b91536221b4ff94fda36a7d9f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLXmlElementT,(MLXmlT, MLSequenceT), &quot;xml::element&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLXmlElementT</type>
        </param>
        <param>
          <type>(MLXmlT, MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;xml::element&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="152" column="1" declfile="src/ml_xml.c" declline="152" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ab785039b88fb30c43f3bf829098bd7c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref> *</type>
        <definition>ml_xml_element_t * ml_xml_element</definition>
        <argsstring>(const char *Tag)</argsstring>
        <name>ml_xml_element</name>
        <param>
          <type>const char *</type>
          <declname>Tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="155" column="18" bodyfile="src/ml_xml.c" bodystart="155" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a7da987bac8d1b6b0b7660dfba2948ab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_xml_element_tag</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_xml_element_tag</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="165" column="12" bodyfile="src/ml_xml.c" bodystart="165" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a990827bb7ee78e22409c0af248121f98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_xml_element_attributes</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_xml_element_attributes</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="169" column="12" bodyfile="src/ml_xml.c" bodystart="169" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1aad248719561e0d36b6891027197dbd13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ml_xml_element_length</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_xml_element_length</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="173" column="8" bodyfile="src/ml_xml.c" bodystart="173" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a79dc716ff2fd6e05b2579e11a2f4f4da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_xml_element_head</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_xml_element_head</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="177" column="12" bodyfile="src/ml_xml.c" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1adad7cbb7c0377f563d94ba8015909481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_xml_node_remove</definition>
        <argsstring>(ml_xml_node_t *Child)</argsstring>
        <name>ml_xml_node_remove</name>
        <param>
          <type><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref> *</type>
          <declname>Child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="181" column="6" bodyfile="src/ml_xml.c" bodystart="181" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1aeccd3fb4ca5a7b9c6a242feb68c0da23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_xml_element_put</definition>
        <argsstring>(ml_xml_element_t *Parent, ml_xml_node_t *Child)</argsstring>
        <name>ml_xml_element_put</name>
        <param>
          <type><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref> *</type>
          <declname>Parent</declname>
        </param>
        <param>
          <type><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref> *</type>
          <declname>Child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="200" column="6" bodyfile="src/ml_xml.c" bodystart="200" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1aee9172aec2bb2cc552129f7b14f7f959" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_xml_element_put_general</definition>
        <argsstring>(ml_xml_element_t *Element, ml_value_t *Value, ml_stringbuffer_t *Buffer)</argsstring>
        <name>ml_xml_element_put_general</name>
        <param>
          <type><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref> *</type>
          <declname>Element</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="214" column="19" bodyfile="src/ml_xml.c" bodystart="214" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ab80b64b041facaa8ab5820e1ca2d44be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(MLXmlElementT, MLStringT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>MLXmlElementT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="252" column="1" bodyfile="src/ml_xml.c" bodystart="252" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ad129f2acec69f94233f5aa4b154c95e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;tag&quot;, MLXmlElementT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;tag&quot;</type>
        </param>
        <param>
          <type>MLXmlElementT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="298" column="1" bodyfile="src/ml_xml.c" bodystart="298" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ab1fcc61f3ea4822a8d2e699885456433" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;attributes&quot;, MLXmlElementT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;attributes&quot;</type>
        </param>
        <param>
          <type>MLXmlElementT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="306" column="1" bodyfile="src/ml_xml.c" bodystart="306" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a28363d1df2568e141d3573ea5ceb27ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_xml_element_text</definition>
        <argsstring>(ml_xml_element_t *Element, ml_stringbuffer_t *Buffer, const char *Sep, int SepLen)</argsstring>
        <name>ml_xml_element_text</name>
        <param>
          <type><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref> *</type>
          <declname>Element</declname>
        </param>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Sep</declname>
        </param>
        <param>
          <type>int</type>
          <declname>SepLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="314" column="13" bodyfile="src/ml_xml.c" bodystart="314" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a38c993269a14b784e0268fa6a54fabe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;text&quot;, MLXmlElementT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;text&quot;</type>
        </param>
        <param>
          <type>MLXmlElementT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="325" column="1" bodyfile="src/ml_xml.c" bodystart="325" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a5ca60ad2582930df73b98c55dd05250f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;text&quot;, MLXmlElementT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;text&quot;</type>
        </param>
        <param>
          <type>MLXmlElementT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="335" column="1" bodyfile="src/ml_xml.c" bodystart="335" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a6109f490043516666a8ae91f3a423202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;set&quot;, MLXmlElementT, MLStringT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;set&quot;</type>
        </param>
        <param>
          <type>MLXmlElementT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="346" column="1" bodyfile="src/ml_xml.c" bodystart="346" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a0e784319ccc8581ce4d490560c6c81e6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_xml_grow</definition>
        <argsstring>(ml_xml_grower_t *Grower, ml_value_t *Value)</argsstring>
        <name>ml_xml_grow</name>
        <param>
          <type><ref refid="structml__xml__grower__t" kindref="compound">ml_xml_grower_t</ref> *</type>
          <declname>Grower</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="363" column="19" bodyfile="src/ml_xml.c" bodystart="363" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ae19f77819806ad25e53a5c739b46d504" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(&quot;put&quot;, MLXmlElementT, MLAnyT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>&quot;put&quot;</type>
        </param>
        <param>
          <type>MLXmlElementT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="400" column="1" bodyfile="src/ml_xml.c" bodystart="400" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1abdd732f9232d0c1bc9c86bf6261a50e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;empty&quot;, MLXmlElementT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;empty&quot;</type>
        </param>
        <param>
          <type>MLXmlElementT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="424" column="1" bodyfile="src/ml_xml.c" bodystart="424" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a344b94d488004a7df005ba6635e26d38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;remove&quot;, MLXmlT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;remove&quot;</type>
        </param>
        <param>
          <type>MLXmlT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="438" column="1" bodyfile="src/ml_xml.c" bodystart="438" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a2317599ff54f94696fd9f010d20cfb2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(&quot;add_next&quot;, MLXmlT, MLAnyT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>&quot;add_next&quot;</type>
        </param>
        <param>
          <type>MLXmlT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="451" column="1" bodyfile="src/ml_xml.c" bodystart="451" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a6828e8e54e9470e10927314d0538b0ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(&quot;add_prev&quot;, MLXmlT, MLAnyT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>&quot;add_prev&quot;</type>
        </param>
        <param>
          <type>MLXmlT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="480" column="1" bodyfile="src/ml_xml.c" bodystart="480" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a9940074f70d2837b51f92ffb2565c973" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_xml_grow_state_next</definition>
        <argsstring>(ml_xml_grow_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_xml_grow_state_next</name>
        <param>
          <type><ref refid="structml__xml__grow__state__t" kindref="compound">ml_xml_grow_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="551" column="13" bodyfile="src/ml_xml.c" bodystart="551" bodyend="568" declfile="src/ml_xml.c" declline="516" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ab39928282a3de2ab3e7ee208c4a5df88" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_xml_grow_state_value</definition>
        <argsstring>(ml_xml_grow_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_xml_grow_state_value</name>
        <param>
          <type><ref refid="structml__xml__grow__state__t" kindref="compound">ml_xml_grow_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="518" column="13" bodyfile="src/ml_xml.c" bodystart="518" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a58362f1353073d079e88183dcf7baefe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODVX</definition>
        <argsstring>(&quot;grow&quot;, MLXmlElementT, MLSequenceT)</argsstring>
        <name>ML_METHODVX</name>
        <param>
          <type>&quot;grow&quot;</type>
        </param>
        <param>
          <type>MLXmlElementT</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="570" column="1" bodyfile="src/ml_xml.c" bodystart="570" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a03cdf311f60059edb30325da7640006f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLXmlElementT, ml_state_t *Caller, ml_xml_element_t *Node)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLXmlElementT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref> *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="584" column="13" bodyfile="src/ml_xml.c" bodystart="584" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a1e2aaccee6bbec1906e41c279a498589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;[]&quot;, MLXmlElementT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&quot;</type>
          <array>[]</array>
        </param>
        <param>
          <type>MLXmlElementT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="590" column="1" bodyfile="src/ml_xml.c" bodystart="590" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a8794084ad3bead1f69722177ec70078d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;[]&quot;, MLXmlElementT, MLStringT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;&quot;</type>
          <array>[]</array>
        </param>
        <param>
          <type>MLXmlElementT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="605" column="1" bodyfile="src/ml_xml.c" bodystart="605" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a35a5ada11240342a2010c12edb8498b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;::&quot;, MLXmlElementT, MLStringT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;::&quot;</type>
        </param>
        <param>
          <type>MLXmlElementT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="615" column="1" bodyfile="src/ml_xml.c" bodystart="615" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a10bfc2edf7f51d36a30d7b682eedb76b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_xml_filter_call</definition>
        <argsstring>(ml_state_t *Caller, ml_xml_filter_t *Filter, int Count, ml_value_t **Args)</argsstring>
        <name>ml_xml_filter_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__xml__filter__t" kindref="compound">ml_xml_filter_t</ref> *</type>
          <declname>Filter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="648" column="13" bodyfile="src/ml_xml.c" bodystart="648" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ad28830bf7c95f2518ed0e61d27b64999" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLXmlFilterT,(MLFunctionT), &quot;xml::filter&quot;,.call=(void *) ml_xml_filter_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLXmlFilterT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;xml::filter&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_xml_filter_call</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="665" column="1" declfile="src/ml_xml.c" declline="665" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a1fe6fe90b61ea4fe73915c6b20a236a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(MLXmlFilterT, MLNamesT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>MLXmlFilterT</type>
        </param>
        <param>
          <type>MLNamesT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="670" column="1" bodyfile="src/ml_xml.c" bodystart="670" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a359763e42bccbdadec92cb119c616761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(MLXmlFilterT, MLStringT, MLNamesT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>MLXmlFilterT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLNamesT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="687" column="1" bodyfile="src/ml_xml.c" bodystart="687" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a75f54aec53ede7a408dd788639bf5d66" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static ML_METHOD_DECL</definition>
        <argsstring>(FilterSoloMethod, &quot;-&gt;?&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>FilterSoloMethod</type>
        </param>
        <param>
          <type>&quot;-&gt;?&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="708" column="8" declfile="src/ml_xml.c" declline="708" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a51e61bf6ecec21085605376f1bd2d1bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLXmlForwardT,(MLXmlSequenceT), &quot;xml::forward&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLXmlForwardT</type>
        </param>
        <param>
          <type>(MLXmlSequenceT)</type>
        </param>
        <param>
          <type>&quot;xml::forward&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="716" column="1" declfile="src/ml_xml.c" declline="716" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a7578923e74042e36588a59dde65abd83" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLXmlForwardT, ml_state_t *Caller, ml_xml_iterator_t *Iterator)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLXmlForwardT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__xml__iterator__t" kindref="compound">ml_xml_iterator_t</ref> *</type>
          <declname>Iterator</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="719" column="13" bodyfile="src/ml_xml.c" bodystart="719" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ab8b0899bd56bd0c89b57d475be090179" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLXmlForwardT, ml_state_t *Caller, ml_xml_iterator_t *Iterator)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLXmlForwardT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__xml__iterator__t" kindref="compound">ml_xml_iterator_t</ref> *</type>
          <declname>Iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="732" column="13" bodyfile="src/ml_xml.c" bodystart="732" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a876c34a010d558f21a7e9b5b45fd1415" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLXmlForwardT, ml_state_t *Caller, ml_xml_iterator_t *Iterator)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLXmlForwardT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__xml__iterator__t" kindref="compound">ml_xml_iterator_t</ref> *</type>
          <declname>Iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="745" column="13" bodyfile="src/ml_xml.c" bodystart="745" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1aedc457ffb6a0903adbf26511e5c6617c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLXmlForwardT, ml_state_t *Caller, ml_xml_iterator_t *Iterator)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLXmlForwardT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__xml__iterator__t" kindref="compound">ml_xml_iterator_t</ref> *</type>
          <declname>Iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="749" column="13" bodyfile="src/ml_xml.c" bodystart="749" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1aef1dcbd39620e2d88a2322bc849b7f58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLXmlReverseT,(MLXmlSequenceT), &quot;xml::reverse&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLXmlReverseT</type>
        </param>
        <param>
          <type>(MLXmlSequenceT)</type>
        </param>
        <param>
          <type>&quot;xml::reverse&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="753" column="1" declfile="src/ml_xml.c" declline="753" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1aa6604fd292520c93ec3606fe5fd2ab91" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLXmlReverseT, ml_state_t *Caller, ml_xml_iterator_t *Iterator)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLXmlReverseT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__xml__iterator__t" kindref="compound">ml_xml_iterator_t</ref> *</type>
          <declname>Iterator</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="756" column="13" bodyfile="src/ml_xml.c" bodystart="756" bodyend="767"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a95a6ce1fa7354c43db355613d56e63ad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLXmlReverseT, ml_state_t *Caller, ml_xml_iterator_t *Iterator)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLXmlReverseT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__xml__iterator__t" kindref="compound">ml_xml_iterator_t</ref> *</type>
          <declname>Iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="769" column="13" bodyfile="src/ml_xml.c" bodystart="769" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a8adab78148c183ff5021a98c30ec0a65" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLXmlReverseT, ml_state_t *Caller, ml_xml_iterator_t *Iterator)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLXmlReverseT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__xml__iterator__t" kindref="compound">ml_xml_iterator_t</ref> *</type>
          <declname>Iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="782" column="13" bodyfile="src/ml_xml.c" bodystart="782" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a26fe4a18f1f64c309b42bf8c03199467" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLXmlReverseT, ml_state_t *Caller, ml_xml_iterator_t *Iterator)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLXmlReverseT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__xml__iterator__t" kindref="compound">ml_xml_iterator_t</ref> *</type>
          <declname>Iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="786" column="13" bodyfile="src/ml_xml.c" bodystart="786" bodyend="788"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a36b78d221912c42577ab686b92e7f121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_XML_ITERATOR</definition>
        <argsstring>(&quot;/&quot;, Forward, Head, children)</argsstring>
        <name>ML_XML_ITERATOR</name>
        <param>
          <type>&quot;/&quot;</type>
        </param>
        <param>
          <type>Forward</type>
        </param>
        <param>
          <type>Head</type>
        </param>
        <param>
          <type>children</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="866" column="1" declfile="src/ml_xml.c" declline="866" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a75dd90b311316ef2dc944fa4c183d35f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_XML_ITERATOR</definition>
        <argsstring>(&quot;&gt;&gt;&quot;, Forward, Base.Next, next siblings)</argsstring>
        <name>ML_XML_ITERATOR</name>
        <param>
          <type>&quot;&gt;&gt;&quot;</type>
        </param>
        <param>
          <type>Forward</type>
        </param>
        <param>
          <type>Base.</type>
          <declname>Next</declname>
        </param>
        <param>
          <type>next</type>
          <declname>siblings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="867" column="1" declfile="src/ml_xml.c" declline="867" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ad03092e597a453ad20d309961d00de6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_XML_ITERATOR</definition>
        <argsstring>(&quot;&lt;&lt;&quot;, Reverse, Base.Prev, previous siblings)</argsstring>
        <name>ML_XML_ITERATOR</name>
        <param>
          <type>&quot;&lt;&lt;&quot;</type>
        </param>
        <param>
          <type>Reverse</type>
        </param>
        <param>
          <type>Base.</type>
          <declname>Prev</declname>
        </param>
        <param>
          <type>previous</type>
          <declname>siblings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="868" column="1" declfile="src/ml_xml.c" declline="868" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a092c2f944e9e193e9d05f43f8e6aeede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;parent&quot;, MLXmlT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;parent&quot;</type>
        </param>
        <param>
          <type>MLXmlT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="870" column="1" bodyfile="src/ml_xml.c" bodystart="870" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a4f2da2eaca94099ed265bb62c46bcf94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;parent&quot;, MLXmlT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;parent&quot;</type>
        </param>
        <param>
          <type>MLXmlT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="885" column="1" bodyfile="src/ml_xml.c" bodystart="885" bodyend="898"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a2fa3fa342bd2c41ecb95a6d84db39fdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;next&quot;, MLXmlT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;next&quot;</type>
        </param>
        <param>
          <type>MLXmlT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="900" column="1" bodyfile="src/ml_xml.c" bodystart="900" bodyend="913"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a4e63fc193648ec88fc286ab2818184ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;prev&quot;, MLXmlT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;prev&quot;</type>
        </param>
        <param>
          <type>MLXmlT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="915" column="1" bodyfile="src/ml_xml.c" bodystart="915" bodyend="928"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ada8b993e996d7dfa1acd4d8b309aee40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLXmlRecursiveT,(MLXmlSequenceT), &quot;xml::recursive&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLXmlRecursiveT</type>
        </param>
        <param>
          <type>(MLXmlSequenceT)</type>
        </param>
        <param>
          <type>&quot;xml::recursive&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="936" column="1" declfile="src/ml_xml.c" declline="936" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a5ec6809eff83b57376e9bb319313ae7b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref> *</type>
        <definition>static ml_xml_element_t * ml_xml_recursive_find</definition>
        <argsstring>(ml_xml_element_t *Element, const char *Tag)</argsstring>
        <name>ml_xml_recursive_find</name>
        <param>
          <type><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref> *</type>
          <declname>Element</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Tag</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="939" column="25" bodyfile="src/ml_xml.c" bodystart="939" bodyend="949"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1afba0c0e54520fd739ce0b4073f9fe745" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLXmlRecursiveT, ml_state_t *Caller, ml_xml_recursive_t *Recursive)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLXmlRecursiveT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__xml__recursive__t" kindref="compound">ml_xml_recursive_t</ref> *</type>
          <declname>Recursive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="951" column="13" bodyfile="src/ml_xml.c" bodystart="951" bodyend="961"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a04d7e5644e5970d8ba406e9445b8694d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLXmlRecursiveT, ml_state_t *Caller, ml_xml_recursive_t *Recursive)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLXmlRecursiveT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__xml__recursive__t" kindref="compound">ml_xml_recursive_t</ref> *</type>
          <declname>Recursive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="963" column="13" bodyfile="src/ml_xml.c" bodystart="963" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ac43eb9b6c4b0477f8d96deed65df64aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLXmlRecursiveT, ml_state_t *Caller, ml_xml_recursive_t *Recursive)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLXmlRecursiveT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__xml__recursive__t" kindref="compound">ml_xml_recursive_t</ref> *</type>
          <declname>Recursive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="992" column="13" bodyfile="src/ml_xml.c" bodystart="992" bodyend="994"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ab13247f82787e515a1f3e053b8f8d582" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLXmlRecursiveT, ml_state_t *Caller, ml_xml_recursive_t *Recursive)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLXmlRecursiveT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__xml__recursive__t" kindref="compound">ml_xml_recursive_t</ref> *</type>
          <declname>Recursive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="996" column="13" bodyfile="src/ml_xml.c" bodystart="996" bodyend="998"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a04ccdb7ee01869d830d8578a9955d273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;//&quot;, MLXmlElementT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;//&quot;</type>
        </param>
        <param>
          <type>MLXmlElementT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1000" column="1" bodyfile="src/ml_xml.c" bodystart="1000" bodyend="1009"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ab1bd77c380ff35506b14562fa1bb3710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;//&quot;, MLXmlT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;//&quot;</type>
        </param>
        <param>
          <type>MLXmlT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1011" column="1" bodyfile="src/ml_xml.c" bodystart="1011" bodyend="1024"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a2b58fbd703af055f2d3a729ccd1f6056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(&quot;//&quot;, MLXmlT, MLNamesT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>&quot;//&quot;</type>
        </param>
        <param>
          <type>MLXmlT</type>
        </param>
        <param>
          <type>MLNamesT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1026" column="1" bodyfile="src/ml_xml.c" bodystart="1026" bodyend="1049"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ad3ac21f5f41e3e493d444c82b9d8b15c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(&quot;//&quot;, MLXmlT, MLStringT, MLNamesT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>&quot;//&quot;</type>
        </param>
        <param>
          <type>MLXmlT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLNamesT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1051" column="1" bodyfile="src/ml_xml.c" bodystart="1051" bodyend="1078"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ab505a46223541906b0762015d3856093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;//&quot;, MLXmlT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;//&quot;</type>
        </param>
        <param>
          <type>MLXmlT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1080" column="1" bodyfile="src/ml_xml.c" bodystart="1080" bodyend="1094"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a3dc64ec6a2ad4a53597a005974497489" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_xml_contains_text</definition>
        <argsstring>(ml_state_t *Caller, const char *Text, int Count, ml_value_t **Args)</argsstring>
        <name>ml_xml_contains_text</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1198" column="13" bodyfile="src/ml_xml.c" bodystart="1198" bodyend="1211"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a8c6bcb20a181aeb85b868f0d79bb1f9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;contains&quot;, MLXmlSequenceT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;contains&quot;</type>
        </param>
        <param>
          <type>MLXmlSequenceT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1213" column="1" bodyfile="src/ml_xml.c" bodystart="1213" bodyend="1224"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1acc0aec7f0c4de6990f86d0b337ef2cf3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int regex_test</definition>
        <argsstring>(const char *Subject, regex_t *Regex)</argsstring>
        <name>regex_test</name>
        <param>
          <type>const char *</type>
          <declname>Subject</declname>
        </param>
        <param>
          <type>regex_t *</type>
          <declname>Regex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1226" column="12" bodyfile="src/ml_xml.c" bodystart="1226" bodyend="1235"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a3f661d3c01e4bae5ebb74f6bd3097187" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_xml_contains_regex</definition>
        <argsstring>(ml_state_t *Caller, regex_t *Regex, int Count, ml_value_t **Args)</argsstring>
        <name>ml_xml_contains_regex</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type>regex_t *</type>
          <declname>Regex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1237" column="13" bodyfile="src/ml_xml.c" bodystart="1237" bodyend="1250"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a48e5c00827797f37b0d49bdb4fbd4e4e" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>regex_t *</type>
        <definition>regex_t * ml_regex_value</definition>
        <argsstring>(const ml_value_t *Value)</argsstring>
        <name>ml_regex_value</name>
        <param>
          <type>const <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1252" column="16" bodyfile="src/ml_string.c" bodystart="1164" bodyend="1167" declfile="src/ml_xml.c" declline="1252" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a8a78759d1445992c93d11b4c924ec448" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;contains&quot;, MLXmlSequenceT, MLRegexT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;contains&quot;</type>
        </param>
        <param>
          <type>MLXmlSequenceT</type>
        </param>
        <param>
          <type>MLRegexT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1254" column="1" bodyfile="src/ml_xml.c" bodystart="1254" bodyend="1265"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ae5fad4f5d72aebb4999e0f07bdb79ccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;has&quot;, MLXmlSequenceT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;has&quot;</type>
        </param>
        <param>
          <type>MLXmlSequenceT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1267" column="1" bodyfile="src/ml_xml.c" bodystart="1267" bodyend="1278"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a0fa1968e28a05d665e713cce9d209073" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_xml_escape_string</definition>
        <argsstring>(ml_stringbuffer_t *Buffer, const char *String, int Count)</argsstring>
        <name>ml_xml_escape_string</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>String</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1280" column="13" bodyfile="src/ml_xml.c" bodystart="1280" bodyend="1304"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1afee84cf8cd8a215277f5bb437d57ad06" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_xml_node_append</definition>
        <argsstring>(ml_stringbuffer_t *Buffer, ml_xml_element_t *Node)</argsstring>
        <name>ml_xml_node_append</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <param>
          <type><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref> *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1306" column="19" bodyfile="src/ml_xml.c" bodystart="1306" bodyend="1336"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a889be5df69cbd58b897b44bb07952fb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLXmlElementT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLXmlElementT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1338" column="1" bodyfile="src/ml_xml.c" bodystart="1338" bodyend="1346"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1adc0731a31c2bd6e7f70429a170267630" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xml_start_element</definition>
        <argsstring>(xml_parser_t *Parser, const XML_Char *Name, const XML_Char **Attrs)</argsstring>
        <name>xml_start_element</name>
        <param>
          <type><ref refid="structxml__parser__t" kindref="compound">xml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type>const XML_Char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type>const XML_Char **</type>
          <declname>Attrs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1365" column="13" bodyfile="src/ml_xml.c" bodystart="1365" bodyend="1395"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a9a9bfabe1108a12b576701f8f69b74ab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xml_end_element</definition>
        <argsstring>(xml_parser_t *Parser, const XML_Char *Name)</argsstring>
        <name>xml_end_element</name>
        <param>
          <type><ref refid="structxml__parser__t" kindref="compound">xml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type>const XML_Char *</type>
          <declname>Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1397" column="13" bodyfile="src/ml_xml.c" bodystart="1397" bodyend="1418"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a2e1fc07120fde00362076354fa3d0efa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xml_character_data</definition>
        <argsstring>(xml_parser_t *Parser, const XML_Char *String, int Length)</argsstring>
        <name>xml_character_data</name>
        <param>
          <type><ref refid="structxml__parser__t" kindref="compound">xml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type>const XML_Char *</type>
          <declname>String</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1420" column="13" bodyfile="src/ml_xml.c" bodystart="1420" bodyend="1422"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ab44160e11eca9660db22e2d41c786dcb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xml_skipped_entity</definition>
        <argsstring>(xml_parser_t *Parser, const XML_Char *EntityName, int IsParameterEntity)</argsstring>
        <name>xml_skipped_entity</name>
        <param>
          <type><ref refid="structxml__parser__t" kindref="compound">xml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type>const XML_Char *</type>
          <declname>EntityName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>IsParameterEntity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1424" column="13" bodyfile="src/ml_xml.c" bodystart="1424" bodyend="1426"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1acc6c2030816782570519d8914206bf7b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xml_default</definition>
        <argsstring>(xml_parser_t *Parser, const XML_Char *String, int Length)</argsstring>
        <name>xml_default</name>
        <param>
          <type><ref refid="structxml__parser__t" kindref="compound">xml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type>const XML_Char *</type>
          <declname>String</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1428" column="13" bodyfile="src/ml_xml.c" bodystart="1428" bodyend="1430"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a47c7d164e7d025ccd2583c26e03057c5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_free</definition>
        <argsstring>(void *Ptr)</argsstring>
        <name>ml_free</name>
        <param>
          <type>void *</type>
          <declname>Ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1432" column="13" bodyfile="src/ml_xml.c" bodystart="1432" bodyend="1433"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a3cafc8d860ac387250748ad9d03c4a61" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xml_decode_callback</definition>
        <argsstring>(ml_value_t **Result, ml_value_t *Value)</argsstring>
        <name>xml_decode_callback</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Result</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1435" column="13" bodyfile="src/ml_xml.c" bodystart="1435" bodyend="1437"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a4c049a9eac04e1424311890eee042ce1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLXmlT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLXmlT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1439" column="1" bodyfile="src/ml_xml.c" bodystart="1439" bodyend="1462"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ab95d5175f9bebbda8dcae881110b2db4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_xml_stream_state_run</definition>
        <argsstring>(ml_xml_stream_state_t *State, ml_value_t *Result)</argsstring>
        <name>ml_xml_stream_state_run</name>
        <param>
          <type><ref refid="structml__xml__stream__state__t" kindref="compound">ml_xml_stream_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1474" column="13" bodyfile="src/ml_xml.c" bodystart="1474" bodyend="1484"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ab6d2b0c0bd476d0a2bda9b00ea18bc52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(MLXmlT, MLStreamT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>MLXmlT</type>
        </param>
        <param>
          <type>MLStreamT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1486" column="1" bodyfile="src/ml_xml.c" bodystart="1486" bodyend="1507"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a5d7f82481cc747160f3f83c6e5fb037b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(MLXmlT, MLSymbolT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>MLXmlT</type>
        </param>
        <param>
          <type>MLSymbolT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1509" column="1" bodyfile="src/ml_xml.c" bodystart="1509" bodyend="1544"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ab9085916a2d96145279188408bec9b87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_ANON</definition>
        <argsstring>(MLXmlParse, &quot;xml::parse&quot;)</argsstring>
        <name>ML_METHOD_ANON</name>
        <param>
          <type>MLXmlParse</type>
        </param>
        <param>
          <type>&quot;xml::parse&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1546" column="1" declfile="src/ml_xml.c" declline="1546" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a468d16fb7d07227ab4c31da208c1190d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLXmlParse, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLXmlParse</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1548" column="1" bodyfile="src/ml_xml.c" bodystart="1548" bodyend="1572"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1aba83bc58217e0a8812896edf7963419b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(MLXmlParse, MLStreamT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>MLXmlParse</type>
        </param>
        <param>
          <type>MLStreamT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1574" column="1" bodyfile="src/ml_xml.c" bodystart="1574" bodyend="1596"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1af90e9a8492803f385eb0f68fbeba5cd4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_xml_decode_callback</definition>
        <argsstring>(ml_xml_parser_t *Parser, ml_value_t *Value)</argsstring>
        <name>ml_xml_decode_callback</name>
        <param>
          <type><ref refid="structml__xml__parser__t" kindref="compound">ml_xml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1608" column="13" bodyfile="src/ml_xml.c" bodystart="1608" bodyend="1611"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a6741c4a2bdf4880598f0b818bb1682b3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_xml_parser_run</definition>
        <argsstring>(ml_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_xml_parser_run</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1613" column="13" bodyfile="src/ml_xml.c" bodystart="1613" bodyend="1614"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a52a96c2f55fe317c69c6c15f4ffddd2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(XmlParser)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>XmlParser</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1616" column="1" bodyfile="src/ml_xml.c" bodystart="1616" bodyend="1638"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a7baa0451ef10fbfa72c7c79b93b5346a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLXmlParserT,(MLStreamT), &quot;xml::parser&quot;,.Constructor=(ml_value_t *) XmlParser)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLXmlParserT</type>
        </param>
        <param>
          <type>(MLStreamT)</type>
        </param>
        <param>
          <type>&quot;xml::parser&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) XmlParser</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1640" column="1" declfile="src/ml_xml.c" declline="1640" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1accc6e070404e0f2ca20912e482c258a9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_stream_write, MLXmlParserT, ml_state_t *Caller, ml_xml_parser_t *Parser, const void *Address, int Count)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_stream_write</type>
        </param>
        <param>
          <type>MLXmlParserT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__xml__parser__t" kindref="compound">ml_xml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1646" column="13" bodyfile="src/ml_xml.c" bodystart="1646" bodyend="1652"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1ac643f168313956215d77b41a98f750f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_stream_flush, MLXmlParserT, ml_state_t *Caller, ml_xml_parser_t *Parser)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_stream_flush</type>
        </param>
        <param>
          <type>MLXmlParserT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__xml__parser__t" kindref="compound">ml_xml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1654" column="13" bodyfile="src/ml_xml.c" bodystart="1654" bodyend="1660"/>
      </memberdef>
      <memberdef kind="function" id="ml__xml_8c_1a60e2b4e006e6bb5018eaca5f48c7718c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_xml_init</definition>
        <argsstring>(stringmap_t *Globals)</argsstring>
        <name>ml_xml_init</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Globals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_xml.c" line="1662" column="6" bodyfile="src/ml_xml.c" bodystart="1662" bodyend="1675"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ml_xml.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_stream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;expat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tre/regex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;regex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ML_CATEGORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;xml&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_XML_STACK_SIZE<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="structml__xml__node__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__string__t" kindref="compound">ml_string_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Parent;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Next,<sp/>*Prev;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">};</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">ML_TYPE(MLXmlT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;xml&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>XML<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_xml_node_parent(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)((<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*)Value)-&gt;Parent;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_xml_node_next(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)((<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*)Value)-&gt;Next;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_xml_node_prev(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)((<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*)Value)-&gt;Prev;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;parent&quot;</highlight><highlight class="normal">,<sp/>MLXmlT)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//&lt;Xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returnst<sp/>the<sp/>parent<sp/>of<sp/>:mini:`Xml`<sp/>or<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node<sp/>=<sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Node-&gt;Parent<sp/>?:<sp/>MLNil;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;index&quot;</highlight><highlight class="normal">,<sp/>MLXmlT)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//&lt;Node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>index<sp/>of<sp/>:mini:`Node`<sp/>in<sp/>its<sp/>parent<sp/>or<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node<sp/>=<sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Node-&gt;Parent<sp/>?<sp/>ml_integer(Node-&gt;Index)<sp/>:<sp/>MLNil;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;prev&quot;</highlight><highlight class="normal">,<sp/>MLXmlT)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//&lt;Xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returnst<sp/>the<sp/>previous<sp/>sibling<sp/>of<sp/>:mini:`Xml`<sp/>or<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node<sp/>=<sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Node-&gt;Prev<sp/>?:<sp/>MLNil;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;next&quot;</highlight><highlight class="normal">,<sp/>MLXmlT)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//&lt;Xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>next<sp/>sibling<sp/>of<sp/>:mini:`Xml`<sp/>or<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node<sp/>=<sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Node-&gt;Next<sp/>?:<sp/>MLNil;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLXmlT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN((<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Node-&gt;Next<sp/>?:<sp/>MLNil);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLXmlT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Node-&gt;Index));</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLXmlT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Node);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">ML_FUNCTION(MLXmlEscape)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//@xml::escape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//&lt;String:string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Escapes<sp/>characters<sp/>in<sp/>:mini:`String`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>import:<sp/>xml(&quot;fmt/xml&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>xml::escape(&quot;\&apos;1<sp/>+<sp/>2<sp/>&gt;<sp/>3<sp/>&amp;<sp/>2<sp/>&lt;<sp/>4\&apos;&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*S<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>ml_string_length(Args[0]);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++S)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*S)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;&amp;amp;&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;&amp;amp;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;&amp;lt;&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;&amp;lt;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;&amp;gt;&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;&amp;gt;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>S,<sp/>1);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer_get_value(Buffer);</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">ML_TYPE(MLXmlTextT,<sp/>(MLXmlT,<sp/>MLStringT),<sp/></highlight><highlight class="stringliteral">&quot;xml::text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>XML<sp/>text<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*ml_xml_text(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Content,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Text<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>Text-&gt;Base.Type<sp/>=<sp/>MLXmlTextT;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>Text-&gt;Base.Length<sp/>=<sp/>Length<sp/>&lt;<sp/>0<sp/>?<sp/>strlen(Content)<sp/>:<sp/>Length;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>Text-&gt;Base.Value<sp/>=<sp/>Content;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Text;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*ml_xml_text_copy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Content,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&lt;<sp/>0)<sp/>Length<sp/>=<sp/>strlen(Content);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Text<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>Text-&gt;Base.Type<sp/>=<sp/>MLXmlTextT;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>Text-&gt;Base.Length<sp/>=<sp/>Length;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Copy<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(Copy,<sp/>Content,<sp/>Length);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>Copy[Length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>Text-&gt;Base.Value<sp/>=<sp/>Copy;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Text;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;text&quot;</highlight><highlight class="normal">,<sp/>MLXmlTextT)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//&lt;Xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>text<sp/>content<sp/>of<sp/>:mini:`Xml`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node<sp/>=<sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Node-&gt;Base.Value,<sp/>Node-&gt;Base.Length);</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>MLXmlTags[1]<sp/>=<sp/>{STRINGMAP_INIT};</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="structml__xml__element__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Attributes;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Head,<sp/>*Tail;</highlight></codeline>
<codeline lineno="150"><highlight class="normal">};</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">ML_TYPE(MLXmlElementT,<sp/>(MLXmlT,<sp/>MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;xml::element&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>XML<sp/>element<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*ml_xml_element(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Tag)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>Element-&gt;Base.Base.Type<sp/>=<sp/>MLXmlElementT;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)stringmap_slot(MLXmlTags,<sp/>Tag);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/>Slot[0]<sp/>=<sp/>ml_string(GC_strdup(Tag),<sp/>-1);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>Element-&gt;Base.Base.Value<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Slot[0];</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>Element-&gt;Attributes<sp/>=<sp/>ml_map();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Element;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_xml_element_tag(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)((<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Value)-&gt;Base.Base.Value;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_xml_element_attributes(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Value)-&gt;Attributes;</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ml_xml_element_length(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Value)-&gt;Base.Base.Length;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_xml_element_head(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)((<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Value)-&gt;Head;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_xml_node_remove(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Child)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*OldParent<sp/>=<sp/>Child-&gt;Parent;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child-&gt;Prev)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Child-&gt;Prev-&gt;Next<sp/>=<sp/>Child-&gt;Next;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OldParent-&gt;Head<sp/>=<sp/>Child-&gt;Next;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Child-&gt;Next-&gt;Prev<sp/>=<sp/>Child-&gt;Prev;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OldParent-&gt;Tail<sp/>=<sp/>Child-&gt;Prev;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>Child-&gt;Index;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node<sp/>=<sp/>Child-&gt;Next;<sp/>Node;<sp/>Node<sp/>=<sp/>Node-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Index<sp/>=<sp/>Index++;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>--OldParent-&gt;Base.Base.Length;</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_xml_element_put(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Parent,<sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Child)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child-&gt;Parent)<sp/>ml_xml_node_remove(Child);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>Child-&gt;Index<sp/>=<sp/>++Parent-&gt;Base.Base.Length;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>Child-&gt;Parent<sp/>=<sp/>Parent;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parent-&gt;Tail)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parent-&gt;Tail-&gt;Next<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parent-&gt;Head<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>Child-&gt;Prev<sp/>=<sp/>Parent-&gt;Tail;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>Child-&gt;Next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>Parent-&gt;Tail<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_xml_element_put_general(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>ml_string_value(Value),<sp/>ml_string_length(Value));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLXmlT))<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Buffer-&gt;Length)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Text<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref>);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Type<sp/>=<sp/>MLXmlTextT;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Length<sp/>=<sp/>Buffer-&gt;Length;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Value<sp/>=<sp/>ml_stringbuffer_get_string(Buffer);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_xml_element_put(Element,<sp/>Text);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_xml_element_put(Element,<sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*)Value);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLListT))<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Value,<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error<sp/>=<sp/>ml_xml_element_put_general(Element,<sp/>Iter-&gt;Value,<sp/>Buffer);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLMapT))<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_MAP_FOREACH(Value,<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter-&gt;Key,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;XMLError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Attribute<sp/>keys<sp/>must<sp/>be<sp/>strings&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter-&gt;Value,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;XMLError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Attribute<sp/>values<sp/>must<sp/>be<sp/>strings&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_map_insert(Element-&gt;Attributes,<sp/>Iter-&gt;Key,<sp/>Iter-&gt;Value);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;XMLError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>type<sp/>%s<sp/>for<sp/>XML<sp/>element&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Value)-&gt;Name);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">ML_METHODV(MLXmlElementT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//@xml::element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//&lt;Tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//&lt;Arg/1,...,Arg/n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml::element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>XML<sp/>node<sp/>with<sp/>tag<sp/>:mini:`Tag`<sp/>and<sp/>optional<sp/>children<sp/>and<sp/>attributes<sp/>depending<sp/>on<sp/>the<sp/>types<sp/>of<sp/>each<sp/>:mini:`Arg/i`:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`string`:<sp/>added<sp/>as<sp/>child<sp/>text<sp/>node.<sp/>Consecutive<sp/>strings<sp/>are<sp/>added<sp/>a<sp/>single<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`xml`:<sp/>added<sp/>as<sp/>a<sp/>child<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`list`:<sp/>each<sp/>value<sp/>must<sp/>be<sp/>a<sp/>:mini:`string`<sp/>or<sp/>:mini:`xml`<sp/>and<sp/>is<sp/>added<sp/>as<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`map`:<sp/>keys<sp/>and<sp/>values<sp/>must<sp/>be<sp/>strings,<sp/>set<sp/>as<sp/>attributes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`name<sp/>is<sp/>value`:<sp/>values<sp/>must<sp/>be<sp/>strings,<sp/>set<sp/>as<sp/>attributes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>import:<sp/>xml(&quot;fmt/xml&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>xml::element(&quot;test&quot;,<sp/>&quot;Text&quot;,<sp/>type<sp/>is<sp/>&quot;example&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>Element-&gt;Base.Base.Type<sp/>=<sp/>MLXmlElementT;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)stringmap_slot(MLXmlTags,<sp/>ml_string_value(Args[0]));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/>Slot[0]<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>Element-&gt;Base.Base.Value<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Slot[0];</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>Element-&gt;Attributes<sp/>=<sp/>ml_map();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLNamesT))<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_NAMES_CHECK_ARG_COUNT(I);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_NAMES_FOREACH(Value,<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++I;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_map_insert(Element-&gt;Attributes,<sp/>Iter-&gt;Value,<sp/>Value);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error<sp/>=<sp/>ml_xml_element_put_general(Element,<sp/>Value,<sp/>Buffer);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Buffer-&gt;Length)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Text<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Type<sp/>=<sp/>MLXmlTextT;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Length<sp/>=<sp/>Buffer-&gt;Length;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Value<sp/>=<sp/>ml_stringbuffer_get_string(Buffer);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_xml_element_put(Element,<sp/>Text);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Element;</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;tag&quot;</highlight><highlight class="normal">,<sp/>MLXmlElementT)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">//&lt;Xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>tag<sp/>of<sp/>:mini:`Xml`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element<sp/>=<sp/>(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Element-&gt;Base.Base.Value;</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;attributes&quot;</highlight><highlight class="normal">,<sp/>MLXmlElementT)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">//&lt;Xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">//&gt;map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>attributes<sp/>of<sp/>:mini:`Xml`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element<sp/>=<sp/>(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Element-&gt;Attributes;</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_xml_element_text(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element,<sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Sep,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SepLen)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node<sp/>=<sp/>Element-&gt;Head;<sp/>Node;<sp/>Node<sp/>=<sp/>Node-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Base.Type<sp/>==<sp/>MLXmlTextT)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Buffer-&gt;Length<sp/>&amp;&amp;<sp/>SepLen)<sp/>ml_stringbuffer_write(Buffer,<sp/>Sep,<sp/>SepLen);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Node-&gt;Base.Value,<sp/>Node-&gt;Base.Length);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Base.Type<sp/>==<sp/>MLXmlElementT)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_xml_element_text((<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Node,<sp/>Buffer,<sp/>Sep,<sp/>SepLen);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;text&quot;</highlight><highlight class="normal">,<sp/>MLXmlElementT)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment">//&lt;Xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>(recursive)<sp/>text<sp/>content<sp/>of<sp/>:mini:`Xml`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element<sp/>=<sp/>(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_xml_element_text(Element,<sp/>Buffer,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer_get_value(Buffer);</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;text&quot;</highlight><highlight class="normal">,<sp/>MLXmlElementT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment">//&lt;Xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>(recursive)<sp/>text<sp/>content<sp/>of<sp/>:mini:`Xml`,<sp/>adding<sp/>:mini:`Sep`<sp/>between<sp/>the<sp/>contents<sp/>of<sp/>adjacent<sp/>nodes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element<sp/>=<sp/>(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_xml_element_text(Element,<sp/>Buffer,<sp/>ml_string_value(Args[1]),<sp/>ml_string_length(Args[1]));</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer_get_value(Buffer);</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;set&quot;</highlight><highlight class="normal">,<sp/>MLXmlElementT,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//&lt;Xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">//&lt;Attribute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>value<sp/>of<sp/>attribute<sp/>:mini:`Attribute`<sp/>in<sp/>:mini:`Xml`<sp/>to<sp/>:mini:`Value`<sp/>and<sp/>returns<sp/>:mini:`Xml`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element<sp/>=<sp/>(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_map_insert(Element-&gt;Attributes,<sp/>Args[1],<sp/>Args[2]);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Element;</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357" refid="structml__xml__grower__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Parent;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Head,<sp/>*Tail;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1];</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}<sp/><ref refid="structml__xml__grower__t" kindref="compound">ml_xml_grower_t</ref>;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_xml_grow(<ref refid="structml__xml__grower__t" kindref="compound">ml_xml_grower_t</ref><sp/>*Grower,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Value)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Grower-&gt;Buffer-&gt;Length)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Text<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref>);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Type<sp/>=<sp/>MLXmlTextT;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Length<sp/>=<sp/>Grower-&gt;Buffer-&gt;Length;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Value<sp/>=<sp/>ml_stringbuffer_get_string(Grower-&gt;Buffer);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Parent<sp/>=<sp/>Grower-&gt;Parent;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Prev<sp/>=<sp/>Grower-&gt;Tail;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Grower-&gt;Tail)<sp/>Grower-&gt;Tail-&gt;Next<sp/>=<sp/>Text;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>Grower-&gt;Head<sp/>=<sp/>Text;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Grower-&gt;Tail<sp/>=<sp/>Text;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLXmlT))<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Grower-&gt;Buffer-&gt;Length)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Text<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref>);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Type<sp/>=<sp/>MLXmlTextT;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Length<sp/>=<sp/>Grower-&gt;Buffer-&gt;Length;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Value<sp/>=<sp/>ml_stringbuffer_get_string(Grower-&gt;Buffer);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Parent<sp/>=<sp/>Grower-&gt;Parent;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Prev<sp/>=<sp/>Grower-&gt;Tail;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Grower-&gt;Tail)<sp/>Grower-&gt;Tail-&gt;Next<sp/>=<sp/>Text;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>Grower-&gt;Head<sp/>=<sp/>Text;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Grower-&gt;Tail<sp/>=<sp/>Text;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Child<sp/>=<sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child-&gt;Parent)<sp/>ml_xml_node_remove(Child);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Child-&gt;Parent<sp/>=<sp/>Grower-&gt;Parent;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Child-&gt;Prev<sp/>=<sp/>Grower-&gt;Tail;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Grower-&gt;Tail)<sp/>Grower-&gt;Tail-&gt;Next<sp/>=<sp/>Child;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>Grower-&gt;Head<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Grower-&gt;Tail<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Grower-&gt;Buffer,<sp/>ml_string_value(Value),<sp/>ml_string_length(Value));</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>type<sp/>for<sp/>XML<sp/>node&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;put&quot;</highlight><highlight class="normal">,<sp/>MLXmlElementT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">//&lt;Parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">//&lt;Child</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>:mini:`Child`<sp/>to<sp/>:mini:`Parent`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Parent<sp/>=<sp/>(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__grower__t" kindref="compound">ml_xml_grower_t</ref><sp/>Grower[1]<sp/>=<sp/>{{Parent,<sp/>NULL,<sp/>NULL,<sp/>{ML_STRINGBUFFER_INIT}}};</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error<sp/>=<sp/>ml_xml_grow(Grower,<sp/>Args[I]);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_xml_grow(Grower,<sp/>NULL);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Grower-&gt;Tail)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Grower-&gt;Tail-&gt;Next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Grower-&gt;Head-&gt;Prev<sp/>=<sp/>Parent-&gt;Tail;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parent-&gt;Tail)<sp/>Parent-&gt;Tail-&gt;Next<sp/>=<sp/>Grower-&gt;Head;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>Parent-&gt;Head<sp/>=<sp/>Grower-&gt;Head;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parent-&gt;Tail<sp/>=<sp/>Grower-&gt;Tail;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>Parent-&gt;Base.Base.Length;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Child<sp/>=<sp/>Grower-&gt;Head;<sp/>Child;<sp/>Child<sp/>=<sp/>Child-&gt;Next)<sp/>Child-&gt;Index<sp/>=<sp/>++Index;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parent-&gt;Base.Base.Length<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Parent;</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;empty&quot;</highlight><highlight class="normal">,<sp/>MLXmlElementT)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//&lt;Parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Removes<sp/>the<sp/>contents<sp/>of<sp/>:mini:`Parent`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Parent<sp/>=<sp/>(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Child<sp/>=<sp/>Parent-&gt;Head;<sp/>Child;<sp/>Child<sp/>=<sp/>Child-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Child-&gt;Parent<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Child-&gt;Next<sp/>=<sp/>Child-&gt;Prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>Parent-&gt;Head<sp/>=<sp/>Parent-&gt;Tail<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>Parent-&gt;Base.Base.Length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Parent;</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;remove&quot;</highlight><highlight class="normal">,<sp/>MLXmlT)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment">//&lt;Node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Removes<sp/>:mini:`Node`<sp/>from<sp/>its<sp/>parent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node<sp/>=<sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Parent)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_xml_node_remove(Node);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Parent<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Next<sp/>=<sp/>Node-&gt;Prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Node;</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;add_next&quot;</highlight><highlight class="normal">,<sp/>MLXmlT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment">//&lt;Node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">//&lt;Other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inserts<sp/>:mini:`Other`<sp/>directly<sp/>after<sp/>:mini:`Node`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node<sp/>=<sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Parent<sp/>=<sp/>Node-&gt;Parent;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Parent)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Node<sp/>does<sp/>not<sp/>currently<sp/>have<sp/>a<sp/>parent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__grower__t" kindref="compound">ml_xml_grower_t</ref><sp/>Grower[1]<sp/>=<sp/>{{Parent,<sp/>NULL,<sp/>NULL,<sp/>{ML_STRINGBUFFER_INIT}}};</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error<sp/>=<sp/>ml_xml_grow(Grower,<sp/>Args[I]);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_xml_grow(Grower,<sp/>NULL);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Grower-&gt;Tail)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Next<sp/>=<sp/>Node-&gt;Next;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Grower-&gt;Tail-&gt;Next<sp/>=<sp/>Next;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Grower-&gt;Head-&gt;Prev<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Next<sp/>=<sp/>Grower-&gt;Head;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Next)<sp/>Next-&gt;Prev<sp/>=<sp/>Grower-&gt;Tail;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>Parent-&gt;Tail<sp/>=<sp/>Grower-&gt;Tail;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>Node-&gt;Index;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Child<sp/>=<sp/>Grower-&gt;Head;<sp/>Child;<sp/>Child<sp/>=<sp/>Child-&gt;Next)<sp/>Child-&gt;Index<sp/>=<sp/>++Index;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parent-&gt;Base.Base.Length<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Grower-&gt;Tail;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Node;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;add_prev&quot;</highlight><highlight class="normal">,<sp/>MLXmlT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="comment">//&lt;Node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment">//&lt;Other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inserts<sp/>:mini:`Other`<sp/>directly<sp/>before<sp/>:mini:`Node`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node<sp/>=<sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Parent<sp/>=<sp/>Node-&gt;Parent;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Parent)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Node<sp/>does<sp/>not<sp/>currently<sp/>have<sp/>a<sp/>parent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__grower__t" kindref="compound">ml_xml_grower_t</ref><sp/>Grower[1]<sp/>=<sp/>{{Parent,<sp/>NULL,<sp/>NULL,<sp/>{ML_STRINGBUFFER_INIT}}};</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error<sp/>=<sp/>ml_xml_grow(Grower,<sp/>Args[I]);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_xml_grow(Grower,<sp/>NULL);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Grower-&gt;Tail)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Prev<sp/>=<sp/>Node-&gt;Prev;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Grower-&gt;Head-&gt;Prev<sp/>=<sp/>Prev;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Grower-&gt;Tail-&gt;Next<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Prev)<sp/>Prev-&gt;Next<sp/>=<sp/>Grower-&gt;Head;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>Parent-&gt;Head<sp/>=<sp/>Grower-&gt;Head;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Prev<sp/>=<sp/>Grower-&gt;Tail;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>Node-&gt;Index<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Child<sp/>=<sp/>Grower-&gt;Head;<sp/>Child;<sp/>Child<sp/>=<sp/>Child-&gt;Next)<sp/>Child-&gt;Index<sp/>=<sp/>++Index;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parent-&gt;Base.Base.Length<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Grower-&gt;Tail;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Node;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509" refid="structml__xml__grow__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1];</highlight></codeline>
<codeline lineno="514"><highlight class="normal">}<sp/><ref refid="structml__xml__grow__state__t" kindref="compound">ml_xml_grow_state_t</ref>;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_xml_grow_state_next(<ref refid="structml__xml__grow__state__t" kindref="compound">ml_xml_grow_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_xml_grow_state_value(<ref refid="structml__xml__grow__state__t" kindref="compound">ml_xml_grow_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>State-&gt;Buffer;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element<sp/>=<sp/>State-&gt;Element;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>ml_string_value(Value),<sp/>ml_string_length(Value));</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLXmlElementT))<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Buffer-&gt;Length)<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Text<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref>);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Type<sp/>=<sp/>MLXmlTextT;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Length<sp/>=<sp/>Buffer-&gt;Length;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Value<sp/>=<sp/>ml_stringbuffer_get_string(Buffer);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_xml_element_put(Element,<sp/>Text);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_xml_element_put(Element,<sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*)Value);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLMapT))<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_MAP_FOREACH(Value,<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter-&gt;Key,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;XMLError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Attribute<sp/>keys<sp/>must<sp/>be<sp/>strings&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter-&gt;Value,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;XMLError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Attribute<sp/>values<sp/>must<sp/>be<sp/>strings&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_map_insert(Element-&gt;Attributes,<sp/>Iter-&gt;Key,<sp/>Iter-&gt;Value);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;XMLError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>value<sp/>for<sp/>XML<sp/>element&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_xml_grow_state_next;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_xml_grow_state_next(<ref refid="structml__xml__grow__state__t" kindref="compound">ml_xml_grow_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>State-&gt;Buffer;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element<sp/>=<sp/>State-&gt;Element;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Buffer-&gt;Length)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Text<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref>);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Type<sp/>=<sp/>MLXmlTextT;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Length<sp/>=<sp/>Buffer-&gt;Length;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Value<sp/>=<sp/>ml_stringbuffer_get_string(Buffer);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_xml_element_put(Element,<sp/>Text);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Element);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_xml_grow_state_value;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal">ML_METHODVX(</highlight><highlight class="stringliteral">&quot;grow&quot;</highlight><highlight class="normal">,<sp/>MLXmlElementT,<sp/>MLSequenceT)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="comment">//&lt;Parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="comment">//&lt;Children</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>each<sp/>node<sp/>generated<sp/>by<sp/>:mini:`Children`<sp/>to<sp/>:mini:`Parent`<sp/>and<sp/>returns<sp/>:mini:`Parent`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__grow__state__t" kindref="compound">ml_xml_grow_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__grow__state__t" kindref="compound">ml_xml_grow_state_t</ref>);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_xml_grow_state_next;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Element<sp/>=<sp/>(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Buffer[0]<sp/>=<sp/>ML_STRINGBUFFER_INIT;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>ml_chained(Count<sp/>-<sp/>1,<sp/>Args<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLXmlElementT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Node)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN((<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Node-&gt;Head<sp/>?:<sp/>MLNil);</highlight></codeline>
<codeline lineno="586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*IndexMethod;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;[]&quot;</highlight><highlight class="normal">,<sp/>MLXmlElementT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="comment">//&lt;Parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment">//&lt;Index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>:mini:`Index`-th<sp/>child<sp/>of<sp/>:mini:`Parent`<sp/>or<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element<sp/>=<sp/>(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;=<sp/>0)<sp/>Index<sp/>+=<sp/>Element-&gt;Base.Base.Length<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>--Index;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;<sp/>0<sp/>||<sp/>Index<sp/>&gt;=<sp/>Element-&gt;Base.Base.Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Child<sp/>=<sp/>Element-&gt;Head;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--Index<sp/>&gt;=<sp/>0)<sp/>Child<sp/>=<sp/>Child-&gt;Next;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Child;</highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;[]&quot;</highlight><highlight class="normal">,<sp/>MLXmlElementT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="comment">//&lt;Parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment">//&lt;Attribute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="comment">//&gt;string|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>value<sp/>of<sp/>the<sp/>:mini:`Attribute`<sp/>attribute<sp/>of<sp/>:mini:`Parent`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element<sp/>=<sp/>(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>Element-&gt;Attributes;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>IndexMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,<sp/>MLXmlElementT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">//&lt;Parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment">//&lt;Attribute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">//&gt;string|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>value<sp/>of<sp/>the<sp/>:mini:`Attribute`<sp/>attribute<sp/>of<sp/>:mini:`Parent`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element<sp/>=<sp/>(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>Element-&gt;Attributes;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>IndexMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLDoubledT[];</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLChainedT[];</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal">ML_GENERIC_TYPE(MLXmlSequenceT,<sp/>MLSequenceT,<sp/>MLIntegerT,<sp/>MLXmlT);</highlight></codeline>
<codeline lineno="631"><highlight class="normal">ML_GENERIC_TYPE(MLXmlDoubledT,<sp/>MLDoubledT,<sp/>MLIntegerT,<sp/>MLXmlT);</highlight></codeline>
<codeline lineno="632"><highlight class="normal">ML_GENERIC_TYPE(MLXmlChainedT,<sp/>MLChainedT,<sp/>MLIntegerT,<sp/>MLXmlT);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLXmlSequenceT<sp/>MLSequenceT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLXmlDoubledT<sp/>MLDoubledT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLXmlChainedT<sp/>MLChainedT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642" refid="structml__xml__filter__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Tag;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Attributes;</highlight></codeline>
<codeline lineno="646"><highlight class="normal">}<sp/><ref refid="structml__xml__filter__t" kindref="compound">ml_xml_filter_t</ref>;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_xml_filter_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__xml__filter__t" kindref="compound">ml_xml_filter_t</ref><sp/>*Filter,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLXmlElementT);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element<sp/>=<sp/>(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Filter-&gt;Tag<sp/>&amp;&amp;<sp/>Filter-&gt;Tag<sp/>!=<sp/>Element-&gt;Base.Base.Value)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Filter-&gt;Attributes)<sp/>ML_MAP_FOREACH(Filter-&gt;Attributes,<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>ml_map_search(Element-&gt;Attributes,<sp/>Iter-&gt;Key);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iter-&gt;Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>!=<sp/>MLNil)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(ml_string_value(Iter-&gt;Value),<sp/>ml_string_value(Value)))<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Element);</highlight></codeline>
<codeline lineno="663"><highlight class="normal">}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal">ML_TYPE(MLXmlFilterT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;xml::filter&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>XML<sp/>filter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_xml_filter_call</highlight></codeline>
<codeline lineno="668"><highlight class="normal">);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal">ML_METHODV(MLXmlFilterT,<sp/>MLNamesT)<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="comment">//@xml::filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="comment">//&lt;Attr,Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml::filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>XML<sp/>filter<sp/>that<sp/>checks<sp/>if<sp/>a<sp/>node<sp/>has<sp/>attributes<sp/>:mini:`Attr/i<sp/>=<sp/>Value/i`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_CHECK_ARG_COUNT(0);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__filter__t" kindref="compound">ml_xml_filter_t</ref><sp/>*Filter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__filter__t" kindref="compound">ml_xml_filter_t</ref>);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>Filter-&gt;Type<sp/>=<sp/>MLXmlFilterT;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Attributes<sp/>=<sp/>Filter-&gt;Attributes<sp/>=<sp/>ml_map();</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_FOREACH(Args[0],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Args[I]<sp/>!=<sp/>MLNil)<sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_map_insert(Attributes,<sp/>Iter-&gt;Value,<sp/>Args[I++]);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Filter;</highlight></codeline>
<codeline lineno="685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal">ML_METHODV(MLXmlFilterT,<sp/>MLStringT,<sp/>MLNamesT)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">//@xml::filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="comment">//&lt;Tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">//&lt;Attr,Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml::filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>XML<sp/>filter<sp/>that<sp/>checks<sp/>if<sp/>a<sp/>node<sp/>has<sp/>tag<sp/>:mini:`Tag`<sp/>and<sp/>attributes<sp/>:mini:`Attr/i<sp/>=<sp/>Value/i`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__filter__t" kindref="compound">ml_xml_filter_t</ref><sp/>*Filter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__filter__t" kindref="compound">ml_xml_filter_t</ref>);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>Filter-&gt;Type<sp/>=<sp/>MLXmlFilterT;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)stringmap_slot(MLXmlTags,<sp/>ml_string_value(Args[0]));</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/>Slot[0]<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>Filter-&gt;Tag<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Slot[0];</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Attributes<sp/>=<sp/>Filter-&gt;Attributes<sp/>=<sp/>ml_map();</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_FOREACH(Args[1],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Args[I]<sp/>!=<sp/>MLNil)<sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_map_insert(Attributes,<sp/>Iter-&gt;Value,<sp/>Args[I++]);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Filter;</highlight></codeline>
<codeline lineno="706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ML_METHOD_DECL(FilterSoloMethod,<sp/></highlight><highlight class="stringliteral">&quot;-&gt;?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710" refid="structml__xml__iterator__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Tag;</highlight></codeline>
<codeline lineno="714"><highlight class="normal">}<sp/><ref refid="structml__xml__iterator__t" kindref="compound">ml_xml_iterator_t</ref>;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal">ML_TYPE(MLXmlForwardT,<sp/>(MLXmlSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;xml::forward&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLXmlForwardT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__xml__iterator__t" kindref="compound">ml_xml_iterator_t</ref><sp/>*Iterator)<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Tag<sp/>=<sp/>Iterator-&gt;Tag;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node<sp/>=<sp/>Iterator-&gt;Node;<sp/>Node;<sp/>Node<sp/>=<sp/>Node-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Base.Type<sp/>==<sp/>MLXmlElementT)<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Tag<sp/>==<sp/>NULL)<sp/>||<sp/>(Tag<sp/>==<sp/>Node-&gt;Base.Value))<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;Node<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Iterator);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLXmlForwardT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__xml__iterator__t" kindref="compound">ml_xml_iterator_t</ref><sp/>*Iterator)<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Tag<sp/>=<sp/>Iterator-&gt;Tag;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node<sp/>=<sp/>Iterator-&gt;Node-&gt;Next;<sp/>Node;<sp/>Node<sp/>=<sp/>Node-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Base.Type<sp/>==<sp/>MLXmlElementT)<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Tag<sp/>==<sp/>NULL)<sp/>||<sp/>(Tag<sp/>==<sp/>Node-&gt;Base.Value))<sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;Node<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Iterator);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="743"><highlight class="normal">}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLXmlForwardT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__xml__iterator__t" kindref="compound">ml_xml_iterator_t</ref><sp/>*Iterator)<sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Iterator-&gt;Node-&gt;Index));</highlight></codeline>
<codeline lineno="747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLXmlForwardT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__xml__iterator__t" kindref="compound">ml_xml_iterator_t</ref><sp/>*Iterator)<sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iterator-&gt;Node);</highlight></codeline>
<codeline lineno="751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal">ML_TYPE(MLXmlReverseT,<sp/>(MLXmlSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;xml::reverse&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLXmlReverseT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__xml__iterator__t" kindref="compound">ml_xml_iterator_t</ref><sp/>*Iterator)<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Tag<sp/>=<sp/>Iterator-&gt;Tag;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node<sp/>=<sp/>Iterator-&gt;Node;<sp/>Node;<sp/>Node<sp/>=<sp/>Node-&gt;Prev)<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Base.Type<sp/>==<sp/>MLXmlElementT)<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Tag<sp/>==<sp/>NULL)<sp/>||<sp/>(Tag<sp/>==<sp/>Node-&gt;Base.Value))<sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;Node<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Iterator);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLXmlReverseT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__xml__iterator__t" kindref="compound">ml_xml_iterator_t</ref><sp/>*Iterator)<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Tag<sp/>=<sp/>Iterator-&gt;Tag;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node<sp/>=<sp/>Iterator-&gt;Node-&gt;Next;<sp/>Node;<sp/>Node<sp/>=<sp/>Node-&gt;Prev)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Base.Type<sp/>==<sp/>MLXmlElementT)<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Tag<sp/>==<sp/>NULL)<sp/>||<sp/>(Tag<sp/>==<sp/>Node-&gt;Base.Value))<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;Node<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Iterator);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLXmlReverseT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__xml__iterator__t" kindref="compound">ml_xml_iterator_t</ref><sp/>*Iterator)<sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Iterator-&gt;Node-&gt;Index));</highlight></codeline>
<codeline lineno="784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLXmlReverseT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__xml__iterator__t" kindref="compound">ml_xml_iterator_t</ref><sp/>*Iterator)<sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iterator-&gt;Node);</highlight></codeline>
<codeline lineno="788"><highlight class="normal">}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_XML_ITERATOR(NAME,<sp/>TYPE,<sp/>FIELD,<sp/>DOC)<sp/>\</highlight></codeline>
<codeline lineno="791"><highlight class="preprocessor">ML_METHOD(NAME,<sp/>MLXmlElementT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="792"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;Xml</highlight></codeline>
<codeline lineno="793"><highlight class="comment">//&gt;sequence</highlight></codeline>
<codeline lineno="794"><highlight class="comment">//<sp/>Returns<sp/>a<sp/>sequence<sp/>of<sp/>the<sp/>DOC<sp/>of<sp/>:mini:`Xml`.</highlight></codeline>
<codeline lineno="795"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="796"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_xml_element_t<sp/>*Element<sp/>=<sp/>(ml_xml_element_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="797"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_xml_iterator_t<sp/>*Iterator<sp/>=<sp/>new(ml_xml_iterator_t);<sp/>\</highlight></codeline>
<codeline lineno="798"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Iterator-&gt;Type<sp/>=<sp/>MLXml<sp/>##<sp/>TYPE<sp/>##<sp/>T;<sp/>\</highlight></codeline>
<codeline lineno="799"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Iterator-&gt;Node<sp/>=<sp/>Element-&gt;FIELD;<sp/>\</highlight></codeline>
<codeline lineno="800"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)Iterator;<sp/>\</highlight></codeline>
<codeline lineno="801"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="802"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="803"><highlight class="preprocessor">ML_METHOD(NAME,<sp/>MLXmlT,<sp/>MLStringT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="804"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;Xml</highlight></codeline>
<codeline lineno="805"><highlight class="comment">//&lt;Tag</highlight></codeline>
<codeline lineno="806"><highlight class="comment">//&gt;sequence</highlight></codeline>
<codeline lineno="807"><highlight class="comment">//<sp/>Returns<sp/>a<sp/>sequence<sp/>of<sp/>the<sp/>DOC<sp/>of<sp/>:mini:`Xml`<sp/>with<sp/>tag<sp/>:mini:`Tag`.</highlight></codeline>
<codeline lineno="808"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="809"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_xml_element_t<sp/>*Element<sp/>=<sp/>(ml_xml_element_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="810"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_xml_iterator_t<sp/>*Iterator<sp/>=<sp/>new(ml_xml_iterator_t);<sp/>\</highlight></codeline>
<codeline lineno="811"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Iterator-&gt;Type<sp/>=<sp/>MLXml<sp/>##<sp/>TYPE<sp/>##<sp/>T;<sp/>\</highlight></codeline>
<codeline lineno="812"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Iterator-&gt;Node<sp/>=<sp/>Element-&gt;FIELD;<sp/>\</highlight></codeline>
<codeline lineno="813"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_value_t<sp/>**Slot<sp/>=<sp/>(ml_value_t<sp/>**)stringmap_slot(MLXmlTags,<sp/>ml_string_value(Args[1]));<sp/>\</highlight></codeline>
<codeline lineno="814"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!Slot[0])<sp/>Slot[0]<sp/>=<sp/>Args[1];<sp/>\</highlight></codeline>
<codeline lineno="815"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Iterator-&gt;Tag<sp/>=<sp/>(const<sp/>char<sp/>*)Slot[0];<sp/>\</highlight></codeline>
<codeline lineno="816"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)Iterator;<sp/>\</highlight></codeline>
<codeline lineno="817"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="818"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="819"><highlight class="preprocessor">ML_METHODV(NAME,<sp/>MLXmlT,<sp/>MLNamesT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="820"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;Xml</highlight></codeline>
<codeline lineno="821"><highlight class="comment">//&lt;Attribute</highlight></codeline>
<codeline lineno="822"><highlight class="comment">//&gt;sequence</highlight></codeline>
<codeline lineno="823"><highlight class="comment">//<sp/>Returns<sp/>a<sp/>sequence<sp/>of<sp/>the<sp/>DOC<sp/>of<sp/>:mini:`Xml`<sp/>with<sp/>:mini:`Attribute/1<sp/>=<sp/>Value/1`,<sp/>etc.</highlight></codeline>
<codeline lineno="824"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="825"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ML_NAMES_CHECK_ARG_COUNT(1);<sp/>\</highlight></codeline>
<codeline lineno="826"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_xml_filter_t<sp/>*Filter<sp/>=<sp/>new(ml_xml_filter_t);<sp/>\</highlight></codeline>
<codeline lineno="827"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Filter-&gt;Type<sp/>=<sp/>MLXmlFilterT;<sp/>\</highlight></codeline>
<codeline lineno="828"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_value_t<sp/>*Attributes<sp/>=<sp/>Filter-&gt;Attributes<sp/>=<sp/>ml_map();<sp/>\</highlight></codeline>
<codeline lineno="829"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>I<sp/>=<sp/>2;<sp/>\</highlight></codeline>
<codeline lineno="830"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ML_NAMES_FOREACH(Args[1],<sp/>Iter)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="831"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLStringT);<sp/>\</highlight></codeline>
<codeline lineno="832"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_map_insert(Attributes,<sp/>Iter-&gt;Value,<sp/>Args[I++]);<sp/>\</highlight></codeline>
<codeline lineno="833"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="834"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_xml_element_t<sp/>*Element<sp/>=<sp/>(ml_xml_element_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="835"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_xml_iterator_t<sp/>*Iterator<sp/>=<sp/>new(ml_xml_iterator_t);<sp/>\</highlight></codeline>
<codeline lineno="836"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Iterator-&gt;Type<sp/>=<sp/>MLXml<sp/>##<sp/>TYPE<sp/>##<sp/>T;<sp/>\</highlight></codeline>
<codeline lineno="837"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Iterator-&gt;Node<sp/>=<sp/>Element-&gt;FIELD;<sp/>\</highlight></codeline>
<codeline lineno="838"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_value_t<sp/>*Chained<sp/>=<sp/>ml_chainedv(3,<sp/>Iterator,<sp/>FilterSoloMethod,<sp/>Filter);<sp/>\</highlight></codeline>
<codeline lineno="839"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>(ml_type_t<sp/>*)MLXmlChainedT;<sp/>\</highlight></codeline>
<codeline lineno="840"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>Chained;<sp/>\</highlight></codeline>
<codeline lineno="841"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="842"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="843"><highlight class="preprocessor">ML_METHODV(NAME,<sp/>MLXmlT,<sp/>MLStringT,<sp/>MLNamesT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="844"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;Xml</highlight></codeline>
<codeline lineno="845"><highlight class="comment">//&lt;Tag</highlight></codeline>
<codeline lineno="846"><highlight class="comment">//&lt;Attribute</highlight></codeline>
<codeline lineno="847"><highlight class="comment">//&gt;sequence</highlight></codeline>
<codeline lineno="848"><highlight class="comment">//<sp/>Returns<sp/>a<sp/>sequence<sp/>of<sp/>the<sp/>DOC<sp/>of<sp/>:mini:`Xml`<sp/>with<sp/>tag<sp/>:mini:`Tag`<sp/>and<sp/>:mini:`Attribute/1<sp/>=<sp/>Value/1`,<sp/>etc.</highlight></codeline>
<codeline lineno="849"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="850"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ML_NAMES_CHECK_ARG_COUNT(2);<sp/>\</highlight></codeline>
<codeline lineno="851"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_xml_filter_t<sp/>*Filter<sp/>=<sp/>new(ml_xml_filter_t);<sp/>\</highlight></codeline>
<codeline lineno="852"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Filter-&gt;Type<sp/>=<sp/>MLXmlFilterT;<sp/>\</highlight></codeline>
<codeline lineno="853"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_value_t<sp/>**Slot<sp/>=<sp/>(ml_value_t<sp/>**)stringmap_slot(MLXmlTags,<sp/>ml_string_value(Args[1]));<sp/>\</highlight></codeline>
<codeline lineno="854"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!Slot[0])<sp/>Slot[0]<sp/>=<sp/>Args[1];<sp/>\</highlight></codeline>
<codeline lineno="855"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Filter-&gt;Tag<sp/>=<sp/>(const<sp/>char<sp/>*)Slot[0];<sp/>\</highlight></codeline>
<codeline lineno="856"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_value_t<sp/>*Attributes<sp/>=<sp/>Filter-&gt;Attributes<sp/>=<sp/>ml_map();<sp/>\</highlight></codeline>
<codeline lineno="857"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>I<sp/>=<sp/>3;<sp/>\</highlight></codeline>
<codeline lineno="858"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ML_NAMES_FOREACH(Args[2],<sp/>Iter)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="859"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Args[I]<sp/>!=<sp/>MLNil)<sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLStringT);<sp/>\</highlight></codeline>
<codeline lineno="860"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_map_insert(Attributes,<sp/>Iter-&gt;Value,<sp/>Args[I++]);<sp/>\</highlight></codeline>
<codeline lineno="861"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="862"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_xml_element_t<sp/>*Element<sp/>=<sp/>(ml_xml_element_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="863"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_xml_iterator_t<sp/>*Iterator<sp/>=<sp/>new(ml_xml_iterator_t);<sp/>\</highlight></codeline>
<codeline lineno="864"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Iterator-&gt;Type<sp/>=<sp/>MLXml<sp/>##<sp/>TYPE<sp/>##<sp/>T;<sp/>\</highlight></codeline>
<codeline lineno="865"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Iterator-&gt;Node<sp/>=<sp/>Element-&gt;FIELD;<sp/>\</highlight></codeline>
<codeline lineno="866"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_value_t<sp/>*Chained<sp/>=<sp/>ml_chainedv(3,<sp/>Iterator,<sp/>FilterSoloMethod,<sp/>Filter);<sp/>\</highlight></codeline>
<codeline lineno="867"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>(ml_type_t<sp/>*)MLXmlChainedT;<sp/>\</highlight></codeline>
<codeline lineno="868"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>Chained;<sp/>\</highlight></codeline>
<codeline lineno="869"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="870"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="871"><highlight class="preprocessor">ML_METHOD(NAME,<sp/>MLXmlT,<sp/>MLFunctionT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="872"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;Xml</highlight></codeline>
<codeline lineno="873"><highlight class="comment">//&lt;Fn</highlight></codeline>
<codeline lineno="874"><highlight class="comment">//&gt;sequence</highlight></codeline>
<codeline lineno="875"><highlight class="comment">//<sp/>Returns<sp/>a<sp/>sequence<sp/>of<sp/>the<sp/>DOC<sp/>of<sp/>:mini:`Xml`<sp/>for<sp/>which<sp/>:mini:`Fn(Child)`<sp/>is<sp/>non-nil.</highlight></codeline>
<codeline lineno="876"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="877"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_xml_element_t<sp/>*Element<sp/>=<sp/>(ml_xml_element_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="878"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_xml_iterator_t<sp/>*Iterator<sp/>=<sp/>new(ml_xml_iterator_t);<sp/>\</highlight></codeline>
<codeline lineno="879"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Iterator-&gt;Type<sp/>=<sp/>MLXml<sp/>##<sp/>TYPE<sp/>##<sp/>T;<sp/>\</highlight></codeline>
<codeline lineno="880"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Iterator-&gt;Node<sp/>=<sp/>Element-&gt;FIELD;<sp/>\</highlight></codeline>
<codeline lineno="881"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_value_t<sp/>*Chained<sp/>=<sp/>ml_chainedv(3,<sp/>Iterator,<sp/>FilterSoloMethod,<sp/>Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="882"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>(ml_type_t<sp/>*)MLXmlChainedT;<sp/>\</highlight></codeline>
<codeline lineno="883"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>Chained;<sp/>\</highlight></codeline>
<codeline lineno="884"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal">ML_XML_ITERATOR(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>Forward,<sp/>Head,<sp/>children);</highlight></codeline>
<codeline lineno="887"><highlight class="normal">ML_XML_ITERATOR(</highlight><highlight class="stringliteral">&quot;&gt;&gt;&quot;</highlight><highlight class="normal">,<sp/>Forward,<sp/>Base.Next,<sp/>next<sp/>siblings);</highlight></codeline>
<codeline lineno="888"><highlight class="normal">ML_XML_ITERATOR(</highlight><highlight class="stringliteral">&quot;&lt;&lt;&quot;</highlight><highlight class="normal">,<sp/>Reverse,<sp/>Base.Prev,<sp/>previous<sp/>siblings);</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;parent&quot;</highlight><highlight class="normal">,<sp/>MLXmlT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="comment">//&lt;Xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="comment">//&lt;Tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>ancestor<sp/>of<sp/>:mini:`Xml`<sp/>with<sp/>tag<sp/>:mini:`Tag`<sp/>if<sp/>one<sp/>exists,<sp/>otherwise<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node<sp/>=<sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Tag<sp/>=<sp/>stringmap_search(MLXmlTags,<sp/>ml_string_value(Args[1]));</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((Node<sp/>=<sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*)Node-&gt;Parent))<sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Base.Type<sp/>!=<sp/>MLXmlElementT)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Base.Value<sp/>!=<sp/>Tag)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Node;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="903"><highlight class="normal">}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;parent&quot;</highlight><highlight class="normal">,<sp/>MLXmlT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="comment">//&lt;Xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="comment">//&lt;N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>:mini:`N`-th<sp/>parent<sp/>of<sp/>:mini:`Xml`<sp/>or<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node<sp/>=<sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Steps<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Steps<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node<sp/>=<sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*)Node-&gt;Parent;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Steps;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Node;</highlight></codeline>
<codeline lineno="918"><highlight class="normal">}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;next&quot;</highlight><highlight class="normal">,<sp/>MLXmlT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="comment">//&lt;Xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="comment">//&lt;N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>:mini:`N`-th<sp/>next<sp/>sibling<sp/>of<sp/>:mini:`Xml`<sp/>or<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node<sp/>=<sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Steps<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Steps<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node<sp/>=<sp/>Node-&gt;Next;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="930" refid="structml__xml__recursive__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Base.Type<sp/>==<sp/>MLXmlElementT)<sp/>--Steps;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Node;</highlight></codeline>
<codeline lineno="933"><highlight class="normal">}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;prev&quot;</highlight><highlight class="normal">,<sp/>MLXmlT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="comment">//&lt;Xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="comment">//&lt;N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>:mini:`N`-th<sp/>previous<sp/>sibling<sp/>of<sp/>:mini:`Xml`<sp/>or<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node<sp/>=<sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Steps<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Steps<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node<sp/>=<sp/>Node-&gt;Prev;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Base.Type<sp/>==<sp/>MLXmlElementT)<sp/>--Steps;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Node;</highlight></codeline>
<codeline lineno="948"><highlight class="normal">}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element,<sp/>*Root;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Tag;</highlight></codeline>
<codeline lineno="954"><highlight class="normal">}<sp/><ref refid="structml__xml__recursive__t" kindref="compound">ml_xml_recursive_t</ref>;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal">ML_TYPE(MLXmlRecursiveT,<sp/>(MLXmlSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;xml::recursive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*ml_xml_recursive_find(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Tag)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node<sp/>=<sp/>Element-&gt;Head;<sp/>Node;<sp/>Node<sp/>=<sp/>Node-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Base.Type<sp/>==<sp/>MLXmlElementT)<sp/>{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Child<sp/>=<sp/>(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Node;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Tag<sp/>==<sp/>NULL)<sp/>||<sp/>(Tag<sp/>==<sp/>Node-&gt;Base.Value))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Child;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Child<sp/>=<sp/>ml_xml_recursive_find(Child,<sp/>Tag);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Child;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="969"><highlight class="normal">}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLXmlRecursiveT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__xml__recursive__t" kindref="compound">ml_xml_recursive_t</ref><sp/>*Recursive)<sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element<sp/>=<sp/>Recursive-&gt;Element;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Tag<sp/>=<sp/>Recursive-&gt;Tag;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Tag<sp/>==<sp/>NULL)<sp/>||<sp/>(Tag<sp/>==<sp/>Element-&gt;Base.Base.Value))<sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Recursive);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>Element<sp/>=<sp/>ml_xml_recursive_find(Element,<sp/>Tag);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Element)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>Recursive-&gt;Element<sp/>=<sp/>Element;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Recursive);</highlight></codeline>
<codeline lineno="981"><highlight class="normal">}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLXmlRecursiveT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__xml__recursive__t" kindref="compound">ml_xml_recursive_t</ref><sp/>*Recursive)<sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element<sp/>=<sp/>Recursive-&gt;Element;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Tag<sp/>=<sp/>Recursive-&gt;Tag;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Child<sp/>=<sp/>ml_xml_recursive_find(Element,<sp/>Tag);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child)<sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Recursive-&gt;Element<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Recursive);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Root<sp/>=<sp/>Recursive-&gt;Root;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Element<sp/>!=<sp/>Root)<sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node<sp/>=<sp/>Element-&gt;Base.Next;<sp/>Node;<sp/>Node<sp/>=<sp/>Node-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Base.Type<sp/>==<sp/>MLXmlElementT)<sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Child<sp/>=<sp/>(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Node;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Tag<sp/>==<sp/>NULL)<sp/>||<sp/>(Tag<sp/>==<sp/>Node-&gt;Base.Value))<sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Recursive-&gt;Element<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Recursive);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Child<sp/>=<sp/>ml_xml_recursive_find(Child,<sp/>Tag);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child)<sp/>{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Recursive-&gt;Element<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Recursive);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Element<sp/>=<sp/>(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Element-&gt;Base.Parent;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLXmlRecursiveT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__xml__recursive__t" kindref="compound">ml_xml_recursive_t</ref><sp/>*Recursive)<sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Recursive-&gt;Element-&gt;Base.Index));</highlight></codeline>
<codeline lineno="1014"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLXmlRecursiveT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__xml__recursive__t" kindref="compound">ml_xml_recursive_t</ref><sp/>*Recursive)<sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Recursive-&gt;Element);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;//&quot;</highlight><highlight class="normal">,<sp/>MLXmlElementT)<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="comment">//&lt;Xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>sequence<sp/>of<sp/>the<sp/>recursive<sp/>children<sp/>of<sp/>:mini:`Xml`,<sp/>including<sp/>:mini:`Xml`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element<sp/>=<sp/>(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__recursive__t" kindref="compound">ml_xml_recursive_t</ref><sp/>*Recursive<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__recursive__t" kindref="compound">ml_xml_recursive_t</ref>);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>Recursive-&gt;Type<sp/>=<sp/>MLXmlRecursiveT;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>Recursive-&gt;Element<sp/>=<sp/>Recursive-&gt;Root<sp/>=<sp/>Element;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Recursive;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;//&quot;</highlight><highlight class="normal">,<sp/>MLXmlT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="comment">//&lt;Xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="comment">//&lt;Tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>sequence<sp/>of<sp/>the<sp/>recursive<sp/>children<sp/>of<sp/>:mini:`Xml`<sp/>with<sp/>tag<sp/>:mini:`Tag`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element<sp/>=<sp/>(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__recursive__t" kindref="compound">ml_xml_recursive_t</ref><sp/>*Recursive<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__recursive__t" kindref="compound">ml_xml_recursive_t</ref>);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>Recursive-&gt;Type<sp/>=<sp/>MLXmlRecursiveT;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>Recursive-&gt;Element<sp/>=<sp/>Recursive-&gt;Root<sp/>=<sp/>Element;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)stringmap_slot(MLXmlTags,<sp/>ml_string_value(Args[1]));</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/>Slot[0]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>Recursive-&gt;Tag<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Slot[0];</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Recursive;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;//&quot;</highlight><highlight class="normal">,<sp/>MLXmlT,<sp/>MLNamesT)<sp/>{</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="comment">//&lt;Xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="comment">//&lt;Attribute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>sequence<sp/>of<sp/>the<sp/>recursive<sp/>children<sp/>of<sp/>:mini:`Xml`<sp/>with<sp/>:mini:`Attribute/1<sp/>=<sp/>Value/1`,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__filter__t" kindref="compound">ml_xml_filter_t</ref><sp/>*Filter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__filter__t" kindref="compound">ml_xml_filter_t</ref>);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>Filter-&gt;Type<sp/>=<sp/>MLXmlFilterT;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Attributes<sp/>=<sp/>Filter-&gt;Attributes<sp/>=<sp/>ml_map();</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_FOREACH(Args[1],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Args[I]<sp/>!=<sp/>MLNil)<sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_map_insert(Attributes,<sp/>Iter-&gt;Value,<sp/>Args[I++]);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element<sp/>=<sp/>(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__recursive__t" kindref="compound">ml_xml_recursive_t</ref><sp/>*Recursive<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__recursive__t" kindref="compound">ml_xml_recursive_t</ref>);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>Recursive-&gt;Type<sp/>=<sp/>MLXmlRecursiveT;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>Recursive-&gt;Element<sp/>=<sp/>Recursive-&gt;Root<sp/>=<sp/>Element;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Chained<sp/>=<sp/>ml_chainedv(3,<sp/>Recursive,<sp/>FilterSoloMethod,<sp/>Filter);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)MLXmlChainedT;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Chained;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;//&quot;</highlight><highlight class="normal">,<sp/>MLXmlT,<sp/>MLStringT,<sp/>MLNamesT)<sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="comment">//&lt;Xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="comment">//&lt;Tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="comment">//&lt;Attribute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>sequence<sp/>of<sp/>the<sp/>recursive<sp/>children<sp/>of<sp/>:mini:`Xml`<sp/>with<sp/>tag<sp/>:mini:`Tag`<sp/>and<sp/>:mini:`Attribute/1<sp/>=<sp/>Value/1`,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_CHECK_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__filter__t" kindref="compound">ml_xml_filter_t</ref><sp/>*Filter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__filter__t" kindref="compound">ml_xml_filter_t</ref>);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>Filter-&gt;Type<sp/>=<sp/>MLXmlFilterT;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)stringmap_slot(MLXmlTags,<sp/>ml_string_value(Args[1]));</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/>Slot[0]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>Filter-&gt;Tag<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Slot[0];</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Attributes<sp/>=<sp/>Filter-&gt;Attributes<sp/>=<sp/>ml_map();</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_FOREACH(Args[2],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Args[I]<sp/>!=<sp/>MLNil)<sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_map_insert(Attributes,<sp/>Iter-&gt;Value,<sp/>Args[I++]);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element<sp/>=<sp/>(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__recursive__t" kindref="compound">ml_xml_recursive_t</ref><sp/>*Recursive<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__recursive__t" kindref="compound">ml_xml_recursive_t</ref>);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>Recursive-&gt;Type<sp/>=<sp/>MLXmlRecursiveT;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>Recursive-&gt;Element<sp/>=<sp/>Recursive-&gt;Root<sp/>=<sp/>Element;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Chained<sp/>=<sp/>ml_chainedv(3,<sp/>Recursive,<sp/>FilterSoloMethod,<sp/>Filter);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)MLXmlChainedT;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Chained;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;//&quot;</highlight><highlight class="normal">,<sp/>MLXmlT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="comment">//&lt;Xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>sequence<sp/>of<sp/>the<sp/>recursive<sp/>children<sp/>of<sp/>:mini:`Xml`<sp/>for<sp/>which<sp/>:mini:`Fn(Child)`<sp/>is<sp/>non-nil.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element<sp/>=<sp/>(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__recursive__t" kindref="compound">ml_xml_recursive_t</ref><sp/>*Recursive<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__recursive__t" kindref="compound">ml_xml_recursive_t</ref>);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>Recursive-&gt;Type<sp/>=<sp/>MLXmlRecursiveT;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>Recursive-&gt;Element<sp/>=<sp/>Recursive-&gt;Root<sp/>=<sp/>Element;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Chained<sp/>=<sp/>ml_chainedv(3,<sp/>Recursive,<sp/>FilterSoloMethod,<sp/>Args[1]);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)MLXmlChainedT;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Chained;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal">ML_METHOD_DECL(ChildrenMethod,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>MLXmlSequenceT)<sp/>{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="comment">//&lt;Args</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>the<sp/>sequence<sp/>:mini:`Node/i<sp/>/<sp/>Args`<sp/>where<sp/>:mini:`Node/i`<sp/>are<sp/>the<sp/>nodes<sp/>generated<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Partial<sp/>=<sp/>ml_partial_function(ChildrenMethod,<sp/>Count);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ml_partial_function_set(Partial,<sp/>I,<sp/>Args[I]);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Doubled<sp/>=<sp/>ml_doubled(Args[0],<sp/>Partial);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>Doubled-&gt;Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)MLXmlDoubledT;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Doubled;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal">ML_METHOD_DECL(RecursiveMethod,<sp/></highlight><highlight class="stringliteral">&quot;//&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;//&quot;</highlight><highlight class="normal">,<sp/>MLXmlSequenceT)<sp/>{</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="comment">//&lt;Args</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>the<sp/>sequence<sp/>:mini:`Node/i<sp/>//<sp/>Args`<sp/>where<sp/>:mini:`Node/i`<sp/>are<sp/>the<sp/>nodes<sp/>generated<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Partial<sp/>=<sp/>ml_partial_function(RecursiveMethod,<sp/>Count);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ml_partial_function_set(Partial,<sp/>I,<sp/>Args[I]);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Doubled<sp/>=<sp/>ml_doubled(Args[0],<sp/>Partial);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>Doubled-&gt;Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)MLXmlDoubledT;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Doubled;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal">ML_METHOD_DECL(NextSiblingsMethod,<sp/></highlight><highlight class="stringliteral">&quot;&gt;&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;&gt;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLXmlSequenceT)<sp/>{</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="comment">//&lt;Args</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>the<sp/>sequence<sp/>:mini:`Node/i<sp/>&gt;&gt;<sp/>Args`<sp/>where<sp/>:mini:`Node/i`<sp/>are<sp/>the<sp/>nodes<sp/>generated<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Partial<sp/>=<sp/>ml_partial_function(NextSiblingsMethod,<sp/>Count);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ml_partial_function_set(Partial,<sp/>I,<sp/>Args[I]);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Doubled<sp/>=<sp/>ml_doubled(Args[0],<sp/>Partial);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>Doubled-&gt;Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)MLXmlDoubledT;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Doubled;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal">ML_METHOD_DECL(PrevSiblingsMethod,<sp/></highlight><highlight class="stringliteral">&quot;&lt;&lt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;&lt;&lt;&quot;</highlight><highlight class="normal">,<sp/>MLXmlSequenceT)<sp/>{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="comment">//&lt;Args</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>the<sp/>sequence<sp/>:mini:`Node/i<sp/>&lt;&lt;<sp/>Args`<sp/>where<sp/>:mini:`Node/i`<sp/>are<sp/>the<sp/>nodes<sp/>generated<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Partial<sp/>=<sp/>ml_partial_function(PrevSiblingsMethod,<sp/>Count);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ml_partial_function_set(Partial,<sp/>I,<sp/>Args[I]);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Doubled<sp/>=<sp/>ml_doubled(Args[0],<sp/>Partial);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>Doubled-&gt;Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)MLXmlDoubledT;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Doubled;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal">ML_METHOD_DECL(ParentMethod,<sp/></highlight><highlight class="stringliteral">&quot;parent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;parent&quot;</highlight><highlight class="normal">,<sp/>MLXmlSequenceT)<sp/>{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="comment">//&lt;Args</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>the<sp/>sequence<sp/>:mini:`Node/i<sp/>^<sp/>Args`<sp/>where<sp/>:mini:`Node/i`<sp/>are<sp/>the<sp/>nodes<sp/>generated<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Partial<sp/>=<sp/>ml_partial_function(ParentMethod,<sp/>Count);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ml_partial_function_set(Partial,<sp/>I,<sp/>Args[I]);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Chained<sp/>=<sp/>ml_chainedv(4,<sp/>Args[0],<sp/>Partial,<sp/>FilterSoloMethod,<sp/>ml_integer(1));</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)MLXmlChainedT;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Chained;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal">ML_METHOD_DECL(NextSiblingMethod,<sp/></highlight><highlight class="stringliteral">&quot;next&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;next&quot;</highlight><highlight class="normal">,<sp/>MLXmlSequenceT)<sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight><highlight class="comment">//&lt;Args</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>the<sp/>sequence<sp/>:mini:`Node/i<sp/>+<sp/>Args`<sp/>where<sp/>:mini:`Node/i`<sp/>are<sp/>the<sp/>nodes<sp/>generated<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Partial<sp/>=<sp/>ml_partial_function(NextSiblingMethod,<sp/>Count);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ml_partial_function_set(Partial,<sp/>I,<sp/>Args[I]);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Chained<sp/>=<sp/>ml_chainedv(4,<sp/>Args[0],<sp/>Partial,<sp/>FilterSoloMethod,<sp/>ml_integer(1));</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)MLXmlChainedT;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Chained;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal">ML_METHOD_DECL(PrevSiblingMethod,<sp/></highlight><highlight class="stringliteral">&quot;prev&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;prev&quot;</highlight><highlight class="normal">,<sp/>MLXmlSequenceT)<sp/>{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight><highlight class="comment">//&lt;Args</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>the<sp/>sequence<sp/>:mini:`Node/i<sp/>-<sp/>Args`<sp/>where<sp/>:mini:`Node/i`<sp/>are<sp/>the<sp/>nodes<sp/>generated<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Partial<sp/>=<sp/>ml_partial_function(PrevSiblingMethod,<sp/>Count);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ml_partial_function_set(Partial,<sp/>I,<sp/>Args[I]);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Chained<sp/>=<sp/>ml_chainedv(4,<sp/>Args[0],<sp/>Partial,<sp/>FilterSoloMethod,<sp/>ml_integer(1));</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)MLXmlChainedT;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Chained;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_xml_contains_text(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Text,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLXmlT);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node<sp/>=<sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Base.Type<sp/>==<sp/>MLXmlTextT)<sp/>{</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(Node-&gt;Base.Value,<sp/>Text))<sp/>ML_RETURN(Node);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Base.Type<sp/>==<sp/>MLXmlElementT)<sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_xml_element_text((<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Node,<sp/>Buffer,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value<sp/>=<sp/>ml_stringbuffer_get_string(Buffer);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(Value,<sp/>Text))<sp/>ML_RETURN(Node);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;contains&quot;</highlight><highlight class="normal">,<sp/>MLXmlSequenceT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Equivalent<sp/>to<sp/>:mini:`Sequence<sp/>-&gt;?<sp/>fun(X)<sp/>X:text:find(String)`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Contains<sp/>=<sp/>ml_cfunctionx((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_string_value(Args[1]),<sp/>(ml_callbackx_t)ml_xml_contains_text);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Chained<sp/>=<sp/>ml_chainedv(3,<sp/>Args[0],<sp/>FilterSoloMethod,<sp/>Contains);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)MLXmlChainedT;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Chained;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>regex_test(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject,<sp/>regex_t<sp/>*Regex)<sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>regmatch_t<sp/>Matches[Regex-&gt;re_nsub<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>strlen(Subject);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!regnexec(Regex,<sp/>Subject,<sp/>Length,<sp/>Regex-&gt;re_nsub<sp/>+<sp/>1,<sp/>Matches,<sp/>0);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!regexec(Regex,<sp/>Subject,<sp/>Regex-&gt;re_nsub<sp/>+<sp/>1,<sp/>Matches,<sp/>0);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_xml_contains_regex(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/>regex_t<sp/>*Regex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLXmlT);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Node<sp/>=<sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Base.Type<sp/>==<sp/>MLXmlTextT)<sp/>{</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regex_test(Node-&gt;Base.Value,<sp/>Regex))<sp/>ML_RETURN(Node);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Base.Type<sp/>==<sp/>MLXmlElementT)<sp/>{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_xml_element_text((<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Node,<sp/>Buffer,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value<sp/>=<sp/>ml_stringbuffer_get_string(Buffer);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regex_test(Value,<sp/>Regex))<sp/>ML_RETURN(Node);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>regex_t<sp/>*ml_regex_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;contains&quot;</highlight><highlight class="normal">,<sp/>MLXmlSequenceT,<sp/>MLRegexT)<sp/>{</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="comment">//&lt;Regex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Equivalent<sp/>to<sp/>:mini:`Sequence<sp/>-&gt;?<sp/>fun(X)<sp/>X:text:find(Regex)`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Contains<sp/>=<sp/>ml_cfunctionx(ml_regex_value(Args[1]),<sp/>(ml_callbackx_t)ml_xml_contains_regex);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Chained<sp/>=<sp/>ml_chainedv(3,<sp/>Args[0],<sp/>FilterSoloMethod,<sp/>Contains);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)MLXmlChainedT;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Chained;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;has&quot;</highlight><highlight class="normal">,<sp/>MLXmlSequenceT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Equivalent<sp/>to<sp/>:mini:`Sequence<sp/>-&gt;?<sp/>fun(X)<sp/>some(Fn(X))`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Filter<sp/>=<sp/>ml_chainedv(2,<sp/>Args[1],<sp/>MLSome);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Chained<sp/>=<sp/>ml_chainedv(3,<sp/>Args[0],<sp/>FilterSoloMethod,<sp/>Filter);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)MLXmlChainedT;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Chained;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_xml_escape_string(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*String,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--Count<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*String)<sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;&amp;lt;&quot;</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;&amp;gt;&quot;</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;&amp;amp;&quot;</highlight><highlight class="normal">,<sp/>5);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;&amp;quot;&quot;</highlight><highlight class="normal">,<sp/>6);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;&amp;apos;&quot;</highlight><highlight class="normal">,<sp/>6);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_put(Buffer,<sp/>*String);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++String;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_xml_node_append(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Node)<sp/>{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Tag<sp/>=<sp/>ml_string_value((<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Node-&gt;Base.Base.Value);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;&lt;%s&quot;</highlight><highlight class="normal">,<sp/>Tag);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_MAP_FOREACH(Node-&gt;Attributes,<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter-&gt;Key,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;XMLError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Attribute<sp/>keys<sp/>must<sp/>be<sp/>strings&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter-&gt;Value,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;XMLError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Attribute<sp/>values<sp/>must<sp/>be<sp/>strings&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>%s=\&quot;&quot;</highlight><highlight class="normal">,<sp/>ml_string_value(Iter-&gt;Key));</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_xml_escape_string(Buffer,<sp/>ml_string_value(Iter-&gt;Value),<sp/>ml_string_length(Iter-&gt;Value));</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Child<sp/>=<sp/>Node-&gt;Head;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child)<sp/>{</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child-&gt;Base.Type<sp/>==<sp/>MLXmlTextT)<sp/>{</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_xml_escape_string(Buffer,<sp/>Child-&gt;Base.Value,<sp/>Child-&gt;Base.Length);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child-&gt;Base.Type<sp/>==<sp/>MLXmlElementT)<sp/>{</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error<sp/>=<sp/>ml_xml_node_append(Buffer,<sp/>(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Child);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1350" refid="structxml__stack__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((Child<sp/>=<sp/>Child-&gt;Next));</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;&lt;/%s&gt;&quot;</highlight><highlight class="normal">,<sp/>Tag);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;/&gt;&quot;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1356" refid="structxml__parser__t" refkind="compound"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLXmlElementT)<sp/>{</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight><highlight class="comment">//&lt;Xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>a<sp/>string<sp/>representation<sp/>of<sp/>:mini:`Xml`<sp/>to<sp/>:mini:`Buffer`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Node<sp/>=<sp/>(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error<sp/>=<sp/>ml_xml_node_append(Buffer,<sp/>Node);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error<sp/>?:<sp/>MLSome;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structxml__stack__t" kindref="compound">xml_stack_t</ref><sp/><ref refid="structxml__stack__t" kindref="compound">xml_stack_t</ref>;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structxml__stack__t" kindref="compound">xml_stack_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Nodes[ML_XML_STACK_SIZE];</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structxml__stack__t" kindref="compound">xml_stack_t</ref><sp/>*Prev;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*Callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structxml__stack__t" kindref="compound">xml_stack_t</ref><sp/>*Stack;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1];</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structxml__stack__t" kindref="compound">xml_stack_t</ref><sp/>Stack0;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal">}<sp/><ref refid="structxml__parser__t" kindref="compound">xml_parser_t</ref>;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>xml_start_element(<ref refid="structxml__parser__t" kindref="compound">xml_parser_t</ref><sp/>*Parser,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XML_Char<sp/>*Name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XML_Char<sp/>**Attrs)<sp/>{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parser-&gt;Buffer-&gt;Length)<sp/>{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Text<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref>);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Type<sp/>=<sp/>MLXmlTextT;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Length<sp/>=<sp/>Parser-&gt;Buffer-&gt;Length;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Value<sp/>=<sp/>ml_stringbuffer_get_string(Parser-&gt;Buffer);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parser-&gt;Element)<sp/>ml_xml_element_put(Parser-&gt;Element,<sp/>Text);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structxml__stack__t" kindref="compound">xml_stack_t</ref><sp/>*Stack<sp/>=<sp/>Parser-&gt;Stack;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Stack-&gt;Index<sp/>==<sp/>ML_XML_STACK_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structxml__stack__t" kindref="compound">xml_stack_t</ref><sp/>*NewStack<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structxml__stack__t" kindref="compound">xml_stack_t</ref>);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NewStack-&gt;Prev<sp/>=<sp/>Stack;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stack<sp/>=<sp/>Parser-&gt;Stack<sp/>=<sp/>NewStack;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>Stack-&gt;Nodes[Stack-&gt;Index]<sp/>=<sp/>Parser-&gt;Element;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>++Stack-&gt;Index;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element<sp/>=<sp/>Parser-&gt;Element<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref>);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>Element-&gt;Base.Base.Type<sp/>=<sp/>MLXmlElementT;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Tag<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)stringmap_search(MLXmlTags,<sp/>Name);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Tag)<sp/>{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Name<sp/>=<sp/>GC_strdup(Name);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tag<sp/>=<sp/>ml_string(Name,<sp/>-1);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(MLXmlTags,<sp/>Name,<sp/>Tag);</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>Element-&gt;Base.Base.Value<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Tag;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>Element-&gt;Attributes<sp/>=<sp/>ml_map();</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XML_Char<sp/>**Attr<sp/>=<sp/>Attrs;<sp/>Attr[0];<sp/>Attr<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_map_insert(Element-&gt;Attributes,<sp/>ml_string(GC_strdup(Attr[0]),<sp/>-1),<sp/>ml_string(GC_strdup(Attr[1]),<sp/>-1));</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Element<sp/>=<sp/>Element;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>xml_end_element(<ref refid="structxml__parser__t" kindref="compound">xml_parser_t</ref><sp/>*Parser,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XML_Char<sp/>*Name)<sp/>{</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parser-&gt;Buffer-&gt;Length)<sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Text<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref>);</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Type<sp/>=<sp/>MLXmlTextT;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Length<sp/>=<sp/>Parser-&gt;Buffer-&gt;Length;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Value<sp/>=<sp/>ml_stringbuffer_get_string(Parser-&gt;Buffer);</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_xml_element_put(Parser-&gt;Element,<sp/>Text);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structxml__stack__t" kindref="compound">xml_stack_t</ref><sp/>*Stack<sp/>=<sp/>Parser-&gt;Stack;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Stack-&gt;Index<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stack<sp/>=<sp/>Parser-&gt;Stack<sp/>=<sp/>Stack-&gt;Prev;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Element<sp/>=<sp/>(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*)Parser-&gt;Element;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>--Stack-&gt;Index;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Parent<sp/>=<sp/>Parser-&gt;Element<sp/>=<sp/>Stack-&gt;Nodes[Stack-&gt;Index];</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>Stack-&gt;Nodes[Stack-&gt;Index]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parent)<sp/>{</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_xml_element_put(Parent,<sp/>Element);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Callback(Parser-&gt;Data,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Element);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>xml_character_data(<ref refid="structxml__parser__t" kindref="compound">xml_parser_t</ref><sp/>*Parser,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XML_Char<sp/>*String,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Parser-&gt;Buffer,<sp/>String,<sp/>Length);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>xml_skipped_entity(<ref refid="structxml__parser__t" kindref="compound">xml_parser_t</ref><sp/>*Parser,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XML_Char<sp/>*EntityName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IsParameterEntity)<sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Parser-&gt;Buffer,<sp/>EntityName,<sp/>strlen(EntityName));</highlight></codeline>
<codeline lineno="1446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>xml_default(<ref refid="structxml__parser__t" kindref="compound">xml_parser_t</ref><sp/>*Parser,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XML_Char<sp/>*String,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Parser-&gt;Buffer,<sp/>String,<sp/>Length);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Ptr)<sp/>{</highlight></codeline>
<codeline lineno="1453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>xml_decode_callback(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Result,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>Result[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal">ML_METHOD(MLXmlT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`String`<sp/>parsed<sp/>into<sp/>an<sp/>XML<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1464" refid="structml__xml__stream__state__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structxml__parser__t" kindref="compound">xml_parser_t</ref><sp/>Parser<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser.Callback<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_decode_callback;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser.Data<sp/>=<sp/>&amp;Result;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser.Stack<sp/>=<sp/>&amp;Parser.Stack0;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_Memory_Handling_Suite<sp/>Suite<sp/>=<sp/>{GC_malloc,<sp/>GC_realloc,<sp/>ml_free};</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_Parser<sp/>Handle<sp/>=<sp/>XML_ParserCreate_MM(NULL,<sp/>&amp;Suite,<sp/>NULL);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetUserData(Handle,<sp/>&amp;Parser);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetElementHandler(Handle,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_start_element,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_end_element);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetCharacterDataHandler(Handle,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_character_data);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetSkippedEntityHandler(Handle,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_skipped_entity);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetDefaultHandler(Handle,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_default);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Text<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XML_Parse(Handle,<sp/>Text,<sp/>Length,<sp/>1)<sp/>==<sp/>XML_STATUS_ERROR)<sp/>{</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XML_Error<sp/>Error<sp/>=<sp/>XML_GetErrorCode(Handle);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;XMLError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>XML_ErrorString(Error));</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result<sp/>?:<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;XMLError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Incomplete<sp/>XML&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_stream_read)<sp/>*read;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_Parser<sp/>Handle;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structxml__parser__t" kindref="compound">xml_parser_t</ref><sp/>Parser;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Text[ML_STRINGBUFFER_NODE_SIZE];</highlight></codeline>
<codeline lineno="1492"><highlight class="normal">}<sp/><ref refid="structml__xml__stream__state__t" kindref="compound">ml_xml_stream_state_t</ref>;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_xml_stream_state_run(<ref refid="structml__xml__stream__state__t" kindref="compound">ml_xml_stream_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_integer_value(Result);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XML_Parse(State-&gt;Handle,<sp/>State-&gt;Text,<sp/>Length,<sp/>0)<sp/>==<sp/>XML_STATUS_ERROR)<sp/>{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XML_Error<sp/>Error<sp/>=<sp/>XML_GetErrorCode(State-&gt;Handle);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;XMLError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>XML_ErrorString(Error));</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Length)<sp/>ML_RETURN(State-&gt;Result<sp/>?:<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;XMLError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Incomplete<sp/>XML&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;read((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Stream,<sp/>State-&gt;Text,<sp/>ML_STRINGBUFFER_NODE_SIZE);</highlight></codeline>
<codeline lineno="1504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal">ML_METHODX(MLXmlT,<sp/>MLStreamT)<sp/>{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight><highlight class="comment">//&lt;Stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>contents<sp/>of<sp/>:mini:`Stream`<sp/>parsed<sp/>into<sp/>an<sp/>XML<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__stream__state__t" kindref="compound">ml_xml_stream_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__stream__state__t" kindref="compound">ml_xml_stream_state_t</ref>);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Parser.Callback<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_decode_callback;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Parser.Data<sp/>=<sp/>&amp;State-&gt;Result;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Parser.Stack<sp/>=<sp/>&amp;State-&gt;Parser.Stack0;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_Memory_Handling_Suite<sp/>Suite<sp/>=<sp/>{GC_malloc,<sp/>GC_realloc,<sp/>ml_free};</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_Parser<sp/>Handle<sp/>=<sp/>State-&gt;Handle<sp/>=<sp/>XML_ParserCreate_MM(NULL,<sp/>&amp;Suite,<sp/>NULL);</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetUserData(Handle,<sp/>&amp;State-&gt;Parser);</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetElementHandler(Handle,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_start_element,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_end_element);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetCharacterDataHandler(Handle,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_character_data);</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetSkippedEntityHandler(Handle,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_skipped_entity);</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetDefaultHandler(Handle,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_default);</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Stream<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;read<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Args[0]),<sp/>ml_stream_read)<sp/>?:<sp/>ml_stream_read_method;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_xml_stream_state_run;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;read((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Stream,<sp/>State-&gt;Text,<sp/>ML_STRINGBUFFER_NODE_SIZE);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal">ML_METHODV(MLXmlT,<sp/>MLSymbolT)<sp/>{</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight><highlight class="comment">//&lt;Tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>xml<sp/>element<sp/>with<sp/>tag<sp/>:mini:`Tag`,<sp/>adding<sp/>attributes<sp/>and<sp/>children<sp/>as<sp/>:mini:`xml::element(...)`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref><sp/>*Element<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__element__t" kindref="compound">ml_xml_element_t</ref>);</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/>Element-&gt;Base.Base.Type<sp/>=<sp/>MLXmlElementT;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Tag<sp/>=<sp/>ml_symbol_name(Args[0]);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)stringmap_slot(MLXmlTags,<sp/>Tag);</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/>Slot[0]<sp/>=<sp/>ml_string(Tag,<sp/>-1);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>Element-&gt;Base.Base.Value<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Slot[0];</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>Element-&gt;Attributes<sp/>=<sp/>ml_map();</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLNamesT))<sp/>{</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_NAMES_CHECK_ARG_COUNT(I);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_NAMES_FOREACH(Value,<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++I;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_map_insert(Element-&gt;Attributes,<sp/>Iter-&gt;Value,<sp/>Args[I]);</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error<sp/>=<sp/>ml_xml_element_put_general(Element,<sp/>Value,<sp/>Buffer);</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Buffer-&gt;Length)<sp/>{</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref><sp/>*Text<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__node__t" kindref="compound">ml_xml_node_t</ref>);</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Type<sp/>=<sp/>MLXmlTextT;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Length<sp/>=<sp/>Buffer-&gt;Length;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Text-&gt;Base.Value<sp/>=<sp/>ml_stringbuffer_get_string(Buffer);</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_xml_element_put(Element,<sp/>Text);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Element;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal">ML_METHOD_ANON(MLXmlParse,<sp/></highlight><highlight class="stringliteral">&quot;xml::parse&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal">ML_METHOD(MLXmlParse,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight><highlight class="comment">//@xml::parse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`String`<sp/>parsed<sp/>into<sp/>an<sp/>XML<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structxml__parser__t" kindref="compound">xml_parser_t</ref><sp/>Parser<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser.Callback<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_decode_callback;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser.Data<sp/>=<sp/>&amp;Result;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser.Stack<sp/>=<sp/>&amp;Parser.Stack0;</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_Memory_Handling_Suite<sp/>Suite<sp/>=<sp/>{GC_malloc,<sp/>GC_realloc,<sp/>ml_free};</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_Parser<sp/>Handle<sp/>=<sp/>XML_ParserCreate_MM(NULL,<sp/>&amp;Suite,<sp/>NULL);</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetUserData(Handle,<sp/>&amp;Parser);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetElementHandler(Handle,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_start_element,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_end_element);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetCharacterDataHandler(Handle,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_character_data);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetSkippedEntityHandler(Handle,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_skipped_entity);</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetDefaultHandler(Handle,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_default);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Text<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XML_Parse(Handle,<sp/>Text,<sp/>Length,<sp/>1)<sp/>==<sp/>XML_STATUS_ERROR)<sp/>{</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XML_Error<sp/>Error<sp/>=<sp/>XML_GetErrorCode(Handle);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;XMLError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>XML_ErrorString(Error));</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result<sp/>?:<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;XMLError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Incomplete<sp/>XML&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal">ML_METHODX(MLXmlParse,<sp/>MLStreamT)<sp/>{</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight><highlight class="comment">//@xml::parse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight><highlight class="comment">//&lt;Stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598" refid="structml__xml__parser__t" refkind="compound"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>contents<sp/>of<sp/>:mini:`Stream`<sp/>parsed<sp/>into<sp/>an<sp/>XML<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__stream__state__t" kindref="compound">ml_xml_stream_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__stream__state__t" kindref="compound">ml_xml_stream_state_t</ref>);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Parser.Callback<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_decode_callback;</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Parser.Data<sp/>=<sp/>&amp;State-&gt;Result;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Parser.Stack<sp/>=<sp/>&amp;State-&gt;Parser.Stack0;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_Memory_Handling_Suite<sp/>Suite<sp/>=<sp/>{GC_malloc,<sp/>GC_realloc,<sp/>ml_free};</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_Parser<sp/>Handle<sp/>=<sp/>State-&gt;Handle<sp/>=<sp/>XML_ParserCreate_MM(NULL,<sp/>&amp;Suite,<sp/>NULL);</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetUserData(Handle,<sp/>&amp;State-&gt;Parser);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetElementHandler(Handle,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_start_element,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_end_element);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetCharacterDataHandler(Handle,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_character_data);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetSkippedEntityHandler(Handle,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_skipped_entity);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetDefaultHandler(Handle,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_default);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Stream<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;read<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Args[0]),<sp/>ml_stream_read)<sp/>?:<sp/>ml_stream_read_method;</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_xml_stream_state_run;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;read((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Stream,<sp/>State-&gt;Text,<sp/>ML_STRINGBUFFER_NODE_SIZE);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Callback;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[1];</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_Parser<sp/>Handle;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structxml__parser__t" kindref="compound">xml_parser_t</ref><sp/>Parser[1];</highlight></codeline>
<codeline lineno="1624"><highlight class="normal">}<sp/><ref refid="structml__xml__parser__t" kindref="compound">ml_xml_parser_t</ref>;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLXmlParserT[];</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_xml_decode_callback(<ref refid="structml__xml__parser__t" kindref="compound">ml_xml_parser_t</ref><sp/>*Parser,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_call((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Parser,<sp/>Parser-&gt;Callback,<sp/>1,<sp/>Parser-&gt;Args);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_xml_parser_run(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal">ML_FUNCTIONX(XmlParser)<sp/>{</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight><highlight class="comment">//@xml::parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight><highlight class="comment">//&lt;Callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight><highlight class="comment">//&gt;xml::parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>parser<sp/>that<sp/>calls<sp/>:mini:`Callback(Xml)`<sp/>each<sp/>time<sp/>a<sp/>complete<sp/>XML<sp/>document<sp/>is<sp/>parsed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__xml__parser__t" kindref="compound">ml_xml_parser_t</ref><sp/>*Parser<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__xml__parser__t" kindref="compound">ml_xml_parser_t</ref>);</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Base.Type<sp/>=<sp/>MLXmlParserT;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Base.run<sp/>=<sp/>ml_xml_parser_run;</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Callback<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Parser-&gt;Callback<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_xml_decode_callback;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Parser-&gt;Data<sp/>=<sp/>Parser;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Parser-&gt;Stack<sp/>=<sp/>&amp;Parser-&gt;Parser-&gt;Stack0;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_Memory_Handling_Suite<sp/>Suite<sp/>=<sp/>{GC_malloc,<sp/>GC_realloc,<sp/>ml_free};</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Handle<sp/>=<sp/>XML_ParserCreate_MM(NULL,<sp/>&amp;Suite,<sp/>NULL);</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetUserData(Parser-&gt;Handle,<sp/>Parser-&gt;Parser);</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetElementHandler(Parser-&gt;Handle,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_start_element,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_end_element);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetCharacterDataHandler(Parser-&gt;Handle,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_character_data);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetSkippedEntityHandler(Parser-&gt;Handle,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_skipped_entity);</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>XML_SetDefaultHandler(Parser-&gt;Handle,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)xml_default);</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Parser);</highlight></codeline>
<codeline lineno="1658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal">ML_TYPE(MLXmlParserT,<sp/>(MLStreamT),<sp/></highlight><highlight class="stringliteral">&quot;xml::parser&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight><highlight class="comment">//@xml::parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>callback<sp/>based<sp/>streaming<sp/>XML<sp/>parser.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)XmlParser</highlight></codeline>
<codeline lineno="1664"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_stream_write,<sp/>MLXmlParserT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__xml__parser__t" kindref="compound">ml_xml_parser_t</ref><sp/>*Parser,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XML_Parse(Parser-&gt;Handle,<sp/>Address,<sp/>Count,<sp/>0)<sp/>==<sp/>XML_STATUS_ERROR)<sp/>{</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XML_Error<sp/>Error<sp/>=<sp/>XML_GetErrorCode(Parser-&gt;Handle);</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;XMLError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>XML_ErrorString(Error));</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Count));</highlight></codeline>
<codeline lineno="1672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_stream_flush,<sp/>MLXmlParserT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__xml__parser__t" kindref="compound">ml_xml_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(XML_Parse(Parser-&gt;Handle,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>0)<sp/>==<sp/>XML_STATUS_ERROR)<sp/>{</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XML_Error<sp/>Error<sp/>=<sp/>XML_GetErrorCode(Parser-&gt;Handle);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;XMLError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>XML_ErrorString(Error));</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Parser);</highlight></codeline>
<codeline lineno="1680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_xml_init(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Globals)<sp/>{</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_xml_init.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLXmlT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;parse&quot;</highlight><highlight class="normal">,<sp/>MLXmlParse);</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLXmlT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;escape&quot;</highlight><highlight class="normal">,<sp/>MLXmlEscape);</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLXmlT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;text&quot;</highlight><highlight class="normal">,<sp/>MLXmlTextT);</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLXmlT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;element&quot;</highlight><highlight class="normal">,<sp/>MLXmlElementT);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLXmlT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;parser&quot;</highlight><highlight class="normal">,<sp/>MLXmlParserT);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLXmlT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;sequence&quot;</highlight><highlight class="normal">,<sp/>MLXmlSequenceT);</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Globals)<sp/>{</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;xml&quot;</highlight><highlight class="normal">,<sp/>MLXmlT);</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1695"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ml_xml.c"/>
  </compounddef>
</doxygen>
