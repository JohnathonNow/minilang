<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__time_8c" kind="file" language="C++">
    <compoundname>ml_time.c</compoundname>
    <includes refid="ml__time_8h" local="yes">ml_time.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes refid="ml__object_8h" local="yes">ml_object.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="yes">ml_time_init.c</includes>
    <incdepgraph>
      <node id="14">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>ml_object.h</label>
        <link refid="ml__object_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_time.c</label>
        <link refid="ml__time_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ml_time.h</label>
        <link refid="ml__time_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="23">
        <label>ctype.h</label>
      </node>
      <node id="20">
        <label>gc/gc.h</label>
      </node>
      <node id="17">
        <label>limits.h</label>
      </node>
      <node id="22">
        <label>math.h</label>
      </node>
      <node id="16">
        <label>ml_config.h</label>
      </node>
      <node id="24">
        <label>ml_time_init.c</label>
      </node>
      <node id="7">
        <label>setjmp.h</label>
      </node>
      <node id="12">
        <label>stdarg.h</label>
      </node>
      <node id="15">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>stdio.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="11">
        <label>string.h</label>
      </node>
      <node id="18">
        <label>time.h</label>
      </node>
      <node id="5">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structml__time__t" prot="public">ml_time_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__time_8c_1aebec330325aff5cbc7d9c9248e2cae4a" prot="public" static="no">
        <name>ML_CATEGORY</name>
        <initializer>&quot;time&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="17" column="10" bodyfile="src/ml_time.c" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__time_8c_1a5998f9f2d2badbc048d60bf0934c19b3" prot="public" static="no">
        <name>ml_comp_method_time_time</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>	ML_METHOD(NAME, MLTimeT, MLTimeT) { \
		<ref refid="structml__time__t" kindref="compound">ml_time_t</ref> *TimeA = (<ref refid="structml__time__t" kindref="compound">ml_time_t</ref> *)Args[0]; \
		<ref refid="structml__time__t" kindref="compound">ml_time_t</ref> *TimeB = (<ref refid="structml__time__t" kindref="compound">ml_time_t</ref> *)Args[1]; \
		return ml_time_compare(TimeA, TimeB) SYMBOL 0 ? Args[1] : MLNil; \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="414" column="9" bodyfile="src/ml_time.c" bodystart="414" bodyend="419"/>
      </memberdef>
      <memberdef kind="define" id="ml__time_8c_1ad2c9cefe018e5b90c4e2083ca538e0a1" prot="public" static="no">
        <name>ML_TIME_PART</name>
        <param><defname>NAME</defname></param>
        <param><defname>DESC</defname></param>
        <param><defname>EXPR</defname></param>
        <initializer>\
ML_METHOD(NAME, MLTimeT) { \
/*&lt;Time
//&gt;integer
// Returns the DESC from :mini:`Time` in local time.
*/ \
	<ref refid="structml__time__t" kindref="compound">ml_time_t</ref> *Time = (<ref refid="structml__time__t" kindref="compound">ml_time_t</ref> *)Args[0]; \
	struct tm TM; \
	localtime_r(&amp;Time-&gt;Value-&gt;tv_sec, &amp;TM); \
	return EXPR; \
} \
\
ML_METHOD(NAME, MLTimeT, MLNilT) { \
/*&lt;Time
//&lt;TimeZone
//&gt;integer
// Returns the DESC from :mini:`Time` in UTC.
*/ \
	<ref refid="structml__time__t" kindref="compound">ml_time_t</ref> *Time = (<ref refid="structml__time__t" kindref="compound">ml_time_t</ref> *)Args[0]; \
	struct tm TM; \
	gmtime_r(&amp;Time-&gt;Value-&gt;tv_sec, &amp;TM); \
	return EXPR; \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="530" column="9" bodyfile="src/ml_time.c" bodystart="523" bodyend="539"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__time_8c_1a2072c681e892dfe68faaa30f36d42ca6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>static long ml_time_hash</definition>
        <argsstring>(ml_time_t *Time, ml_hash_chain_t *Chain)</argsstring>
        <name>ml_time_hash</name>
        <param>
          <type><ref refid="structml__time__t" kindref="compound">ml_time_t</ref> *</type>
          <declname>Time</declname>
        </param>
        <param>
          <type><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref> *</type>
          <declname>Chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="27" column="13" bodyfile="src/ml_time.c" bodystart="27" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1ab76f8d06c038175a706b00bf39cdf3fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLTimeT,(), &quot;time&quot;,.hash=(void *) ml_time_hash)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLTimeT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;time&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>hash</declname>
          <defval>(void *) ml_time_hash</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="31" column="1" declfile="src/ml_time.c" declline="31" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a907af0efff4d7928b94135e990bbe1b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_time_value</definition>
        <argsstring>(ml_value_t *Value, struct timespec *Time)</argsstring>
        <name>ml_time_value</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>struct timespec *</type>
          <declname>Time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="36" column="6" bodyfile="src/ml_time.c" bodystart="36" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1ae6842ef226bce09f1e9cc67c3b17219c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ML_TYPED_FN</definition>
        <argsstring>(ml_value_is_constant, MLTimeT, ml_value_t *Value)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_value_is_constant</type>
        </param>
        <param>
          <type>MLTimeT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="40" column="12" bodyfile="src/ml_time.c" bodystart="40" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a4d7e8c0309f131ffe4e0287ab9d42765" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLTimeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLTimeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="44" column="1" bodyfile="src/ml_time.c" bodystart="44" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1acde1f79e1372e227ee6a65fae4446bd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_time</definition>
        <argsstring>(time_t Sec, unsigned long NSec)</argsstring>
        <name>ml_time</name>
        <param>
          <type>time_t</type>
          <declname>Sec</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>NSec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="54" column="12" bodyfile="src/ml_time.c" bodystart="54" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1afe0f6df080eb6deb7294a183baa7a2ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_time_parse</definition>
        <argsstring>(const char *Value, int Length)</argsstring>
        <name>ml_time_parse</name>
        <param>
          <type>const char *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="62" column="12" bodyfile="src/ml_time.c" bodystart="62" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a7e3f2088c1f0c307d80ed18d1dfcbec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLTimeT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLTimeT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="105" column="1" bodyfile="src/ml_time.c" bodystart="105" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a59cdcc13608a2b3638b25cd115d54dd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLTimeT, MLStringT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLTimeT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="113" column="1" bodyfile="src/ml_time.c" bodystart="113" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a2db8663978cb86fcd5a8efb17f2a2ffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLTimeT, MLStringT, MLStringT, MLNilT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLTimeT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLNilT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="128" column="1" bodyfile="src/ml_time.c" bodystart="128" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1aff9f95f6a6f32d83d678089a76d5ead4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLTimeT, MLIntegerT, MLIntegerT, MLIntegerT, MLIntegerT, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLTimeT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="144" column="1" bodyfile="src/ml_time.c" bodystart="144" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a4c23ef7b23f9495e38ee9de3cae5aa97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLTimeT, MLIntegerT, MLIntegerT, MLIntegerT, MLIntegerT, MLIntegerT, MLIntegerT, MLNilT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLTimeT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLNilT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="167" column="1" bodyfile="src/ml_time.c" bodystart="167" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a4254ca9aade85b938b4641c127e0d85d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLTimeT, MLIntegerT, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLTimeT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="191" column="1" bodyfile="src/ml_time.c" bodystart="191" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a4ecb5b70ba1ce010910f35d4502a9de1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLTimeT, MLIntegerT, MLIntegerT, MLIntegerT, MLNilT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLTimeT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLNilT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="208" column="1" bodyfile="src/ml_time.c" bodystart="208" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a480b01392721469af3f4a23a2ce2e8cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(&quot;with&quot;, MLTimeT, MLNamesT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>&quot;with&quot;</type>
        </param>
        <param>
          <type>MLTimeT</type>
        </param>
        <param>
          <type>MLNamesT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="226" column="1" bodyfile="src/ml_time.c" bodystart="226" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a4076dd872aa1987b0da0b1b9c3c4b4de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(&quot;with&quot;, MLTimeT, MLNilT, MLNamesT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>&quot;with&quot;</type>
        </param>
        <param>
          <type>MLTimeT</type>
        </param>
        <param>
          <type>MLNilT</type>
        </param>
        <param>
          <type>MLNamesT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="261" column="1" bodyfile="src/ml_time.c" bodystart="261" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a7ee865b3dbe2cac8b8915d1312e156ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;nsec&quot;, MLTimeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;nsec&quot;</type>
        </param>
        <param>
          <type>MLTimeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="297" column="1" bodyfile="src/ml_time.c" bodystart="297" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1ac1be5bfd59ae03bdc3f7d75c5d6fbde2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLTimeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLTimeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="305" column="1" bodyfile="src/ml_time.c" bodystart="305" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a31301d6ddcd60ee0baffad86d2f2cf83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLTimeT, MLNilT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLTimeT</type>
        </param>
        <param>
          <type>MLNilT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="332" column="1" bodyfile="src/ml_time.c" bodystart="332" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1ad78f452dabc63a64db32f64f515c0ffb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLTimeT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLTimeT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="360" column="1" bodyfile="src/ml_time.c" bodystart="360" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a217ffd1c4cd948048fb1ef51e428c770" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLTimeT, MLStringT, MLNilT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLTimeT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLNilT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="377" column="1" bodyfile="src/ml_time.c" bodystart="377" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1adbfee00cc79c59e65df4397269b59cd7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_time_compare</definition>
        <argsstring>(ml_time_t *TimeA, ml_time_t *TimeB)</argsstring>
        <name>ml_time_compare</name>
        <param>
          <type><ref refid="structml__time__t" kindref="compound">ml_time_t</ref> *</type>
          <declname>TimeA</declname>
        </param>
        <param>
          <type><ref refid="structml__time__t" kindref="compound">ml_time_t</ref> *</type>
          <declname>TimeB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="395" column="12" bodyfile="src/ml_time.c" bodystart="395" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a2d6711158687c4e228769aba47ae6d38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;&gt;&quot;, MLTimeT, MLTimeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&lt;&gt;&quot;</type>
        </param>
        <param>
          <type>MLTimeT</type>
        </param>
        <param>
          <type>MLTimeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="404" column="1" bodyfile="src/ml_time.c" bodystart="404" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a90fa0b1c3bf553f7ca76753356d2348e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml_comp_method_time_time</definition>
        <argsstring>(&quot;=&quot;,==)</argsstring>
        <name>ml_comp_method_time_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="421" column="1" declfile="src/ml_time.c" declline="421" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a23819b9e05830ecd8e9e1d5d4da6315d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml_comp_method_time_time</definition>
        <argsstring>(&quot;&gt;&quot;, &gt;)</argsstring>
        <name>ml_comp_method_time_time</name>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="424" column="1" declfile="src/ml_time.c" declline="424" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1ae591c3687043ad7b9a761d283425c801" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml_comp_method_time_time</definition>
        <argsstring>(&quot;&lt;=&quot;,&lt;=)</argsstring>
        <name>ml_comp_method_time_time</name>
        <param>
          <type>&quot;&lt;=&quot;</type>
        </param>
        <param>
          <type>&lt;=</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="425" column="1" declfile="src/ml_time.c" declline="425" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a3cd2e11f65fc0de906d8dae98a7c44cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml_comp_method_time_time</definition>
        <argsstring>(&quot;&gt;=&quot;, &gt;=)</argsstring>
        <name>ml_comp_method_time_time</name>
        <param>
          <type>&quot;&gt;=&quot;</type>
        </param>
        <param>
          <type>&gt;=</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="426" column="1" declfile="src/ml_time.c" declline="426" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a3f925cc5c19577db7b9b27ce633d3701" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&quot;, MLTimeT, MLTimeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&quot;</type>
        </param>
        <param>
          <type>MLTimeT</type>
        </param>
        <param>
          <type>MLTimeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="428" column="1" bodyfile="src/ml_time.c" bodystart="428" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a4aaa479e26b10f29e9f85f3b3eb0da97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;+&quot;, MLTimeT, MLNumberT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;+&quot;</type>
        </param>
        <param>
          <type>MLTimeT</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="441" column="1" bodyfile="src/ml_time.c" bodystart="441" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a9a55a5db7fd434e33d765e06a08509de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&quot;, MLTimeT, MLNumberT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&quot;</type>
        </param>
        <param>
          <type>MLTimeT</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="460" column="1" bodyfile="src/ml_time.c" bodystart="460" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a6b9a630fd67cfa1c94666f1ebd76db63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;precision&quot;, MLTimeT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;precision&quot;</type>
        </param>
        <param>
          <type>MLTimeT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="479" column="1" bodyfile="src/ml_time.c" bodystart="479" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a354925343f43cc0d984e44825cec4667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ENUM_CYCLIC</definition>
        <argsstring>(MLTimeDayT, &quot;time::day&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;, &quot;Sunday&quot;)</argsstring>
        <name>ML_ENUM_CYCLIC</name>
        <param>
          <type>MLTimeDayT</type>
        </param>
        <param>
          <type>&quot;time::day&quot;</type>
        </param>
        <param>
          <type>&quot;Monday&quot;</type>
        </param>
        <param>
          <type>&quot;Tuesday&quot;</type>
        </param>
        <param>
          <type>&quot;Wednesday&quot;</type>
        </param>
        <param>
          <type>&quot;Thursday&quot;</type>
        </param>
        <param>
          <type>&quot;Friday&quot;</type>
        </param>
        <param>
          <type>&quot;Saturday&quot;</type>
        </param>
        <param>
          <type>&quot;Sunday&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="498" column="1" declfile="src/ml_time.c" declline="498" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a0961a4a96b45281d317b461af669f9fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ENUM_CYCLIC</definition>
        <argsstring>(MLTimeMonthT, &quot;time::month&quot;, &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;)</argsstring>
        <name>ML_ENUM_CYCLIC</name>
        <param>
          <type>MLTimeMonthT</type>
        </param>
        <param>
          <type>&quot;time::month&quot;</type>
        </param>
        <param>
          <type>&quot;January&quot;</type>
        </param>
        <param>
          <type>&quot;February&quot;</type>
        </param>
        <param>
          <type>&quot;March&quot;</type>
        </param>
        <param>
          <type>&quot;April&quot;</type>
        </param>
        <param>
          <type>&quot;May&quot;</type>
        </param>
        <param>
          <type>&quot;June&quot;</type>
        </param>
        <param>
          <type>&quot;July&quot;</type>
        </param>
        <param>
          <type>&quot;August&quot;</type>
        </param>
        <param>
          <type>&quot;September&quot;</type>
        </param>
        <param>
          <type>&quot;October&quot;</type>
        </param>
        <param>
          <type>&quot;November&quot;</type>
        </param>
        <param>
          <type>&quot;December&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="508" column="1" declfile="src/ml_time.c" declline="508" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a42b890a599ebbb7a8a8a3fce663229d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLTimeMdays)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLTimeMdays</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="550" column="1" bodyfile="src/ml_time.c" bodystart="550" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="ml__time_8c_1a281aa75e7c21a8c98be4594534de70df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_time_init</definition>
        <argsstring>(stringmap_t *Globals)</argsstring>
        <name>ml_time_init</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Globals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_time.c" line="992" column="6" bodyfile="src/ml_time.c" bodystart="992" bodyend="1016"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ml_time.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_object.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TIMEZONES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;timelib/timelib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_CBOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_cbor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ML_CATEGORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;time&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Overview</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Provides<sp/>time<sp/>and<sp/>date<sp/>operations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="structml__time__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>Value[1];</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}<sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ml_time_hash(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time,<sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Chain)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)Time-&gt;Value-&gt;tv_sec;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">ML_TYPE(MLTimeT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>instant<sp/>in<sp/>time<sp/>with<sp/>nanosecond<sp/>resolution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>.hash<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_time_hash</highlight></codeline>
<codeline lineno="34"><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_time_value(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timespec<sp/>*Time)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>Time[0]<sp/>=<sp/>((<ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*)Value)-&gt;Value[0];</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_value_is_constant,<sp/>MLTimeT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">ML_METHOD(MLTimeT)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//&gt;time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>time()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Type<sp/>=<sp/>MLTimeT;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>clock_gettime(CLOCK_REALTIME,<sp/>Time-&gt;Value);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Time;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_time(time_t<sp/>Sec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>NSec)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Type<sp/>=<sp/>MLTimeT;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Value-&gt;tv_sec<sp/>=<sp/>Sec;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Value-&gt;tv_nsec<sp/>=<sp/>NSec;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Time;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_time_parse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Type<sp/>=<sp/>MLTimeT;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>TM<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Local<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&gt;<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Rest<sp/>=<sp/>strptime(Value,<sp/></highlight><highlight class="stringliteral">&quot;%FT%T&quot;</highlight><highlight class="normal">,<sp/>&amp;TM);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Rest)<sp/>Rest<sp/>=<sp/>strptime(Value,<sp/></highlight><highlight class="stringliteral">&quot;%F<sp/>%T&quot;</highlight><highlight class="normal">,<sp/>&amp;TM);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Rest)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TimeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rest[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Rest;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>NSec<sp/>=<sp/>strtoul(Rest,<sp/>&amp;End,<sp/>10);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>9<sp/>-<sp/>(End<sp/>-<sp/>Rest);<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>NSec<sp/>*=<sp/>10;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Time-&gt;Value-&gt;tv_nsec<sp/>=<sp/>NSec;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rest<sp/>=<sp/>End;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rest[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Local<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rest[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal"><sp/>||<sp/>Rest[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Local<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Next<sp/>=<sp/>Rest<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isdigit(Next[0])<sp/>||<sp/>!isdigit(Next[1]))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TimeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/>=<sp/>3600<sp/>*<sp/>(10<sp/>*<sp/>(Next[0]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>+<sp/>(Next[1]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Next[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)<sp/>++Next;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isdigit(Next[0])<sp/>&amp;&amp;<sp/>isdigit(Next[1]))<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/>+=<sp/>60<sp/>*<sp/>(10<sp/>*<sp/>(Next[0]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>+<sp/>(Next[1]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rest[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>Offset<sp/>=<sp/>-Offset;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strptime(Value,<sp/></highlight><highlight class="stringliteral">&quot;%F&quot;</highlight><highlight class="normal">,<sp/>&amp;TM))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TimeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Local)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Time-&gt;Value-&gt;tv_sec<sp/>=<sp/>timelocal(&amp;TM);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Time-&gt;Value-&gt;tv_sec<sp/>=<sp/>timegm(&amp;TM)<sp/>-<sp/>Offset;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Time;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">ML_METHOD(MLTimeT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//&gt;time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>the<sp/>:mini:`String`<sp/>as<sp/>a<sp/>time<sp/>according<sp/>to<sp/>ISO<sp/>8601.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>time(&quot;2023-02-09T21:19:33.196413266&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_time_parse(ml_string_value(Args[0]),<sp/>ml_string_length(Args[0]));</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">ML_METHOD(MLTimeT,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//&lt;Format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//&gt;time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>the<sp/>:mini:`String`<sp/>as<sp/>a<sp/>time<sp/>according<sp/>to<sp/>specified<sp/>format.<sp/>The<sp/>time<sp/>is<sp/>assumed<sp/>to<sp/>be<sp/>in<sp/>local<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>TM<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strptime(ml_string_value(Args[0]),<sp/>ml_string_value(Args[1]),<sp/>&amp;TM))<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TimeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Type<sp/>=<sp/>MLTimeT;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Value-&gt;tv_sec<sp/>=<sp/>timelocal(&amp;TM);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Time;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">ML_METHOD(MLTimeT,<sp/>MLStringT,<sp/>MLStringT,<sp/>MLNilT)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//&lt;Format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//&lt;TimeZone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//&gt;time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>the<sp/>:mini:`String`<sp/>as<sp/>a<sp/>time<sp/>according<sp/>to<sp/>specified<sp/>format.<sp/>The<sp/>time<sp/>is<sp/>assumed<sp/>to<sp/>be<sp/>in<sp/>UTC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Type<sp/>=<sp/>MLTimeT;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>TM<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strptime(ml_string_value(Args[0]),<sp/>ml_string_value(Args[1]),<sp/>&amp;TM))<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TimeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Value-&gt;tv_sec<sp/>=<sp/>timegm(&amp;TM);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Time;</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">ML_METHOD(MLTimeT,<sp/>MLIntegerT,<sp/>MLIntegerT,<sp/>MLIntegerT,<sp/>MLIntegerT,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//&lt;Year</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//&lt;Month</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//&lt;Day</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//&lt;Hour</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//&lt;Minute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//&lt;Second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//&gt;time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>time<sp/>specified<sp/>by<sp/>the<sp/>provided<sp/>components<sp/>in<sp/>the<sp/>local<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>TM<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_year<sp/>=<sp/>ml_integer_value(Args[0])<sp/>-<sp/>1900;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_mon<sp/>=<sp/>ml_integer_value(Args[1])<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_mday<sp/>=<sp/>ml_integer_value(Args[2]);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_hour<sp/>=<sp/>ml_integer_value(Args[3]);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_min<sp/>=<sp/>ml_integer_value(Args[4]);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_sec<sp/>=<sp/>ml_integer_value(Args[5]);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_isdst<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref>);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Type<sp/>=<sp/>MLTimeT;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Value-&gt;tv_sec<sp/>=<sp/>timelocal(&amp;TM);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Time;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">ML_METHOD(MLTimeT,<sp/>MLIntegerT,<sp/>MLIntegerT,<sp/>MLIntegerT,<sp/>MLIntegerT,<sp/>MLIntegerT,<sp/>MLIntegerT,<sp/>MLNilT)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//&lt;Year</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//&lt;Month</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//&lt;Day</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//&lt;Hour</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//&lt;Minute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//&lt;Second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//&lt;TimeZone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//&gt;time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>time<sp/>specified<sp/>by<sp/>the<sp/>provided<sp/>components<sp/>in<sp/>UTC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>TM<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_year<sp/>=<sp/>ml_integer_value(Args[0])<sp/>-<sp/>1900;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_mon<sp/>=<sp/>ml_integer_value(Args[1])<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_mday<sp/>=<sp/>ml_integer_value(Args[2]);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_hour<sp/>=<sp/>ml_integer_value(Args[3]);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_min<sp/>=<sp/>ml_integer_value(Args[4]);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_sec<sp/>=<sp/>ml_integer_value(Args[5]);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_isdst<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Type<sp/>=<sp/>MLTimeT;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Value-&gt;tv_sec<sp/>=<sp/>timegm(&amp;TM);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Time;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal">ML_METHOD(MLTimeT,<sp/>MLIntegerT,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//&lt;Year</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//&lt;Month</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//&lt;Day</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//&gt;time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>time<sp/>specified<sp/>by<sp/>the<sp/>provided<sp/>components<sp/>in<sp/>the<sp/>local<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>TM<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_year<sp/>=<sp/>ml_integer_value(Args[0])<sp/>-<sp/>1900;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_mon<sp/>=<sp/>ml_integer_value(Args[1])<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_mday<sp/>=<sp/>ml_integer_value(Args[2]);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_isdst<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref>);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Type<sp/>=<sp/>MLTimeT;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Value-&gt;tv_sec<sp/>=<sp/>timelocal(&amp;TM);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Time;</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">ML_METHOD(MLTimeT,<sp/>MLIntegerT,<sp/>MLIntegerT,<sp/>MLIntegerT,<sp/>MLNilT)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//&lt;Year</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//&lt;Month</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//&lt;Day</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//&lt;TimeZone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//&gt;time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>time<sp/>specified<sp/>by<sp/>the<sp/>provided<sp/>components<sp/>in<sp/>UTC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>TM<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_year<sp/>=<sp/>ml_integer_value(Args[0])<sp/>-<sp/>1900;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_mon<sp/>=<sp/>ml_integer_value(Args[1])<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_mday<sp/>=<sp/>ml_integer_value(Args[2]);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_isdst<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref>);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Type<sp/>=<sp/>MLTimeT;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Value-&gt;tv_sec<sp/>=<sp/>timegm(&amp;TM);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Time;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;with&quot;</highlight><highlight class="normal">,<sp/>MLTimeT,<sp/>MLNamesT)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//&lt;Time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//&lt;Component,Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//&gt;time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Time`<sp/>with<sp/>the<sp/>the<sp/>specified<sp/>components<sp/>updated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>2;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/>(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>TM<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>localtime_r(&amp;Time-&gt;Value-&gt;tv_sec,<sp/>&amp;TM);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Arg<sp/>=<sp/>Args<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_FOREACH(Args[1],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Part<sp/>=<sp/>ml_string_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Part,<sp/></highlight><highlight class="stringliteral">&quot;year&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TM.tm_year<sp/>=<sp/>ml_integer_value(*Arg++)<sp/>-<sp/>1900;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Part,<sp/></highlight><highlight class="stringliteral">&quot;month&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TM.tm_mon<sp/>=<sp/>ml_integer_value(*Arg++)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Part,<sp/></highlight><highlight class="stringliteral">&quot;day&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TM.tm_mday<sp/>=<sp/>ml_integer_value(*Arg++);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Part,<sp/></highlight><highlight class="stringliteral">&quot;hour&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TM.tm_hour<sp/>=<sp/>ml_integer_value(*Arg++);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Part,<sp/></highlight><highlight class="stringliteral">&quot;minute&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TM.tm_min<sp/>=<sp/>ml_integer_value(*Arg++);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Part,<sp/></highlight><highlight class="stringliteral">&quot;second&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TM.tm_sec<sp/>=<sp/>ml_integer_value(*Arg++);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>time<sp/>component<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Part);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>Time<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref>);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Type<sp/>=<sp/>MLTimeT;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Value-&gt;tv_sec<sp/>=<sp/>timelocal(&amp;TM);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Time;</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;with&quot;</highlight><highlight class="normal">,<sp/>MLTimeT,<sp/>MLNilT,<sp/>MLNamesT)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//&lt;Time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//&lt;TimeZone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//&lt;Component,Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//&gt;time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Time`<sp/>with<sp/>the<sp/>the<sp/>specified<sp/>components<sp/>updated<sp/>in<sp/>UTC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_CHECK_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>3;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/>(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>TM<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>gmtime_r(&amp;Time-&gt;Value-&gt;tv_sec,<sp/>&amp;TM);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Arg<sp/>=<sp/>Args<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_FOREACH(Args[2],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Part<sp/>=<sp/>ml_string_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Part,<sp/></highlight><highlight class="stringliteral">&quot;year&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TM.tm_year<sp/>=<sp/>ml_integer_value(*Arg++)<sp/>-<sp/>1900;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Part,<sp/></highlight><highlight class="stringliteral">&quot;month&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TM.tm_mon<sp/>=<sp/>ml_integer_value(*Arg++)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Part,<sp/></highlight><highlight class="stringliteral">&quot;day&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TM.tm_mday<sp/>=<sp/>ml_integer_value(*Arg++);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Part,<sp/></highlight><highlight class="stringliteral">&quot;hour&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TM.tm_hour<sp/>=<sp/>ml_integer_value(*Arg++);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Part,<sp/></highlight><highlight class="stringliteral">&quot;minute&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TM.tm_min<sp/>=<sp/>ml_integer_value(*Arg++);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Part,<sp/></highlight><highlight class="stringliteral">&quot;second&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TM.tm_sec<sp/>=<sp/>ml_integer_value(*Arg++);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>time<sp/>component<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Part);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>Time<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref>);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Type<sp/>=<sp/>MLTimeT;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Value-&gt;tv_sec<sp/>=<sp/>timegm(&amp;TM);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Time;</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;nsec&quot;</highlight><highlight class="normal">,<sp/>MLTimeT)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">//&lt;Time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>nanoseconds<sp/>component<sp/>of<sp/>:mini:`Time`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/>(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Time-&gt;Value-&gt;tv_nsec);</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLTimeT)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">//&lt;Time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>:mini:`Time`<sp/>as<sp/>a<sp/>local<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/>(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>TM<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>localtime_r(&amp;Time-&gt;Value-&gt;tv_sec,<sp/>&amp;TM);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Temp[60];</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>NSec<sp/>=<sp/>Time-&gt;Value-&gt;tv_nsec<sp/>/<sp/>1000;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NSec)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Width<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(NSec<sp/>%<sp/>10<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Width;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NSec<sp/>/=<sp/>10;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Length<sp/>=<sp/>strftime(Temp,<sp/>40,<sp/></highlight><highlight class="stringliteral">&quot;%FT%T&quot;</highlight><highlight class="normal">,<sp/>&amp;TM);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Length<sp/>+=<sp/>sprintf(Temp<sp/>+<sp/>Length,<sp/></highlight><highlight class="stringliteral">&quot;.%0*lu&quot;</highlight><highlight class="normal">,<sp/>Width,<sp/>NSec);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Length<sp/>=<sp/>strftime(Temp,<sp/>60,<sp/></highlight><highlight class="stringliteral">&quot;%FT%T&quot;</highlight><highlight class="normal">,<sp/>&amp;TM);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Temp,<sp/>Length);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLTimeT,<sp/>MLNilT)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">//&lt;Time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//&lt;TimeZone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>:mini:`Time`<sp/>as<sp/>a<sp/>UTC<sp/>time<sp/>according<sp/>to<sp/>ISO<sp/>8601.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/>(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>TM<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>gmtime_r(&amp;Time-&gt;Value-&gt;tv_sec,<sp/>&amp;TM);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Temp[60];</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>NSec<sp/>=<sp/>Time-&gt;Value-&gt;tv_nsec<sp/>/<sp/>1000;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NSec)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Width<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(NSec<sp/>%<sp/>10<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Width;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NSec<sp/>/=<sp/>10;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Length<sp/>=<sp/>strftime(Temp,<sp/>40,<sp/></highlight><highlight class="stringliteral">&quot;%FT%T&quot;</highlight><highlight class="normal">,<sp/>&amp;TM);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Length<sp/>+=<sp/>sprintf(Temp<sp/>+<sp/>Length,<sp/></highlight><highlight class="stringliteral">&quot;.%0*luZ&quot;</highlight><highlight class="normal">,<sp/>Width,<sp/>NSec);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Length<sp/>=<sp/>strftime(Temp,<sp/>60,<sp/></highlight><highlight class="stringliteral">&quot;%FT%TZ&quot;</highlight><highlight class="normal">,<sp/>&amp;TM);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Temp,<sp/>Length);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLTimeT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">//&lt;Time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">//&lt;Format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>:mini:`Time`<sp/>as<sp/>a<sp/>local<sp/>time<sp/>according<sp/>to<sp/>the<sp/>specified<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/>(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Format<sp/>=<sp/>ml_string_value(Args[2]);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>TM<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>localtime_r(&amp;Time-&gt;Value-&gt;tv_sec,<sp/>&amp;TM);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Temp[120];</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>strftime(Temp,<sp/>120,<sp/>Format,<sp/>&amp;TM);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Temp,<sp/>Length);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLTimeT,<sp/>MLStringT,<sp/>MLNilT)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//&lt;Time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//&lt;Format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment">//&lt;TimeZone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>:mini:`Time`<sp/>as<sp/>a<sp/>UTC<sp/>time<sp/>according<sp/>to<sp/>the<sp/>specified<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/>(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Format<sp/>=<sp/>ml_string_value(Args[2]);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>TM<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>gmtime_r(&amp;Time-&gt;Value-&gt;tv_sec,<sp/>&amp;TM);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Temp[120];</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>strftime(Temp,<sp/>120,<sp/>Format,<sp/>&amp;TM);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Temp,<sp/>Length);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_time_compare(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*TimeA,<sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*TimeB)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Diff<sp/>=<sp/>difftime(TimeA-&gt;Value-&gt;tv_sec,<sp/>TimeB-&gt;Value-&gt;tv_sec);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Diff<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Diff<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TimeA-&gt;Value-&gt;tv_nsec<sp/>&lt;<sp/>TimeB-&gt;Value-&gt;tv_nsec)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TimeA-&gt;Value-&gt;tv_nsec<sp/>&gt;<sp/>TimeB-&gt;Value-&gt;tv_nsec)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLTimeT,<sp/>MLTimeT)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compares<sp/>the<sp/>times<sp/>:mini:`A`<sp/>and<sp/>:mini:`B`<sp/>and<sp/>returns<sp/>:mini:`-1`,<sp/>:mini:`0`<sp/>or<sp/>:mini:`1`<sp/>respectively.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*TimeA<sp/>=<sp/>(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*TimeB<sp/>=<sp/>(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(ml_time_compare(TimeA,<sp/>TimeB));</highlight></codeline>
<codeline lineno="412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_comp_method_time_time(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="415"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ML_METHOD(NAME,<sp/>MLTimeT,<sp/>MLTimeT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="416"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_time_t<sp/>*TimeA<sp/>=<sp/>(ml_time_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="417"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_time_t<sp/>*TimeB<sp/>=<sp/>(ml_time_t<sp/>*)Args[1];<sp/>\</highlight></codeline>
<codeline lineno="418"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_time_compare(TimeA,<sp/>TimeB)<sp/>SYMBOL<sp/>0<sp/>?<sp/>Args[1]<sp/>:<sp/>MLNil;<sp/>\</highlight></codeline>
<codeline lineno="419"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal">ml_comp_method_time_time(</highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">,<sp/>==);</highlight></codeline>
<codeline lineno="422"><highlight class="normal">ml_comp_method_time_time(</highlight><highlight class="stringliteral">&quot;!=&quot;</highlight><highlight class="normal">,<sp/>!=);</highlight></codeline>
<codeline lineno="423"><highlight class="normal">ml_comp_method_time_time(</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">,<sp/>&lt;);</highlight></codeline>
<codeline lineno="424"><highlight class="normal">ml_comp_method_time_time(</highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">,<sp/>&gt;);</highlight></codeline>
<codeline lineno="425"><highlight class="normal">ml_comp_method_time_time(</highlight><highlight class="stringliteral">&quot;&lt;=&quot;</highlight><highlight class="normal">,<sp/>&lt;=);</highlight></codeline>
<codeline lineno="426"><highlight class="normal">ml_comp_method_time_time(</highlight><highlight class="stringliteral">&quot;&gt;=&quot;</highlight><highlight class="normal">,<sp/>&gt;=);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/>MLTimeT,<sp/>MLTimeT)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//&lt;End</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//&lt;Start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">//&gt;real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>time<sp/>elasped<sp/>betwen<sp/>:mini:`Start`<sp/>and<sp/>:mini:`End`<sp/>in<sp/>seconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>time(&quot;2022-04-01<sp/>12:00:00&quot;)<sp/>-<sp/>time(&quot;2022-04-01<sp/>11:00:00&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*TimeA<sp/>=<sp/>(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*TimeB<sp/>=<sp/>(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Sec<sp/>=<sp/>difftime(TimeA-&gt;Value-&gt;tv_sec,<sp/>TimeB-&gt;Value-&gt;tv_sec);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>NSec<sp/>=<sp/>((double)TimeA-&gt;Value-&gt;tv_nsec<sp/>-<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)TimeB-&gt;Value-&gt;tv_nsec)<sp/>/<sp/>1000000000.0;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(Sec<sp/>+<sp/>NSec);</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,<sp/>MLTimeT,<sp/>MLNumberT)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment">//&lt;Start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="comment">//&lt;Duration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment">//&gt;time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>time<sp/>:mini:`Duration`<sp/>seconds<sp/>after<sp/>:mini:`Start`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>time(&quot;2022-04-01<sp/>12:00:00&quot;)<sp/>+<sp/>3600</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*TimeA<sp/>=<sp/>(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Diff<sp/>=<sp/>ml_real_value(Args[1]);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>DiffSec<sp/>=<sp/>floor(Diff);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>DiffNSec<sp/>=<sp/>(Diff<sp/>-<sp/>DiffSec)<sp/>*<sp/>1000000000.0;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>time_t<sp/>Sec<sp/>=<sp/>TimeA-&gt;Value-&gt;tv_sec<sp/>+<sp/>DiffSec;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>NSec<sp/>=<sp/>TimeA-&gt;Value-&gt;tv_nsec<sp/>+<sp/>DiffNSec;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NSec<sp/>&gt;=<sp/>1000000000)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NSec<sp/>-=<sp/>1000000000;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Sec;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_time(Sec,<sp/>NSec);</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/>MLTimeT,<sp/>MLNumberT)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="comment">//&lt;Start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="comment">//&lt;Duration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">//&gt;time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>time<sp/>:mini:`Duration`<sp/>seconds<sp/>before<sp/>:mini:`Start`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>time(&quot;2022-04-01<sp/>12:00:00&quot;)<sp/>-<sp/>3600</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*TimeA<sp/>=<sp/>(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Diff<sp/>=<sp/>-ml_real_value(Args[1]);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>DiffSec<sp/>=<sp/>floor(Diff);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>DiffNSec<sp/>=<sp/>(Diff<sp/>-<sp/>DiffSec)<sp/>*<sp/>1000000000.0;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>time_t<sp/>Sec<sp/>=<sp/>TimeA-&gt;Value-&gt;tv_sec<sp/>+<sp/>DiffSec;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>NSec<sp/>=<sp/>TimeA-&gt;Value-&gt;tv_nsec<sp/>+<sp/>DiffNSec;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NSec<sp/>&gt;=<sp/>1000000000)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NSec<sp/>-=<sp/>1000000000;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Sec;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_time(Sec,<sp/>NSec);</highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;precision&quot;</highlight><highlight class="normal">,<sp/>MLTimeT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*TimeA<sp/>=<sp/>(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>time_t<sp/>Sec<sp/>=<sp/>TimeA-&gt;Value-&gt;tv_sec;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>NSec<sp/>=<sp/>TimeA-&gt;Value-&gt;tv_nsec;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ml_integer_value(Args[1]))<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/>NSec<sp/>=<sp/>0;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>NSec<sp/>=<sp/>(NSec<sp/>/<sp/>100000000)<sp/>*<sp/>100000000;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/>NSec<sp/>=<sp/>(NSec<sp/>/<sp/>10000000)<sp/>*<sp/>10000000;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/>NSec<sp/>=<sp/>(NSec<sp/>/<sp/>1000000)<sp/>*<sp/>1000000;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/>NSec<sp/>=<sp/>(NSec<sp/>/<sp/>100000)<sp/>*<sp/>100000;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:<sp/>NSec<sp/>=<sp/>(NSec<sp/>/<sp/>10000)<sp/>*<sp/>10000;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:<sp/>NSec<sp/>=<sp/>(NSec<sp/>/<sp/>1000)<sp/>*<sp/>1000;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7:<sp/>NSec<sp/>=<sp/>(NSec<sp/>/<sp/>100)<sp/>*<sp/>100;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:<sp/>NSec<sp/>=<sp/>(NSec<sp/>/<sp/>10)<sp/>*<sp/>10;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_time(Sec,<sp/>NSec);</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal">ML_ENUM_CYCLIC(MLTimeDayT,<sp/></highlight><highlight class="stringliteral">&quot;time::day&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Monday&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Tuesday&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Wednesday&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Thursday&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Friday&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Saturday&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Sunday&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal">);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal">ML_ENUM_CYCLIC(MLTimeMonthT,<sp/></highlight><highlight class="stringliteral">&quot;time::month&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;January&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;February&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;March&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;April&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;May&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;June&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;July&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;August&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;September&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;October&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;November&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;December&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal">);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_TIME_PART(NAME,<sp/>DESC,<sp/>EXPR)<sp/>\</highlight></codeline>
<codeline lineno="524"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="525"><highlight class="preprocessor">ML_METHOD(NAME,<sp/>MLTimeT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="526"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;Time</highlight></codeline>
<codeline lineno="527"><highlight class="comment">//&gt;integer</highlight></codeline>
<codeline lineno="528"><highlight class="comment">//<sp/>Returns<sp/>the<sp/>DESC<sp/>from<sp/>:mini:`Time`<sp/>in<sp/>local<sp/>time.</highlight></codeline>
<codeline lineno="529"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="530"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_time_t<sp/>*Time<sp/>=<sp/>(ml_time_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="531"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>tm<sp/>TM;<sp/>\</highlight></codeline>
<codeline lineno="532"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>localtime_r(&amp;Time-&gt;Value-&gt;tv_sec,<sp/>&amp;TM);<sp/>\</highlight></codeline>
<codeline lineno="533"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>EXPR;<sp/>\</highlight></codeline>
<codeline lineno="534"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="535"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="536"><highlight class="preprocessor">ML_METHOD(NAME,<sp/>MLTimeT,<sp/>MLNilT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="537"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;Time</highlight></codeline>
<codeline lineno="538"><highlight class="comment">//&lt;TimeZone</highlight></codeline>
<codeline lineno="539"><highlight class="comment">//&gt;integer</highlight></codeline>
<codeline lineno="540"><highlight class="comment">//<sp/>Returns<sp/>the<sp/>DESC<sp/>from<sp/>:mini:`Time`<sp/>in<sp/>UTC.</highlight></codeline>
<codeline lineno="541"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="542"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_time_t<sp/>*Time<sp/>=<sp/>(ml_time_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="543"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>tm<sp/>TM;<sp/>\</highlight></codeline>
<codeline lineno="544"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>gmtime_r(&amp;Time-&gt;Value-&gt;tv_sec,<sp/>&amp;TM);<sp/>\</highlight></codeline>
<codeline lineno="545"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>EXPR;<sp/>\</highlight></codeline>
<codeline lineno="546"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal">ML_TIME_PART(</highlight><highlight class="stringliteral">&quot;year&quot;</highlight><highlight class="normal">,<sp/>year,<sp/>ml_integer(TM.tm_year<sp/>+<sp/>1900))</highlight></codeline>
<codeline lineno="549"><highlight class="normal">ML_TIME_PART(&quot;month&quot;,<sp/>month,<sp/>ml_enum_value(MLTimeMonthT,<sp/>TM.tm_mon<sp/>+<sp/>1))</highlight></codeline>
<codeline lineno="550"><highlight class="normal">ML_TIME_PART(&quot;day&quot;,<sp/>date,<sp/>ml_integer(TM.tm_mday))</highlight></codeline>
<codeline lineno="551"><highlight class="normal">ML_TIME_PART(&quot;yday&quot;,<sp/>number<sp/>of<sp/>days<sp/>from<sp/>the<sp/>start<sp/>of<sp/>the<sp/>year,<sp/>ml_integer(TM.tm_yday<sp/>+<sp/>1))</highlight></codeline>
<codeline lineno="552"><highlight class="normal">ML_TIME_PART(&quot;wday&quot;,<sp/>day<sp/>of<sp/>the<sp/>week,<sp/>ml_enum_value(MLTimeDayT,<sp/>TM.tm_wday<sp/>?:<sp/>7))</highlight></codeline>
<codeline lineno="553"><highlight class="normal">ML_TIME_PART(&quot;hour&quot;,<sp/>hour,<sp/>ml_integer(TM.tm_hour))</highlight></codeline>
<codeline lineno="554"><highlight class="normal">ML_TIME_PART(&quot;minute&quot;,<sp/>minute,<sp/>ml_integer(TM.tm_min))</highlight></codeline>
<codeline lineno="555"><highlight class="normal">ML_TIME_PART(&quot;second&quot;,<sp/>second,<sp/>ml_integer(TM.tm_sec))</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal">ML_FUNCTION(MLTimeMdays)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="comment">//@time::mdays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="comment">//&lt;Year</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment">//&lt;Month</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Year<sp/>=<sp/>ml_integer_value(Args[0]);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Month<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Month<sp/>&lt;<sp/>1<sp/>||<sp/>Month<sp/>&gt;<sp/>12)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>month&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Year<sp/>%<sp/>4<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>(Year<sp/>%<sp/>100<sp/>!=<sp/>0<sp/>||<sp/>Year<sp/>%<sp/>400<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Days[]<sp/>=<sp/>{31,<sp/>29,<sp/>31,<sp/>30,<sp/>31,<sp/>30,<sp/>31,<sp/>31,<sp/>30,<sp/>31,<sp/>30,<sp/>31};</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Days[Month<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Days[]<sp/>=<sp/>{31,<sp/>28,<sp/>31,<sp/>30,<sp/>31,<sp/>30,<sp/>31,<sp/>31,<sp/>30,<sp/>31,<sp/>30,<sp/>31};</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Days[Month<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TIMEZONES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Id;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>timelib_tzinfo<sp/>*Info;</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}<sp/>ml_time_zone_t;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLTimeZoneT[];</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_time_zone(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Id)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!timelib_timezone_id_is_valid(Id,<sp/>timelib_builtin_db()))<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TimeZoneError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Time<sp/>zone<sp/>%s<sp/>not<sp/>found&quot;</highlight><highlight class="normal">,<sp/>Id);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)stringmap_slot(MLTimeZoneT-&gt;Exports,<sp/>Id);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_time_zone_t<sp/>*TimeZone<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(ml_time_zone_t);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeZone-&gt;Type<sp/>=<sp/>MLTimeZoneT;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeZone-&gt;Id<sp/>=<sp/>Id;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)TimeZone;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Slot[0];</highlight></codeline>
<codeline lineno="599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_time_zone_parse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_time_zone(Id);</highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_time_zone_deref(ml_time_zone_t<sp/>*TimeZone)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!TimeZone-&gt;Info)<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeZone-&gt;Info<sp/>=<sp/>timelib_parse_tzfile(TimeZone-&gt;Id,<sp/>timelib_builtin_db(),<sp/>&amp;Error);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)TimeZone;</highlight></codeline>
<codeline lineno="611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_time_zone_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(ml_time_zone(tzname[0]));</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*NameArg<sp/>=<sp/>ml_deref(Args[0]);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(NameArg,<sp/>MLStringT))<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>string<sp/>not<sp/>%s<sp/>for<sp/>arg<sp/>1&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(NameArg)-&gt;Name);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(NameArg);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(ml_time_zone(Name));</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal">ML_TYPE(MLTimeZoneTypeT,<sp/>(MLTypeT,<sp/>MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;type(time::zone)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_time_zone_call</highlight></codeline>
<codeline lineno="627"><highlight class="normal">);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal">ML_TYPE(MLTimeZoneT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;time::zone&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>time<sp/>zone.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>.deref<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_time_zone_deref</highlight></codeline>
<codeline lineno="632"><highlight class="normal">);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,<sp/>MLTimeZoneTypeT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment">//&gt;time::zone|error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>time<sp/>zone<sp/>identified<sp/>by<sp/>:mini:`Name`<sp/>or<sp/>an<sp/>error<sp/>if<sp/>no<sp/>time<sp/>zone<sp/>is<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_time_zone(Name);</highlight></codeline>
<codeline lineno="640"><highlight class="normal">}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>timelib_tzdb_index_entry<sp/>*Entries;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Total,<sp/>Index;</highlight></codeline>
<codeline lineno="646"><highlight class="normal">}<sp/>ml_time_zone_iter_t;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal">ML_TYPE(MLTimeZoneIterT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;time::zone::iter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLTimeZoneTypeT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_time_zone_iter_t<sp/>*Iter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(ml_time_zone_iter_t);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Type<sp/>=<sp/>MLTimeZoneIterT;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Entries<sp/>=<sp/>timelib_timezone_identifiers_list(timelib_builtin_db(),<sp/>&amp;Iter-&gt;Total);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLTimeZoneIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/>ml_time_zone_iter_t<sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++Iter-&gt;Index<sp/>&gt;=<sp/>Iter-&gt;Total)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLTimeZoneIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/>ml_time_zone_iter_t<sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iter-&gt;Index<sp/>&gt;=<sp/>Iter-&gt;Total)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;StateError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>iterator<sp/>state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_string_copy(Iter-&gt;Entries[Iter-&gt;Index].id,<sp/>-1));</highlight></codeline>
<codeline lineno="666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLTimeZoneIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/>ml_time_zone_iter_t<sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iter-&gt;Index<sp/>&gt;=<sp/>Iter-&gt;Total)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;StateError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>iterator<sp/>state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>Iter-&gt;Entries[Iter-&gt;Index].id;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_time_zone(Name));</highlight></codeline>
<codeline lineno="672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLTimeZoneT)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="comment">//&lt;TimeZone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>the<sp/>name<sp/>of<sp/>:mini:`TimeZone`<sp/>to<sp/>:mini:`Buffer`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_time_zone_t<sp/>*TimeZone<sp/>=<sp/>(ml_time_zone_t<sp/>*)Args[1];</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>TimeZone-&gt;Info-&gt;name,<sp/>strlen(TimeZone-&gt;Info-&gt;name));</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal">ML_METHOD(MLTimeT,<sp/>MLStringT,<sp/>MLTimeZoneT)<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="comment">//&lt;TimeZone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="comment">//&gt;time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>the<sp/>:mini:`String`<sp/>as<sp/>a<sp/>time<sp/>in<sp/>the<sp/>specified<sp/>time<sp/>zone.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>time(&quot;2023-02-09T21:19:33.196413266&quot;,<sp/>time::zone::&quot;America/Chicago&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>TM<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>NSec<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&gt;<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Rest<sp/>=<sp/>strptime(Value,<sp/></highlight><highlight class="stringliteral">&quot;%FT%T&quot;</highlight><highlight class="normal">,<sp/>&amp;TM);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Rest)<sp/>Rest<sp/>=<sp/>strptime(Value,<sp/></highlight><highlight class="stringliteral">&quot;%F<sp/>%T&quot;</highlight><highlight class="normal">,<sp/>&amp;TM);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Rest)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TimeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rest[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Rest;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NSec<sp/>=<sp/>strtoul(Rest,<sp/>&amp;End,<sp/>10);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>9<sp/>-<sp/>(End<sp/>-<sp/>Rest);<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>NSec<sp/>*=<sp/>10;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rest<sp/>=<sp/>End;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rest[0])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TimeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strptime(Value,<sp/></highlight><highlight class="stringliteral">&quot;%F&quot;</highlight><highlight class="normal">,<sp/>&amp;TM))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TimeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_time_zone_t<sp/>*TimeZone<sp/>=<sp/>(ml_time_zone_t<sp/>*)Args[1];</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>timelib_time<sp/>TL<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>TL.y<sp/>=<sp/>TM.tm_year<sp/>+<sp/>1900;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>TL.m<sp/>=<sp/>TM.tm_mon<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>TL.d<sp/>=<sp/>TM.tm_mday;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>TL.h<sp/>=<sp/>TM.tm_hour;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>TL.i<sp/>=<sp/>TM.tm_min;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>TL.s<sp/>=<sp/>TM.tm_sec;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>timelib_set_timezone(&amp;TL,<sp/>TimeZone-&gt;Info);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>timelib_update_ts(&amp;TL,<sp/>TimeZone-&gt;Info);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref>);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Type<sp/>=<sp/>MLTimeT;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Value-&gt;tv_sec<sp/>=<sp/>TL.sse;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Value-&gt;tv_nsec<sp/>=<sp/>NSec;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Time;</highlight></codeline>
<codeline lineno="724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal">ML_METHOD(MLTimeT,<sp/>MLStringT,<sp/>MLStringT,<sp/>MLTimeZoneT)<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="comment">//&lt;Format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="comment">//&lt;TimeZone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="comment">//&gt;time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>the<sp/>:mini:`String`<sp/>as<sp/>a<sp/>time<sp/>according<sp/>to<sp/>specified<sp/>format<sp/>in<sp/>the<sp/>specified<sp/>time<sp/>zone.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>TM<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strptime(ml_string_value(Args[0]),<sp/>ml_string_value(Args[1]),<sp/>&amp;TM))<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TimeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_time_zone_t<sp/>*TimeZone<sp/>=<sp/>(ml_time_zone_t<sp/>*)Args[1];</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>timelib_time<sp/>TL<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>TL.y<sp/>=<sp/>TM.tm_year<sp/>+<sp/>1900;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>TL.m<sp/>=<sp/>TM.tm_mon<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>TL.d<sp/>=<sp/>TM.tm_mday;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>TL.h<sp/>=<sp/>TM.tm_hour;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>TL.i<sp/>=<sp/>TM.tm_min;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>TL.s<sp/>=<sp/>TM.tm_sec;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>timelib_set_timezone(&amp;TL,<sp/>TimeZone-&gt;Info);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>timelib_update_ts(&amp;TL,<sp/>TimeZone-&gt;Info);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref>);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Type<sp/>=<sp/>MLTimeT;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Value-&gt;tv_sec<sp/>=<sp/>TL.sse;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Time;</highlight></codeline>
<codeline lineno="750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal">ML_METHOD(MLTimeT,<sp/>MLIntegerT,<sp/>MLIntegerT,<sp/>MLIntegerT,<sp/>MLIntegerT,<sp/>MLIntegerT,<sp/>MLIntegerT,<sp/>MLTimeZoneT)<sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="comment">//&lt;Year</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="comment">//&lt;Month</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="comment">//&lt;Day</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment">//&lt;Hour</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="comment">//&lt;Minute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="comment">//&lt;Second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="comment">//&lt;TimeZone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="comment">//&gt;time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>time<sp/>specified<sp/>by<sp/>the<sp/>provided<sp/>components<sp/>in<sp/>the<sp/>specified<sp/>time<sp/>zone.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>timelib_time<sp/>TL<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>TL.y<sp/>=<sp/>ml_integer_value(Args[0]);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>TL.m<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>TL.d<sp/>=<sp/>ml_integer_value(Args[2]);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>TL.h<sp/>=<sp/>ml_integer_value(Args[3]);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>TL.i<sp/>=<sp/>ml_integer_value(Args[4]);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>TL.s<sp/>=<sp/>ml_integer_value(Args[5]);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_time_zone_t<sp/>*TimeZone<sp/>=<sp/>(ml_time_zone_t<sp/>*)Args[6];</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>timelib_set_timezone(&amp;TL,<sp/>TimeZone-&gt;Info);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>timelib_update_ts(&amp;TL,<sp/>TimeZone-&gt;Info);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref>);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Type<sp/>=<sp/>MLTimeT;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Value-&gt;tv_sec<sp/>=<sp/>TL.sse;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Time;</highlight></codeline>
<codeline lineno="776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal">ML_METHOD(MLTimeT,<sp/>MLIntegerT,<sp/>MLIntegerT,<sp/>MLIntegerT,<sp/>MLTimeZoneT)<sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="comment">//&lt;Year</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="comment">//&lt;Month</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="comment">//&lt;Day</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="comment">//&lt;TimeZone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="comment">//&gt;time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>time<sp/>specified<sp/>by<sp/>the<sp/>provided<sp/>components<sp/>in<sp/>the<sp/>specified<sp/>time<sp/>zone.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>timelib_time<sp/>TL<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>TL.y<sp/>=<sp/>ml_integer_value(Args[0]);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>TL.m<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>TL.d<sp/>=<sp/>ml_integer_value(Args[2]);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_time_zone_t<sp/>*TimeZone<sp/>=<sp/>(ml_time_zone_t<sp/>*)Args[3];</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>timelib_set_timezone(&amp;TL,<sp/>TimeZone-&gt;Info);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>timelib_update_ts(&amp;TL,<sp/>TimeZone-&gt;Info);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref>);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Type<sp/>=<sp/>MLTimeT;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Value-&gt;tv_sec<sp/>=<sp/>TL.sse;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Time;</highlight></codeline>
<codeline lineno="796"><highlight class="normal">}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;with&quot;</highlight><highlight class="normal">,<sp/>MLTimeT,<sp/>MLTimeZoneT,<sp/>MLNamesT)<sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="comment">//&lt;Time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="comment">//&lt;TimeZone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="comment">//&lt;Component,Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="comment">//&gt;time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Time`<sp/>with<sp/>the<sp/>the<sp/>specified<sp/>components<sp/>updated<sp/>in<sp/>the<sp/>specified<sp/>time<sp/>zone.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_CHECK_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>3;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/>(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_time_zone_t<sp/>*TimeZone<sp/>=<sp/>(ml_time_zone_t<sp/>*)Args[1];</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>timelib_time<sp/>TL<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>timelib_set_timezone(&amp;TL,<sp/>TimeZone-&gt;Info);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>timelib_unixtime2local(&amp;TL,<sp/>Time-&gt;Value-&gt;tv_sec);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Arg<sp/>=<sp/>Args<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_FOREACH(Args[2],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Part<sp/>=<sp/>ml_string_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Part,<sp/></highlight><highlight class="stringliteral">&quot;year&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TL.y<sp/>=<sp/>ml_integer_value(*Arg++);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Part,<sp/></highlight><highlight class="stringliteral">&quot;month&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TL.m<sp/>=<sp/>ml_integer_value(*Arg++);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Part,<sp/></highlight><highlight class="stringliteral">&quot;day&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TL.d<sp/>=<sp/>ml_integer_value(*Arg++);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Part,<sp/></highlight><highlight class="stringliteral">&quot;hour&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TL.h<sp/>=<sp/>ml_integer_value(*Arg++);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Part,<sp/></highlight><highlight class="stringliteral">&quot;minute&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TL.i<sp/>=<sp/>ml_integer_value(*Arg++);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Part,<sp/></highlight><highlight class="stringliteral">&quot;second&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TL.s<sp/>=<sp/>ml_integer_value(*Arg++);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>time<sp/>component<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Part);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>timelib_update_ts(&amp;TL,<sp/>TimeZone-&gt;Info);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>Time<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref>);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Type<sp/>=<sp/>MLTimeT;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>Time-&gt;Value-&gt;tv_sec<sp/>=<sp/>TL.sse;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Time;</highlight></codeline>
<codeline lineno="835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLTimeT,<sp/>MLTimeZoneT)<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="comment">//&lt;Time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="comment">//&lt;TimeZone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>:mini:`Time`<sp/>as<sp/>a<sp/>time<sp/>in<sp/>:mini:`TimeZone`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/>(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_time_zone_t<sp/>*TimeZone<sp/>=<sp/>(ml_time_zone_t<sp/>*)Args[2];</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>timelib_time<sp/>TL<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>timelib_set_timezone(&amp;TL,<sp/>TimeZone-&gt;Info);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>timelib_unixtime2local(&amp;TL,<sp/>Time-&gt;Value-&gt;tv_sec);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>TM<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_year<sp/>=<sp/>TL.y<sp/>-<sp/>1900;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_mon<sp/>=<sp/>TL.m<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_mday<sp/>=<sp/>TL.d;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_hour<sp/>=<sp/>TL.h;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_min<sp/>=<sp/>TL.i;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_sec<sp/>=<sp/>TL.s;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_yday<sp/>=<sp/>timelib_day_of_year(TL.y,<sp/>TL.m,<sp/>TL.d);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_wday<sp/>=<sp/>timelib_day_of_week(TL.y,<sp/>TL.m,<sp/>TL.d);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Temp[60];</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>NSec<sp/>=<sp/>Time-&gt;Value-&gt;tv_nsec<sp/>/<sp/>1000;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NSec)<sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Width<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(NSec<sp/>%<sp/>10<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Width;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NSec<sp/>/=<sp/>10;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Length<sp/>=<sp/>strftime(Temp,<sp/>40,<sp/></highlight><highlight class="stringliteral">&quot;%FT%T&quot;</highlight><highlight class="normal">,<sp/>&amp;TM);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Length<sp/>+=<sp/>sprintf(Temp<sp/>+<sp/>Length,<sp/></highlight><highlight class="stringliteral">&quot;.%0*lu&quot;</highlight><highlight class="normal">,<sp/>Width,<sp/>NSec);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Length<sp/>=<sp/>strftime(Temp,<sp/>60,<sp/></highlight><highlight class="stringliteral">&quot;%FT%T&quot;</highlight><highlight class="normal">,<sp/>&amp;TM);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Temp,<sp/>Length);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="874"><highlight class="normal">}</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLTimeT,<sp/>MLStringT,<sp/>MLTimeZoneT)<sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="comment">//&lt;Time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="comment">//&lt;Format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="comment">//&lt;TimeZone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>:mini:`Time`<sp/>as<sp/>a<sp/>time<sp/>in<sp/>:mini:`TimeZone`<sp/>according<sp/>to<sp/>the<sp/>specified<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/>(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Format<sp/>=<sp/>ml_string_value(Args[2]);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_time_zone_t<sp/>*TimeZone<sp/>=<sp/>(ml_time_zone_t<sp/>*)Args[3];</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>timelib_time<sp/>TL<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>timelib_set_timezone(&amp;TL,<sp/>TimeZone-&gt;Info);</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>timelib_unixtime2local(&amp;TL,<sp/>Time-&gt;Value-&gt;tv_sec);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>TM<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_year<sp/>=<sp/>TL.y<sp/>-<sp/>1900;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_mon<sp/>=<sp/>TL.m<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_mday<sp/>=<sp/>TL.d;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_hour<sp/>=<sp/>TL.h;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_min<sp/>=<sp/>TL.i;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_sec<sp/>=<sp/>TL.s;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_yday<sp/>=<sp/>timelib_day_of_year(TL.y,<sp/>TL.m,<sp/>TL.d);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>TM.tm_wday<sp/>=<sp/>timelib_day_of_week(TL.y,<sp/>TL.m,<sp/>TL.d);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Temp[120];</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>strftime(Temp,<sp/>120,<sp/>Format,<sp/>&amp;TM);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Temp,<sp/>Length);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="903"><highlight class="normal">}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_TIME_PART_WITH_ZONE(NAME,<sp/>DESC,<sp/>EXPR)<sp/>\</highlight></codeline>
<codeline lineno="906"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="907"><highlight class="preprocessor">ML_METHOD(NAME,<sp/>MLTimeT,<sp/>MLTimeZoneT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="908"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;Time</highlight></codeline>
<codeline lineno="909"><highlight class="comment">//&lt;TimeZone</highlight></codeline>
<codeline lineno="910"><highlight class="comment">//&gt;integer</highlight></codeline>
<codeline lineno="911"><highlight class="comment">//<sp/>Returns<sp/>the<sp/>DESC<sp/>from<sp/>:mini:`Time`<sp/>in<sp/>:mini:`TimeZone`.</highlight></codeline>
<codeline lineno="912"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="913"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_time_t<sp/>*Time<sp/>=<sp/>(ml_time_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="914"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_time_zone_t<sp/>*TimeZone<sp/>=<sp/>(ml_time_zone_t<sp/>*)Args[1];<sp/>\</highlight></codeline>
<codeline lineno="915"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>timelib_time<sp/>TL<sp/>=<sp/>{0,};<sp/>\</highlight></codeline>
<codeline lineno="916"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>timelib_set_timezone(&amp;TL,<sp/>TimeZone-&gt;Info);<sp/>\</highlight></codeline>
<codeline lineno="917"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>timelib_unixtime2local(&amp;TL,<sp/>Time-&gt;Value-&gt;tv_sec);<sp/>\</highlight></codeline>
<codeline lineno="918"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>EXPR;<sp/>\</highlight></codeline>
<codeline lineno="919"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal">ML_TIME_PART_WITH_ZONE(</highlight><highlight class="stringliteral">&quot;year&quot;</highlight><highlight class="normal">,<sp/>year,<sp/>ml_integer(TL.y))</highlight></codeline>
<codeline lineno="922"><highlight class="normal">ML_TIME_PART_WITH_ZONE(&quot;month&quot;,<sp/>month,<sp/>ml_enum_value(MLTimeMonthT,<sp/>TL.m))</highlight></codeline>
<codeline lineno="923"><highlight class="normal">ML_TIME_PART_WITH_ZONE(&quot;day&quot;,<sp/>date,<sp/>ml_integer(TL.d))</highlight></codeline>
<codeline lineno="924"><highlight class="normal">ML_TIME_PART_WITH_ZONE(&quot;yday&quot;,<sp/>number<sp/>of<sp/>days<sp/>from<sp/>the<sp/>start<sp/>of<sp/>the<sp/>year,<sp/>ml_integer(timelib_day_of_year(TL.y,<sp/>TL.m,<sp/>TL.d)<sp/>+<sp/>1))</highlight></codeline>
<codeline lineno="925"><highlight class="normal">ML_TIME_PART_WITH_ZONE(&quot;wday&quot;,<sp/>day<sp/>of<sp/>the<sp/>week,<sp/>ml_enum_value(MLTimeDayT,<sp/>timelib_iso_day_of_week(TL.y,<sp/>TL.m,<sp/>TL.d)))</highlight></codeline>
<codeline lineno="926"><highlight class="normal">ML_TIME_PART_WITH_ZONE(&quot;hour&quot;,<sp/>hour,<sp/>ml_integer(TL.h))</highlight></codeline>
<codeline lineno="927"><highlight class="normal">ML_TIME_PART_WITH_ZONE(&quot;minute&quot;,<sp/>minute,<sp/>ml_integer(TL.i))</highlight></codeline>
<codeline lineno="928"><highlight class="normal">ML_TIME_PART_WITH_ZONE(&quot;second&quot;,<sp/>second,<sp/>ml_integer(TL.s))</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_CBOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_cbor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLTimeT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time)<sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>TM<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>gmtime_r(&amp;Time-&gt;Value-&gt;tv_sec,<sp/>&amp;TM);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Buffer[60];</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Buffer<sp/>+<sp/>strftime(Buffer,<sp/>50,<sp/></highlight><highlight class="stringliteral">&quot;%FT%T&quot;</highlight><highlight class="normal">,<sp/>&amp;TM);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>NSec<sp/>=<sp/>Time-&gt;Value-&gt;tv_nsec;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>*End++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>*End++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>(NSec<sp/>/<sp/>100000000)<sp/>%<sp/>10;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>*End++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>(NSec<sp/>/<sp/>10000000)<sp/>%<sp/>10;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>*End++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>(NSec<sp/>/<sp/>1000000)<sp/>%<sp/>10;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>*End++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>(NSec<sp/>/<sp/>100000)<sp/>%<sp/>10;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>*End++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>(NSec<sp/>/<sp/>10000)<sp/>%<sp/>10;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>*End++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>(NSec<sp/>/<sp/>1000)<sp/>%<sp/>10;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>*End++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>*End<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_write_tag(Writer,<sp/>0);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>End<sp/>-<sp/>Buffer;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_write_string(Writer,<sp/>Length);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_write_raw(Writer,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Buffer,<sp/>Length);</highlight></codeline>
<codeline lineno="955"><highlight class="normal">}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cbor_read_time_fn(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLNumberT))<sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref>);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Time-&gt;Type<sp/>=<sp/>MLTimeT;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Time-&gt;Value-&gt;tv_sec<sp/>=<sp/>ml_integer_value(Value);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Time;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*String<sp/>=<sp/>ml_string_value(Value);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__time__t" kindref="compound">ml_time_t</ref><sp/>*Time<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__time__t" kindref="compound">ml_time_t</ref>);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Time-&gt;Type<sp/>=<sp/>MLTimeT;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>TM<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Rest<sp/>=<sp/>strptime(String,<sp/></highlight><highlight class="stringliteral">&quot;%FT%T&quot;</highlight><highlight class="normal">,<sp/>&amp;TM);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Rest)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TimeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rest[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Rest;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>NSec<sp/>=<sp/>strtoul(Rest,<sp/>&amp;End,<sp/>10);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>9<sp/>-<sp/>(End<sp/>-<sp/>Rest);<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>NSec<sp/>*=<sp/>10;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Time-&gt;Value-&gt;tv_nsec<sp/>=<sp/>NSec;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rest<sp/>=<sp/>End;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rest[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal"><sp/>||<sp/>Rest[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Next<sp/>=<sp/>Rest<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isdigit(Next[0])<sp/>||<sp/>!isdigit(Next[1]))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TimeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/>=<sp/>3600<sp/>*<sp/>(10<sp/>*<sp/>(Next[0]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>+<sp/>(Next[1]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Next[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)<sp/>++Next;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isdigit(Next[0])<sp/>&amp;&amp;<sp/>isdigit(Next[1]))<sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/>+=<sp/>60<sp/>*<sp/>(10<sp/>*<sp/>(Next[0]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>+<sp/>(Next[1]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rest[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>Offset<sp/>=<sp/>-Offset;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Time-&gt;Value-&gt;tv_sec<sp/>=<sp/>timegm(&amp;TM)<sp/>-<sp/>Offset;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Time;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TagError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Time<sp/>requires<sp/>string<sp/>/<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal">}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_time_init(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Globals)<sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_time_init.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLTimeT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;part&quot;</highlight><highlight class="normal">,<sp/>ml_module(</highlight><highlight class="stringliteral">&quot;part&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Second&quot;</highlight><highlight class="normal">,<sp/>ml_integer(1),</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Minute&quot;</highlight><highlight class="normal">,<sp/>ml_integer(60),</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Hour&quot;</highlight><highlight class="normal">,<sp/>ml_integer(60<sp/>*<sp/>60),</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Day&quot;</highlight><highlight class="normal">,<sp/>ml_integer(60<sp/>*<sp/>60<sp/>*<sp/>24),</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL));</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLTimeT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;mdays&quot;</highlight><highlight class="normal">,<sp/>MLTimeMdays);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLTimeT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;day&quot;</highlight><highlight class="normal">,<sp/>MLTimeDayT);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLTimeT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;month&quot;</highlight><highlight class="normal">,<sp/>MLTimeMonthT);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(MLTimeT-&gt;Constructor,<sp/>NULL,<sp/>ml_identity,<sp/>MLTimeT,<sp/>NULL);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Globals)<sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,<sp/>MLTimeT);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_string_fn_register(</highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">,<sp/>ml_time_parse);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TIMEZONES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLTimeT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;zone&quot;</highlight><highlight class="normal">,<sp/>MLTimeZoneT);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>MLTimeZoneT-&gt;Type<sp/>=<sp/>MLTimeZoneTypeT;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_string_fn_register(</highlight><highlight class="stringliteral">&quot;TZ&quot;</highlight><highlight class="normal">,<sp/>ml_time_zone_parse);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,<sp/>MLTimeT);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_CBOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_tag(ML_CBOR_TAG_TIME_STRING,<sp/>ml_cbor_read_time_fn);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_tag(ML_CBOR_TAG_TIME_EPOCH,<sp/>ml_cbor_read_time_fn);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ml_time.c"/>
  </compounddef>
</doxygen>
