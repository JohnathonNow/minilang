<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__cbor_8c" kind="file" language="C++">
    <compoundname>ml_cbor.c</compoundname>
    <includes refid="minilang_8h" local="yes">minilang.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes refid="ml__cbor_8h" local="yes">ml_cbor.h</includes>
    <includes refid="ml__stream_8h" local="yes">ml_stream.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="ml__object_8h" local="yes">ml_object.h</includes>
    <includes refid="ml__bytecode_8h" local="yes">ml_bytecode.h</includes>
    <includes local="yes">minicbor/minicbor.h</includes>
    <includes local="yes">minicbor/minicbor_reader.c</includes>
    <includes local="yes">minicbor/minicbor_writer.c</includes>
    <includes local="yes">ml_cbor_init.c</includes>
    <incdepgraph>
      <node id="13">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>ml_bytecode.h</label>
        <link refid="ml__bytecode_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_cbor.c</label>
        <link refid="ml__cbor_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ml_cbor.h</label>
        <link refid="ml__cbor_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>ml_object.h</label>
        <link refid="ml__object_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>ml_opcodes.h</label>
        <link refid="ml__opcodes_8h_source"/>
      </node>
      <node id="7">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>ml_stream.h</label>
        <link refid="ml__stream_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="18">
        <label>gc/gc.h</label>
      </node>
      <node id="16">
        <label>limits.h</label>
      </node>
      <node id="24">
        <label>minicbor/minicbor.h</label>
      </node>
      <node id="25">
        <label>minicbor/minicbor_reader.c</label>
      </node>
      <node id="26">
        <label>minicbor/minicbor_writer.c</label>
      </node>
      <node id="27">
        <label>ml_cbor_init.c</label>
      </node>
      <node id="15">
        <label>ml_config.h</label>
      </node>
      <node id="6">
        <label>setjmp.h</label>
      </node>
      <node id="11">
        <label>stdarg.h</label>
      </node>
      <node id="14">
        <label>stdint.h</label>
      </node>
      <node id="9">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="10">
        <label>string.h</label>
      </node>
      <node id="4">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structml__cbor__tag__fns__t" prot="public">ml_cbor_tag_fns_t</innerclass>
    <innerclass refid="structcollection__t" prot="public">collection_t</innerclass>
    <innerclass refid="structtag__t" prot="public">tag_t</innerclass>
    <innerclass refid="structml__cbor__reader__t" prot="public">ml_cbor_reader_t</innerclass>
    <innerclass refid="structml__cbor__decoder__t" prot="public">ml_cbor_decoder_t</innerclass>
    <innerclass refid="structml__cbor__writer__t" prot="public">ml_cbor_writer_t</innerclass>
    <innerclass refid="structvlq__result__t" prot="public">vlq_result_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__cbor_8c_1aebec330325aff5cbc7d9c9248e2cae4a" prot="public" static="no">
        <name>ML_CATEGORY</name>
        <initializer>&quot;cbor&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="13" column="10" bodyfile="src/ml_cbor.c" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__cbor_8c_1ad1c3899b66de0b2cbc3177d3e0d7cec3" prot="public" static="no">
        <name>MINICBOR_READ_FN_PREFIX</name>
        <initializer>ml_cbor_read_</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="15" column="9" bodyfile="src/ml_cbor.c" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__cbor_8c_1a89bc250c58b9e5398eedba3436f26346" prot="public" static="no">
        <name>MINICBOR_READDATA_TYPE</name>
        <initializer>struct <ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="16" column="9" bodyfile="src/ml_cbor.c" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__cbor_8c_1a380f4d011ce11ecc6e21a117659232c3" prot="public" static="no">
        <name>MINICBOR_WRITEDATA_TYPE</name>
        <initializer><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="17" column="9" bodyfile="src/ml_cbor.c" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__cbor_8c_1a1511775480c3490873d6c2e522bec94f" prot="public" static="no">
        <name>MINICBOR_WRITE_FN</name>
        <initializer>ml_cbor_write_raw</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="18" column="9" bodyfile="src/ml_cbor.c" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__cbor_8c_1ac1f2ab2c597d3b927804af19f4488019" prot="public" static="no">
        <name>MINICBOR_WRITE_BUFFER</name>
        <param><defname>WRITER</defname></param>
        <initializer>WRITER-&gt;Buffer</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="19" column="9" bodyfile="src/ml_cbor.c" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__cbor_8c_1a6cd668eaf5bcab78d272c9eaa5ae2ff8" prot="public" static="no">
        <name>VLQ64_NEXT</name>
        <param></param>
        <initializer>	({ \
	if (Length &lt;= 0) return ml_error(&quot;CBORError&quot;, &quot;Invalid closure info&quot;); \
	<ref refid="structvlq__result__t" kindref="compound">vlq_result_t</ref> Result = vlq64_decode(Bytes); \
	Length -= Result.Count; \
	Bytes += Result.Count; \
	Result.Value; \
})</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1396" column="9" bodyfile="src/ml_cbor.c" bodystart="1396" bodyend="1402"/>
      </memberdef>
      <memberdef kind="define" id="ml__cbor_8c_1aa2f846b9007da0a6da7557513116204a" prot="public" static="no">
        <name>VLQ64_NEXT_STRING</name>
        <param></param>
        <initializer>	({ \
	if (Length &lt;= 0) return ml_error(&quot;CBORError&quot;, &quot;Invalid closure info&quot;); \
	<ref refid="structvlq__result__t" kindref="compound">vlq_result_t</ref> Result = vlq64_decode(Bytes); \
	Length -= Result.Count; \
	if (Length &lt; Result.Value) return ml_error(&quot;CBORError&quot;, &quot;Invalid closure info&quot;); \
	Bytes += Result.Count; \
	char *String = snew(Length + 1); \
	memcpy(String, Bytes, Result.Value); \
	String[Result.Value] = 0; \
	Length -= Result.Value; \
	Bytes += Result.Value; \
	String; \
})</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1404" column="9" bodyfile="src/ml_cbor.c" bodystart="1404" bodyend="1416"/>
      </memberdef>
      <memberdef kind="define" id="ml__cbor_8c_1a15c9565b94f1a760a8a130f373439949" prot="public" static="no">
        <name>NEXT_VALUE</name>
        <param><defname>DEST</defname></param>
        <initializer>	{ \
	ML_CHECK_ARG_COUNT(Index + 1); \
	<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *Value = Args[Index++]; \
	if (ml_typeof(Value) == MLUninitializedT) { \
		ml_uninitialized_use(Value, &amp;DEST); \
	} \
	DEST = Value; \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1418" column="9" bodyfile="src/ml_cbor.c" bodystart="1418" bodyend="1425"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ml__cbor_8c_1a35bc86b90175d8be9c49f352d34662e5" prot="public" static="no">
        <type>struct collection_t</type>
        <definition>typedef struct collection_t collection_t</definition>
        <argsstring></argsstring>
        <name>collection_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="113" column="14"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__cbor_8c_1a1d473d54a128e68090c30830e6bd10bd" prot="public" static="no">
        <type>struct tag_t</type>
        <definition>typedef struct tag_t tag_t</definition>
        <argsstring></argsstring>
        <name>tag_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="119" column="7"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="ml__cbor_8c_1ae48df85a9aa7640cd4f5873b499b8833" prot="public" static="yes" mutable="no">
        <type><ref refid="structml__cbor__tag__fns__t" kindref="compound">ml_cbor_tag_fns_t</ref></type>
        <definition>ml_cbor_tag_fns_t DefaultTagFns[1]</definition>
        <argsstring>[1]</argsstring>
        <name>DefaultTagFns</name>
        <initializer>= {{NULL, NULL, 0, 0}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="93" column="26" bodyfile="src/ml_cbor.c" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="variable" id="ml__cbor_8c_1a3c5a58f799d83d6522b2dd274acf6899" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int NumCborSettings</definition>
        <argsstring></argsstring>
        <name>NumCborSettings</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="136" column="12" bodyfile="src/ml_cbor.c" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ml__cbor_8c_1a6e73e7023e24d0bcccb9ef2f9bf9f63f" prot="public" static="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref></type>
        <definition>ml_value_t IsList[1]</definition>
        <argsstring>[1]</argsstring>
        <name>IsList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="198" column="19" bodyfile="src/ml_cbor.c" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ml__cbor_8c_1aeab5318cd6de4cd37d9daedb2b13a5b3" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLCborDecoderT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLCborDecoderT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="539" column="18" declfile="src/ml_cbor.c" declline="539" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__cbor_8c_1ab34d8a084e730b379b64078d4db3076f" prot="public" static="yes" mutable="no">
        <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref></type>
        <definition>stringmap_t CborObjectTypes[1]</definition>
        <argsstring>[1]</argsstring>
        <name>CborObjectTypes</name>
        <initializer>= {STRINGMAP_INIT}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1351" column="20" bodyfile="src/ml_cbor.c" bodystart="1351" bodyend="1351"/>
      </memberdef>
      <memberdef kind="variable" id="ml__cbor_8c_1a1c804cbb60f1a5f344f7b5758a77e89d" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t* RangeMethod</definition>
        <argsstring></argsstring>
        <name>RangeMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1568" column="19" declfile="src/ml_cbor.c" declline="1568" declcolumn="19"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__cbor_8c_1a8a2dbf7af967fae68d17fce62333c961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ml_cbor_tag_fn</type>
        <definition>ml_cbor_tag_fn ml_cbor_tag_fn_get</definition>
        <argsstring>(ml_cbor_tag_fns_t *TagFns, uint64_t Tag)</argsstring>
        <name>ml_cbor_tag_fn_get</name>
        <param>
          <type><ref refid="structml__cbor__tag__fns__t" kindref="compound">ml_cbor_tag_fns_t</ref> *</type>
          <declname>TagFns</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>Tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="30" column="16" bodyfile="src/ml_cbor.c" bodystart="30" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a6ad91346aee1eae9ac7f16b8f9d69c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_tag_fn_set</definition>
        <argsstring>(ml_cbor_tag_fns_t *TagFns, uint64_t Tag, ml_cbor_tag_fn Fn)</argsstring>
        <name>ml_cbor_tag_fn_set</name>
        <param>
          <type><ref refid="structml__cbor__tag__fns__t" kindref="compound">ml_cbor_tag_fns_t</ref> *</type>
          <declname>TagFns</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>Tag</declname>
        </param>
        <param>
          <type>ml_cbor_tag_fn</type>
          <declname>Fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="46" column="6" bodyfile="src/ml_cbor.c" bodystart="46" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a0f2b06f6b42b9e10637e36f2814a370b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__cbor__tag__fns__t" kindref="compound">ml_cbor_tag_fns_t</ref> *</type>
        <definition>ml_cbor_tag_fns_t * ml_cbor_tag_fns_copy</definition>
        <argsstring>(ml_cbor_tag_fns_t *TagFns)</argsstring>
        <name>ml_cbor_tag_fns_copy</name>
        <param>
          <type><ref refid="structml__cbor__tag__fns__t" kindref="compound">ml_cbor_tag_fns_t</ref> *</type>
          <declname>TagFns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="81" column="19" bodyfile="src/ml_cbor.c" bodystart="81" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1add973c7e9f41d7e5077073d540f8865e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_default_tag</definition>
        <argsstring>(uint64_t Tag, ml_cbor_tag_fn TagFn)</argsstring>
        <name>ml_cbor_default_tag</name>
        <param>
          <type>uint64_t</type>
          <declname>Tag</declname>
        </param>
        <param>
          <type>ml_cbor_tag_fn</type>
          <declname>TagFn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="95" column="6" bodyfile="src/ml_cbor.c" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a5016ecccf234ad694271fabf0d987e5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__cbor__tag__fns__t" kindref="compound">ml_cbor_tag_fns_t</ref> *</type>
        <definition>ml_cbor_tag_fns_t * ml_cbor_tag_fns</definition>
        <argsstring>(int Default)</argsstring>
        <name>ml_cbor_tag_fns</name>
        <param>
          <type>int</type>
          <declname>Default</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="99" column="19" bodyfile="src/ml_cbor.c" bodystart="99" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a2fc086c38fee73e93ac705726ecf22e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ml_cbor_setting</definition>
        <argsstring>()</argsstring>
        <name>ml_cbor_setting</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="138" column="5" bodyfile="src/ml_cbor.c" bodystart="138" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a018b5413eb6f2667e6133589e5ae31b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
        <definition>ml_cbor_reader_t * ml_cbor_reader</definition>
        <argsstring>(ml_cbor_tag_fns_t *TagFns, ml_external_fn_t GlobalGet, void *Globals)</argsstring>
        <name>ml_cbor_reader</name>
        <param>
          <type><ref refid="structml__cbor__tag__fns__t" kindref="compound">ml_cbor_tag_fns_t</ref> *</type>
          <declname>TagFns</declname>
        </param>
        <param>
          <type>ml_external_fn_t</type>
          <declname>GlobalGet</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Globals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="142" column="18" bodyfile="src/ml_cbor.c" bodystart="142" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a8f33df522c0cda12e6de463bc84ea5c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_reader_reset</definition>
        <argsstring>(ml_cbor_reader_t *Reader)</argsstring>
        <name>ml_cbor_reader_reset</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="159" column="6" bodyfile="src/ml_cbor.c" bodystart="159" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1aabcdab9757721c3ec664f298d1fcb8e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_reader_set_setting</definition>
        <argsstring>(ml_cbor_reader_t *Reader, int Setting, void *Value)</argsstring>
        <name>ml_cbor_reader_set_setting</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Setting</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="168" column="6" bodyfile="src/ml_cbor.c" bodystart="168" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a526ec7e3ac00f8bf439ebd70fd7fe731" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * ml_cbor_reader_get_setting</definition>
        <argsstring>(ml_cbor_reader_t *Reader, int Setting)</argsstring>
        <name>ml_cbor_reader_get_setting</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Setting</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="172" column="6" bodyfile="src/ml_cbor.c" bodystart="172" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a0c3ddf1cf3d4ff2b022ec4d6798b6a14" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_cbor_reader_next_index</definition>
        <argsstring>(ml_cbor_reader_t *Reader)</argsstring>
        <name>ml_cbor_reader_next_index</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="176" column="12" bodyfile="src/ml_cbor.c" bodystart="176" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a49916bbca25f2306233795b4fdc07a0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ml_cbor_reader_read</definition>
        <argsstring>(ml_cbor_reader_t *Reader, unsigned char *Bytes, int Size)</argsstring>
        <name>ml_cbor_reader_read</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>Bytes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="185" column="5" bodyfile="src/ml_cbor.c" bodystart="185" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1af9b45c94d3f93e3649586f6a0eb4678e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_cbor_reader_get</definition>
        <argsstring>(ml_cbor_reader_t *Reader)</argsstring>
        <name>ml_cbor_reader_get</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="189" column="12" bodyfile="src/ml_cbor.c" bodystart="189" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1aa8424e59dea6603c428ce454cff50561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ml_cbor_reader_extra</definition>
        <argsstring>(ml_cbor_reader_t *Reader)</argsstring>
        <name>ml_cbor_reader_extra</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="194" column="5" bodyfile="src/ml_cbor.c" bodystart="194" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a00f9dd31166d474fcee19127b6b17d1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_cbor_mark_reused</definition>
        <argsstring>(ml_cbor_reader_t *Reader, ml_value_t *Value)</argsstring>
        <name>ml_cbor_mark_reused</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="200" column="12" bodyfile="src/ml_cbor.c" bodystart="200" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1aa13aa8d1b442266f46a06f96788c0351" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_cbor_use_previous</definition>
        <argsstring>(ml_cbor_reader_t *Reader, ml_value_t *Value)</argsstring>
        <name>ml_cbor_use_previous</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="204" column="12" bodyfile="src/ml_cbor.c" bodystart="204" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a1b349a6f21314bc4b1be76070e57deff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcollection__t" kindref="compound">collection_t</ref> *</type>
        <definition>static collection_t * collection_push</definition>
        <argsstring>(ml_cbor_reader_t *Reader)</argsstring>
        <name>collection_push</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="224" column="21" bodyfile="src/ml_cbor.c" bodystart="224" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1ab27f6b44ff3da15ccfe55f081938c53b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void value_handler</definition>
        <argsstring>(ml_cbor_reader_t *Reader, ml_value_t *Value)</argsstring>
        <name>value_handler</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="248" column="13" bodyfile="src/ml_cbor.c" bodystart="248" bodyend="294" declfile="src/ml_cbor.c" declline="234" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1ae1fce6685e9cf806036bd79c7e31e413" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void collection_pop</definition>
        <argsstring>(ml_cbor_reader_t *Reader)</argsstring>
        <name>collection_pop</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="236" column="13" bodyfile="src/ml_cbor.c" bodystart="236" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a93969f865730930940062ca66f0961a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_read_positive_fn</definition>
        <argsstring>(ml_cbor_reader_t *Reader, uint64_t Value)</argsstring>
        <name>ml_cbor_read_positive_fn</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="296" column="6" bodyfile="src/ml_cbor.c" bodystart="296" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1af9f325e819a0c214e7cba3329c87ee9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_read_negative_fn</definition>
        <argsstring>(ml_cbor_reader_t *Reader, uint64_t Value)</argsstring>
        <name>ml_cbor_read_negative_fn</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="300" column="6" bodyfile="src/ml_cbor.c" bodystart="300" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a4c1210bfd95ebba1003bec1af2f917d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_read_bytes_fn</definition>
        <argsstring>(ml_cbor_reader_t *Reader, size_t Size)</argsstring>
        <name>ml_cbor_read_bytes_fn</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="315" column="6" bodyfile="src/ml_cbor.c" bodystart="315" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a3c600b88cf72b16799ade05b82eb1dad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_read_bytes_piece_fn</definition>
        <argsstring>(ml_cbor_reader_t *Reader, const void *Bytes, size_t Size, int Final)</argsstring>
        <name>ml_cbor_read_bytes_piece_fn</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>Bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Final</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="319" column="6" bodyfile="src/ml_cbor.c" bodystart="319" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a44ec3994359fb96b7ce959fe704d652c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_read_string_fn</definition>
        <argsstring>(ml_cbor_reader_t *Reader, size_t Size)</argsstring>
        <name>ml_cbor_read_string_fn</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="324" column="6" bodyfile="src/ml_cbor.c" bodystart="324" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1ad54afec38c595966db6f906e1a0a0740" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_read_string_piece_fn</definition>
        <argsstring>(ml_cbor_reader_t *Reader, const void *Bytes, size_t Size, int Final)</argsstring>
        <name>ml_cbor_read_string_piece_fn</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>Bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Final</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="328" column="6" bodyfile="src/ml_cbor.c" bodystart="328" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a8233f00d3eaed85eb0d9d4d532dbd6f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_read_array_fn</definition>
        <argsstring>(ml_cbor_reader_t *Reader, size_t Size)</argsstring>
        <name>ml_cbor_read_array_fn</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="333" column="6" bodyfile="src/ml_cbor.c" bodystart="333" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a0e700bee34bbe25dfc70640234355509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_read_map_fn</definition>
        <argsstring>(ml_cbor_reader_t *Reader, size_t Size)</argsstring>
        <name>ml_cbor_read_map_fn</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="344" column="6" bodyfile="src/ml_cbor.c" bodystart="344" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a9eb3dbabcfa1e087ff6f6a17b8a4146c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_read_tag_fn</definition>
        <argsstring>(ml_cbor_reader_t *Reader, uint64_t Value)</argsstring>
        <name>ml_cbor_read_tag_fn</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="355" column="6" bodyfile="src/ml_cbor.c" bodystart="355" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a8745a2dfd8d85aafb472347336f0de0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_read_float_fn</definition>
        <argsstring>(ml_cbor_reader_t *Reader, double Value)</argsstring>
        <name>ml_cbor_read_float_fn</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="368" column="6" bodyfile="src/ml_cbor.c" bodystart="368" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a058ec3a41c1ad7711cd928d9b76aec08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_read_simple_fn</definition>
        <argsstring>(ml_cbor_reader_t *Reader, int Value)</argsstring>
        <name>ml_cbor_read_simple_fn</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="372" column="6" bodyfile="src/ml_cbor.c" bodystart="372" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1aa81273622cd796cd79af7e26ba6d8af4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_read_break_fn</definition>
        <argsstring>(ml_cbor_reader_t *Reader)</argsstring>
        <name>ml_cbor_read_break_fn</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="389" column="6" bodyfile="src/ml_cbor.c" bodystart="389" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1abc2c1b9f76f3c96eeccc1f41999381de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_read_error_fn</definition>
        <argsstring>(ml_cbor_reader_t *Reader, int Position, const char *Message)</argsstring>
        <name>ml_cbor_read_error_fn</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Position</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="393" column="6" bodyfile="src/ml_cbor.c" bodystart="393" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a875acf4b0085636e0ec8fc2b78cec64c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_from_cbor</definition>
        <argsstring>(ml_cbor_t Cbor, ml_cbor_tag_fns_t *TagFns)</argsstring>
        <name>ml_from_cbor</name>
        <param>
          <type><ref refid="structml__cbor__t" kindref="compound">ml_cbor_t</ref></type>
          <declname>Cbor</declname>
        </param>
        <param>
          <type><ref refid="structml__cbor__tag__fns__t" kindref="compound">ml_cbor_tag_fns_t</ref> *</type>
          <declname>TagFns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="397" column="12" bodyfile="src/ml_cbor.c" bodystart="397" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1ab60f5ad34cf7e3f07f2cd211778d5379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__cbor__result__t" kindref="compound">ml_cbor_result_t</ref></type>
        <definition>ml_cbor_result_t ml_from_cbor_extra</definition>
        <argsstring>(ml_cbor_t Cbor, ml_cbor_tag_fns_t *TagFns)</argsstring>
        <name>ml_from_cbor_extra</name>
        <param>
          <type><ref refid="structml__cbor__t" kindref="compound">ml_cbor_t</ref></type>
          <declname>Cbor</declname>
        </param>
        <param>
          <type><ref refid="structml__cbor__tag__fns__t" kindref="compound">ml_cbor_tag_fns_t</ref> *</type>
          <declname>TagFns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="411" column="18" bodyfile="src/ml_cbor.c" bodystart="411" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a27fcf4e391b9860bbc1418bb07a3e1f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_ANON</definition>
        <argsstring>(CborDecode, &quot;cbor::decode&quot;)</argsstring>
        <name>ML_METHOD_ANON</name>
        <param>
          <type>CborDecode</type>
        </param>
        <param>
          <type>&quot;cbor::decode&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="423" column="1" declfile="src/ml_cbor.c" declline="423" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a11f4a88e2e99dc5bc42e54e34b4dfcd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(CborDecode, MLAddressT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>CborDecode</type>
        </param>
        <param>
          <type>MLAddressT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="425" column="1" bodyfile="src/ml_cbor.c" bodystart="425" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1aa32b10e726c875e0d603cfd75d8abaa4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_cbor_global_get_map</definition>
        <argsstring>(ml_value_t *Map, const char *Name)</argsstring>
        <name>ml_cbor_global_get_map</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Map</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="446" column="19" bodyfile="src/ml_cbor.c" bodystart="446" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1aa2855dc7d4bc85309b78f9e24a6f342c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(CborDecode, MLAddressT, MLMapT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>CborDecode</type>
        </param>
        <param>
          <type>MLAddressT</type>
        </param>
        <param>
          <type>MLMapT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="452" column="1" bodyfile="src/ml_cbor.c" bodystart="452" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a848d72a9dbe597ee9540e82c1dc70353" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_cbor_global_get_fn</definition>
        <argsstring>(ml_value_t *Fn, const char *Name)</argsstring>
        <name>ml_cbor_global_get_fn</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Fn</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="474" column="19" bodyfile="src/ml_cbor.c" bodystart="474" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a699f2aef098582d6b86b77ed38268d8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(CborDecode, MLAddressT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>CborDecode</type>
        </param>
        <param>
          <type>MLAddressT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="480" column="1" bodyfile="src/ml_cbor.c" bodystart="480" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a0216f5e817156a80ce4f9af7211bc3db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(CborDecode, MLAddressT, MLExternalSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>CborDecode</type>
        </param>
        <param>
          <type>MLAddressT</type>
        </param>
        <param>
          <type>MLExternalSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="502" column="1" bodyfile="src/ml_cbor.c" bodystart="502" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a42094c817a435e4b76bce82c87a39609" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_cbor_decoder_run</definition>
        <argsstring>(ml_cbor_decoder_t *State, ml_value_t *Value)</argsstring>
        <name>ml_cbor_decoder_run</name>
        <param>
          <type><ref refid="structml__cbor__decoder__t" kindref="compound">ml_cbor_decoder_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="531" column="13" bodyfile="src/ml_cbor.c" bodystart="531" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1ad666d7d5d0f73cf5b31d1ce0febd40c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLCborDecoder)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLCborDecoder</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="541" column="1" bodyfile="src/ml_cbor.c" bodystart="541" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1afdd17ada7644a2ee5a6c225474a8d4f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLCborDecoderT,(MLStreamT), &quot;cbor::decoder&quot;,.Constructor=(ml_value_t *) MLCborDecoder)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLCborDecoderT</type>
        </param>
        <param>
          <type>(MLStreamT)</type>
        </param>
        <param>
          <type>&quot;cbor::decoder&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLCborDecoder</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="562" column="1" declfile="src/ml_cbor.c" declline="562" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a056a49fbfd56b1df59646ae6ba0816b4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_stream_write, MLCborDecoderT, ml_state_t *Caller, ml_cbor_decoder_t *Decoder, const void *Address, int Count)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_stream_write</type>
        </param>
        <param>
          <type>MLCborDecoderT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__cbor__decoder__t" kindref="compound">ml_cbor_decoder_t</ref> *</type>
          <declname>Decoder</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="568" column="13" bodyfile="src/ml_cbor.c" bodystart="568" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a7cc42f506cab3d9b6ae7e39b0f8141e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_stream_flush, MLCborDecoderT, ml_state_t *Caller, ml_cbor_decoder_t *Decoder)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_stream_flush</type>
        </param>
        <param>
          <type>MLCborDecoderT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__cbor__decoder__t" kindref="compound">ml_cbor_decoder_t</ref> *</type>
          <declname>Decoder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="591" column="13" bodyfile="src/ml_cbor.c" bodystart="591" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1af5ba137da8e8bc80a85e0ddf38b3b036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ml_cbor_write_raw</definition>
        <argsstring>(ml_cbor_writer_t *Writer, const void *Bytes, size_t Length)</argsstring>
        <name>ml_cbor_write_raw</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>Bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="613" column="5" bodyfile="src/ml_cbor.c" bodystart="613" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1ac11b1f1a50d8d88403e006f321ff9cab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_write_integer</definition>
        <argsstring>(ml_cbor_writer_t *Writer, int64_t Number)</argsstring>
        <name>ml_cbor_write_integer</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>Number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="621" column="6" bodyfile="src/ml_cbor.c" bodystart="621" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1ad0aa28a76639b58bf5cc54643800e1e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_write_positive</definition>
        <argsstring>(ml_cbor_writer_t *Writer, uint64_t Number)</argsstring>
        <name>ml_cbor_write_positive</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>Number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="625" column="6" bodyfile="src/ml_cbor.c" bodystart="625" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a27f93dbd9b8e424a3c830ef9340679b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_write_negative</definition>
        <argsstring>(ml_cbor_writer_t *Writer, uint64_t Number)</argsstring>
        <name>ml_cbor_write_negative</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>Number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="629" column="6" bodyfile="src/ml_cbor.c" bodystart="629" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a15ffa0f97f39f76becceb72c31303794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_write_bytes</definition>
        <argsstring>(ml_cbor_writer_t *Writer, unsigned Size)</argsstring>
        <name>ml_cbor_write_bytes</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>Size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="633" column="6" bodyfile="src/ml_cbor.c" bodystart="633" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1ad18b36e18bbbcfb76b51e83ad2124064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_write_indef_bytes</definition>
        <argsstring>(ml_cbor_writer_t *Writer)</argsstring>
        <name>ml_cbor_write_indef_bytes</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="637" column="6" bodyfile="src/ml_cbor.c" bodystart="637" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1ac908ac00fe8401fd1f33711901a7d44d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_write_string</definition>
        <argsstring>(ml_cbor_writer_t *Writer, unsigned Size)</argsstring>
        <name>ml_cbor_write_string</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>Size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="641" column="6" bodyfile="src/ml_cbor.c" bodystart="641" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a55a59c36c0f5e9b795eb419b12cf9ac7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_write_indef_string</definition>
        <argsstring>(ml_cbor_writer_t *Writer)</argsstring>
        <name>ml_cbor_write_indef_string</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="645" column="6" bodyfile="src/ml_cbor.c" bodystart="645" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a746cce265db853a62c7787867f20dd52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_write_array</definition>
        <argsstring>(ml_cbor_writer_t *Writer, unsigned Size)</argsstring>
        <name>ml_cbor_write_array</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>Size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="649" column="6" bodyfile="src/ml_cbor.c" bodystart="649" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a63788e2a09d0a3f1550dde44545a82ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_write_indef_array</definition>
        <argsstring>(ml_cbor_writer_t *Writer)</argsstring>
        <name>ml_cbor_write_indef_array</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="653" column="6" bodyfile="src/ml_cbor.c" bodystart="653" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a3d3a4a5a8e9a906498faa746cd5203e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_write_map</definition>
        <argsstring>(ml_cbor_writer_t *Writer, unsigned Size)</argsstring>
        <name>ml_cbor_write_map</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>Size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="657" column="6" bodyfile="src/ml_cbor.c" bodystart="657" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a7cb03ede6917a82a27aaa5de6a2f1b9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_write_indef_map</definition>
        <argsstring>(ml_cbor_writer_t *Writer)</argsstring>
        <name>ml_cbor_write_indef_map</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="661" column="6" bodyfile="src/ml_cbor.c" bodystart="661" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1af4ee99f92b9ad9fdbcc1cd51b21db960" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_write_float2</definition>
        <argsstring>(ml_cbor_writer_t *Writer, double Number)</argsstring>
        <name>ml_cbor_write_float2</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="665" column="6" bodyfile="src/ml_cbor.c" bodystart="665" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1ad4d1e978c0b9dec68780ddf8b6e4ed0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_write_float4</definition>
        <argsstring>(ml_cbor_writer_t *Writer, double Number)</argsstring>
        <name>ml_cbor_write_float4</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="669" column="6" bodyfile="src/ml_cbor.c" bodystart="669" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a84975ef5fcf8dd66a87eb4e1a232b922" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_write_float8</definition>
        <argsstring>(ml_cbor_writer_t *Writer, double Number)</argsstring>
        <name>ml_cbor_write_float8</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="673" column="6" bodyfile="src/ml_cbor.c" bodystart="673" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a304f841ff275f70d186f71cd1c876f7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_write_simple</definition>
        <argsstring>(ml_cbor_writer_t *Writer, unsigned char Simple)</argsstring>
        <name>ml_cbor_write_simple</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>Simple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="677" column="6" bodyfile="src/ml_cbor.c" bodystart="677" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1af012c0fba7c38ad2e628be0b46d7730b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_write_break</definition>
        <argsstring>(ml_cbor_writer_t *Writer)</argsstring>
        <name>ml_cbor_write_break</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="681" column="6" bodyfile="src/ml_cbor.c" bodystart="681" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a855a61374e2ed28281b15b09868e100c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_write_tag</definition>
        <argsstring>(ml_cbor_writer_t *Writer, uint64_t Tag)</argsstring>
        <name>ml_cbor_write_tag</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>Tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="685" column="6" bodyfile="src/ml_cbor.c" bodystart="685" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a9154edefa5aa11097e7993f2b9e048ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
        <definition>ml_cbor_writer_t * ml_cbor_writer</definition>
        <argsstring>(void *Data, ml_cbor_write_fn WriteFn, ml_externals_t *Externals)</argsstring>
        <name>ml_cbor_writer</name>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>ml_cbor_write_fn</type>
          <declname>WriteFn</declname>
        </param>
        <param>
          <type><ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref> *</type>
          <declname>Externals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="689" column="18" bodyfile="src/ml_cbor.c" bodystart="689" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a9803fa101246b2b9c8241a1bac3841e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_writer_reset</definition>
        <argsstring>(ml_cbor_writer_t *Writer, void *Data)</argsstring>
        <name>ml_cbor_writer_reset</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="701" column="6" bodyfile="src/ml_cbor.c" bodystart="701" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a654054d6c9c10b740bd0167794d52230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_writer_set_setting</definition>
        <argsstring>(ml_cbor_writer_t *Writer, int Setting, void *Value)</argsstring>
        <name>ml_cbor_writer_set_setting</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Setting</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="708" column="6" bodyfile="src/ml_cbor.c" bodystart="708" bodyend="710"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a2d018c5d6f978f4db12b92d7aec8836f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * ml_cbor_writer_get_setting</definition>
        <argsstring>(ml_cbor_writer_t *Writer, int Setting)</argsstring>
        <name>ml_cbor_writer_get_setting</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Setting</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="712" column="6" bodyfile="src/ml_cbor.c" bodystart="712" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1ad1e9aebddf08a4deee4773215e0716ab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_cbor_writer_ref_fn</definition>
        <argsstring>(ml_cbor_writer_t *Writer, ml_value_t *Value, int HasRefs)</argsstring>
        <name>ml_cbor_writer_ref_fn</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>HasRefs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="716" column="12" bodyfile="src/ml_cbor.c" bodystart="716" bodyend="723"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a8039fbc40c6a8c958cc51d7c19010f4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_writer_find_refs</definition>
        <argsstring>(ml_cbor_writer_t *Writer, ml_value_t *Value)</argsstring>
        <name>ml_cbor_writer_find_refs</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="725" column="6" bodyfile="src/ml_cbor.c" bodystart="725" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1ae42907191e5de0ae691670b68e777c22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_writer_error</definition>
        <argsstring>(ml_cbor_writer_t *Writer, ml_value_t *Error)</argsstring>
        <name>ml_cbor_writer_error</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="729" column="6" bodyfile="src/ml_cbor.c" bodystart="729" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1ae23c6895c6d8d51619a7129694407a8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_write</definition>
        <argsstring>(ml_cbor_writer_t *Writer, ml_value_t *Value)</argsstring>
        <name>ml_cbor_write</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="734" column="6" bodyfile="src/ml_cbor.c" bodystart="734" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1adfb041f36774032a98b8cf608b230649" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_cbor_try_write</definition>
        <argsstring>(ml_cbor_writer_t *Writer, ml_value_t *Value)</argsstring>
        <name>ml_cbor_try_write</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="779" column="12" bodyfile="src/ml_cbor.c" bodystart="779" bodyend="783"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a2ff101352521b6e816f82fdc5ee5bd96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__cbor__t" kindref="compound">ml_cbor_t</ref></type>
        <definition>ml_cbor_t ml_cbor_encode</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_cbor_encode</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="785" column="11" bodyfile="src/ml_cbor.c" bodystart="785" bodyend="801"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1aed315706c7e475cb6e0dbeb9826be8f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_cbor_encode_to</definition>
        <argsstring>(void *Data, ml_cbor_write_fn WriteFn, ml_externals_t *Externals, ml_value_t *Value)</argsstring>
        <name>ml_cbor_encode_to</name>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>ml_cbor_write_fn</type>
          <declname>WriteFn</declname>
        </param>
        <param>
          <type><ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref> *</type>
          <declname>Externals</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="803" column="12" bodyfile="src/ml_cbor.c" bodystart="803" bodyend="816"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a1a9844ccc58fb268ecd9bfb45acac18d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__cbor__t" kindref="compound">ml_cbor_t</ref></type>
        <definition>ml_cbor_t ml_to_cbor</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_to_cbor</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="818" column="11" bodyfile="src/ml_cbor.c" bodystart="818" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a71bc3874e9678ea99febcbfa0ea869cc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void vlq64_encode</definition>
        <argsstring>(ml_stringbuffer_t *Buffer, int64_t Value)</argsstring>
        <name>vlq64_encode</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="822" column="13" bodyfile="src/ml_cbor.c" bodystart="822" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a8706774a71075a93f0fa62a3232faddb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void vlq64_encode_string</definition>
        <argsstring>(ml_stringbuffer_t *Buffer, const char *Value)</argsstring>
        <name>vlq64_encode_string</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="853" column="13" bodyfile="src/ml_cbor.c" bodystart="853" bodyend="857"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1aa5ade1c1e0163cf75e03be8bd15ce843" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_closure_info_param_fn</definition>
        <argsstring>(const char *Name, void *Index, const char *Params[])</argsstring>
        <name>ml_closure_info_param_fn</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Index</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Params</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="859" column="12" bodyfile="src/ml_cbor.c" bodystart="859" bodyend="862"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1aaa14caf474775bb6ea4f0b7c9846f6ef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_closure_find_decl</definition>
        <argsstring>(ml_stringbuffer_t *Buffer, inthash_t *Decls, ml_decl_t *Decl)</argsstring>
        <name>ml_closure_find_decl</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <param>
          <type><ref refid="structinthash__t" kindref="compound">inthash_t</ref> *</type>
          <declname>Decls</declname>
        </param>
        <param>
          <type><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref> *</type>
          <declname>Decl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="864" column="12" bodyfile="src/ml_cbor.c" bodystart="864" bodyend="877"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a4c75fe5194c431cf151f6a19c0c0d5e9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_stringbuffer_copy</definition>
        <argsstring>(ml_stringbuffer_t *Buffer, const char *String, size_t Length)</argsstring>
        <name>ml_stringbuffer_copy</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>String</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="879" column="12" bodyfile="src/ml_cbor.c" bodystart="879" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1ab48b1cc0fa4b750cd3031186e2663cf3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_stringbuffer_to_cbor</definition>
        <argsstring>(ml_cbor_writer_t *Writer, const char *String, size_t Length)</argsstring>
        <name>ml_stringbuffer_to_cbor</name>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>String</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="884" column="12" bodyfile="src/ml_cbor.c" bodystart="884" bodyend="887"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1ab10c39320346296ef20bca38b66d73dc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_cbor_write, MLClosureInfoT, ml_cbor_writer_t *Writer, ml_closure_info_t *Info)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_cbor_write</type>
        </param>
        <param>
          <type>MLClosureInfoT</type>
        </param>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__closure__info__t" kindref="compound">ml_closure_info_t</ref> *</type>
          <declname>Info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="889" column="13" bodyfile="src/ml_cbor.c" bodystart="889" bodyend="1086"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a604edc23dcd2ee82d1b6a53dd7b21fb3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_cbor_write, MLClosureT, ml_cbor_writer_t *Writer, ml_closure_t *Closure)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_cbor_write</type>
        </param>
        <param>
          <type>MLClosureT</type>
        </param>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__closure__t" kindref="compound">ml_closure_t</ref> *</type>
          <declname>Closure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1088" column="13" bodyfile="src/ml_cbor.c" bodystart="1088" bodyend="1097"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1ac4d3f2e704a5e5eb02ed91ad6621acc5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_cbor_write, MLSomeT, ml_cbor_writer_t *Writer, ml_value_t *Global)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_cbor_write</type>
        </param>
        <param>
          <type>MLSomeT</type>
        </param>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Global</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1099" column="13" bodyfile="src/ml_cbor.c" bodystart="1099" bodyend="1104"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a62e5247485135869791b2b4ef9a4a46b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_cbor_write, MLGlobalT, ml_cbor_writer_t *Writer, ml_value_t *Global)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_cbor_write</type>
        </param>
        <param>
          <type>MLGlobalT</type>
        </param>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Global</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1106" column="13" bodyfile="src/ml_cbor.c" bodystart="1106" bodyend="1108"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a727fbeda8b6df1bc6b8ae964d2961fb3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_cbor_write, MLIntegerT, ml_cbor_writer_t *Writer, ml_value_t *Arg)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_cbor_write</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1110" column="13" bodyfile="src/ml_cbor.c" bodystart="1110" bodyend="1118"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a8d809547a016a204abde6cd50e9b96f8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_cbor_write, MLAddressT, ml_cbor_writer_t *Writer, ml_value_t *Arg)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_cbor_write</type>
        </param>
        <param>
          <type>MLAddressT</type>
        </param>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1120" column="13" bodyfile="src/ml_cbor.c" bodystart="1120" bodyend="1124"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a1f7f9f3220dc7d5181cb9c8aace4a167" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_cbor_write, MLStringT, ml_cbor_writer_t *Writer, ml_value_t *Arg)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_cbor_write</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1126" column="13" bodyfile="src/ml_cbor.c" bodystart="1126" bodyend="1130"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a581ac5ce6b673bd0f59a3df9180c16be" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_cbor_write, MLRegexT, ml_cbor_writer_t *Writer, ml_value_t *Arg)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_cbor_write</type>
        </param>
        <param>
          <type>MLRegexT</type>
        </param>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1132" column="13" bodyfile="src/ml_cbor.c" bodystart="1132" bodyend="1138"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a7916d1ca4d85fa2ad235845a2fcc95ac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_cbor_write, MLTupleT, ml_cbor_writer_t *Writer, ml_value_t *Arg)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_cbor_write</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1140" column="13" bodyfile="src/ml_cbor.c" bodystart="1140" bodyend="1147"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1ae152a3b32b5c7f0f71d5e82725ad8c27" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_cbor_write, MLListT, ml_cbor_writer_t *Writer, ml_value_t *Arg)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_cbor_write</type>
        </param>
        <param>
          <type>MLListT</type>
        </param>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1149" column="13" bodyfile="src/ml_cbor.c" bodystart="1149" bodyend="1152"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1add459629e6e7a46463feab93fe2ad0f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_cbor_write, MLMapT, ml_cbor_writer_t *Writer, ml_value_t *Arg)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_cbor_write</type>
        </param>
        <param>
          <type>MLMapT</type>
        </param>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1154" column="13" bodyfile="src/ml_cbor.c" bodystart="1154" bodyend="1160"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a8a7e93ff46356a9454e5d0a0d3f67ffb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_cbor_write, MLDoubleT, ml_cbor_writer_t *Writer, ml_value_t *Arg)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_cbor_write</type>
        </param>
        <param>
          <type>MLDoubleT</type>
        </param>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1162" column="13" bodyfile="src/ml_cbor.c" bodystart="1162" bodyend="1164"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1aa44b09d598c8147782570d8e99919d61" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_cbor_write, MLNilT, ml_cbor_writer_t *Writer, ml_value_t *Arg)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_cbor_write</type>
        </param>
        <param>
          <type>MLNilT</type>
        </param>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1166" column="13" bodyfile="src/ml_cbor.c" bodystart="1166" bodyend="1168"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a1e604efb5814d1fba6682bf9e5b94e5f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_cbor_write, MLBooleanT, ml_cbor_writer_t *Writer, ml_value_t *Arg)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_cbor_write</type>
        </param>
        <param>
          <type>MLBooleanT</type>
        </param>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1170" column="13" bodyfile="src/ml_cbor.c" bodystart="1170" bodyend="1172"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a1452f825557ae797ce7db4c290b742c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_cbor_write, MLMethodT, ml_cbor_writer_t *Writer, ml_value_t *Arg)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_cbor_write</type>
        </param>
        <param>
          <type>MLMethodT</type>
        </param>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1174" column="13" bodyfile="src/ml_cbor.c" bodystart="1174" bodyend="1179"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a46f65606d155da36283fa8c409d2bac1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_cbor_write, MLObjectT, ml_cbor_writer_t *Writer, ml_value_t *Arg)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_cbor_write</type>
        </param>
        <param>
          <type>MLObjectT</type>
        </param>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1181" column="13" bodyfile="src/ml_cbor.c" bodystart="1181" bodyend="1189"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a955b61263443a6ec02eab8598890679e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_cbor_write, MLIntegerRangeT, ml_cbor_writer_t *Writer, ml_integer_range_t *Arg)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_cbor_write</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref> *</type>
          <declname>Arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1191" column="13" bodyfile="src/ml_cbor.c" bodystart="1191" bodyend="1207"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a3bf3bcf75b5b8511b615861dfdabd2c5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_cbor_write, MLRealRangeT, ml_cbor_writer_t *Writer, ml_real_range_t *Arg)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_cbor_write</type>
        </param>
        <param>
          <type>MLRealRangeT</type>
        </param>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref> *</type>
          <declname>Arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1209" column="13" bodyfile="src/ml_cbor.c" bodystart="1209" bodyend="1217"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a75c3ee60a98b36356b616780846d6865" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_cbor_write, MLExternalT, ml_cbor_writer_t *Writer, ml_external_t *Arg)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_cbor_write</type>
        </param>
        <param>
          <type>MLExternalT</type>
        </param>
        <param>
          <type><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__external__t" kindref="compound">ml_external_t</ref> *</type>
          <declname>Arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1247" column="13" bodyfile="src/ml_cbor.c" bodystart="1247" bodyend="1251"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a70adb734fc45b7b7107b37da056e8559" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_ANON</definition>
        <argsstring>(CborEncode, &quot;cbor::encode&quot;)</argsstring>
        <name>ML_METHOD_ANON</name>
        <param>
          <type>CborEncode</type>
        </param>
        <param>
          <type>&quot;cbor::encode&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1260" column="1" declfile="src/ml_cbor.c" declline="1260" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a4f0a5ed65314fae63718ab0c24987772" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(CborEncode, MLAnyT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>CborEncode</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1262" column="1" bodyfile="src/ml_cbor.c" bodystart="1262" bodyend="1271"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a2075c42dcfcf1589f23567209c7d9fd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(CborEncode, MLAnyT, MLStringBufferT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>CborEncode</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1273" column="1" bodyfile="src/ml_cbor.c" bodystart="1273" bodyend="1293"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a69c55a09b49d57d4e373e52e5e3e4690" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(CborEncode, MLAnyT, MLExternalSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>CborEncode</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <param>
          <type>MLExternalSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1295" column="1" bodyfile="src/ml_cbor.c" bodystart="1295" bodyend="1316"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1aa2b0a9028ad72d019505f9abde45d4dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(CborEncode, MLAnyT, MLStringBufferT, MLExternalSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>CborEncode</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLExternalSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1318" column="1" bodyfile="src/ml_cbor.c" bodystart="1318" bodyend="1339"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a123a3ce9cbaf5222aa5177ab190917af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_cbor_read_regex</definition>
        <argsstring>(ml_cbor_reader_t *Reader, ml_value_t *Value)</argsstring>
        <name>ml_cbor_read_regex</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1341" column="12" bodyfile="src/ml_cbor.c" bodystart="1341" bodyend="1344"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a24da4eaefa6ac1de80a9a2df249fcc43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_cbor_read_method</definition>
        <argsstring>(ml_cbor_reader_t *Reader, ml_value_t *Value)</argsstring>
        <name>ml_cbor_read_method</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1346" column="12" bodyfile="src/ml_cbor.c" bodystart="1346" bodyend="1349"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1ae39e9d9ac557d4edec82e33185c41f9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_cbor_read_object</definition>
        <argsstring>(ml_cbor_reader_t *Reader, ml_value_t *Value)</argsstring>
        <name>ml_cbor_read_object</name>
        <param>
          <type><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1353" column="12" bodyfile="src/ml_cbor.c" bodystart="1353" bodyend="1370"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a9b7bce2828bcc1484e0b442e948744e5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvlq__result__t" kindref="compound">vlq_result_t</ref></type>
        <definition>static vlq_result_t vlq64_decode</definition>
        <argsstring>(const unsigned char *Bytes)</argsstring>
        <name>vlq64_decode</name>
        <param>
          <type>const unsigned char *</type>
          <declname>Bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1377" column="21" bodyfile="src/ml_cbor.c" bodystart="1377" bodyend="1394"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a7c59c7ac9ef004fda954f3e6dcf498f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(DecodeClosureInfo)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>DecodeClosureInfo</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1427" column="1" bodyfile="src/ml_cbor.c" bodystart="1427" bodyend="1555"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1ad0dcd7a5480c3cd0a53acd8d4f180faf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(DecodeClosure)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>DecodeClosure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1557" column="1" bodyfile="src/ml_cbor.c" bodystart="1557" bodyend="1566"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1aa0708b17e23cbb8b9f8b6a7ae4336649" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_default_object</definition>
        <argsstring>(const char *Name, ml_value_t *Constructor)</argsstring>
        <name>ml_cbor_default_object</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Constructor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1570" column="6" bodyfile="src/ml_cbor.c" bodystart="1570" bodyend="1572"/>
      </memberdef>
      <memberdef kind="function" id="ml__cbor_8c_1a1875649a317944eb80c96a3dbe837e22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_cbor_init</definition>
        <argsstring>(stringmap_t *Globals)</argsstring>
        <name>ml_cbor_init</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Globals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_cbor.c" line="1574" column="6" bodyfile="src/ml_cbor.c" bodystart="1574" bodyend="1597"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;minilang.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_cbor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_stream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_CBOR_BYTECODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_bytecode.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_object.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_bytecode.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ML_CATEGORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;cbor&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MINICBOR_READ_FN_PREFIX<sp/>ml_cbor_read_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MINICBOR_READDATA_TYPE<sp/>struct<sp/>ml_cbor_reader_t<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MINICBOR_WRITEDATA_TYPE<sp/>ml_cbor_writer_t<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MINICBOR_WRITE_FN<sp/>ml_cbor_write_raw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MINICBOR_WRITE_BUFFER(WRITER)<sp/>WRITER-&gt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;minicbor/minicbor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;minicbor/minicbor_reader.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="structml__cbor__tag__fns__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__cbor__tag__fns__t" kindref="compound">ml_cbor_tag_fns_t</ref><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>*Tags;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_tag_fn<sp/>*Fns;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/>Space;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">ml_cbor_tag_fn<sp/>ml_cbor_tag_fn_get(<ref refid="structml__cbor__tag__fns__t" kindref="compound">ml_cbor_tag_fns_t</ref><sp/>*TagFns,<sp/>uint64_t<sp/>Tag)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>*Tags<sp/>=<sp/>TagFns-&gt;Tags;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Lo<sp/>=<sp/>0,<sp/>Hi<sp/>=<sp/>TagFns-&gt;Count<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Lo<sp/>&lt;=<sp/>Hi)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Mid<sp/>=<sp/>(Lo<sp/>+<sp/>Hi)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tag<sp/>&lt;<sp/>Tags[Mid])<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hi<sp/>=<sp/>Mid<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tag<sp/>&gt;<sp/>Tags[Mid])<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Lo<sp/>=<sp/>Mid<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TagFns-&gt;Fns[Mid];</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_tag_fn_set(<ref refid="structml__cbor__tag__fns__t" kindref="compound">ml_cbor_tag_fns_t</ref><sp/>*TagFns,<sp/>uint64_t<sp/>Tag,<sp/>ml_cbor_tag_fn<sp/>Fn)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>*Tags<sp/>=<sp/>TagFns-&gt;Tags;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Lo<sp/>=<sp/>0,<sp/>Hi<sp/>=<sp/>TagFns-&gt;Count<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Lo<sp/>&lt;=<sp/>Hi)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Mid<sp/>=<sp/>(Lo<sp/>+<sp/>Hi)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tag<sp/>&lt;<sp/>Tags[Mid])<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hi<sp/>=<sp/>Mid<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tag<sp/>&gt;<sp/>Tags[Mid])<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Lo<sp/>=<sp/>Mid<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TagFns-&gt;Fns[Mid]<sp/>=<sp/>Fn;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_tag_fn<sp/>*Fns<sp/>=<sp/>TagFns-&gt;Fns;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Move<sp/>=<sp/>TagFns-&gt;Count<sp/>-<sp/>Lo;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--TagFns-&gt;Space<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(Tags<sp/>+<sp/>Lo<sp/>+<sp/>1,<sp/>Tags<sp/>+<sp/>Lo,<sp/>Move<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tags[Lo]<sp/>=<sp/>Tag;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(Fns<sp/>+<sp/>Lo<sp/>+<sp/>1,<sp/>Fns<sp/>+<sp/>Lo,<sp/>Move<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ml_cbor_tag_fn));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fns[Lo]<sp/>=<sp/>Fn;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>*Tags2<sp/>=<sp/>TagFns-&gt;Tags<sp/>=<sp/>anew(uint64_t,<sp/>TagFns-&gt;Count<sp/>+<sp/>8);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Tags2,<sp/>Tags,<sp/>Lo<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Tags2<sp/>+<sp/>Lo<sp/>+<sp/>1,<sp/>Tags<sp/>+<sp/>Lo,<sp/>Move<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tags2[Lo]<sp/>=<sp/>Tag;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_tag_fn<sp/>*Fns2<sp/>=<sp/>TagFns-&gt;Fns<sp/>=<sp/>anew(ml_cbor_tag_fn,<sp/>TagFns-&gt;Count<sp/>+<sp/>8);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Fns2,<sp/>Fns,<sp/>Lo<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ml_cbor_tag_fn));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Fns2<sp/>+<sp/>Lo<sp/>+<sp/>1,<sp/>Fns<sp/>+<sp/>Lo,<sp/>Move<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ml_cbor_tag_fn));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fns2[Lo]<sp/>=<sp/>Fn;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TagFns-&gt;Space<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>++TagFns-&gt;Count;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><ref refid="structml__cbor__tag__fns__t" kindref="compound">ml_cbor_tag_fns_t</ref><sp/>*ml_cbor_tag_fns_copy(<ref refid="structml__cbor__tag__fns__t" kindref="compound">ml_cbor_tag_fns_t</ref><sp/>*TagFns)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cbor__tag__fns__t" kindref="compound">ml_cbor_tag_fns_t</ref><sp/>*Copy<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__cbor__tag__fns__t" kindref="compound">ml_cbor_tag_fns_t</ref>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>Copy-&gt;Count<sp/>=<sp/>TagFns-&gt;Count;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Space<sp/>=<sp/>Copy-&gt;Space<sp/>=<sp/>TagFns-&gt;Space;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Count<sp/>+<sp/>Space;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>*Tags<sp/>=<sp/>Copy-&gt;Tags<sp/>=<sp/>anew(uint64_t,<sp/>Size);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(Tags,<sp/>TagFns-&gt;Tags,<sp/>Count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_tag_fn<sp/>*Fns<sp/>=<sp/>Copy-&gt;Fns<sp/>=<sp/>anew(ml_cbor_tag_fn,<sp/>Size);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(Fns,<sp/>TagFns-&gt;Fns,<sp/>Count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ml_cbor_tag_fn));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Copy;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__cbor__tag__fns__t" kindref="compound">ml_cbor_tag_fns_t</ref><sp/>DefaultTagFns[1]<sp/>=<sp/>{{NULL,<sp/>NULL,<sp/>0,<sp/>0}};</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_default_tag(uint64_t<sp/>Tag,<sp/>ml_cbor_tag_fn<sp/>TagFn)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_tag_fn_set(DefaultTagFns,<sp/>Tag,<sp/>TagFn);</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><ref refid="structml__cbor__tag__fns__t" kindref="compound">ml_cbor_tag_fns_t</ref><sp/>*ml_cbor_tag_fns(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Default)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Default)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_cbor_tag_fns_copy(DefaultTagFns);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__cbor__tag__fns__t" kindref="compound">ml_cbor_tag_fns_t</ref>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="structcollection__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcollection__t" kindref="compound">collection_t</ref><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcollection__t" kindref="compound">collection_t</ref><sp/>*Prev;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>*Tags;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Collection;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Remaining;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}<sp/><ref refid="structcollection__t" kindref="compound">collection_t</ref>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="structtag__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>*Prev;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_tag_fn<sp/>Handler;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}<sp/><ref refid="structtag__t" kindref="compound">tag_t</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="structml__cbor__reader__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcollection__t" kindref="compound">collection_t</ref><sp/>*Collection,<sp/>*FreeCollection;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>*Tags,<sp/>*FreeTag;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cbor__tag__fns__t" kindref="compound">ml_cbor_tag_fns_t</ref><sp/>*TagFns;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_external_fn_t<sp/>GlobalGet;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Globals;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Reused;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_reader_t<sp/>Reader[1];</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumReused,<sp/>MaxReused;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumSettings;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Settings[];</highlight></codeline>
<codeline lineno="134"><highlight class="normal">};</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumCborSettings<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_cbor_setting()<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NumCborSettings++;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*ml_cbor_reader(<ref refid="structml__cbor__tag__fns__t" kindref="compound">ml_cbor_tag_fns_t</ref><sp/>*TagFns,<sp/>ml_external_fn_t<sp/>GlobalGet,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Globals)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader<sp/>=<sp/>xnew(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref>,<sp/>NumCborSettings,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;TagFns<sp/>=<sp/>TagFns<sp/>?:<sp/>DefaultTagFns;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GlobalGet)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;GlobalGet<sp/>=<sp/>GlobalGet;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;Globals<sp/>=<sp/>Globals;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;GlobalGet<sp/>=<sp/>(ml_external_fn_t)ml_externals_get_value;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;Globals<sp/>=<sp/>MLExternals;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;NumSettings<sp/>=<sp/>NumCborSettings;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;NumReused<sp/>=<sp/>Reader-&gt;MaxReused<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_reader_init(Reader-&gt;Reader);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Reader-&gt;UserData<sp/>=<sp/>Reader;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Reader;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_reader_reset(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Collection<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Tags<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Value<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;NumReused<sp/>=<sp/>Reader-&gt;MaxReused<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Buffer[0]<sp/>=<sp/>ML_STRINGBUFFER_INIT;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_reader_init(Reader-&gt;Reader);</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_reader_set_setting(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Setting,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Setting<sp/>&lt;<sp/>Reader-&gt;NumSettings)<sp/>Reader-&gt;Settings[Setting]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ml_cbor_reader_get_setting(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Setting)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Setting<sp/>&lt;<sp/>Reader-&gt;NumSettings<sp/>?<sp/>Reader-&gt;Settings[Setting]<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_cbor_reader_next_index(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>Reader-&gt;NumReused++;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>==<sp/>Reader-&gt;MaxReused)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;MaxReused<sp/>=<sp/>Reader-&gt;MaxReused<sp/>+<sp/>8;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;Reused<sp/>=<sp/>GC_realloc(Reader-&gt;Reused,<sp/>Reader-&gt;MaxReused<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*));</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_cbor_reader_read(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Bytes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>minicbor_read(Reader-&gt;Reader,<sp/>Bytes,<sp/>Size);</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cbor_reader_get(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Reader-&gt;Value)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CBORError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;CBOR<sp/>not<sp/>completely<sp/>read&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Reader-&gt;Value;</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_cbor_reader_extra(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>minicbor_reader_remaining(Reader-&gt;Reader);</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>IsList[1];</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cbor_mark_reused(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CBORError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Mark<sp/>reused<sp/>should<sp/>not<sp/>be<sp/>called&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cbor_use_previous(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLIntegerT))<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>ml_integer_value(Value);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;<sp/>0<sp/>||<sp/>Index<sp/>&gt;=<sp/>Reader-&gt;NumReused)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CBORError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>previous<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>Reader-&gt;Reused[Index];</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Value)<sp/>Value<sp/>=<sp/>Reader-&gt;Reused[Index]<sp/>=<sp/>ml_uninitialized(</highlight><highlight class="stringliteral">&quot;CBOR&quot;</highlight><highlight class="normal">,<sp/>(<ref refid="structml__source__t" kindref="compound">ml_source_t</ref>){</highlight><highlight class="stringliteral">&quot;cbor&quot;</highlight><highlight class="normal">,<sp/>0});</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Value);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>Reader-&gt;GlobalGet(Reader-&gt;Globals,<sp/>Name);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Value)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CBORError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>global<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Name);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CBORError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>previous<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structcollection__t" kindref="compound">collection_t</ref><sp/>*collection_push(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcollection__t" kindref="compound">collection_t</ref><sp/>*Collection<sp/>=<sp/>Reader-&gt;FreeCollection;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Collection)<sp/>Reader-&gt;FreeCollection<sp/>=<sp/>Collection-&gt;Prev;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>Collection<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structcollection__t" kindref="compound">collection_t</ref>);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>Collection-&gt;Prev<sp/>=<sp/>Reader-&gt;Collection;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>Collection-&gt;Tags<sp/>=<sp/>Reader-&gt;Tags;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Tags<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Collection<sp/>=<sp/>Collection;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Collection;</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>value_handler(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>collection_pop(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcollection__t" kindref="compound">collection_t</ref><sp/>*Collection<sp/>=<sp/>Reader-&gt;Collection;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Collection<sp/>=<sp/>Collection-&gt;Prev;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Tags<sp/>=<sp/>Collection-&gt;Tags;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Collection-&gt;Collection;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>Collection-&gt;Prev<sp/>=<sp/>Reader-&gt;FreeCollection;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>Collection-&gt;Collection<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>Collection-&gt;Key<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;FreeCollection<sp/>=<sp/>Collection;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>value_handler(Reader,<sp/>Value);</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>value_handler(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>minicbor_reader_finish(Reader-&gt;Reader);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>*Tags<sp/>=<sp/>Reader-&gt;Tags;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tags)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>*Tag<sp/>=<sp/>Tags;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tag-&gt;Handler<sp/>==<sp/>ml_cbor_mark_reused)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Uninitialized<sp/>=<sp/>Reader-&gt;Reused[Tag-&gt;Index];</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Uninitialized)<sp/>ml_uninitialized_set(Uninitialized,<sp/>Value);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;Reused[Tag-&gt;Index]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>Tag-&gt;Handler(Reader,<sp/>Value);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>minicbor_reader_finish(Reader-&gt;Reader);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Tag-&gt;Prev)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tag<sp/>=<sp/>Tag-&gt;Prev;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tag-&gt;Prev<sp/>=<sp/>Reader-&gt;FreeTag;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;FreeTag<sp/>=<sp/>Tags;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;Tags<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcollection__t" kindref="compound">collection_t</ref><sp/>*Collection<sp/>=<sp/>Reader-&gt;Collection;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Collection)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_reader_finish(Reader-&gt;Reader);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Collection-&gt;Key<sp/>==<sp/>IsList)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Collection-&gt;Collection,<sp/>Value);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Collection-&gt;Remaining<sp/>&amp;&amp;<sp/>--Collection-&gt;Remaining<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collection_pop(Reader);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Collection-&gt;Key)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_map_insert(Collection-&gt;Collection,<sp/>Collection-&gt;Key,<sp/>Value);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Collection-&gt;Remaining<sp/>&amp;&amp;<sp/>--Collection-&gt;Remaining<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collection_pop(Reader);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Collection-&gt;Key<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Collection-&gt;Key<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_read_positive_fn(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/>uint64_t<sp/>Value)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>value_handler(Reader,<sp/>ml_integer(Value));</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_read_negative_fn(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/>uint64_t<sp/>Value)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>&lt;=<sp/>0x7FFFFFFFFFFFFFFFL)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_handler(Reader,<sp/>ml_integer(~(int64_t)Value));</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_handler(Reader,<sp/>ml_integer(Value));</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Implement<sp/>large<sp/>numbers<sp/>somehow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mpz_t<sp/>Temp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mpz_init_set_ui(Temp,<sp/>(uint32_t)(Value<sp/>&gt;&gt;<sp/>32));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mpz_mul_2exp(Temp,<sp/>Temp,<sp/>32);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mpz_add_ui(Temp,<sp/>Temp,<sp/>(uint32_t)Value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mpz_com(Temp,<sp/>Temp);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>value_handler(Reader,<sp/>Std$Integer$new_big(Temp));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_read_bytes_fn(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Size)<sp/>value_handler(Reader,<sp/>ml_address(NULL,<sp/>0));</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_read_bytes_piece_fn(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Bytes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Final)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Reader-&gt;Buffer,<sp/>Bytes,<sp/>Size);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Final)<sp/>value_handler(Reader,<sp/>ml_stringbuffer_to_address(Reader-&gt;Buffer));</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_read_string_fn(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Size)<sp/>value_handler(Reader,<sp/>ml_cstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_read_string_piece_fn(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Bytes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Final)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Reader-&gt;Buffer,<sp/>Bytes,<sp/>Size);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Final)<sp/>value_handler(Reader,<sp/>ml_stringbuffer_to_string(Reader-&gt;Buffer));</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_read_array_fn(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Size)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcollection__t" kindref="compound">collection_t</ref><sp/>*Collection<sp/>=<sp/>collection_push(Reader);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Collection-&gt;Remaining<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Collection-&gt;Key<sp/>=<sp/>IsList;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Collection-&gt;Collection<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_handler(Reader,<sp/>ml_list());</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_read_map_fn(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Size)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcollection__t" kindref="compound">collection_t</ref><sp/>*Collection<sp/>=<sp/>collection_push(Reader);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Collection-&gt;Remaining<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Collection-&gt;Key<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Collection-&gt;Collection<sp/>=<sp/>ml_map();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_handler(Reader,<sp/>ml_map());</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_read_tag_fn(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/>uint64_t<sp/>Value)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_tag_fn<sp/>Handler<sp/>=<sp/>ml_cbor_tag_fn_get(Reader-&gt;TagFns,<sp/>Value);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Handler)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtag__t" kindref="compound">tag_t</ref><sp/>*Tag<sp/>=<sp/>Reader-&gt;FreeTag;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tag)<sp/>Reader-&gt;FreeTag<sp/>=<sp/>Tag-&gt;Prev;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>Tag<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structtag__t" kindref="compound">tag_t</ref>);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tag-&gt;Prev<sp/>=<sp/>Reader-&gt;Tags;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tag-&gt;Handler<sp/>=<sp/>Handler;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Reimplement<sp/>this<sp/>without<sp/>hard-coding<sp/>tag<sp/>ML_CBOR_TAG_MARK_REUSED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>ML_CBOR_TAG_MARK_REUSED)<sp/>Tag-&gt;Index<sp/>=<sp/>ml_cbor_reader_next_index(Reader);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;Tags<sp/>=<sp/>Tag;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_read_float_fn(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Value)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>value_handler(Reader,<sp/>ml_real(Value));</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_read_simple_fn(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Value)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Value)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CBOR_SIMPLE_FALSE:</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_handler(Reader,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLFalse);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CBOR_SIMPLE_TRUE:</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_handler(Reader,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLTrue);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CBOR_SIMPLE_NULL:</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_handler(Reader,<sp/>MLNil);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_handler(Reader,<sp/>MLNil);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_read_break_fn(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>collection_pop(Reader);</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_read_error_fn(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Position,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Message)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>value_handler(Reader,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CBORError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Read<sp/>error:<sp/>%s<sp/>at<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>Message,<sp/>Position));</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_from_cbor(<ref refid="structml__cbor__t" kindref="compound">ml_cbor_t</ref><sp/>Cbor,<sp/><ref refid="structml__cbor__tag__fns__t" kindref="compound">ml_cbor_tag_fns_t</ref><sp/>*TagFns)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>Reader[1]<sp/>=<sp/>{{0,}};</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;TagFns<sp/>=<sp/>TagFns<sp/>?:<sp/>DefaultTagFns;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;GlobalGet<sp/>=<sp/>(ml_external_fn_t)ml_externals_get_value;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Globals<sp/>=<sp/>MLExternals;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Reused<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_reader_init(Reader-&gt;Reader);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Reader-&gt;UserData<sp/>=<sp/>Reader;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_read(Reader-&gt;Reader,<sp/>Cbor.Data,<sp/>Cbor.Length);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Extra<sp/>=<sp/>ml_cbor_reader_extra(Reader);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Extra)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CBORError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Extra<sp/>bytes<sp/>after<sp/>decoding:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>Extra);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_cbor_reader_get(Reader);</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><ref refid="structml__cbor__result__t" kindref="compound">ml_cbor_result_t</ref><sp/>ml_from_cbor_extra(<ref refid="structml__cbor__t" kindref="compound">ml_cbor_t</ref><sp/>Cbor,<sp/><ref refid="structml__cbor__tag__fns__t" kindref="compound">ml_cbor_tag_fns_t</ref><sp/>*TagFns)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>Reader[1]<sp/>=<sp/>{{0,}};</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;TagFns<sp/>=<sp/>TagFns<sp/>?:<sp/>DefaultTagFns;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;GlobalGet<sp/>=<sp/>(ml_external_fn_t)ml_externals_get_value;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Globals<sp/>=<sp/>MLExternals;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Reused<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_reader_init(Reader-&gt;Reader);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Reader-&gt;UserData<sp/>=<sp/>Reader;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_read(Reader-&gt;Reader,<sp/>Cbor.Data,<sp/>Cbor.Length);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__cbor__result__t" kindref="compound">ml_cbor_result_t</ref>){ml_cbor_reader_get(Reader),<sp/>ml_cbor_reader_extra(Reader)};</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal">ML_METHOD_ANON(CborDecode,<sp/></highlight><highlight class="stringliteral">&quot;cbor::decode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal">ML_METHOD(CborDecode,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="comment">//@cbor::decode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment">//&lt;Bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">//&gt;any|error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Decode<sp/>:mini:`Bytes`<sp/>into<sp/>a<sp/>Minilang<sp/>value,<sp/>or<sp/>return<sp/>an<sp/>error<sp/>if<sp/>:mini:`Bytes`<sp/>contains<sp/>invalid<sp/>CBOR<sp/>or<sp/>cannot<sp/>be<sp/>decoded<sp/>into<sp/>a<sp/>Minilang<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>Reader[1]<sp/>=<sp/>{{0,}};</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;TagFns<sp/>=<sp/>DefaultTagFns;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;GlobalGet<sp/>=<sp/>(ml_external_fn_t)ml_externals_get_value;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Globals<sp/>=<sp/>MLExternals;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Reused<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_reader_init(Reader-&gt;Reader);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Reader-&gt;UserData<sp/>=<sp/>Reader;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_read(Reader-&gt;Reader,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_address_value(Args[0]),<sp/>ml_address_length(Args[0]));</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Extra<sp/>=<sp/>ml_cbor_reader_extra(Reader);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Extra)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Reader-&gt;Value<sp/>&amp;&amp;<sp/>ml_is_error(Reader-&gt;Value))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Reader-&gt;Value;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CBORError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Extra<sp/>bytes<sp/>after<sp/>decoding:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>Extra);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_cbor_reader_get(Reader);</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cbor_global_get_map(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Map,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>ml_map_search(Map,<sp/>ml_string(Name,<sp/>-1));</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_externals_get_value(MLExternals,<sp/>Name);</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal">ML_METHOD(CborDecode,<sp/>MLAddressT,<sp/>MLMapT)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">//@cbor::decode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="comment">//&lt;Bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="comment">//&lt;Globals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="comment">//&gt;any|error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Decode<sp/>:mini:`Bytes`<sp/>into<sp/>a<sp/>Minilang<sp/>value,<sp/>or<sp/>return<sp/>an<sp/>error<sp/>if<sp/>:mini:`Bytes`<sp/>contains<sp/>invalid<sp/>CBOR<sp/>or<sp/>cannot<sp/>be<sp/>decoded<sp/>into<sp/>a<sp/>Minilang<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>Reader[1]<sp/>=<sp/>{{0,}};</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;TagFns<sp/>=<sp/>DefaultTagFns;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;GlobalGet<sp/>=<sp/>(ml_external_fn_t)ml_cbor_global_get_map;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Globals<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Reused<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_reader_init(Reader-&gt;Reader);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Reader-&gt;UserData<sp/>=<sp/>Reader;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_read(Reader-&gt;Reader,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_address_value(Args[0]),<sp/>ml_address_length(Args[0]));</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Extra<sp/>=<sp/>ml_cbor_reader_extra(Reader);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Extra)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Reader-&gt;Value<sp/>&amp;&amp;<sp/>ml_is_error(Reader-&gt;Value))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Reader-&gt;Value;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CBORError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Extra<sp/>bytes<sp/>after<sp/>decoding:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>Extra);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_cbor_reader_get(Reader);</highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cbor_global_get_fn(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Fn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args<sp/>=<sp/>ml_alloc_args(1);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>ml_string(Name,<sp/>-1);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_simple_call(Fn,<sp/>1,<sp/>Args);</highlight></codeline>
<codeline lineno="478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal">ML_METHOD(CborDecode,<sp/>MLAddressT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="comment">//@cbor::decode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment">//&lt;Bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="comment">//&lt;Globals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment">//&gt;any|error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Decode<sp/>:mini:`Bytes`<sp/>into<sp/>a<sp/>Minilang<sp/>value,<sp/>or<sp/>return<sp/>an<sp/>error<sp/>if<sp/>:mini:`Bytes`<sp/>contains<sp/>invalid<sp/>CBOR<sp/>or<sp/>cannot<sp/>be<sp/>decoded<sp/>into<sp/>a<sp/>Minilang<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>Reader[1]<sp/>=<sp/>{{0,}};</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;TagFns<sp/>=<sp/>DefaultTagFns;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;GlobalGet<sp/>=<sp/>(ml_external_fn_t)ml_cbor_global_get_fn;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Globals<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Reused<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_reader_init(Reader-&gt;Reader);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Reader-&gt;UserData<sp/>=<sp/>Reader;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_read(Reader-&gt;Reader,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_address_value(Args[0]),<sp/>ml_address_length(Args[0]));</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Extra<sp/>=<sp/>ml_cbor_reader_extra(Reader);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Extra)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Reader-&gt;Value<sp/>&amp;&amp;<sp/>ml_is_error(Reader-&gt;Value))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Reader-&gt;Value;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CBORError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Extra<sp/>bytes<sp/>after<sp/>decoding:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>Extra);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_cbor_reader_get(Reader);</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal">ML_METHOD(CborDecode,<sp/>MLAddressT,<sp/>MLExternalSetT)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="comment">//@cbor::decode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="comment">//&lt;Bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="comment">//&lt;Externals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="comment">//&gt;any|error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Decode<sp/>:mini:`Bytes`<sp/>into<sp/>a<sp/>Minilang<sp/>value,<sp/>or<sp/>return<sp/>an<sp/>error<sp/>if<sp/>:mini:`Bytes`<sp/>contains<sp/>invalid<sp/>CBOR<sp/>or<sp/>cannot<sp/>be<sp/>decoded<sp/>into<sp/>a<sp/>Minilang<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>Reader[1]<sp/>=<sp/>{{0,}};</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;TagFns<sp/>=<sp/>DefaultTagFns;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;GlobalGet<sp/>=<sp/>(ml_external_fn_t)ml_externals_get_value;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Globals<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Reused<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_reader_init(Reader-&gt;Reader);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Reader-&gt;UserData<sp/>=<sp/>Reader;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_read(Reader-&gt;Reader,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_address_value(Args[0]),<sp/>ml_address_length(Args[0]));</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Extra<sp/>=<sp/>ml_cbor_reader_extra(Reader);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Extra)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Reader-&gt;Value<sp/>&amp;&amp;<sp/>ml_is_error(Reader-&gt;Value))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Reader-&gt;Value;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CBORError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Extra<sp/>bytes<sp/>after<sp/>decoding:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>Extra);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_cbor_reader_get(Reader);</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524" refid="structml__cbor__decoder__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Values,<sp/>*Callback,<sp/>*Result;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[1];</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>Reader[1];</highlight></codeline>
<codeline lineno="529"><highlight class="normal">}<sp/><ref refid="structml__cbor__decoder__t" kindref="compound">ml_cbor_decoder_t</ref>;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_decoder_run(<ref refid="structml__cbor__decoder__t" kindref="compound">ml_cbor_decoder_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_list_length(State-&gt;Values))<sp/>ML_RETURN(State-&gt;Result);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_list_pop(State-&gt;Values);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>State-&gt;Callback,<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLCborDecoderT[];</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal">ML_FUNCTION(MLCborDecoder)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="comment">//@cbor::decoder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="comment">//&lt;Callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="comment">//&gt;cbor::decoder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>CBOR<sp/>decoder<sp/>that<sp/>calls<sp/>:mini:`Callback(Value)`<sp/>whenever<sp/>a<sp/>complete<sp/>CBOR<sp/>value<sp/>is<sp/>written<sp/>to<sp/>the<sp/>decoder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLFunctionT);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cbor__decoder__t" kindref="compound">ml_cbor_decoder_t</ref><sp/>*Decoder<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__cbor__decoder__t" kindref="compound">ml_cbor_decoder_t</ref>);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>Decoder-&gt;Base.Type<sp/>=<sp/>MLCborDecoderT;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>Decoder-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_cbor_decoder_run;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>Decoder-&gt;Values<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>Decoder-&gt;Callback<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>Decoder-&gt;Reader-&gt;TagFns<sp/>=<sp/>DefaultTagFns;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>Decoder-&gt;Reader-&gt;GlobalGet<sp/>=<sp/>(ml_external_fn_t)ml_externals_get_value;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>Decoder-&gt;Reader-&gt;Globals<sp/>=<sp/>MLExternals;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>Decoder-&gt;Reader-&gt;Reused<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_reader_init(Decoder-&gt;Reader-&gt;Reader);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>Decoder-&gt;Reader-&gt;Reader-&gt;UserData<sp/>=<sp/>Decoder-&gt;Reader;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Decoder;</highlight></codeline>
<codeline lineno="560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal">ML_TYPE(MLCborDecoderT,<sp/>(MLStreamT),<sp/></highlight><highlight class="stringliteral">&quot;cbor::decoder&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="comment">//@cbor::decoder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>CBOR<sp/>decoder<sp/>that<sp/>can<sp/>be<sp/>written<sp/>to<sp/>as<sp/>a<sp/>stream<sp/>and<sp/>calls<sp/>a<sp/>user-supplied<sp/>callback<sp/>whenever<sp/>a<sp/>complete<sp/>value<sp/>is<sp/>decoded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLCborDecoder</highlight></codeline>
<codeline lineno="566"><highlight class="normal">);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_stream_write,<sp/>MLCborDecoderT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__cbor__decoder__t" kindref="compound">ml_cbor_decoder_t</ref><sp/>*Decoder,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>Decoder-&gt;Result<sp/>=<sp/>ml_integer(Count);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader<sp/>=<sp/>Decoder-&gt;Reader;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_read(Reader-&gt;Reader,<sp/>Address,<sp/>Count);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Reader-&gt;Value)<sp/>ML_RETURN(Decoder-&gt;Result);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Reader-&gt;Value))<sp/>ML_RETURN(Reader-&gt;Value);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Decoder-&gt;Values,<sp/>Reader-&gt;Value);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;Value<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Extra<sp/>=<sp/>ml_cbor_reader_extra(Reader);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;Reused<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_reader_init(Reader-&gt;Reader);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Extra)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>(Count<sp/>-<sp/>Extra);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Count<sp/>=<sp/>Extra;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_list_length(Decoder-&gt;Values))<sp/>ML_RETURN(Decoder-&gt;Result);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>Decoder-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>Decoder-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>Decoder-&gt;Args[0]<sp/>=<sp/>ml_list_pop(Decoder-&gt;Values);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Decoder,<sp/>Decoder-&gt;Callback,<sp/>1,<sp/>Decoder-&gt;Args);</highlight></codeline>
<codeline lineno="589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_stream_flush,<sp/>MLCborDecoderT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__cbor__decoder__t" kindref="compound">ml_cbor_decoder_t</ref><sp/>*Decoder)<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Extra<sp/>=<sp/>ml_cbor_reader_extra(Decoder-&gt;Reader);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Extra)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;CBORError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Extra<sp/>bytes<sp/>after<sp/>decoding:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>Extra);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>Decoder-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>Decoder-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>Decoder-&gt;Args[0]<sp/>=<sp/>ml_list_pop(Decoder-&gt;Values);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Decoder,<sp/>Decoder-&gt;Callback,<sp/>1,<sp/>Decoder-&gt;Args);</highlight></codeline>
<codeline lineno="598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600" refid="structml__cbor__writer__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_write_fn<sp/>WriteFn;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref><sp/>*Externals;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinthash__t" kindref="compound">inthash_t</ref><sp/>References[1];</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinthash__t" kindref="compound">inthash_t</ref><sp/>Reused[1];</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>jmp_buf<sp/>OnError;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index,<sp/>NumSettings;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Buffer[9];</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Settings[];</highlight></codeline>
<codeline lineno="611"><highlight class="normal">};</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_cbor_write_raw(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Bytes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Result<sp/>=<sp/>Writer-&gt;WriteFn(Writer-&gt;Data,<sp/>Bytes,<sp/>Length);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result<sp/>==<sp/>-1)<sp/>ML_CBOR_WRITER_ERROR(Writer,<sp/></highlight><highlight class="stringliteral">&quot;CBORError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Write<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;minicbor/minicbor_writer.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_write_integer(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/>int64_t<sp/>Number)<sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_integer(Writer,<sp/>Number);</highlight></codeline>
<codeline lineno="623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_write_positive(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/>uint64_t<sp/>Number)<sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_positive(Writer,<sp/>Number);</highlight></codeline>
<codeline lineno="627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_write_negative(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/>uint64_t<sp/>Number)<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_negative(Writer,<sp/>Number);</highlight></codeline>
<codeline lineno="631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_write_bytes(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>Size)<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_bytes(Writer,<sp/>Size);</highlight></codeline>
<codeline lineno="635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_write_indef_bytes(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_indef_bytes(Writer);</highlight></codeline>
<codeline lineno="639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_write_string(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>Size)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_string(Writer,<sp/>Size);</highlight></codeline>
<codeline lineno="643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_write_indef_string(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_indef_string(Writer);</highlight></codeline>
<codeline lineno="647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_write_array(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>Size)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_array(Writer,<sp/>Size);</highlight></codeline>
<codeline lineno="651"><highlight class="normal">}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_write_indef_array(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer)<sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_indef_array(Writer);</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_write_map(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>Size)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_map(Writer,<sp/>Size);</highlight></codeline>
<codeline lineno="659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_write_indef_map(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_indef_map(Writer);</highlight></codeline>
<codeline lineno="663"><highlight class="normal">}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_write_float2(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Number)<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_float2(Writer,<sp/>Number);</highlight></codeline>
<codeline lineno="667"><highlight class="normal">}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_write_float4(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Number)<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_float4(Writer,<sp/>Number);</highlight></codeline>
<codeline lineno="671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_write_float8(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Number)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_float8(Writer,<sp/>Number);</highlight></codeline>
<codeline lineno="675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_write_simple(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Simple)<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_simple(Writer,<sp/>Simple);</highlight></codeline>
<codeline lineno="679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_write_break(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_break(Writer);</highlight></codeline>
<codeline lineno="683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_write_tag(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/>uint64_t<sp/>Tag)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_tag(Writer,<sp/>Tag);</highlight></codeline>
<codeline lineno="687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*ml_cbor_writer(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_cbor_write_fn<sp/>WriteFn,<sp/><ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref><sp/>*Externals)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer<sp/>=<sp/>xnew(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref>,<sp/>NumCborSettings,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Data<sp/>=<sp/>Data;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;WriteFn<sp/>=<sp/>WriteFn;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Externals<sp/>=<sp/>Externals<sp/>?:<sp/>MLExternals;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;References[0]<sp/>=<sp/>INTHASH_INIT;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Reused[0]<sp/>=<sp/>INTHASH_INIT;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;NumSettings<sp/>=<sp/>NumCborSettings;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Writer;</highlight></codeline>
<codeline lineno="699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_writer_reset(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data)<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Data<sp/>=<sp/>Data;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;References[0]<sp/>=<sp/>INTHASH_INIT;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Reused[0]<sp/>=<sp/>INTHASH_INIT;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_writer_set_setting(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Setting,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Setting<sp/>&lt;<sp/>Writer-&gt;NumSettings)<sp/>Writer-&gt;Settings[Setting]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ml_cbor_writer_get_setting(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Setting)<sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Setting<sp/>&lt;<sp/>Writer-&gt;NumSettings<sp/>?<sp/>Writer-&gt;Settings[Setting]<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_cbor_writer_ref_fn(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HasRefs)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!HasRefs)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inthash_insert(Writer-&gt;References,<sp/>(uintptr_t)Value,<sp/>Value))<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inthash_insert(Writer-&gt;Reused,<sp/>(uintptr_t)Value,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)0L);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_writer_find_refs(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_value_find_all(Value,<sp/>Writer,<sp/>(ml_value_find_fn)ml_cbor_writer_ref_fn);</highlight></codeline>
<codeline lineno="727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_writer_error(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error)<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Error<sp/>=<sp/>Error;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>longjmp(Writer-&gt;OnError,<sp/>1);</highlight></codeline>
<codeline lineno="732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_write(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*if<sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_write_simple(Writer,<sp/>CBOR_SIMPLE_NULL);</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(Value<sp/>==<sp/>(ml_value_t<sp/>*)MLTrue)<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_write_simple(Writer,<sp/>CBOR_SIMPLE_TRUE);</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(Value<sp/>==<sp/>(ml_value_t<sp/>*)MLFalse)<sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_write_simple(Writer,<sp/>CBOR_SIMPLE_FALSE);</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/><sp/><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinthash__result__t" kindref="compound">inthash_result_t</ref><sp/>Result<sp/>=<sp/>inthash_search2(Writer-&gt;Reused,<sp/>(uintptr_t)Value);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result.Present)<sp/>{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result.Value)<sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>(uintptr_t)Result.Value<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_write_tag(Writer,<sp/>ML_CBOR_TAG_USE_PREVIOUS);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_write_integer(Writer,<sp/>Index);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>++Writer-&gt;Index;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inthash_insert(Writer-&gt;Reused,<sp/>(uintptr_t)Value,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(uintptr_t)Index);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_write_tag(Writer,<sp/>ML_CBOR_TAG_MARK_REUSED);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_externals_get_name(Writer-&gt;Externals,<sp/>Value);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Name)<sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_write_tag(Writer,<sp/>ML_CBOR_TAG_USE_PREVIOUS);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>strlen(Name);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_write_string(Writer,<sp/>Length);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Writer-&gt;WriteFn(Writer-&gt;Data,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Name,<sp/>Length);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_cbor_write)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Value),<sp/>ml_cbor_write);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(function)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(Writer,<sp/>Value);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Serialized<sp/>=<sp/>ml_serialize(Value);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Serialized))<sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CBOR_WRITER_ERROR(Writer,<sp/></highlight><highlight class="stringliteral">&quot;CBORError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>method<sp/>to<sp/>encode<sp/>%s<sp/>to<sp/>CBOR&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Value)-&gt;Name);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_write_tag(Writer,<sp/>ML_CBOR_TAG_OBJECT);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_write_array(Writer,<sp/>ml_list_length(Serialized));</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Serialized,<sp/>Iter)<sp/>ml_cbor_write(Writer,<sp/>Iter-&gt;Value);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cbor_try_write(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setjmp(Writer-&gt;OnError))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Writer-&gt;Error;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_write(Writer,<sp/>Value);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><ref refid="structml__cbor__t" kindref="compound">ml_cbor_t</ref><sp/>ml_cbor_encode(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>Writer[1];</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Data<sp/>=<sp/>Buffer;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;WriteFn<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_stringbuffer_write;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Externals<sp/>=<sp/>MLExternals;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;References[0]<sp/>=<sp/>INTHASH_INIT;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Reused[0]<sp/>=<sp/>INTHASH_INIT;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;NumSettings<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setjmp(Writer-&gt;OnError))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__cbor__t" kindref="compound">ml_cbor_t</ref>){{.Error<sp/>=<sp/>Writer-&gt;Error},<sp/>0};</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_writer_find_refs(Writer,<sp/>Value);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_write(Writer,<sp/>Value);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Buffer-&gt;Length;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__cbor__t" kindref="compound">ml_cbor_t</ref>){{.Error<sp/>=<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CBORError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>CBOR<sp/>encoding&quot;</highlight><highlight class="normal">)},<sp/>0};</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__cbor__t" kindref="compound">ml_cbor_t</ref>){{.Data<sp/>=<sp/>ml_stringbuffer_get_string(Buffer)},<sp/>Size};</highlight></codeline>
<codeline lineno="801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cbor_encode_to(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_cbor_write_fn<sp/>WriteFn,<sp/><ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref><sp/>*Externals,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>Writer[1];</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Data<sp/>=<sp/>Data;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;WriteFn<sp/>=<sp/>WriteFn;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Externals<sp/>=<sp/>Externals;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;References[0]<sp/>=<sp/>INTHASH_INIT;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Reused[0]<sp/>=<sp/>INTHASH_INIT;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;NumSettings<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setjmp(Writer-&gt;OnError))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Writer-&gt;Error;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_writer_find_refs(Writer,<sp/>Value);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_write(Writer,<sp/>Value);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><ref refid="structml__cbor__t" kindref="compound">ml_cbor_t</ref><sp/>ml_to_cbor(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_cbor_encode(Value);</highlight></codeline>
<codeline lineno="820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vlq64_encode(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/>int64_t<sp/>Value)<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Bytes[9];</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>X<sp/>=<sp/>(uint64_t)Value;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Sign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X<sp/>=<sp/>~X;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sign<sp/>=<sp/>128;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>Y<sp/>=<sp/>X<sp/>&amp;<sp/>63;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>X<sp/>&gt;&gt;=<sp/>6;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!X)<sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bytes[0]<sp/>=<sp/>Sign<sp/>+<sp/>Y;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Bytes,<sp/>1);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bytes[0]<sp/>=<sp/>Sign<sp/>+<sp/>64<sp/>+<sp/>Y;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Ptr<sp/>=<sp/>Bytes<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>8;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Y<sp/>=<sp/>X<sp/>&amp;<sp/>127;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X<sp/>&gt;&gt;=<sp/>6;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!X)<sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Ptr<sp/>=<sp/>Y;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Bytes,<sp/>(Ptr<sp/>-<sp/>Bytes)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Ptr++<sp/>=<sp/>128<sp/>+<sp/>Y;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)X;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Bytes,<sp/>(Ptr<sp/>-<sp/>Bytes)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal">}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vlq64_encode_string(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>strlen(Value);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Length);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Value,<sp/>Length);</highlight></codeline>
<codeline lineno="857"><highlight class="normal">}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_closure_info_param_fn(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Params[])<sp/>{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>Params[(intptr_t)Index<sp/>-<sp/>1]<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_closure_find_decl(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/><ref refid="structinthash__t" kindref="compound">inthash_t</ref><sp/>*Decls,<sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl)<sp/>{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Decl)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinthash__result__t" kindref="compound">inthash_result_t</ref><sp/>Result<sp/>=<sp/>inthash_search2(Decls,<sp/>(uintptr_t)Decl);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result.Present)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uintptr_t)Result.Value;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Next<sp/>=<sp/>ml_closure_find_decl(Buffer,<sp/>Decls,<sp/>Decl-&gt;Next);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>Decls-&gt;Size<sp/>-<sp/>Decls-&gt;Space;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>vlq64_encode_string(Buffer,<sp/>Decl-&gt;Ident);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Next);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Decl-&gt;Source.Line);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Decl-&gt;Index);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Decl-&gt;Flags);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>inthash_insert(Decls,<sp/>(uintptr_t)Decl,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(uintptr_t)Index);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_stringbuffer_copy(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*String,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>String,<sp/>Length);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="882"><highlight class="normal">}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_stringbuffer_to_cbor(<ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*String,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;WriteFn(Writer-&gt;Data,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)String,<sp/>Length);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLClosureInfoT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__closure__info__t" kindref="compound">ml_closure_info_t</ref><sp/>*Info)<sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>ML_BYTECODE_VERSION);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>vlq64_encode_string(Buffer,<sp/>Info-&gt;Name<sp/>?:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>vlq64_encode_string(Buffer,<sp/>Info-&gt;Source<sp/>?:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Info-&gt;StartLine);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Info-&gt;FrameSize);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Info-&gt;NumParams);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Info-&gt;NumUpValues);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Info-&gt;Flags<sp/>&amp;<sp/>(ML_CLOSURE_EXTRA_ARGS<sp/>|<sp/>ML_CLOSURE_NAMED_ARGS));</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Params[Info-&gt;NumParams];</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_foreach(Info-&gt;Params,<sp/>Params,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_closure_info_param_fn);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Info-&gt;NumParams;<sp/>++I)<sp/>vlq64_encode_string(Buffer,<sp/>Params[I]);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinthash__t" kindref="compound">inthash_t</ref><sp/>Labels[1]<sp/>=<sp/>{INTHASH_INIT};</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>BaseOffset<sp/>=<sp/>0,<sp/>Return<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*Base<sp/>=<sp/>Info-&gt;Entry;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_closure_info_labels(Info);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinthash__t" kindref="compound">inthash_t</ref><sp/>Decls[1]<sp/>=<sp/>{INTHASH_INIT};</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>DeclBuffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DeclsIndex<sp/>=<sp/>ml_closure_find_decl(DeclBuffer,<sp/>Decls,<sp/>Info-&gt;Decls);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*Inst<sp/>=<sp/>Info-&gt;Entry;<sp/>Inst<sp/>!=<sp/>Info-&gt;Halt;)<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Inst-&gt;Label)<sp/>inthash_insert(Labels,<sp/>Inst-&gt;Label,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)((Inst<sp/>-<sp/>Base)<sp/>+<sp/>BaseOffset));</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Inst-&gt;Opcode<sp/>==<sp/>MLI_LINK)<sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseOffset<sp/>+=<sp/>Inst<sp/>-<sp/>Base;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base<sp/>=<sp/>Inst<sp/>=<sp/>Inst[1].Inst;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Inst<sp/>==<sp/>Info-&gt;Return)<sp/>Return<sp/>=<sp/>(Inst<sp/>-<sp/>Base)<sp/>+<sp/>BaseOffset;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(MLInstTypes[Inst-&gt;Opcode])<sp/>{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_NONE:</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_INST:</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_INST_CONFIG:</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_INST_COUNT:</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_INST_COUNT_DECL:</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_closure_find_decl(DeclBuffer,<sp/>Decls,<sp/>Inst[3].Decls);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_COUNT_COUNT:</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_COUNT:</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_VALUE:</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_VALUE_COUNT:</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_VALUE_COUNT_DATA:</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_COUNT_CHARS:</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_DECL:</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_closure_find_decl(DeclBuffer,<sp/>Decls,<sp/>Inst[1].Decls);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_COUNT_DECL:</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_closure_find_decl(DeclBuffer,<sp/>Decls,<sp/>Inst[2].Decls);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_COUNT_COUNT_DECL:</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_closure_find_decl(DeclBuffer,<sp/>Decls,<sp/>Inst[3].Decls);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_CLOSURE:</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>2<sp/>+<sp/>Inst[1].ClosureInfo-&gt;NumUpValues;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_SWITCH:</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>__builtin_unreachable();</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Decls-&gt;Size<sp/>-<sp/>Decls-&gt;Space);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_drain(DeclBuffer,<sp/>Buffer,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_stringbuffer_copy);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>DeclsIndex);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>(Info-&gt;Halt<sp/>-<sp/>Base)<sp/>+<sp/>BaseOffset);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Return);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line<sp/>=<sp/>Info-&gt;Entry-&gt;Line;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Info-&gt;Entry-&gt;Line<sp/>-<sp/>Info-&gt;StartLine);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Values<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*Inst<sp/>=<sp/>Info-&gt;Entry;<sp/>Inst<sp/>!=<sp/>Info-&gt;Halt;)<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Inst-&gt;Opcode<sp/>==<sp/>MLI_LINK)<sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>=<sp/>Inst[1].Inst;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Inst-&gt;Line<sp/>!=<sp/>Line)<sp/>{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>MLI_LINK);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Inst-&gt;Line<sp/>-<sp/>Line);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Line<sp/>=<sp/>Inst-&gt;Line;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Inst-&gt;Opcode);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(MLInstTypes[Inst-&gt;Opcode])<sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_NONE:</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_INST:</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>(uintptr_t)inthash_search(Labels,<sp/>Inst[1].Inst-&gt;Label));</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_INST_CONFIG:</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Implement<sp/>this!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>(uintptr_t)inthash_search(Labels,<sp/>Inst[1].Inst-&gt;Label));</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_INST_COUNT:</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>(uintptr_t)inthash_search(Labels,<sp/>Inst[1].Inst-&gt;Label));</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Inst[2].Count);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_INST_COUNT_DECL:</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>(uintptr_t)inthash_search(Labels,<sp/>Inst[1].Inst-&gt;Label));</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Inst[2].Count);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>(uintptr_t)inthash_search(Decls,<sp/>(uintptr_t)Inst[3].Decls));</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_COUNT_COUNT:</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Inst[1].Count);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Inst[2].Count);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_COUNT:</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Inst[1].Count);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_VALUE:</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Values,<sp/>Inst[1].Value);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_VALUE_COUNT:</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Values,<sp/>Inst[1].Value);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Inst[2].Count);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_VALUE_COUNT_DATA:</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Values,<sp/>Inst[1].Value);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Inst[2].Count);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_COUNT_CHARS:</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Inst[1].Count);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Inst[2].Chars,<sp/>Inst[1].Count);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_DECL:</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>(uintptr_t)inthash_search(Decls,<sp/>(uintptr_t)Inst[1].Decls));</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_COUNT_DECL:</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Inst[1].Count);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>(uintptr_t)inthash_search(Decls,<sp/>(uintptr_t)Inst[2].Decls));</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_COUNT_COUNT_DECL:</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Inst[1].Count);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Inst[2].Count);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>(uintptr_t)inthash_search(Decls,<sp/>(uintptr_t)Inst[3].Decls));</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_CLOSURE:<sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__closure__info__t" kindref="compound">ml_closure_info_t</ref><sp/>*Info<sp/>=<sp/>Inst[1].ClosureInfo;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Info-&gt;Type<sp/>=<sp/>MLClosureInfoT;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Values,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Info);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Info-&gt;NumUpValues);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>0;<sp/>N<sp/>&lt;<sp/>Info-&gt;NumUpValues;<sp/>++N)<sp/>vlq64_encode(Buffer,<sp/>Inst[2<sp/>+<sp/>N].Count);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>2<sp/>+<sp/>Info-&gt;NumUpValues;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_SWITCH:<sp/>{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>Inst[1].Count);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>0;<sp/>N<sp/>&lt;<sp/>Inst[1].Count;<sp/>++N)<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vlq64_encode(Buffer,<sp/>(uintptr_t)inthash_search(Labels,<sp/>Inst[2].Insts[N]-&gt;Label));</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>__builtin_unreachable();</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_tag(Writer,<sp/>ML_CBOR_TAG_OBJECT);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_array(Writer,<sp/>ml_list_length(Values)<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_string(Writer,<sp/>1);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;WriteFn(Writer-&gt;Data,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;!&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_bytes(Writer,<sp/>Buffer-&gt;Length);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_drain(Buffer,<sp/>Writer,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_stringbuffer_to_cbor);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Values,<sp/>Iter)<sp/>ml_cbor_write(Writer,<sp/>Iter-&gt;Value);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLClosureT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__closure__t" kindref="compound">ml_closure_t</ref><sp/>*Closure)<sp/>{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_tag(Writer,<sp/>ML_CBOR_TAG_OBJECT);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__closure__info__t" kindref="compound">ml_closure_info_t</ref><sp/>*Info<sp/>=<sp/>Closure-&gt;Info;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Type<sp/>=<sp/>MLClosureInfoT;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_array(Writer,<sp/>2<sp/>+<sp/>Info-&gt;NumUpValues);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_string(Writer,<sp/>1);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;WriteFn(Writer-&gt;Data,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_write(Writer,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Info);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Info-&gt;NumUpValues;<sp/>++I)<sp/>ml_cbor_write(Writer,<sp/>Closure-&gt;UpValues[I]);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLSomeT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Global)<sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_tag(Writer,<sp/>ML_CBOR_TAG_OBJECT);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_array(Writer,<sp/>1);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_string(Writer,<sp/>4);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;WriteFn(Writer-&gt;Data,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;some&quot;</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLGlobalT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Global)<sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_write(Writer,<sp/>ml_global_get(Global));</highlight></codeline>
<codeline lineno="1108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLIntegerT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg)<sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%s()\n&quot;,<sp/>__func__);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Value<sp/>=<sp/>ml_integer_value_fast(Arg);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_write_negative(Writer,<sp/>~Value);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_write_positive(Writer,<sp/>Value);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLAddressT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg)<sp/>{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%s()\n&quot;,<sp/>__func__);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_bytes(Writer,<sp/>ml_address_length(Arg));</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;WriteFn(Writer-&gt;Data,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_address_value(Arg),<sp/>ml_address_length(Arg));</highlight></codeline>
<codeline lineno="1124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLStringT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg)<sp/>{</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%s()\n&quot;,<sp/>__func__);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_string(Writer,<sp/>ml_string_length(Arg));</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;WriteFn(Writer-&gt;Data,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_string_value(Arg),<sp/>ml_string_length(Arg));</highlight></codeline>
<codeline lineno="1130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLRegexT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg)<sp/>{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%s()\n&quot;,<sp/>__func__);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Pattern<sp/>=<sp/>ml_regex_pattern(Arg);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_tag(Writer,<sp/>ML_CBOR_TAG_REGEX);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_string(Writer,<sp/>strlen(Pattern));</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;WriteFn(Writer-&gt;Data,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Pattern,<sp/>strlen(Pattern));</highlight></codeline>
<codeline lineno="1138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLTupleT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg)<sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_tag(Writer,<sp/>ML_CBOR_TAG_OBJECT);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>ml_tuple_size(Arg);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_array(Writer,<sp/>1<sp/>+<sp/>Size);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_string(Writer,<sp/>5);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;WriteFn(Writer-&gt;Data,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;tuple&quot;</highlight><highlight class="normal">,<sp/>5);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;=<sp/>Size;<sp/>++I)<sp/>ml_cbor_write(Writer,<sp/>ml_tuple_get(Arg,<sp/>I));</highlight></codeline>
<codeline lineno="1147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLListT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg)<sp/>{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_array(Writer,<sp/>ml_list_length(Arg));</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Arg,<sp/>Node)<sp/>ml_cbor_write(Writer,<sp/>Node-&gt;Value);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLMapT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg)<sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_map(Writer,<sp/>ml_map_size(Arg));</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_MAP_FOREACH(Arg,<sp/>Node)<sp/>{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write(Writer,<sp/>Node-&gt;Key);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write(Writer,<sp/>Node-&gt;Value);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLDoubleT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg)<sp/>{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_float8(Writer,<sp/>ml_double_value_fast(Arg));</highlight></codeline>
<codeline lineno="1164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLNilT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg)<sp/>{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_simple(Writer,<sp/>CBOR_SIMPLE_NULL);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLBooleanT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg)<sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_simple(Writer,<sp/>ml_boolean_value(Arg)<sp/>?<sp/>CBOR_SIMPLE_TRUE<sp/>:<sp/>CBOR_SIMPLE_FALSE);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLMethodT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg)<sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_method_name(Arg);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_tag(Writer,<sp/>ML_CBOR_TAG_IDENTIFIER);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_string(Writer,<sp/>strlen(Name));</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;WriteFn(Writer-&gt;Data,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Name,<sp/>strlen(Name));</highlight></codeline>
<codeline lineno="1179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLObjectT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg)<sp/>{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_tag(Writer,<sp/>ML_CBOR_TAG_OBJECT);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>ml_object_size(Arg);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_array(Writer,<sp/>1<sp/>+<sp/>Size);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_typeof(Arg)-&gt;Name;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_string(Writer,<sp/>strlen(Name));</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;WriteFn(Writer-&gt;Data,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Name,<sp/>strlen(Name));</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>ml_cbor_write(Writer,<sp/>ml_object_field(Arg,<sp/>I));</highlight></codeline>
<codeline lineno="1189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLIntegerRangeT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Arg)<sp/>{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_tag(Writer,<sp/>ML_CBOR_TAG_OBJECT);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Arg-&gt;Step<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_write_array(Writer,<sp/>4);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_write_string(Writer,<sp/>5);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Writer-&gt;WriteFn(Writer-&gt;Data,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;range&quot;</highlight><highlight class="normal">,<sp/>5);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_write_integer(Writer,<sp/>Arg-&gt;Start);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_write_integer(Writer,<sp/>Arg-&gt;Limit);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_write_integer(Writer,<sp/>Arg-&gt;Step);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_write_array(Writer,<sp/>3);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_write_string(Writer,<sp/>5);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Writer-&gt;WriteFn(Writer-&gt;Data,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;range&quot;</highlight><highlight class="normal">,<sp/>5);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_write_integer(Writer,<sp/>Arg-&gt;Start);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minicbor_write_integer(Writer,<sp/>Arg-&gt;Limit);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLRealRangeT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Arg)<sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_tag(Writer,<sp/>ML_CBOR_TAG_OBJECT);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_array(Writer,<sp/>4);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_string(Writer,<sp/>5);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;WriteFn(Writer-&gt;Data,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;range&quot;</highlight><highlight class="normal">,<sp/>5);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_float8(Writer,<sp/>Arg-&gt;Start);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_float8(Writer,<sp/>Arg-&gt;Limit);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_float8(Writer,<sp/>Arg-&gt;Step);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>I</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cbor_read_complex(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Value,<sp/>MLListT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TagError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Complex<sp/>requires<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_list_length(Value)<sp/>!=<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TagError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Complex<sp/>requires<sp/>2<sp/>values&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(ml_real_value(ml_list_get(Value,<sp/>1))<sp/>+<sp/>ml_real_value(ml_list_get(Value,<sp/>2))<sp/>*<sp/>_Complex_I);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLComplexT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/>ml_complex_t<sp/>*Arg)<sp/>{</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_tag(Writer,<sp/>43000);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_array(Writer,<sp/>2);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_float8(Writer,<sp/>creal(Arg-&gt;Value));</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_float8(Writer,<sp/>cimag(Arg-&gt;Value));</highlight></codeline>
<codeline lineno="1235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal">ML_FUNCTION(DecodeComplex)<sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLRealT);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>MLRealT);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(ml_real_value(Args[0])<sp/>+<sp/>ml_real_value(Args[1])<sp/>*<sp/>_Complex_I);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLExternalT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__external__t" kindref="compound">ml_external_t</ref><sp/>*Arg)<sp/>{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_tag(Writer,<sp/>ML_CBOR_TAG_USE_PREVIOUS);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_string(Writer,<sp/>Arg-&gt;Length);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;WriteFn(Writer-&gt;Data,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Arg-&gt;Name,<sp/>Arg-&gt;Length);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLSomeT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg)<sp/>{</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_tag(Writer,<sp/>ML_CBOR_TAG_OBJECT);</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_array(Writer,<sp/>1);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>minicbor_write_string(Writer,<sp/>4);</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;WriteFn(Writer-&gt;Data,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;some&quot;</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal">ML_METHOD_ANON(CborEncode,<sp/></highlight><highlight class="stringliteral">&quot;cbor::encode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal">ML_METHOD(CborEncode,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight><highlight class="comment">//@cbor::encode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="comment">//&gt;address|error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Encode<sp/>:mini:`Value`<sp/>into<sp/>CBOR<sp/>or<sp/>return<sp/>an<sp/>error<sp/>if<sp/>:mini:`Value`<sp/>cannot<sp/>be<sp/>encoded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cbor__t" kindref="compound">ml_cbor_t</ref><sp/>Cbor<sp/>=<sp/>ml_cbor_encode(Args[0]);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Cbor.Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Cbor.Error;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Cbor.Data)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_address(Cbor.Data,<sp/>Cbor.Length);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CborError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>encoding<sp/>to<sp/>cbor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal">ML_METHOD(CborEncode,<sp/>MLAnyT,<sp/>MLStringBufferT)<sp/>{</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight><highlight class="comment">//@cbor::encode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="comment">//&gt;address|error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Encode<sp/>:mini:`Value`<sp/>into<sp/>CBOR<sp/>or<sp/>return<sp/>an<sp/>error<sp/>if<sp/>:mini:`Value`<sp/>cannot<sp/>be<sp/>encoded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>Writer[1];</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Data<sp/>=<sp/>Buffer;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;WriteFn<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_stringbuffer_write;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Externals<sp/>=<sp/>MLExternals;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;References[0]<sp/>=<sp/>INTHASH_INIT;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Reused[0]<sp/>=<sp/>INTHASH_INIT;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;NumSettings<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setjmp(Writer-&gt;OnError))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Writer-&gt;Error;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_writer_find_refs(Writer,<sp/>Value);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_write(Writer,<sp/>Value);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Buffer;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal">ML_METHOD(CborEncode,<sp/>MLAnyT,<sp/>MLExternalSetT)<sp/>{</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="comment">//@cbor::encode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="comment">//&lt;Externals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="comment">//&gt;address|error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Encode<sp/>:mini:`Value`<sp/>into<sp/>CBOR<sp/>or<sp/>return<sp/>an<sp/>error<sp/>if<sp/>:mini:`Value`<sp/>cannot<sp/>be<sp/>encoded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>Writer[1];</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Data<sp/>=<sp/>Buffer;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;WriteFn<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_stringbuffer_write;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Externals<sp/>=<sp/>(<ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;References[0]<sp/>=<sp/>INTHASH_INIT;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Reused[0]<sp/>=<sp/>INTHASH_INIT;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;NumSettings<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setjmp(Writer-&gt;OnError))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Writer-&gt;Error;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_writer_find_refs(Writer,<sp/>Value);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_write(Writer,<sp/>Value);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>Buffer-&gt;Length;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_address(ml_stringbuffer_get_string(Buffer),<sp/>Length);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal">ML_METHOD(CborEncode,<sp/>MLAnyT,<sp/>MLStringBufferT,<sp/>MLExternalSetT)<sp/>{</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight><highlight class="comment">//@cbor::encode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="comment">//&lt;Externals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight><highlight class="comment">//&gt;address|error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Encode<sp/>:mini:`Value`<sp/>into<sp/>CBOR<sp/>or<sp/>return<sp/>an<sp/>error<sp/>if<sp/>:mini:`Value`<sp/>cannot<sp/>be<sp/>encoded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>Writer[1];</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Data<sp/>=<sp/>Buffer;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;WriteFn<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_stringbuffer_write;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Externals<sp/>=<sp/>(<ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref><sp/>*)Args[2];</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;References[0]<sp/>=<sp/>INTHASH_INIT;</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Reused[0]<sp/>=<sp/>INTHASH_INIT;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;NumSettings<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setjmp(Writer-&gt;OnError))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Writer-&gt;Error;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_writer_find_refs(Writer,<sp/>Value);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_write(Writer,<sp/>Value);</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Buffer;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cbor_read_regex(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Value,<sp/>MLStringT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TagError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Regex<sp/>requires<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_regex(ml_string_value(Value),<sp/>ml_string_length(Value));</highlight></codeline>
<codeline lineno="1344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cbor_read_method(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Value,<sp/>MLStringT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TagError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Method<sp/>requires<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_method(ml_string_value(Value));</highlight></codeline>
<codeline lineno="1349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>CborObjectTypes[1]<sp/>=<sp/>{STRINGMAP_INIT};</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cbor_read_object(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Value,<sp/>MLListT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TagError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Object<sp/>requires<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__list__iter__t" kindref="compound">ml_list_iter_t</ref><sp/>Iter[1];</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_iter_forward(Value,<sp/>Iter);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_list_iter_valid(Iter))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CBORError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Object<sp/>tag<sp/>requires<sp/>type<sp/>name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*TypeName<sp/>=<sp/>Iter-&gt;Value;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_typeof(TypeName)<sp/>!=<sp/>MLStringT)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CBORError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Object<sp/>tag<sp/>requires<sp/>type<sp/>name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Type<sp/>=<sp/>ml_string_value(TypeName);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>ml_list_length(Value)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args<sp/>=<sp/>ml_alloc_args(Count);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_iter_next(Iter);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[I]<sp/>=<sp/>Iter-&gt;Value;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Constructor<sp/>=<sp/>stringmap_search(CborObjectTypes,<sp/>Type);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Constructor)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_simple_call(Constructor,<sp/>Count,<sp/>Args);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_deserialize(Type,<sp/>Count,<sp/>Args);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372" refid="structvlq__result__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Value;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal">}<sp/><ref refid="structvlq__result__t" kindref="compound">vlq_result_t</ref>;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structvlq__result__t" kindref="compound">vlq_result_t</ref><sp/>vlq64_decode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Bytes)<sp/>{</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>X<sp/>=<sp/>Bytes[0]<sp/>&amp;<sp/>63;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(Bytes[0]<sp/>&amp;<sp/>64))<sp/>{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Bytes[0]<sp/>&amp;<sp/>128)<sp/>X<sp/>=<sp/>~X;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structvlq__result__t" kindref="compound">vlq_result_t</ref>){X,<sp/>1};</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Shift<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>8;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X<sp/>+=<sp/>(uint64_t)(Bytes[I]<sp/>&amp;<sp/>127)<sp/>&lt;&lt;<sp/>Shift;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Shift<sp/>+=<sp/>7;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(Bytes[I]<sp/>&amp;<sp/>128))<sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Bytes[0]<sp/>&amp;<sp/>128)<sp/>X<sp/>=<sp/>~X;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structvlq__result__t" kindref="compound">vlq_result_t</ref>){X,<sp/>I<sp/>+<sp/>1};</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>X<sp/>+=<sp/>(uint64_t)Bytes[8]<sp/>&lt;&lt;<sp/>55;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structvlq__result__t" kindref="compound">vlq_result_t</ref>){X,<sp/>9};</highlight></codeline>
<codeline lineno="1394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VLQ64_NEXT()<sp/>({<sp/>\</highlight></codeline>
<codeline lineno="1397"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Length<sp/>&lt;=<sp/>0)<sp/>return<sp/>ml_error(&quot;CBORError&quot;,<sp/>&quot;Invalid<sp/>closure<sp/>info&quot;);<sp/>\</highlight></codeline>
<codeline lineno="1398"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>vlq_result_t<sp/>Result<sp/>=<sp/>vlq64_decode(Bytes);<sp/>\</highlight></codeline>
<codeline lineno="1399"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Length<sp/>-=<sp/>Result.Count;<sp/>\</highlight></codeline>
<codeline lineno="1400"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Bytes<sp/>+=<sp/>Result.Count;<sp/>\</highlight></codeline>
<codeline lineno="1401"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Result.Value;<sp/>\</highlight></codeline>
<codeline lineno="1402"><highlight class="preprocessor">})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VLQ64_NEXT_STRING()<sp/>({<sp/>\</highlight></codeline>
<codeline lineno="1405"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Length<sp/>&lt;=<sp/>0)<sp/>return<sp/>ml_error(&quot;CBORError&quot;,<sp/>&quot;Invalid<sp/>closure<sp/>info&quot;);<sp/>\</highlight></codeline>
<codeline lineno="1406"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>vlq_result_t<sp/>Result<sp/>=<sp/>vlq64_decode(Bytes);<sp/>\</highlight></codeline>
<codeline lineno="1407"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Length<sp/>-=<sp/>Result.Count;<sp/>\</highlight></codeline>
<codeline lineno="1408"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Length<sp/>&lt;<sp/>Result.Value)<sp/>return<sp/>ml_error(&quot;CBORError&quot;,<sp/>&quot;Invalid<sp/>closure<sp/>info&quot;);<sp/>\</highlight></codeline>
<codeline lineno="1409"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Bytes<sp/>+=<sp/>Result.Count;<sp/>\</highlight></codeline>
<codeline lineno="1410"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>char<sp/>*String<sp/>=<sp/>snew(Length<sp/>+<sp/>1);<sp/>\</highlight></codeline>
<codeline lineno="1411"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>memcpy(String,<sp/>Bytes,<sp/>Result.Value);<sp/>\</highlight></codeline>
<codeline lineno="1412"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>String[Result.Value]<sp/>=<sp/>0;<sp/>\</highlight></codeline>
<codeline lineno="1413"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Length<sp/>-=<sp/>Result.Value;<sp/>\</highlight></codeline>
<codeline lineno="1414"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Bytes<sp/>+=<sp/>Result.Value;<sp/>\</highlight></codeline>
<codeline lineno="1415"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>String;<sp/>\</highlight></codeline>
<codeline lineno="1416"><highlight class="preprocessor">})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NEXT_VALUE(DEST)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1419"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(Index<sp/>+<sp/>1);<sp/>\</highlight></codeline>
<codeline lineno="1420"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_value_t<sp/>*Value<sp/>=<sp/>Args[Index++];<sp/>\</highlight></codeline>
<codeline lineno="1421"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(ml_typeof(Value)<sp/>==<sp/>MLUninitializedT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1422"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_uninitialized_use(Value,<sp/>&amp;DEST);<sp/>\</highlight></codeline>
<codeline lineno="1423"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1424"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DEST<sp/>=<sp/>Value;<sp/>\</highlight></codeline>
<codeline lineno="1425"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal">ML_FUNCTION(DecodeClosureInfo)<sp/>{</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLAddressT);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Bytes<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_address_value(Args[0]);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_address_length(Args[0]);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Version<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Version<sp/>!=<sp/>ML_BYTECODE_VERSION)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CBORError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Bytecode<sp/>version<sp/>mismatch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__closure__info__t" kindref="compound">ml_closure_info_t</ref><sp/>*Info<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__closure__info__t" kindref="compound">ml_closure_info_t</ref>);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Type<sp/>=<sp/>MLClosureInfoT;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Name<sp/>=<sp/>VLQ64_NEXT_STRING();</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Source<sp/>=<sp/>VLQ64_NEXT_STRING();</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;StartLine<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;FrameSize<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;NumParams<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;NumUpValues<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Flags<sp/>=<sp/>VLQ64_NEXT()<sp/>&amp;<sp/>(ML_CLOSURE_EXTRA_ARGS<sp/>|<sp/>ML_CLOSURE_NAMED_ARGS);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Info-&gt;NumParams;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Param<sp/>=<sp/>VLQ64_NEXT_STRING();</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Info-&gt;Params,<sp/>Param,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(uintptr_t)(I<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumDecls<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decls<sp/>=<sp/>anew(<ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref>,<sp/>NumDecls);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NumDecls;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decls[I].Ident<sp/>=<sp/>VLQ64_NEXT_STRING();</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Next<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decls[I].Next<sp/>=<sp/>Next<sp/>&gt;=<sp/>0<sp/>?<sp/>&amp;Decls[Next]<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decls[I].Source.Name<sp/>=<sp/>Info-&gt;Source;</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decls[I].Source.Line<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decls[I].Index<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decls[I].Flags<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DeclIndex<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Decls<sp/>=<sp/>DeclIndex<sp/>&gt;=<sp/>0<sp/>?<sp/>&amp;Decls[DeclIndex]<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumInsts<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*Code<sp/>=<sp/>Info-&gt;Entry<sp/>=<sp/>anew(<ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref>,<sp/>NumInsts);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*Halt<sp/>=<sp/>Info-&gt;Halt<sp/>=<sp/>Code<sp/>+<sp/>NumInsts;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*Inst<sp/>=<sp/>Code;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Return<sp/>=<sp/>Inst<sp/>+<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line<sp/>=<sp/>VLQ64_NEXT()<sp/>+<sp/>Info-&gt;StartLine;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EndLine<sp/>=<sp/>Info-&gt;StartLine;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Inst<sp/>&lt;<sp/>Halt)<sp/>{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_opcode_t<sp/>Opcode<sp/>=<sp/>(ml_opcode_t)VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Opcode<sp/>==<sp/>MLI_LINK)<sp/>{</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Line<sp/>+=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Line<sp/>&gt;<sp/>EndLine)<sp/>EndLine<sp/>=<sp/>Line;</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst-&gt;Opcode<sp/>=<sp/>Opcode;</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst-&gt;Line<sp/>=<sp/>Line;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(MLInstTypes[Opcode])<sp/>{</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_NONE:</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>1;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_INST:</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst[1].Inst<sp/>=<sp/>Code<sp/>+<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>2;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_INST_CONFIG:</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Implement<sp/>this!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst[1].Inst<sp/>=<sp/>Code<sp/>+<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst[2].Count<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>3;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_INST_COUNT:</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst[1].Inst<sp/>=<sp/>Code<sp/>+<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst[2].Count<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>3;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_INST_COUNT_DECL:</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst[1].Inst<sp/>=<sp/>Code<sp/>+<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst[2].Count<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst[3].Decls<sp/>=<sp/>&amp;Decls[VLQ64_NEXT()];</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>4;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_COUNT:</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst[1].Count<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>2;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_VALUE:</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NEXT_VALUE(Inst[1].Value);</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>2;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_COUNT_COUNT:</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst[1].Count<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst[2].Count<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>3;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_VALUE_COUNT:</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NEXT_VALUE(Inst[1].Value);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst[2].Count<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>3;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_VALUE_COUNT_DATA:</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NEXT_VALUE(Inst[1].Value);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst[2].Count<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>4;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_COUNT_CHARS:<sp/>{</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count2<sp/>=<sp/>Inst[1].Count<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Chars<sp/>=<sp/>snew(Count2);</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Chars,<sp/>Bytes,<sp/>Count2);</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Chars[Count2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst[2].Chars<sp/>=<sp/>Chars;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Length<sp/>-=<sp/>Count2;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bytes<sp/>+=<sp/>Count2;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>3;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_DECL:</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst[1].Decls<sp/>=<sp/>&amp;Decls[VLQ64_NEXT()];</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>2;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_COUNT_DECL:</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst[1].Count<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst[2].Decls<sp/>=<sp/>&amp;Decls[VLQ64_NEXT()];</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>3;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_COUNT_COUNT_DECL:</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst[1].Count<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst[2].Count<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst[3].Decls<sp/>=<sp/>&amp;Decls[VLQ64_NEXT()];</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>4;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_CLOSURE:</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NEXT_VALUE(Inst[1].Value);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumUpValues<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>0;<sp/>J<sp/>&lt;<sp/>NumUpValues;<sp/>++J)<sp/>Inst[J<sp/>+<sp/>2].Count<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>2<sp/>+<sp/>NumUpValues;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLIT_SWITCH:<sp/>{</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count2<sp/>=<sp/>Inst[1].Count<sp/>=<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>**Ptr<sp/>=<sp/>Inst[2].Insts<sp/>=<sp/>anew(<ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*,<sp/>Count2);</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>0;<sp/>J<sp/>&lt;<sp/>Inst[1].Count;<sp/>++J)<sp/>*Ptr++<sp/>=<sp/>Code<sp/>+<sp/>VLQ64_NEXT();</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;EndLine<sp/>=<sp/>EndLine;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Info;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal">ML_FUNCTION(DecodeClosure)<sp/>{</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLClosureInfoT);</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__closure__info__t" kindref="compound">ml_closure_info_t</ref><sp/>*Info<sp/>=<sp/>(<ref refid="structml__closure__info__t" kindref="compound">ml_closure_info_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__closure__t" kindref="compound">ml_closure_t</ref><sp/>*Closure<sp/>=<sp/>(<ref refid="structml__closure__t" kindref="compound">ml_closure_t</ref><sp/>*)ml_closure(Info);</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(Info-&gt;NumUpValues<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Info-&gt;NumUpValues;<sp/>++I)<sp/>Closure-&gt;UpValues[I]<sp/>=<sp/>Args[I<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Closure;</highlight></codeline>
<codeline lineno="1566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*RangeMethod;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_default_object(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Constructor)<sp/>{</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(CborObjectTypes,<sp/>Name,<sp/>Constructor);</highlight></codeline>
<codeline lineno="1572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_init(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Globals)<sp/>{</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_object(</highlight><highlight class="stringliteral">&quot;some&quot;</highlight><highlight class="normal">,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLSomeT);</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_object(</highlight><highlight class="stringliteral">&quot;tuple&quot;</highlight><highlight class="normal">,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLTupleT);</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_object(</highlight><highlight class="stringliteral">&quot;range&quot;</highlight><highlight class="normal">,<sp/>RangeMethod);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_object(</highlight><highlight class="stringliteral">&quot;complex&quot;</highlight><highlight class="normal">,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)DecodeComplex);</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_tag(ML_CBOR_TAG_COMPLEX,<sp/>ml_cbor_read_complex);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_object(</highlight><highlight class="stringliteral">&quot;!&quot;</highlight><highlight class="normal">,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)DecodeClosureInfo);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_object(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)DecodeClosure);</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_tag(ML_CBOR_TAG_REGEX,<sp/>ml_cbor_read_regex);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_tag(ML_CBOR_TAG_IDENTIFIER,<sp/>ml_cbor_read_method);</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_tag(ML_CBOR_TAG_OBJECT,<sp/>ml_cbor_read_object);</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_tag(ML_CBOR_TAG_MARK_REUSED,<sp/>ml_cbor_mark_reused);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_tag(ML_CBOR_TAG_USE_PREVIOUS,<sp/>ml_cbor_use_previous);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_cbor_init.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Globals)<sp/>{</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;cbor&quot;</highlight><highlight class="normal">,<sp/>ml_module(</highlight><highlight class="stringliteral">&quot;cbor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;encode&quot;</highlight><highlight class="normal">,<sp/>CborEncode,</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;decode&quot;</highlight><highlight class="normal">,<sp/>CborDecode,</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;decoder&quot;</highlight><highlight class="normal">,<sp/>MLCborDecoderT,</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL));</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1597"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ml_cbor.c"/>
  </compounddef>
</doxygen>
