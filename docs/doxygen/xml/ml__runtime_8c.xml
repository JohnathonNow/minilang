<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__runtime_8c" kind="file" language="C++">
    <compoundname>ml_runtime.c</compoundname>
    <includes refid="minilang_8h" local="yes">minilang.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes refid="stringmap_8h" local="yes">stringmap.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">inttypes.h</includes>
    <includes refid="ml__types_8h" local="yes">ml_types.h</includes>
    <includes local="yes">ml_runtime_init.c</includes>
    <incdepgraph>
      <node id="13">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_runtime.c</label>
        <link refid="ml__runtime_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="18">
        <label>gc/gc.h</label>
      </node>
      <node id="19">
        <label>inttypes.h</label>
      </node>
      <node id="16">
        <label>limits.h</label>
      </node>
      <node id="15">
        <label>ml_config.h</label>
      </node>
      <node id="20">
        <label>ml_runtime_init.c</label>
      </node>
      <node id="6">
        <label>setjmp.h</label>
      </node>
      <node id="11">
        <label>stdarg.h</label>
      </node>
      <node id="14">
        <label>stdint.h</label>
      </node>
      <node id="9">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="10">
        <label>string.h</label>
      </node>
      <node id="4">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structml__context__key__t" prot="public">ml_context_key_t</innerclass>
    <innerclass refid="structml__context__value__t" prot="public">ml_context_value_t</innerclass>
    <innerclass refid="structml__context__state__t" prot="public">ml_context_state_t</innerclass>
    <innerclass refid="structml__resumable__state__t" prot="public">ml_resumable_state_t</innerclass>
    <innerclass refid="structml__uninitialized__slot__t" prot="public">ml_uninitialized_slot_t</innerclass>
    <innerclass refid="structml__uninitialized__t" prot="public">ml_uninitialized_t</innerclass>
    <innerclass refid="structml__error__value__t" prot="public">ml_error_value_t</innerclass>
    <innerclass refid="structml__error__t" prot="public">ml_error_t</innerclass>
    <innerclass refid="structml__mini__debugger__t" prot="public">ml_mini_debugger_t</innerclass>
    <innerclass refid="structbreakpoints__t" prot="public">breakpoints_t</innerclass>
    <innerclass refid="structml__finalizer__t" prot="public">ml_finalizer_t</innerclass>
    <innerclass refid="structml__semaphore__t" prot="public">ml_semaphore_t</innerclass>
    <innerclass refid="structml__cond__waiter__t" prot="public">ml_cond_waiter_t</innerclass>
    <innerclass refid="structml__condition__t" prot="public">ml_condition_t</innerclass>
    <innerclass refid="structml__rw__waiter__t" prot="public">ml_rw_waiter_t</innerclass>
    <innerclass refid="structml__rw__lock__t" prot="public">ml_rw_lock_t</innerclass>
    <innerclass refid="structml__channel__message__t" prot="public">ml_channel_message_t</innerclass>
    <innerclass refid="structml__channel__t" prot="public">ml_channel_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__runtime_8c_1aebec330325aff5cbc7d9c9248e2cae4a" prot="public" static="no">
        <name>ML_CATEGORY</name>
        <initializer>&quot;runtime&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="11" column="10" bodyfile="src/ml_runtime.c" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__runtime_8c_1a61466023ed32f84aca4ca0c6942b8753" prot="public" static="no">
        <name>MAX_TRACE</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="412" column="9" bodyfile="src/ml_runtime.c" bodystart="412" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ml__runtime_8c_1a6f48af7a55cc1889323bfac56e8685d4" prot="public" static="no">
        <type>struct ml_context_value_t</type>
        <definition>typedef struct ml_context_value_t ml_context_value_t</definition>
        <argsstring></argsstring>
        <name>ml_context_value_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="75" column="33" bodyfile="src/ml_runtime.c" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__runtime_8c_1afd4457792a13a351b43e06768e9144ce" prot="public" static="no">
        <type>struct ml_resumable_state_t</type>
        <definition>typedef struct ml_resumable_state_t ml_resumable_state_t</definition>
        <argsstring></argsstring>
        <name>ml_resumable_state_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="205" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__runtime_8c_1a932f1b9ebb8a152ce6dbd0ba2bcaba81" prot="public" static="no">
        <type>struct ml_uninitialized_slot_t</type>
        <definition>typedef struct ml_uninitialized_slot_t ml_uninitialized_slot_t</definition>
        <argsstring></argsstring>
        <name>ml_uninitialized_slot_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="308" column="38" bodyfile="src/ml_runtime.c" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__runtime_8c_1a2d9d627a6f76119d4ffcf1dd8a79651d" prot="public" static="no">
        <type>struct ml_uninitialized_t</type>
        <definition>typedef struct ml_uninitialized_t ml_uninitialized_t</definition>
        <argsstring></argsstring>
        <name>ml_uninitialized_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="321" column="20"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__runtime_8c_1a5e9856113212d6389ea892a4f71debc9" prot="public" static="no">
        <type>struct ml_channel_message_t</type>
        <definition>typedef struct ml_channel_message_t ml_channel_message_t</definition>
        <argsstring></argsstring>
        <name>ml_channel_message_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1533" column="35" bodyfile="src/ml_runtime.c" bodystart="1533" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="ml__runtime_8c_1a9e4a5e05bc20f28d92db209c48002871" prot="public" static="no" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t* MLArgCache[ML_ARG_CACHE_SIZE]</definition>
        <argsstring>[ML_ARG_CACHE_SIZE]</argsstring>
        <name>MLArgCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="18" column="12" bodyfile="src/ml_runtime.c" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ml__runtime_8c_1ae939d6ff7458d8173c6167f59ece445f" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int MLContextSize</definition>
        <argsstring></argsstring>
        <name>MLContextSize</name>
        <initializer>= ML_CONTEXT_SIZE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="20" column="12" bodyfile="src/ml_runtime.c" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ml__runtime_8c_1ab915983a500e81268266fea0bf84389e" prot="public" static="yes" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t DefaultCounter</definition>
        <argsstring></argsstring>
        <name>DefaultCounter</name>
        <initializer>= UINT_MAX</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="22" column="17" bodyfile="src/ml_runtime.c" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ml__runtime_8c_1a938bf2a8ce89b5f733ed14f165bbbfd4" prot="public" static="yes" mutable="no">
        <type><ref refid="structml__scheduler__t" kindref="compound">ml_scheduler_t</ref></type>
        <definition>ml_scheduler_t DefaultScheduler</definition>
        <argsstring></argsstring>
        <name>DefaultScheduler</name>
        <initializer>= {default_swap}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="30" column="23" bodyfile="src/ml_runtime.c" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="variable" id="ml__runtime_8c_1ac1ad2e5f00dcb7ffab65bf1b58334aef" prot="public" static="no" mutable="no">
        <type><ref refid="structml__context__t" kindref="compound">ml_context_t</ref></type>
        <definition>ml_context_t MLRootContext</definition>
        <argsstring></argsstring>
        <name>MLRootContext</name>
        <initializer>= {&amp;MLRootContext, 6, {
	NULL,
	NULL,
	NULL,
	&amp;DefaultScheduler,
	&amp;DefaultCounter,
	NULL
}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="32" column="14" bodyfile="src/ml_runtime.c" bodystart="32" bodyend="39"/>
      </memberdef>
      <memberdef kind="variable" id="ml__runtime_8c_1a658c6a3f2b7c3f839fb44f7089d55fc6" prot="public" static="yes" mutable="no">
        <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref></type>
        <definition>stringmap_t MLConfigs[1]</definition>
        <argsstring>[1]</argsstring>
        <name>MLConfigs</name>
        <initializer>= {STRINGMAP_INIT}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="61" column="20" bodyfile="src/ml_runtime.c" bodystart="61" bodyend="61"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__runtime_8c_1ae95d95cbc97a47fddce466c0786ea2c7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int default_swap</definition>
        <argsstring>(ml_scheduler_t *Queue, ml_state_t *State, ml_value_t *Value)</argsstring>
        <name>default_swap</name>
        <param>
          <type><ref refid="structml__scheduler__t" kindref="compound">ml_scheduler_t</ref> *</type>
          <declname>Queue</declname>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="24" column="12" bodyfile="src/ml_runtime.c" bodystart="24" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1af431d7a150d86dc68d4620c6cadbf059" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__context__t" kindref="compound">ml_context_t</ref> *</type>
        <definition>ml_context_t * ml_context</definition>
        <argsstring>(ml_context_t *Parent)</argsstring>
        <name>ml_context</name>
        <param>
          <type><ref refid="structml__context__t" kindref="compound">ml_context_t</ref> *</type>
          <declname>Parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="41" column="14" bodyfile="src/ml_runtime.c" bodystart="41" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a70f324714e575500eea732499c6a9456" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ml_context_index</definition>
        <argsstring>()</argsstring>
        <name>ml_context_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="49" column="5" bodyfile="src/ml_runtime.c" bodystart="49" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1ad9c4b6c86988ef02c3dcbd73882e92b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_context_set</definition>
        <argsstring>(ml_context_t *Context, int Index, void *Value)</argsstring>
        <name>ml_context_set</name>
        <param>
          <type><ref refid="structml__context__t" kindref="compound">ml_context_t</ref> *</type>
          <declname>Context</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Index</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="53" column="6" bodyfile="src/ml_runtime.c" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1ad9cfdc978865bc3d4f509b2af310f149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_config_register</definition>
        <argsstring>(const char *Name, ml_config_fn Fn)</argsstring>
        <name>ml_config_register</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type>ml_config_fn</type>
          <declname>Fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="63" column="6" bodyfile="src/ml_runtime.c" bodystart="63" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a35e789ee30e220733088c39ae4194b18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ml_config_fn</type>
        <definition>ml_config_fn ml_config_lookup</definition>
        <argsstring>(const char *Name)</argsstring>
        <name>ml_config_lookup</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="67" column="14" bodyfile="src/ml_runtime.c" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a54136900c7a8b25ffc34e3b261f3a1c9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_context_key_call</definition>
        <argsstring>(ml_state_t *Caller, ml_context_key_t *Key, int Count, ml_value_t **Args)</argsstring>
        <name>ml_context_key_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__context__key__t" kindref="compound">ml_context_key_t</ref> *</type>
          <declname>Key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="83" column="13" bodyfile="src/ml_runtime.c" bodystart="83" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1ad24fc620ab246bff9f0c2ea38b81029e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLContextKey)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLContextKey</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>context</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="104" column="1" bodyfile="src/ml_runtime.c" bodystart="104" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a5386c46b7efbd3fab0e3da504c4de92f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLContextKeyT,(MLFunctionT), &quot;context&quot;,.call=(void *) ml_context_key_call,.Constructor=(ml_value_t *) MLContextKey)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLContextKeyT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;context&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_context_key_call</defval>
          <briefdescription><para>context </para>
</briefdescription>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLContextKey</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="114" column="1" declfile="src/ml_runtime.c" declline="114" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a5f69ebb1a789885a6f1d543f85f5edcc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_state_call</definition>
        <argsstring>(ml_state_t *Caller, ml_state_t *State, int Count, ml_value_t **Args)</argsstring>
        <name>ml_state_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="124" column="13" bodyfile="src/ml_runtime.c" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1af29c2aea16ea3a400369a9fc4210f921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLStateT,(MLFunctionT), &quot;state&quot;,.call=(void *) ml_state_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLStateT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;state&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_state_call</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="129" column="1" declfile="src/ml_runtime.c" declline="129" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a93404beec35f5519bb2a02bfdb715256" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_end_state_run</definition>
        <argsstring>(ml_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_end_state_run</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="133" column="13" bodyfile="src/ml_runtime.c" bodystart="133" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a41748b84e0dff33483013c5f26970c51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_default_state_run</definition>
        <argsstring>(ml_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_default_state_run</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="136" column="6" bodyfile="src/ml_runtime.c" bodystart="136" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1ab93751722f3739ff534077f770854a89" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_call_state_run</definition>
        <argsstring>(ml_call_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_call_state_run</name>
        <param>
          <type><ref refid="structml__call__state__t" kindref="compound">ml_call_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="140" column="13" bodyfile="src/ml_runtime.c" bodystart="140" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1ae9a9bbacbfab1725630c721f4d6653f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__call__state__t" kindref="compound">ml_call_state_t</ref> *</type>
        <definition>ml_call_state_t * ml_call_state</definition>
        <argsstring>(ml_state_t *Caller, int Count)</argsstring>
        <name>ml_call_state</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="148" column="17" bodyfile="src/ml_runtime.c" bodystart="148" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a2be6e789393b900e951136eea2cb5336" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_result_state_run</definition>
        <argsstring>(ml_result_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_result_state_run</name>
        <param>
          <type><ref refid="structml__result__state__t" kindref="compound">ml_result_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="158" column="6" bodyfile="src/ml_runtime.c" bodystart="158" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1ab9e8bbbf08b51ab3689750b696bb8396" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__result__state__t" kindref="compound">ml_result_state_t</ref> *</type>
        <definition>ml_result_state_t * ml_result_state</definition>
        <argsstring>(ml_context_t *Context)</argsstring>
        <name>ml_result_state</name>
        <param>
          <type><ref refid="structml__context__t" kindref="compound">ml_context_t</ref> *</type>
          <declname>Context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="162" column="19" bodyfile="src/ml_runtime.c" bodystart="162" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1abbc4d2f9454ddfeffb90419fd2de6428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_simple_call</definition>
        <argsstring>(ml_value_t *Value, int Count, ml_value_t **Args)</argsstring>
        <name>ml_simple_call</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="171" column="12" bodyfile="src/ml_runtime.c" bodystart="171" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a0d52632f3a3fd7def5aaee9a23f75ec4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_simple_assign</definition>
        <argsstring>(ml_value_t *Value, ml_value_t *Value2)</argsstring>
        <name>ml_simple_assign</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="177" column="12" bodyfile="src/ml_runtime.c" bodystart="177" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a08950527ce03486510c8fa5493ae7b38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
        <definition>ml_state_t * ml_state</definition>
        <argsstring>(ml_state_t *Caller)</argsstring>
        <name>ml_state</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="190" column="12" bodyfile="src/ml_runtime.c" bodystart="190" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1af4aa58cc8aa7007de6a349a45706a3e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_resumable_state_call</definition>
        <argsstring>(ml_state_t *Caller, ml_resumable_state_t *State, int Count, ml_value_t **Args)</argsstring>
        <name>ml_resumable_state_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__resumable__state__t" kindref="compound">ml_resumable_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="207" column="13" bodyfile="src/ml_runtime.c" bodystart="207" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a864d909f08491862bdfd9e6a44ce5cb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLResumableStateT,(MLStateT), &quot;resumable-state&quot;,.call=(void *) ml_resumable_state_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLResumableStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;resumable-state&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_resumable_state_call</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="212" column="1" declfile="src/ml_runtime.c" declline="212" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a9cac0dbbbd8ee66e02bdb891543547ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_resumable_state_run</definition>
        <argsstring>(ml_resumable_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_resumable_state_run</name>
        <param>
          <type><ref refid="structml__resumable__state__t" kindref="compound">ml_resumable_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="216" column="13" bodyfile="src/ml_runtime.c" bodystart="216" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1af18c94318c21f8034ae6a0ec7b812d0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(MLCallCC)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>MLCallCC</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>runtime</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="220" column="1" bodyfile="src/ml_runtime.c" bodystart="220" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a024358c11a3a567327e23004ca11aa0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(MLMarkCC)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>MLMarkCC</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>runtime</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="233" column="1" bodyfile="src/ml_runtime.c" bodystart="233" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a51a808fe7ae6a9e474ddc564b80ccef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(MLCallDC)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>MLCallDC</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>runtime</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="247" column="1" bodyfile="src/ml_runtime.c" bodystart="247" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a252eef373ef26adeeb8f7567c1e453b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(MLSwapCC)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>MLSwapCC</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>runtime</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="269" column="1" bodyfile="src/ml_runtime.c" bodystart="269" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a9bb4ad02cc27ee06d1210216ff2968aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>static long ml_reference_hash</definition>
        <argsstring>(ml_reference_t *Reference, ml_hash_chain_t *Chain)</argsstring>
        <name>ml_reference_hash</name>
        <param>
          <type><ref refid="structml__reference__t" kindref="compound">ml_reference_t</ref> *</type>
          <declname>Reference</declname>
        </param>
        <param>
          <type><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref> *</type>
          <declname>Chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="280" column="13" bodyfile="src/ml_runtime.c" bodystart="280" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1aee7a5eab505f457e28aeca048d9d0b01" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_reference_deref</definition>
        <argsstring>(ml_reference_t *Reference)</argsstring>
        <name>ml_reference_deref</name>
        <param>
          <type><ref refid="structml__reference__t" kindref="compound">ml_reference_t</ref> *</type>
          <declname>Reference</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="284" column="19" bodyfile="src/ml_runtime.c" bodystart="284" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1ae762490bed7a2743299fde0e4f164f47" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_reference_assign</definition>
        <argsstring>(ml_state_t *Caller, ml_reference_t *Reference, ml_value_t *Value)</argsstring>
        <name>ml_reference_assign</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__reference__t" kindref="compound">ml_reference_t</ref> *</type>
          <declname>Reference</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="288" column="13" bodyfile="src/ml_runtime.c" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a30ec58e6d264071958b143ad61ef5517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLReferenceT,(), &quot;reference&quot;,.hash=(void *) ml_reference_hash,.deref=(void *) ml_reference_deref,.assign=(void *) ml_reference_assign)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLReferenceT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;reference&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>hash</declname>
          <defval>(void *) ml_reference_hash</defval>
          <briefdescription><para>internal </para>
</briefdescription>
        </param>
        <param>
          <type>.</type>
          <declname>deref</declname>
          <defval>(void *) ml_reference_deref</defval>
        </param>
        <param>
          <type>.</type>
          <declname>assign</declname>
          <defval>(void *) ml_reference_assign</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="293" column="1" declfile="src/ml_runtime.c" declline="293" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a460e7996e3a80e252e31c8b9933b5bd5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_reference</definition>
        <argsstring>(ml_value_t **Address)</argsstring>
        <name>ml_reference</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="300" column="19" bodyfile="src/ml_runtime.c" bodystart="300" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a877e36abb155a53f318eff3709121a2f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_uninitialized_call</definition>
        <argsstring>(ml_state_t *Caller, ml_uninitialized_t *Uninitialized, int Count, ml_value_t **Args)</argsstring>
        <name>ml_uninitialized_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref> *</type>
          <declname>Uninitialized</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="323" column="13" bodyfile="src/ml_runtime.c" bodystart="323" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a0874bda177c69ceff584654a4ff906bc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_unitialized_assign</definition>
        <argsstring>(ml_state_t *Caller, ml_uninitialized_t *Uninitialized, ml_value_t *Value)</argsstring>
        <name>ml_unitialized_assign</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref> *</type>
          <declname>Uninitialized</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="327" column="13" bodyfile="src/ml_runtime.c" bodystart="327" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a5e591dae0b854b65295faf9f2d17b76c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLUninitializedT,(), &quot;uninitialized&quot;,.call=(void *) ml_uninitialized_call,.assign=(void *) ml_unitialized_assign)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLUninitializedT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;uninitialized&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_uninitialized_call</defval>
        </param>
        <param>
          <type>.</type>
          <declname>assign</declname>
          <defval>(void *) ml_unitialized_assign</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="331" column="1" declfile="src/ml_runtime.c" declline="331" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a704395ac87e0b6557a654e00ba4a8cd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_uninitialized</definition>
        <argsstring>(const char *Name, ml_source_t Source)</argsstring>
        <name>ml_uninitialized</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type><ref refid="structml__source__t" kindref="compound">ml_source_t</ref></type>
          <declname>Source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="337" column="12" bodyfile="src/ml_runtime.c" bodystart="337" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1aa9d1722f4b553b334463a55bd6a58bea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ml_uninitialized_name</definition>
        <argsstring>(ml_value_t *Uninitialized)</argsstring>
        <name>ml_uninitialized_name</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Uninitialized</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="345" column="12" bodyfile="src/ml_runtime.c" bodystart="345" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a627a55970344757243fbbbd0db5cd70c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__source__t" kindref="compound">ml_source_t</ref></type>
        <definition>ml_source_t ml_uninitialized_source</definition>
        <argsstring>(ml_value_t *Uninitialized)</argsstring>
        <name>ml_uninitialized_source</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Uninitialized</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="349" column="13" bodyfile="src/ml_runtime.c" bodystart="349" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a6bfeec79d5afeb3aab99f2c4f66a2285" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_uninitialized_use</definition>
        <argsstring>(ml_value_t *Uninitialized0, ml_value_t **Value)</argsstring>
        <name>ml_uninitialized_use</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Uninitialized0</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="353" column="6" bodyfile="src/ml_runtime.c" bodystart="353" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a900f71807aec3310de0009696bc667d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static ML_METHOD_DECL</definition>
        <argsstring>(SymbolMethod, &quot;::&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>SymbolMethod</type>
        </param>
        <param>
          <type>&quot;::&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="361" column="8" declfile="src/ml_runtime.c" declline="361" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1aa9dde9daf7459b1d76dc0b22d2031524" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_uninitialized_resolve</definition>
        <argsstring>(const char *Name, ml_uninitialized_t *Uninitialized, ml_value_t *Value)</argsstring>
        <name>ml_uninitialized_resolve</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type><ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref> *</type>
          <declname>Uninitialized</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="363" column="12" bodyfile="src/ml_runtime.c" bodystart="363" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a8b22e00a08654b05fd7352719f8dc5c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_uninitialized_transfer</definition>
        <argsstring>(ml_uninitialized_t *Uninitialized, ml_uninitialized_t *Uninitialized2)</argsstring>
        <name>ml_uninitialized_transfer</name>
        <param>
          <type><ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref> *</type>
          <declname>Uninitialized</declname>
        </param>
        <param>
          <type><ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref> *</type>
          <declname>Uninitialized2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="381" column="13" bodyfile="src/ml_runtime.c" bodystart="381" bodyend="390" declfile="src/ml_runtime.c" declline="369" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1ad4e1e0115ce63f92d51399c59b817f63" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_uninitialized_transfer_import</definition>
        <argsstring>(const char *Name, ml_uninitialized_t *Uninitialized, ml_uninitialized_t *Uninitialized2)</argsstring>
        <name>ml_uninitialized_transfer_import</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type><ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref> *</type>
          <declname>Uninitialized</declname>
        </param>
        <param>
          <type><ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref> *</type>
          <declname>Uninitialized2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="371" column="12" bodyfile="src/ml_runtime.c" bodystart="371" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1ac7c77069190935f0859bbb61c84faa63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_uninitialized_set</definition>
        <argsstring>(ml_value_t *Uninitialized0, ml_value_t *Value)</argsstring>
        <name>ml_uninitialized_set</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Uninitialized0</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="392" column="6" bodyfile="src/ml_runtime.c" bodystart="392" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1abd614ee4a53082a176520b382c876988" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;::&quot;, MLUninitializedT, MLStringT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;::&quot;</type>
        </param>
        <param>
          <type>MLUninitializedT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="402" column="1" bodyfile="src/ml_runtime.c" bodystart="402" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a532e584182700e4a392a328f78441af1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_error_assign</definition>
        <argsstring>(ml_state_t *Caller, ml_value_t *Error, ml_value_t *Value)</argsstring>
        <name>ml_error_assign</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Error</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="427" column="13" bodyfile="src/ml_runtime.c" bodystart="427" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a909f2534619fc220aa5b4cc13314feb3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_error_call</definition>
        <argsstring>(ml_state_t *Caller, ml_value_t *Error, int Count, ml_value_t **Args)</argsstring>
        <name>ml_error_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Error</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="431" column="13" bodyfile="src/ml_runtime.c" bodystart="431" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a1408600d8b296b8558e74ffd1376302b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLError)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLError</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>error</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="435" column="1" bodyfile="src/ml_runtime.c" bodystart="435" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1ac07f200e6d50981499f54a07e99ad813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLRaise)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLRaise</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>error</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="454" column="1" bodyfile="src/ml_runtime.c" bodystart="454" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a59d2086f97db74d7069f4ca84ca4e87e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLErrorT,(), &quot;error&quot;,.assign=ml_error_assign,.call=ml_error_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLErrorT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;error&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>assign</declname>
          <defval>ml_error_assign</defval>
          <briefdescription><para>error </para>
</briefdescription>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>ml_error_call</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="472" column="1" declfile="src/ml_runtime.c" declline="472" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a962647e413756edd37c3539ad42ba359" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLErrorValueT,(), &quot;error&quot;,.Constructor=(ml_value_t *) MLError)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLErrorValueT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;error&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLError</defval>
          <briefdescription><para>error </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="479" column="1" declfile="src/ml_runtime.c" declline="479" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a2b84ae1834dd2301f3a4fb93befb0c57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_errorv</definition>
        <argsstring>(const char *Error, const char *Format, va_list Args)</argsstring>
        <name>ml_errorv</name>
        <param>
          <type>const char *</type>
          <declname>Error</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="485" column="12" bodyfile="src/ml_runtime.c" bodystart="485" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a5599de99f08217e2c4610b55db8c2ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_error</definition>
        <argsstring>(const char *Error, const char *Format,...)</argsstring>
        <name>ml_error</name>
        <param>
          <type>const char *</type>
          <declname>Error</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="497" column="12" bodyfile="src/ml_runtime.c" bodystart="497" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a4264ad1f11198b206ff1ea90acb36d37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_error_unwrap</definition>
        <argsstring>(const ml_value_t *Value)</argsstring>
        <name>ml_error_unwrap</name>
        <param>
          <type>const <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="505" column="12" bodyfile="src/ml_runtime.c" bodystart="505" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1ac5ce32077f167ae45ddba30ec4ec2b05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ml_error_type</definition>
        <argsstring>(const ml_value_t *Value)</argsstring>
        <name>ml_error_type</name>
        <param>
          <type>const <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="509" column="12" bodyfile="src/ml_runtime.c" bodystart="509" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1acd32ba8c274401c4eeda63ce701e67e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ml_error_message</definition>
        <argsstring>(const ml_value_t *Value)</argsstring>
        <name>ml_error_message</name>
        <param>
          <type>const <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="513" column="12" bodyfile="src/ml_runtime.c" bodystart="513" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a99b11b304710cdc72bf2b57bb50e9df1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_error_value</definition>
        <argsstring>(const ml_value_t *Value)</argsstring>
        <name>ml_error_value</name>
        <param>
          <type>const <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="517" column="12" bodyfile="src/ml_runtime.c" bodystart="517" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1addc5ccfa2ddd386f0fbcc4a859f469f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ml_error_source</definition>
        <argsstring>(const ml_value_t *Value, int Level, ml_source_t *Source)</argsstring>
        <name>ml_error_source</name>
        <param>
          <type>const <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Level</declname>
        </param>
        <param>
          <type><ref refid="structml__source__t" kindref="compound">ml_source_t</ref> *</type>
          <declname>Source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="521" column="5" bodyfile="src/ml_runtime.c" bodystart="521" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1acda8ebc0c93e35f5729fb16c06427d21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_error_trace_add</definition>
        <argsstring>(ml_value_t *Value, ml_source_t Source)</argsstring>
        <name>ml_error_trace_add</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__source__t" kindref="compound">ml_source_t</ref></type>
          <declname>Source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="529" column="12" bodyfile="src/ml_runtime.c" bodystart="529" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a283f03bda24e39400708ccc8643e1645" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_error_value_set</definition>
        <argsstring>(ml_value_t *Error, ml_value_t *Value)</argsstring>
        <name>ml_error_value_set</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Error</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="538" column="6" bodyfile="src/ml_runtime.c" bodystart="538" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1aae4fc3c058f9a8575c8d031e531e37c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_error_print</definition>
        <argsstring>(const ml_value_t *Value)</argsstring>
        <name>ml_error_print</name>
        <param>
          <type>const <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="542" column="6" bodyfile="src/ml_runtime.c" bodystart="542" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1aee99a9ccbff3a0ddcd251dee17bbd632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_error_fprint</definition>
        <argsstring>(FILE *File, const ml_value_t *Value)</argsstring>
        <name>ml_error_fprint</name>
        <param>
          <type>FILE *</type>
          <declname>File</declname>
        </param>
        <param>
          <type>const <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="550" column="6" bodyfile="src/ml_runtime.c" bodystart="550" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a38a40a5caf7ae68a4842527d928591d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ml_error_value_type</definition>
        <argsstring>(const ml_value_t *Value)</argsstring>
        <name>ml_error_value_type</name>
        <param>
          <type>const <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="558" column="12" bodyfile="src/ml_runtime.c" bodystart="558" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1ae6e4ae576d32f0b74712081ac0c769bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ml_error_value_message</definition>
        <argsstring>(const ml_value_t *Value)</argsstring>
        <name>ml_error_value_message</name>
        <param>
          <type>const <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="562" column="12" bodyfile="src/ml_runtime.c" bodystart="562" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a04326d13882081a9e27d8692e50aa8bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ml_error_value_source</definition>
        <argsstring>(const ml_value_t *Value, int Level, ml_source_t *Source)</argsstring>
        <name>ml_error_value_source</name>
        <param>
          <type>const <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Level</declname>
        </param>
        <param>
          <type><ref refid="structml__source__t" kindref="compound">ml_source_t</ref> *</type>
          <declname>Source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="566" column="5" bodyfile="src/ml_runtime.c" bodystart="566" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a3edd01cb23ea276bfb930c9d8e8f42db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;type&quot;, MLErrorValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;type&quot;</type>
        </param>
        <param>
          <type>MLErrorValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>error</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="574" column="1" bodyfile="src/ml_runtime.c" bodystart="574" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a819a9a310b35b26c014352ed411fb90a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;message&quot;, MLErrorValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;message&quot;</type>
        </param>
        <param>
          <type>MLErrorValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>error</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="582" column="1" bodyfile="src/ml_runtime.c" bodystart="582" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1aa82145000b59aed3e569f15eac8937dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;trace&quot;, MLErrorValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;trace&quot;</type>
        </param>
        <param>
          <type>MLErrorValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>error</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="590" column="1" bodyfile="src/ml_runtime.c" bodystart="590" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1ab69d70f58bd6d4d60ad90044f5537f3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;value&quot;, MLErrorValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;value&quot;</type>
        </param>
        <param>
          <type>MLErrorValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="605" column="1" bodyfile="src/ml_runtime.c" bodystart="605" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a0a2d697a2e9dcf6ec6d912fc507e1191" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;raise&quot;, MLErrorValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;raise&quot;</type>
        </param>
        <param>
          <type>MLErrorValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>error</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="610" column="1" bodyfile="src/ml_runtime.c" bodystart="610" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1adb3f85c8d550d0f373ace8572065bf40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLErrorValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLErrorValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="626" column="1" bodyfile="src/ml_runtime.c" bodystart="626" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1aa97f3ddc81ec31b5165c3be0795b8d98" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_serialize, MLErrorValueT, ml_error_value_t *Value)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_serialize</type>
        </param>
        <param>
          <type>MLErrorValueT</type>
        </param>
        <param>
          <type><ref refid="structml__error__value__t" kindref="compound">ml_error_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="639" column="19" bodyfile="src/ml_runtime.c" bodystart="639" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a08b0b1f0c972b40e33bbc9bd3bb3ce16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_DESERIALIZER</definition>
        <argsstring>(&quot;error&quot;)</argsstring>
        <name>ML_DESERIALIZER</name>
        <param>
          <type>&quot;error&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="652" column="1" bodyfile="src/ml_runtime.c" bodystart="652" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a93405b5a85e955046cee32f4e9ab4883" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ml_debugger_check</definition>
        <argsstring>(ml_state_t *State)</argsstring>
        <name>ml_debugger_check</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="674" column="5" bodyfile="src/ml_runtime.c" bodystart="674" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a5c50a4b2fc5852675d857a128a96e668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_debugger_step_mode</definition>
        <argsstring>(ml_state_t *State, int StepOver, int StepOut)</argsstring>
        <name>ml_debugger_step_mode</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type>int</type>
          <declname>StepOver</declname>
        </param>
        <param>
          <type>int</type>
          <declname>StepOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="681" column="6" bodyfile="src/ml_runtime.c" bodystart="681" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a9f32f068f3b250e6a05c936a0114c924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__source__t" kindref="compound">ml_source_t</ref></type>
        <definition>ml_source_t ml_debugger_source</definition>
        <argsstring>(ml_state_t *State)</argsstring>
        <name>ml_debugger_source</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="687" column="13" bodyfile="src/ml_runtime.c" bodystart="687" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1aedfc931f83981097241e0e104b9073c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref> *</type>
        <definition>ml_decl_t * ml_debugger_decls</definition>
        <argsstring>(ml_state_t *State)</argsstring>
        <name>ml_debugger_decls</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="695" column="11" bodyfile="src/ml_runtime.c" bodystart="695" bodyend="700"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1afd39568826e945dae842d6a019d91364" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_debugger_local</definition>
        <argsstring>(ml_state_t *State, int Index)</argsstring>
        <name>ml_debugger_local</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="702" column="12" bodyfile="src/ml_runtime.c" bodystart="702" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1ab45ef51e96637ab52cf717744d4af7ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(MLBreak)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>MLBreak</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>runtime</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="709" column="1" bodyfile="src/ml_runtime.c" bodystart="709" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a7b34b92576e250530043f2b3aa5672bc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_mini_debugger_call</definition>
        <argsstring>(ml_state_t *Caller, ml_mini_debugger_t *Debugger, int Count, ml_value_t **Args)</argsstring>
        <name>ml_mini_debugger_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref> *</type>
          <declname>Debugger</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="727" column="13" bodyfile="src/ml_runtime.c" bodystart="727" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a8f4089bb6a519bf7be103a015d6d7551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLDebuggerT,(), &quot;mini-debugger&quot;,.call=(void *) ml_mini_debugger_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLDebuggerT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;mini-debugger&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_mini_debugger_call</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="734" column="1" declfile="src/ml_runtime.c" declline="734" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a294cf042f8ff082abdc33cb4c87e0d0a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mini_debugger_debug</definition>
        <argsstring>(ml_debugger_t *Debug, ml_state_t *State, ml_value_t *Value)</argsstring>
        <name>mini_debugger_debug</name>
        <param>
          <type><ref refid="structml__debugger__t" kindref="compound">ml_debugger_t</ref> *</type>
          <declname>Debug</declname>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="738" column="13" bodyfile="src/ml_runtime.c" bodystart="738" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a28e37e4921cfbfea3ce7520add77994e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t *</type>
        <definition>static size_t * mini_debugger_breakpoints</definition>
        <argsstring>(ml_debugger_t *Debug, const char *Source, int Max)</argsstring>
        <name>mini_debugger_breakpoints</name>
        <param>
          <type><ref refid="structml__debugger__t" kindref="compound">ml_debugger_t</ref> *</type>
          <declname>Debug</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="752" column="15" bodyfile="src/ml_runtime.c" bodystart="752" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a1bee45881d59ef2dcc43c02a75b50132" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mini_debugger_run</definition>
        <argsstring>(ml_state_t *State, ml_value_t *Value)</argsstring>
        <name>mini_debugger_run</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="772" column="13" bodyfile="src/ml_runtime.c" bodystart="772" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1ad641665dad51c6f2cac469cd60f898de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(MLDebugger)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>MLDebugger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>debugger</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="775" column="1" bodyfile="src/ml_runtime.c" bodystart="775" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a2e2cc53efd2fc2c4ff398872329178b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;breakpoint_set&quot;, MLDebuggerT, MLStringT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;breakpoint_set&quot;</type>
        </param>
        <param>
          <type>MLDebuggerT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>debugger</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="795" column="1" bodyfile="src/ml_runtime.c" bodystart="795" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a3d43887646c9cb62009b47be120f697f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;breakpoint_clear&quot;, MLDebuggerT, MLStringT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;breakpoint_clear&quot;</type>
        </param>
        <param>
          <type>MLDebuggerT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>debugger</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="810" column="1" bodyfile="src/ml_runtime.c" bodystart="810" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a8f6f45e4e43c9ed8e38c0944a7dace99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;error_mode&quot;, MLDebuggerT, MLAnyT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;error_mode&quot;</type>
        </param>
        <param>
          <type>MLDebuggerT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>debugger</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="825" column="1" bodyfile="src/ml_runtime.c" bodystart="825" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a1de2a3ccef765974321ba483982fffa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;step_mode&quot;, MLDebuggerT, MLAnyT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;step_mode&quot;</type>
        </param>
        <param>
          <type>MLDebuggerT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>debugger</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="835" column="1" bodyfile="src/ml_runtime.c" bodystart="835" bodyend="843"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1aa69efe03c480e92a9ad530a73c19a01d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;step_in&quot;, MLDebuggerT, MLStateT, MLAnyT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;step_in&quot;</type>
        </param>
        <param>
          <type>MLDebuggerT</type>
        </param>
        <param>
          <type>MLStateT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>debugger</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="845" column="1" bodyfile="src/ml_runtime.c" bodystart="845" bodyend="856"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1aad0b449c7b19dbf1f9d38b0404382641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;step_over&quot;, MLDebuggerT, MLStateT, MLAnyT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;step_over&quot;</type>
        </param>
        <param>
          <type>MLDebuggerT</type>
        </param>
        <param>
          <type>MLStateT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>debugger</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="858" column="1" bodyfile="src/ml_runtime.c" bodystart="858" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1add69f5924dec6310a6da3aa27e109d92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;step_out&quot;, MLDebuggerT, MLStateT, MLAnyT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;step_out&quot;</type>
        </param>
        <param>
          <type>MLDebuggerT</type>
        </param>
        <param>
          <type>MLStateT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>debugger</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="871" column="1" bodyfile="src/ml_runtime.c" bodystart="871" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1ab0d95c956c548a9421e764f3c9af95fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;continue&quot;, MLDebuggerT, MLStateT, MLAnyT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;continue&quot;</type>
        </param>
        <param>
          <type>MLDebuggerT</type>
        </param>
        <param>
          <type>MLStateT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>debugger</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="884" column="1" bodyfile="src/ml_runtime.c" bodystart="884" bodyend="895"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a29892bedd69f3624c02317bb9d5fcf81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;locals&quot;, MLStateT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;locals&quot;</type>
        </param>
        <param>
          <type>MLStateT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>debugger</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="897" column="1" bodyfile="src/ml_runtime.c" bodystart="897" bodyend="908"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a090b183f8ea387327288d9fccea0b86f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;trace&quot;, MLStateT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;trace&quot;</type>
        </param>
        <param>
          <type>MLStateT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>debugger</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="910" column="1" bodyfile="src/ml_runtime.c" bodystart="910" bodyend="925"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a9ecb781d882e00492620209d09b56c0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;source&quot;, MLStateT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;source&quot;</type>
        </param>
        <param>
          <type>MLStateT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>debugger</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="927" column="1" bodyfile="src/ml_runtime.c" bodystart="927" bodyend="935"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a72236b82bb1f424e0cca828d8d2f2114" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(MLTrace)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>MLTrace</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="937" column="1" bodyfile="src/ml_runtime.c" bodystart="937" bodyend="947"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a5c7a21109faea04c9f06a7b2bbc63edc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_config_debugger</definition>
        <argsstring>(ml_context_t *Context)</argsstring>
        <name>ml_config_debugger</name>
        <param>
          <type><ref refid="structml__context__t" kindref="compound">ml_context_t</ref> *</type>
          <declname>Context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="949" column="12" bodyfile="src/ml_runtime.c" bodystart="949" bodyend="951"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a9c64de5f870bb429221aff86a87c3a6a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_finalize</definition>
        <argsstring>(void *Value, ml_finalizer_t *Finalizer)</argsstring>
        <name>ml_finalize</name>
        <param>
          <type>void *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__finalizer__t" kindref="compound">ml_finalizer_t</ref> *</type>
          <declname>Finalizer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1221" column="13" bodyfile="src/ml_runtime.c" bodystart="1221" bodyend="1225"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a3612715f442912cd64647b9557aa8d9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(MLFinalizer)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>MLFinalizer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1227" column="1" bodyfile="src/ml_runtime.c" bodystart="1227" bodyend="1239"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a81e47dc07caddeb1e29f4fab182cc81d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLSemaphore)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLSemaphore</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>semaphore</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1250" column="1" bodyfile="src/ml_runtime.c" bodystart="1250" bodyend="1265"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1af018c071b76b0b65bc586ce54e780841" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLSemaphoreT,(), &quot;semaphore&quot;,.Constructor=(ml_value_t *) MLSemaphore)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLSemaphoreT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;semaphore&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLSemaphore</defval>
          <briefdescription><para>semaphore </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1267" column="1" declfile="src/ml_runtime.c" declline="1267" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1ab6d03463994d679ef40fd51fff8c697d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_semaphore_wait</definition>
        <argsstring>(ml_state_t *Caller, ml_semaphore_t *Semaphore)</argsstring>
        <name>ml_semaphore_wait</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__semaphore__t" kindref="compound">ml_semaphore_t</ref> *</type>
          <declname>Semaphore</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1273" column="13" bodyfile="src/ml_runtime.c" bodystart="1273" bodyend="1290"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a4f085c3c3a1134311482e0041e5fc901" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_semaphore_signal</definition>
        <argsstring>(ml_semaphore_t *Semaphore)</argsstring>
        <name>ml_semaphore_signal</name>
        <param>
          <type><ref refid="structml__semaphore__t" kindref="compound">ml_semaphore_t</ref> *</type>
          <declname>Semaphore</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1292" column="13" bodyfile="src/ml_runtime.c" bodystart="1292" bodyend="1303"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a9189277d81a47925244410438ac20ff9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;wait&quot;, MLSemaphoreT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;wait&quot;</type>
        </param>
        <param>
          <type>MLSemaphoreT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>semaphore</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1305" column="1" bodyfile="src/ml_runtime.c" bodystart="1305" bodyend="1311"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a61eff03aca345148dda1fad12697d539" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;signal&quot;, MLSemaphoreT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;signal&quot;</type>
        </param>
        <param>
          <type>MLSemaphoreT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>semaphore</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1313" column="1" bodyfile="src/ml_runtime.c" bodystart="1313" bodyend="1321"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a20a1058cd16b9e1e72255982d31da1b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;value&quot;, MLSemaphoreT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;value&quot;</type>
        </param>
        <param>
          <type>MLSemaphoreT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>semaphore</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1323" column="1" bodyfile="src/ml_runtime.c" bodystart="1323" bodyend="1330"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a446391c4e7d1657996af38165c5b7173" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLCondition)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLCondition</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>condition</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1343" column="1" bodyfile="src/ml_runtime.c" bodystart="1343" bodyend="1355"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a31fa00d43d62c726b26453459f8e2c88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLConditionT,(), &quot;condition&quot;,.Constructor=(ml_value_t *) MLCondition)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLConditionT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;condition&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLCondition</defval>
          <briefdescription><para>condition </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1357" column="1" declfile="src/ml_runtime.c" declline="1357" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a2b1f7d4c4758e2f3fe48f10ecf637054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;wait&quot;, MLConditionT, MLSemaphoreT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;wait&quot;</type>
        </param>
        <param>
          <type>MLConditionT</type>
        </param>
        <param>
          <type>MLSemaphoreT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>condition</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1363" column="1" bodyfile="src/ml_runtime.c" bodystart="1363" bodyend="1384"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a806cdbd91307e89565dcd31dc22a05be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;signal&quot;, MLConditionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;signal&quot;</type>
        </param>
        <param>
          <type>MLConditionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>condition</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1386" column="1" bodyfile="src/ml_runtime.c" bodystart="1386" bodyend="1400"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a726c15f48c60c2f38d81195d8e081d94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;broadcast&quot;, MLConditionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;broadcast&quot;</type>
        </param>
        <param>
          <type>MLConditionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>condition</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1402" column="1" bodyfile="src/ml_runtime.c" bodystart="1402" bodyend="1416"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a6505100e42852a3fe6f95ff1873abd47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLRWLock)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLRWLock</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>rwlock</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1430" column="1" bodyfile="src/ml_runtime.c" bodystart="1430" bodyend="1443"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a6c54d06da71c5d3a00f022d42a574ff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLRWLockT,(), &quot;rwlock&quot;,.Constructor=(ml_value_t *) MLRWLock)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLRWLockT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;rwlock&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLRWLock</defval>
          <briefdescription><para>rwlock </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1445" column="1" declfile="src/ml_runtime.c" declline="1445" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a638369a19ae4cabefd6bbe0c6c87d7cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;rdlock&quot;, MLRWLockT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;rdlock&quot;</type>
        </param>
        <param>
          <type>MLRWLockT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>rwlock</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1451" column="1" bodyfile="src/ml_runtime.c" bodystart="1451" bodyend="1472"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a592ea1ef633c26f96bdd2613aa2e58ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;wrlock&quot;, MLRWLockT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;wrlock&quot;</type>
        </param>
        <param>
          <type>MLRWLockT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>rwlock</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1474" column="1" bodyfile="src/ml_runtime.c" bodystart="1474" bodyend="1496"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a1ef07963430785daac859d06ece32e2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;unlock&quot;, MLRWLockT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;unlock&quot;</type>
        </param>
        <param>
          <type>MLRWLockT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>rwlock</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1498" column="1" bodyfile="src/ml_runtime.c" bodystart="1498" bodyend="1529"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a43ee35a644b043391efe017a62dfb2e4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_channel_run</definition>
        <argsstring>(ml_channel_t *Channel, ml_value_t *Value)</argsstring>
        <name>ml_channel_run</name>
        <param>
          <type><ref refid="structml__channel__t" kindref="compound">ml_channel_t</ref> *</type>
          <declname>Channel</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1548" column="13" bodyfile="src/ml_runtime.c" bodystart="1548" bodyend="1551"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1aed2dc71a0d910caededac8c3f553d8ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLChannel)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLChannel</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>channel</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1553" column="1" bodyfile="src/ml_runtime.c" bodystart="1553" bodyend="1561"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a00aa168d0c4f39d30224a0d71964c3ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLChannelT,(), &quot;channel&quot;,.Constructor=(ml_value_t *) MLChannel)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLChannelT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;channel&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLChannel</defval>
          <briefdescription><para>channel </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1563" column="1" declfile="src/ml_runtime.c" declline="1563" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a4f1fb09c82860cc55b74d4e4b2b4f0d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODVX</definition>
        <argsstring>(&quot;start&quot;, MLChannelT, MLFunctionT)</argsstring>
        <name>ML_METHODVX</name>
        <param>
          <type>&quot;start&quot;</type>
        </param>
        <param>
          <type>MLChannelT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>channel</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1568" column="1" bodyfile="src/ml_runtime.c" bodystart="1568" bodyend="1580"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a4116d72e2cc7647a7a3fd18e7f1a26a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;open&quot;, MLChannelT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;open&quot;</type>
        </param>
        <param>
          <type>MLChannelT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>channel</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1582" column="1" bodyfile="src/ml_runtime.c" bodystart="1582" bodyend="1588"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1ab7f7ad81754119e07f26ff8436c8b18d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_channel_next</definition>
        <argsstring>(ml_state_t *Caller, ml_channel_t *Channel, ml_value_t *Value)</argsstring>
        <name>ml_channel_next</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__channel__t" kindref="compound">ml_channel_t</ref> *</type>
          <declname>Channel</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1590" column="20" bodyfile="src/ml_runtime.c" bodystart="1590" bodyend="1602"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1ad7b8d50353e3ed4a6f7cb36ada9b0c68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;next&quot;, MLChannelT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;next&quot;</type>
        </param>
        <param>
          <type>MLChannelT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>channel</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1604" column="1" bodyfile="src/ml_runtime.c" bodystart="1604" bodyend="1609"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a48c60517223b7eb3b0c511365e13587e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;next&quot;, MLChannelT, MLAnyT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;next&quot;</type>
        </param>
        <param>
          <type>MLChannelT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>channel</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1611" column="1" bodyfile="src/ml_runtime.c" bodystart="1611" bodyend="1617"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1aec4374efe8b8f7425907bc88c8188d16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;send&quot;, MLChannelT, MLAnyT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;send&quot;</type>
        </param>
        <param>
          <type>MLChannelT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>channel</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1619" column="1" bodyfile="src/ml_runtime.c" bodystart="1619" bodyend="1634"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a959f9c9c13a1b380f87d4f97ef181e60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODVX</definition>
        <argsstring>(&quot;close&quot;, MLChannelT, MLFunctionT)</argsstring>
        <name>ML_METHODVX</name>
        <param>
          <type>&quot;close&quot;</type>
        </param>
        <param>
          <type>MLChannelT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>channel</para>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1636" column="1" bodyfile="src/ml_runtime.c" bodystart="1636" bodyend="1642"/>
      </memberdef>
      <memberdef kind="function" id="ml__runtime_8c_1a57528ac25b01d2a781500b372f14fe37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_runtime_init</definition>
        <argsstring>()</argsstring>
        <name>ml_runtime_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_runtime.c" line="1688" column="6" bodyfile="src/ml_runtime.c" bodystart="1688" bodyend="1695"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;minilang.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stringmap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;inttypes.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ML_CATEGORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;runtime&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Runtime<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">__thread</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*MLArgCache[ML_ARG_CACHE_SIZE];</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MLContextSize<sp/>=<sp/>ML_CONTEXT_SIZE;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint64_t<sp/>DefaultCounter<sp/>=<sp/>UINT_MAX;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>default_swap(<ref refid="structml__scheduler__t" kindref="compound">ml_scheduler_t</ref><sp/>*Queue,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>DefaultCounter<sp/>=<sp/>UINT_MAX;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;run(State,<sp/>Value);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__scheduler__t" kindref="compound">ml_scheduler_t</ref><sp/>DefaultScheduler<sp/>=<sp/>{default_swap};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>MLRootContext<sp/>=<sp/>{&amp;MLRootContext,<sp/>6,<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;DefaultScheduler,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;DefaultCounter,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*ml_context(<ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*Parent)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*Context<sp/>=<sp/>xnew(<ref refid="structml__context__t" kindref="compound">ml_context_t</ref>,<sp/>MLContextSize,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>Context-&gt;Parent<sp/>=<sp/>Parent;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>Context-&gt;Size<sp/>=<sp/>MLContextSize;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Parent-&gt;Size;<sp/>++I)<sp/>Context-&gt;Values[I]<sp/>=<sp/>Parent-&gt;Values[I];</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Context;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_context_index()<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLContextSize++;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_context_set(<ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*Context,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Context-&gt;Size<sp/>&lt;=<sp/>Index)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Warray-bounds&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>Context-&gt;Values[Index]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>MLConfigs[1]<sp/>=<sp/>{STRINGMAP_INIT};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_config_register(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/>ml_config_fn<sp/>Fn)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLConfigs,<sp/>Name,<sp/>Fn);</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">ml_config_fn<sp/>ml_config_lookup(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ml_config_fn)stringmap_search(MLConfigs,<sp/>Name);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="structml__context__key__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}<sp/><ref refid="structml__context__key__t" kindref="compound">ml_context_key_t</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__context__value__t" kindref="compound">ml_context_value_t</ref><sp/><ref refid="structml__context__value__t" kindref="compound">ml_context_value_t</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="structml__context__value__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__context__value__t" kindref="compound">ml_context_value_t</ref><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__context__value__t" kindref="compound">ml_context_value_t</ref><sp/>*Prev;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__context__key__t" kindref="compound">ml_context_key_t</ref><sp/>*Key;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_context_key_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__context__key__t" kindref="compound">ml_context_key_t</ref><sp/>*Key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__context__value__t" kindref="compound">ml_context_value_t</ref><sp/>*Values<sp/>=<sp/>Caller-&gt;Context-&gt;Values[ML_VARIABLES_INDEX];</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Values)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Values-&gt;Key<sp/>==<sp/>Key)<sp/>ML_RETURN(Values-&gt;Value);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;CallError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Context<sp/>key<sp/>requires<sp/>exactly<sp/>0<sp/>or<sp/>&gt;2<sp/>arguments&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__context__value__t" kindref="compound">ml_context_value_t</ref><sp/>*Value<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__context__value__t" kindref="compound">ml_context_value_t</ref>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Prev<sp/>=<sp/>Values;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Key<sp/>=<sp/>Key;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>ml_state(Caller);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_context_set(State-&gt;Context,<sp/>ML_VARIABLES_INDEX,<sp/>Value);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>ml_deref(Args[Count<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>Count<sp/>-<sp/>2,<sp/>Args<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">ML_FUNCTION(MLContextKey)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="comment">//@context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//&gt;context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>new<sp/>context<sp/>specific<sp/>key.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__context__key__t" kindref="compound">ml_context_key_t</ref><sp/>*Key<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__context__key__t" kindref="compound">ml_context_key_t</ref>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>Key-&gt;Type<sp/>=<sp/>MLContextKeyT;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Key;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">ML_TYPE(MLContextKeyT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;context&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="116"><highlight class="comment">//@context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>context<sp/>key<sp/>can<sp/>be<sp/>used<sp/>to<sp/>create<sp/>context<sp/>specific<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>:mini:`key`<sp/>is<sp/>a<sp/>context<sp/>key,<sp/>then<sp/>calling<sp/>:mini:`key()`<sp/>no<sp/>arguments<sp/>returns<sp/>the<sp/>value<sp/>associated<sp/>with<sp/>the<sp/>key<sp/>in<sp/>the<sp/>current<sp/>context,<sp/>or<sp/>:mini:`nil`<sp/>is<sp/>no<sp/>value<sp/>is<sp/>associated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calling<sp/>:mini:`key(Value,<sp/>Function)`<sp/>will<sp/>invoke<sp/>:mini:`Function`<sp/>in<sp/>a<sp/>new<sp/>context<sp/>where<sp/>:mini:`key`<sp/>is<sp/>associated<sp/>with<sp/>:mini:`Value`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_context_key_call,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLContextKey</highlight></codeline>
<codeline lineno="122"><highlight class="normal">);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_state_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;run(State,<sp/>Count<sp/>?<sp/>Args[0]<sp/>:<sp/>MLNil);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">ML_TYPE(MLStateT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;state&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_state_call</highlight></codeline>
<codeline lineno="131"><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_end_state_run(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_default_state_run(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_call_state_run(<ref refid="structml__call__state__t" kindref="compound">ml_call_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_call(State-&gt;Base.Caller,<sp/>Value,<sp/>State-&gt;Count,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><ref refid="structml__call__state__t" kindref="compound">ml_call_state_t</ref><sp/>*ml_call_state(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__call__state__t" kindref="compound">ml_call_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__call__state__t" kindref="compound">ml_call_state_t</ref>,<sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLStateT;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_call_state_run;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_result_state_run(<ref refid="structml__result__state__t" kindref="compound">ml_result_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><ref refid="structml__result__state__t" kindref="compound">ml_result_state_t</ref><sp/>*ml_result_state(<ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*Context)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__result__state__t" kindref="compound">ml_result_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__result__state__t" kindref="compound">ml_result_state_t</ref>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Context<sp/>?:<sp/>&amp;MLRootContext;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//State-&gt;Value<sp/>=<sp/>MLNil;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLStateT;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_result_state_run;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State;</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_simple_call(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__result__state__t" kindref="compound">ml_result_state_t</ref><sp/>State<sp/>=<sp/>{{MLStateT,<sp/>NULL,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_result_state_run,<sp/>&amp;MLRootContext},<sp/>MLNil};</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_call(&amp;State,<sp/>Value,<sp/>Count,<sp/>Args);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State.Value;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_simple_assign(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value2)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__result__state__t" kindref="compound">ml_result_state_t</ref><sp/>State<sp/>=<sp/>{{MLStateT,<sp/>NULL,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_result_state_run,<sp/>&amp;MLRootContext},<sp/>MLNil};</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_assign(&amp;State,<sp/>Value,<sp/>Value2);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>State.Value;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>State.Value<sp/>=<sp/>MLNil;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="structml__context__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>Context[1];</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}<sp/><ref refid="structml__context__state__t" kindref="compound">ml_context_state_t</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*ml_state(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__context__state__t" kindref="compound">ml_context_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__context__state__t" kindref="compound">ml_context_state_t</ref>,<sp/>MLContextSize,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*Parent<sp/>=<sp/>Caller<sp/>?<sp/>Caller-&gt;Context<sp/>:<sp/>&amp;MLRootContext;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Context-&gt;Parent<sp/>=<sp/>Parent;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Context-&gt;Size<sp/>=<sp/>MLContextSize;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Parent-&gt;Size;<sp/>++I)<sp/>State-&gt;Context-&gt;Values[I]<sp/>=<sp/>Parent-&gt;Values[I];</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>ml_default_state_run;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>State-&gt;Context;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State;</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="structml__resumable__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__resumable__state__t" kindref="compound">ml_resumable_state_t</ref><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Last;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}<sp/><ref refid="structml__resumable__state__t" kindref="compound">ml_resumable_state_t</ref>;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_resumable_state_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__resumable__state__t" kindref="compound">ml_resumable_state_t</ref><sp/>*State,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Last-&gt;Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Count<sp/>?<sp/>Args[0]<sp/>:<sp/>MLNil);</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal">ML_TYPE(MLResumableStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;resumable-state&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_resumable_state_call</highlight></codeline>
<codeline lineno="214"><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_resumable_state_run(<ref refid="structml__resumable__state__t" kindref="compound">ml_resumable_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;StateError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>use<sp/>of<sp/>resumable<sp/>state&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal">ML_FUNCTIONX(MLCallCC)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="comment">//@callcc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Caller-&gt;Type)<sp/>Caller-&gt;Type<sp/>=<sp/>MLStateT;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Caller;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;run<sp/>=<sp/>ml_end_state_run;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>Count,<sp/>Args);</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">ML_FUNCTIONX(MLMarkCC)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="comment">//@markcc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref>);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Type<sp/>=<sp/>MLStateT;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;run<sp/>=<sp/>ml_default_state_run;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Func<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)State;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Func,<sp/>1,<sp/>Args);</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">ML_FUNCTIONX(MLCallDC)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="comment">//@calldc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Caller-&gt;Type)<sp/>Caller-&gt;Type<sp/>=<sp/>MLStateT;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLStateT);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Last<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Last<sp/>&amp;&amp;<sp/>Last-&gt;Caller<sp/>!=<sp/>State)<sp/>Last<sp/>=<sp/>Last-&gt;Caller;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Last)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;StateError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;State<sp/>not<sp/>in<sp/>current<sp/>call<sp/>chain&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>Last-&gt;Caller<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__resumable__state__t" kindref="compound">ml_resumable_state_t</ref><sp/>*Resumable<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__resumable__state__t" kindref="compound">ml_resumable_state_t</ref>);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>Resumable-&gt;Base.Type<sp/>=<sp/>MLResumableStateT;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>Resumable-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>Resumable-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_resumable_state_run;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>Resumable-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>Resumable-&gt;Last<sp/>=<sp/>Last;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Resumable;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>1,<sp/>Args);</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal">ML_FUNCTIONX(MLSwapCC)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="comment">//@swapcc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLStateT);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;run(State,<sp/>Count<sp/>&gt;<sp/>1<sp/>?<sp/>Args[1]<sp/>:<sp/>MLNil);</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>References<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ml_reference_hash(<ref refid="structml__reference__t" kindref="compound">ml_reference_t</ref><sp/>*Reference,<sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Chain)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_hash_chain(Reference-&gt;Address[0],<sp/>Chain);</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_reference_deref(<ref refid="structml__reference__t" kindref="compound">ml_reference_t</ref><sp/>*Reference)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Reference-&gt;Address[0];</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_reference_assign(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__reference__t" kindref="compound">ml_reference_t</ref><sp/>*Reference,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>Reference-&gt;Address[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal">ML_TYPE(MLReferenceT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;reference&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>.hash<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_reference_hash,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>.deref<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_reference_deref,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>.assign<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_reference_assign</highlight></codeline>
<codeline lineno="298"><highlight class="normal">);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_reference(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Address)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__reference__t" kindref="compound">ml_reference_t</ref><sp/>*Reference;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>Reference<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__reference__t" kindref="compound">ml_reference_t</ref>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>Reference-&gt;Address<sp/>=<sp/>Address;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>Reference-&gt;Type<sp/>=<sp/>MLReferenceT;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Reference;</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__uninitialized__slot__t" kindref="compound">ml_uninitialized_slot_t</ref><sp/><ref refid="structml__uninitialized__slot__t" kindref="compound">ml_uninitialized_slot_t</ref>;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="structml__uninitialized__slot__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__uninitialized__slot__t" kindref="compound">ml_uninitialized_slot_t</ref><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__uninitialized__slot__t" kindref="compound">ml_uninitialized_slot_t</ref><sp/>*Next;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Value;</highlight></codeline>
<codeline lineno="313"><highlight class="normal">};</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315" refid="structml__uninitialized__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__uninitialized__slot__t" kindref="compound">ml_uninitialized_slot_t</ref><sp/>*Slots;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>Unresolved[1];</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>Source;</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}<sp/><ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_uninitialized_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref><sp/>*Uninitialized,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>is<sp/>uninitialized&quot;</highlight><highlight class="normal">,<sp/>Uninitialized-&gt;Name);</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_unitialized_assign(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref><sp/>*Uninitialized,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>is<sp/>uninitialized&quot;</highlight><highlight class="normal">,<sp/>Uninitialized-&gt;Name);</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal">ML_TYPE(MLUninitializedT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;uninitialized&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>uninitialized<sp/>value.<sp/>Used<sp/>for<sp/>forward<sp/>declarations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_uninitialized_call,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>.assign<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_unitialized_assign</highlight></codeline>
<codeline lineno="335"><highlight class="normal">);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_uninitialized(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>Source)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref><sp/>*Uninitialized<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref>);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>Uninitialized-&gt;Type<sp/>=<sp/>MLUninitializedT;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>Uninitialized-&gt;Name<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>Uninitialized-&gt;Source<sp/>=<sp/>Source;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Uninitialized;</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_uninitialized_name(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Uninitialized)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref><sp/>*)Uninitialized)-&gt;Name;</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>ml_uninitialized_source(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Uninitialized)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref><sp/>*)Uninitialized)-&gt;Source;</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_uninitialized_use(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Uninitialized0,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Value)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref><sp/>*Uninitialized<sp/>=<sp/>(<ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref><sp/>*)Uninitialized0;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__uninitialized__slot__t" kindref="compound">ml_uninitialized_slot_t</ref><sp/>*Slot<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__uninitialized__slot__t" kindref="compound">ml_uninitialized_slot_t</ref>);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>Slot-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>Slot-&gt;Next<sp/>=<sp/>Uninitialized-&gt;Slots;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>Uninitialized-&gt;Slots<sp/>=<sp/>Slot;</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ML_METHOD_DECL(SymbolMethod,<sp/></highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_uninitialized_resolve(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/><ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref><sp/>*Uninitialized,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>ml_simple_inline(SymbolMethod,<sp/>2,<sp/>Value,<sp/>ml_string(Name,<sp/>-1));</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_uninitialized_set((<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Uninitialized,<sp/>Result);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_uninitialized_transfer(<ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref><sp/>*Uninitialized,<sp/><ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref><sp/>*Uninitialized2);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_uninitialized_transfer_import(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/><ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref><sp/>*Uninitialized,<sp/><ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref><sp/>*Uninitialized2)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref><sp/>**)stringmap_slot(Uninitialized2-&gt;Unresolved,<sp/>Name);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Slot[0])<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_uninitialized_transfer(Uninitialized,<sp/>Slot[0]);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>Uninitialized;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_uninitialized_transfer(<ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref><sp/>*Uninitialized,<sp/><ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref><sp/>*Uninitialized2)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__uninitialized__slot__t" kindref="compound">ml_uninitialized_slot_t</ref><sp/>*Slot<sp/>=<sp/>Uninitialized2-&gt;Slots;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Slot)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Slot-&gt;Next)<sp/>Slot<sp/>=<sp/>Slot-&gt;Next;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot-&gt;Next<sp/>=<sp/>Uninitialized-&gt;Slots;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uninitialized2-&gt;Slots<sp/>=<sp/>Uninitialized-&gt;Slots;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_foreach(Uninitialized-&gt;Unresolved,<sp/>Uninitialized2,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_uninitialized_transfer_import);</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_uninitialized_set(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Uninitialized0,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref><sp/>*Uninitialized<sp/>=<sp/>(<ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref><sp/>*)Uninitialized0;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_typeof(Value)<sp/>==<sp/>MLUninitializedT)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_uninitialized_transfer(Uninitialized,<sp/>(<ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref><sp/>*)Value);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__uninitialized__slot__t" kindref="compound">ml_uninitialized_slot_t</ref><sp/>*Slot<sp/>=<sp/>Uninitialized-&gt;Slots;<sp/>Slot;<sp/>Slot<sp/>=<sp/>Slot-&gt;Next)<sp/>Slot-&gt;Value[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_foreach(Uninitialized-&gt;Unresolved,<sp/>Value,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_uninitialized_resolve);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,<sp/>MLUninitializedT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref><sp/>*Uninitialized<sp/>=<sp/>(<ref refid="structml__uninitialized__t" kindref="compound">ml_uninitialized_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)stringmap_slot(Uninitialized-&gt;Unresolved,<sp/>Name);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/>Slot[0]<sp/>=<sp/>ml_uninitialized(Name,<sp/>ml_debugger_source(Caller));</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Slot[0]);</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Errors<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_TRACE<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414" refid="structml__error__value__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Error;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Message;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>Trace[MAX_TRACE];</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}<sp/><ref refid="structml__error__value__t" kindref="compound">ml_error_value_t</ref>;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="structml__error__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__error__value__t" kindref="compound">ml_error_value_t</ref><sp/>Error[];</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}<sp/><ref refid="structml__error__t" kindref="compound">ml_error_t</ref>;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_error_assign(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Error);</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_error_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Error);</highlight></codeline>
<codeline lineno="433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal">ML_FUNCTION(MLError)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="comment">//@error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment">//&lt;Message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="comment">//&gt;error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>error<sp/>exception<sp/>with<sp/>type<sp/>:mini:`Type`<sp/>and<sp/>message<sp/>:mini:`Message`.<sp/>Since<sp/>this<sp/>creates<sp/>an<sp/>exception,<sp/>it<sp/>will<sp/>trigger<sp/>the<sp/>current<sp/>exception<sp/>handler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__error__t" kindref="compound">ml_error_t</ref><sp/>*Error<sp/>=<sp/>xnew(<ref refid="structml__error__t" kindref="compound">ml_error_t</ref>,<sp/>1,<sp/><ref refid="structml__error__value__t" kindref="compound">ml_error_value_t</ref>);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>Error-&gt;Type<sp/>=<sp/>MLErrorT;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>Error-&gt;Error-&gt;Type<sp/>=<sp/>MLErrorValueT;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>Error-&gt;Error-&gt;Error<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>Error-&gt;Error-&gt;Message<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>Error-&gt;Error-&gt;Value<sp/>=<sp/>MLNil;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Error;</highlight></codeline>
<codeline lineno="452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal">ML_FUNCTION(MLRaise)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="comment">//@raise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="comment">//&gt;error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>general<sp/>exception<sp/>with<sp/>type<sp/>:mini:`Type`<sp/>and<sp/>value<sp/>:mini:`Value`.<sp/>Since<sp/>this<sp/>creates<sp/>an<sp/>exception,<sp/>it<sp/>will<sp/>trigger<sp/>the<sp/>current<sp/>exception<sp/>handler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__error__t" kindref="compound">ml_error_t</ref><sp/>*Error<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__error__t" kindref="compound">ml_error_t</ref>);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>Error-&gt;Type<sp/>=<sp/>MLErrorT;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>Error-&gt;Error-&gt;Type<sp/>=<sp/>MLErrorValueT;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>Error-&gt;Error-&gt;Error<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>Error-&gt;Error-&gt;Message<sp/>=<sp/>ml_typeof(Args[1])-&gt;Name;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>Error-&gt;Error-&gt;Value<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Error;</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal">ML_TYPE(MLErrorT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="474"><highlight class="comment">//<sp/>An<sp/>error.<sp/>Values<sp/>of<sp/>this<sp/>type<sp/>are<sp/>not<sp/>accessible<sp/>from<sp/>Minilang<sp/>code<sp/>since<sp/>they<sp/>are<sp/>caught<sp/>by<sp/>the<sp/>runtime.<sp/>Each<sp/>error<sp/>contains<sp/>an<sp/>*error<sp/>value*<sp/>which<sp/>contains<sp/>the<sp/>details<sp/>of<sp/>the<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>.assign<sp/>=<sp/>ml_error_assign,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>ml_error_call</highlight></codeline>
<codeline lineno="477"><highlight class="normal">);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal">ML_TYPE(MLErrorValueT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="481"><highlight class="comment">//<sp/>An<sp/>error<sp/>value.<sp/>Error<sp/>values<sp/>contain<sp/>the<sp/>details<sp/>of<sp/>an<sp/>error<sp/>but<sp/>are<sp/>not<sp/>themselves<sp/>errors<sp/>(since<sp/>errors<sp/>are<sp/>caught<sp/>by<sp/>the<sp/>runtime).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLError</highlight></codeline>
<codeline lineno="483"><highlight class="normal">);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_errorv(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Error,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Format,<sp/>va_list<sp/>Args)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Message;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_vasprintf(&amp;Message,<sp/>Format,<sp/>Args);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__error__t" kindref="compound">ml_error_t</ref><sp/>*Value<sp/>=<sp/>xnew(<ref refid="structml__error__t" kindref="compound">ml_error_t</ref>,<sp/>1,<sp/><ref refid="structml__error__value__t" kindref="compound">ml_error_value_t</ref>);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>Value-&gt;Type<sp/>=<sp/>MLErrorT;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>Value-&gt;Error-&gt;Type<sp/>=<sp/>MLErrorValueT;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>Value-&gt;Error-&gt;Error<sp/>=<sp/>Error;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>Value-&gt;Error-&gt;Message<sp/>=<sp/>Message;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>Value-&gt;Error-&gt;Value<sp/>=<sp/>MLNil;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Error,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Format,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>Args;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>Format);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>ml_errorv(Error,<sp/>Format,<sp/>Args);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value;</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_error_unwrap(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)((<ref refid="structml__error__t" kindref="compound">ml_error_t</ref><sp/>*)Value)-&gt;Error;</highlight></codeline>
<codeline lineno="507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_error_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__error__t" kindref="compound">ml_error_t</ref><sp/>*)Value)-&gt;Error-&gt;Error;</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_error_message(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__error__t" kindref="compound">ml_error_t</ref><sp/>*)Value)-&gt;Error-&gt;Message;</highlight></codeline>
<codeline lineno="515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_error_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__error__t" kindref="compound">ml_error_t</ref><sp/>*)Value)-&gt;Error-&gt;Value;</highlight></codeline>
<codeline lineno="519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_error_source(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Level,<sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>*Source)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__error__t" kindref="compound">ml_error_t</ref><sp/>*Error<sp/>=<sp/>(<ref refid="structml__error__t" kindref="compound">ml_error_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Level<sp/>&gt;=<sp/>MAX_TRACE)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Error-&gt;Error-&gt;Trace[Level].Name)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>Source[0]<sp/>=<sp/>Error-&gt;Error-&gt;Trace[Level];</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_error_trace_add(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>Source)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__error__t" kindref="compound">ml_error_t</ref><sp/>*Error<sp/>=<sp/>(<ref refid="structml__error__t" kindref="compound">ml_error_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>MAX_TRACE;<sp/>++I)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Error-&gt;Error-&gt;Trace[I].Name)<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error-&gt;Error-&gt;Trace[I]<sp/>=<sp/>Source;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value;</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_error_value_set(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>((<ref refid="structml__error__t" kindref="compound">ml_error_t</ref><sp/>*)Error)-&gt;Error-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_error_print(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__error__t" kindref="compound">ml_error_t</ref><sp/>*Error<sp/>=<sp/>(<ref refid="structml__error__t" kindref="compound">ml_error_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>Error-&gt;Error-&gt;Message);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>(I<sp/>&lt;<sp/>MAX_TRACE)<sp/>&amp;&amp;<sp/>Error-&gt;Error-&gt;Trace[I].Name;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\t%s:%d\n&quot;</highlight><highlight class="normal">,<sp/>Error-&gt;Error-&gt;Trace[I].Name,<sp/>Error-&gt;Error-&gt;Trace[I].Line);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_error_fprint(FILE<sp/>*File,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__error__t" kindref="compound">ml_error_t</ref><sp/>*Error<sp/>=<sp/>(<ref refid="structml__error__t" kindref="compound">ml_error_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(File,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>Error-&gt;Error-&gt;Message);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>(I<sp/>&lt;<sp/>MAX_TRACE)<sp/>&amp;&amp;<sp/>Error-&gt;Error-&gt;Trace[I].Name;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(File,<sp/></highlight><highlight class="stringliteral">&quot;\t%s:%d\n&quot;</highlight><highlight class="normal">,<sp/>Error-&gt;Error-&gt;Trace[I].Name,<sp/>Error-&gt;Error-&gt;Trace[I].Line);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_error_value_type(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__error__value__t" kindref="compound">ml_error_value_t</ref><sp/>*)Value)-&gt;Error;</highlight></codeline>
<codeline lineno="560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_error_value_message(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__error__value__t" kindref="compound">ml_error_value_t</ref><sp/>*)Value)-&gt;Message;</highlight></codeline>
<codeline lineno="564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_error_value_source(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Level,<sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>*Source)<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__error__value__t" kindref="compound">ml_error_value_t</ref><sp/>*Error<sp/>=<sp/>(<ref refid="structml__error__value__t" kindref="compound">ml_error_value_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Level<sp/>&gt;=<sp/>MAX_TRACE)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Error-&gt;Trace[Level].Name)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>Source[0]<sp/>=<sp/>Error-&gt;Trace[Level];</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">,<sp/>MLErrorValueT)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="comment">//&lt;Error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>type<sp/>of<sp/>:mini:`Error`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(((<ref refid="structml__error__value__t" kindref="compound">ml_error_value_t</ref><sp/>*)Args[0])-&gt;Error,<sp/>-1);</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;message&quot;</highlight><highlight class="normal">,<sp/>MLErrorValueT)<sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="comment">//&lt;Error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>message<sp/>of<sp/>:mini:`Error`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(((<ref refid="structml__error__value__t" kindref="compound">ml_error_value_t</ref><sp/>*)Args[0])-&gt;Message,<sp/>-1);</highlight></codeline>
<codeline lineno="588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;trace&quot;</highlight><highlight class="normal">,<sp/>MLErrorValueT)<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="comment">//&lt;Error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="comment">//&gt;list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>stack<sp/>trace<sp/>of<sp/>:mini:`Error`<sp/>as<sp/>a<sp/>list<sp/>of<sp/>tuples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__error__value__t" kindref="compound">ml_error_value_t</ref><sp/>*Error<sp/>=<sp/>(<ref refid="structml__error__value__t" kindref="compound">ml_error_value_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Trace<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>*Source<sp/>=<sp/>Error-&gt;Trace;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>MAX_TRACE;<sp/>--I<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>Source-&gt;Name;<sp/>++Source)<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Tuple<sp/>=<sp/>ml_tuplev(2,<sp/>ml_string(Source-&gt;Name,<sp/>-1),<sp/>ml_integer(Source-&gt;Line));</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Trace,<sp/>Tuple);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Trace;</highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>MLErrorValueT)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__error__value__t" kindref="compound">ml_error_value_t</ref><sp/>*Error<sp/>=<sp/>(<ref refid="structml__error__value__t" kindref="compound">ml_error_value_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error-&gt;Value;</highlight></codeline>
<codeline lineno="608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;raise&quot;</highlight><highlight class="normal">,<sp/>MLErrorValueT)<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="comment">//&lt;Error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="comment">//&gt;error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Error`<sp/>as<sp/>an<sp/>error<sp/>(i.e.<sp/>rethrows<sp/>the<sp/>error).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__error__t" kindref="compound">ml_error_t</ref><sp/>*Error<sp/>=<sp/>xnew(<ref refid="structml__error__t" kindref="compound">ml_error_t</ref>,<sp/>1,<sp/><ref refid="structml__error__value__t" kindref="compound">ml_error_value_t</ref>);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>Error-&gt;Type<sp/>=<sp/>MLErrorT;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>Error-&gt;Error-&gt;Type<sp/>=<sp/>MLErrorValueT;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>Error-&gt;Error-&gt;Error<sp/>=<sp/>ml_error_value_type(Args[0]);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>Error-&gt;Error-&gt;Message<sp/>=<sp/>ml_error_value_message(Args[0]);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Level<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_error_value_source(Args[0],<sp/>Level,<sp/>Error-&gt;Error-&gt;Trace<sp/>+<sp/>Level))<sp/>++Level;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>Error-&gt;Error-&gt;Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Error-&gt;Error;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Error;</highlight></codeline>
<codeline lineno="624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLErrorValueT)<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__error__value__t" kindref="compound">ml_error_value_t</ref><sp/>*Value<sp/>=<sp/>(<ref refid="structml__error__value__t" kindref="compound">ml_error_value_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Value-&gt;Error,<sp/>strlen(Value-&gt;Error));</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Value-&gt;Message,<sp/>strlen(Value-&gt;Message));</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>*Source<sp/>=<sp/>Value-&gt;Trace;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>MAX_TRACE;<sp/>--I<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>Source-&gt;Name;<sp/>++Source)<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\n\t%s:%d&quot;</highlight><highlight class="normal">,<sp/>Source-&gt;Name,<sp/>Source-&gt;Line);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_serialize,<sp/>MLErrorValueT,<sp/><ref refid="structml__error__value__t" kindref="compound">ml_error_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Serialized<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_put(Serialized,<sp/>ml_cstring(</highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_put(Serialized,<sp/>ml_string(Value-&gt;Error,<sp/>-1));</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_put(Serialized,<sp/>ml_string(Value-&gt;Message,<sp/>-1));</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>*Source<sp/>=<sp/>Value-&gt;Trace;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>MAX_TRACE;<sp/>--I<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>Source-&gt;Name;<sp/>++Source)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Serialized,<sp/>ml_string(Source-&gt;Name,<sp/>-1));</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Serialized,<sp/>ml_integer(Source-&gt;Line));</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Serialized;</highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal">ML_DESERIALIZER(</highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__error__value__t" kindref="compound">ml_error_value_t</ref><sp/>*Value<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__error__value__t" kindref="compound">ml_error_value_t</ref>);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>Value-&gt;Type<sp/>=<sp/>MLErrorValueT;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>Value-&gt;Error<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>Value-&gt;Message<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>*Source<sp/>=<sp/>Value-&gt;Trace;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>&gt;<sp/>(2<sp/>+<sp/>MAX_TRACE<sp/>*<sp/>2))<sp/>Count<sp/>=<sp/>2<sp/>+<sp/>MAX_TRACE<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>2;<sp/>I<sp/>&lt;<sp/>Count;<sp/>I<sp/>+=<sp/>2,<sp/>++Source)<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(I<sp/>+<sp/>1,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Source-&gt;Name<sp/>=<sp/>ml_string_value(Args[I]);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Source-&gt;Line<sp/>=<sp/>ml_integer_value(Args[I<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>Value-&gt;Value<sp/>=<sp/>MLNil;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Debugging<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_debugger_check(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!State<sp/>||<sp/>!State-&gt;Type)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_debugger_check)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(State-&gt;Type,<sp/>ml_debugger_check);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(function)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(State);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_debugger_step_mode(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StepOver,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StepOut)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!State<sp/>||<sp/>!State-&gt;Type)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_debugger_step_mode)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(State-&gt;Type,<sp/>ml_debugger_step_mode);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(function)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(State,<sp/>StepOver,<sp/>StepOut);</highlight></codeline>
<codeline lineno="685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>ml_debugger_source(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!State<sp/>||<sp/>!State-&gt;Type)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__source__t" kindref="compound">ml_source_t</ref>){</highlight><highlight class="stringliteral">&quot;&lt;unknown&gt;&quot;</highlight><highlight class="normal">,<sp/>0};</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_debugger_source)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(State-&gt;Type,<sp/>ml_debugger_source);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(function)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(State);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Caller)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_debugger_source(State-&gt;Caller);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__source__t" kindref="compound">ml_source_t</ref>){</highlight><highlight class="stringliteral">&quot;&lt;unknown&gt;&quot;</highlight><highlight class="normal">,<sp/>0};</highlight></codeline>
<codeline lineno="693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*ml_debugger_decls(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!State<sp/>||<sp/>!State-&gt;Type)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_debugger_decls)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(State-&gt;Type,<sp/>ml_debugger_decls);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(function)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(State);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="700"><highlight class="normal">}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_debugger_local(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!State<sp/>||<sp/>!State-&gt;Type)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;DebugError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Locals<sp/>not<sp/>available&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_debugger_local)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(State-&gt;Type,<sp/>ml_debugger_local);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(function)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(State,<sp/>Index);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;DebugError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Locals<sp/>not<sp/>available&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="707"><highlight class="normal">}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal">ML_FUNCTIONX(MLBreak)<sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="comment">//@break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="comment">//&lt;Condition?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>a<sp/>debugger<sp/>is<sp/>present<sp/>and<sp/>:mini:`Condition`<sp/>is<sp/>omitted<sp/>or<sp/>not<sp/>:mini:`nil`<sp/>then<sp/>triggers<sp/>a<sp/>breakpoint.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__debugger__t" kindref="compound">ml_debugger_t</ref><sp/>*Debugger<sp/>=<sp/>Caller-&gt;Context-&gt;Values[ML_DEBUGGER_INDEX];</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Debugger)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>&amp;&amp;<sp/>Args[0]<sp/>==<sp/>MLNil)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Debugger-&gt;run(Debugger,<sp/>Caller,<sp/>MLNil);</highlight></codeline>
<codeline lineno="718"><highlight class="normal">}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720" refid="structml__mini__debugger__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__debugger__t" kindref="compound">ml_debugger_t</ref><sp/>Debug;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Run;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>Modules[1];</highlight></codeline>
<codeline lineno="725"><highlight class="normal">}<sp/><ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref>;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_mini_debugger_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref><sp/>*Debugger,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>ml_state(Caller);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_context_set(State-&gt;Context,<sp/>ML_DEBUGGER_INDEX,<sp/>&amp;Debugger-&gt;Debug);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>Count<sp/>-<sp/>1,<sp/>Args<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal">ML_TYPE(MLDebuggerT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;mini-debugger&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_mini_debugger_call</highlight></codeline>
<codeline lineno="736"><highlight class="normal">);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mini_debugger_debug(<ref refid="structml__debugger__t" kindref="compound">ml_debugger_t</ref><sp/>*Debug,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref><sp/>*Debugger<sp/>=<sp/>(<ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref><sp/>*)((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Debug<sp/>-<sp/>offsetof(<ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref>,<sp/>Debug));</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args<sp/>=<sp/>ml_alloc_args(2);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Type<sp/>==<sp/>NULL)<sp/>State-&gt;Type<sp/>=<sp/>MLStateT;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)State;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Debugger,<sp/>Debugger-&gt;Run,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Count;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Bits[];</highlight></codeline>
<codeline lineno="750"><highlight class="normal">}<sp/><ref refid="structbreakpoints__t" kindref="compound">breakpoints_t</ref>;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*mini_debugger_breakpoints(<ref refid="structml__debugger__t" kindref="compound">ml_debugger_t</ref><sp/>*Debug,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Max)<sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref><sp/>*Debugger<sp/>=<sp/>(<ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref><sp/>*)((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Debug<sp/>-<sp/>offsetof(<ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref>,<sp/>Debug));</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbreakpoints__t" kindref="compound">breakpoints_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structbreakpoints__t" kindref="compound">breakpoints_t</ref><sp/>**)stringmap_slot(Debugger-&gt;Modules,<sp/>Source);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>(Max<sp/>+<sp/>SIZE_BITS)<sp/>/<sp/>SIZE_BITS;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbreakpoints__t" kindref="compound">breakpoints_t</ref><sp/>*New<sp/>=<sp/>(<ref refid="structbreakpoints__t" kindref="compound">breakpoints_t</ref><sp/>*)snew(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structbreakpoints__t" kindref="compound">breakpoints_t</ref>)<sp/>+<sp/>Count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(size_t));</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(New-&gt;Bits,<sp/>0,<sp/>Count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>New-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>New;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>&gt;<sp/>Slot[0]-&gt;Count)<sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbreakpoints__t" kindref="compound">breakpoints_t</ref><sp/>*Old<sp/>=<sp/>Slot[0];</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbreakpoints__t" kindref="compound">breakpoints_t</ref><sp/>*New<sp/>=<sp/>(<ref refid="structbreakpoints__t" kindref="compound">breakpoints_t</ref><sp/>*)snew(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structbreakpoints__t" kindref="compound">breakpoints_t</ref>)<sp/>+<sp/>Count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(size_t));</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(New-&gt;Bits,<sp/>0,<sp/>Count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(New-&gt;Bits,<sp/>Old-&gt;Bits,<sp/>Old-&gt;Count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>New-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>New;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Slot[0]-&gt;Bits;</highlight></codeline>
<codeline lineno="770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mini_debugger_run(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal">ML_FUNCTIONX(MLDebugger)<sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="comment">//@debugger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment">//&lt;Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="comment">//&gt;debugger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>debugger<sp/>for<sp/>:mini:`Function()`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref><sp/>*Debugger<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref>);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Base.Type<sp/>=<sp/>MLDebuggerT;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Base.run<sp/>=<sp/>mini_debugger_run;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Debug.run<sp/>=<sp/>mini_debugger_debug;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Debug.breakpoints<sp/>=<sp/>mini_debugger_breakpoints;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Debug.StepIn<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Debug.BreakOnError<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Run<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Debugger);</highlight></codeline>
<codeline lineno="793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;breakpoint_set&quot;</highlight><highlight class="normal">,<sp/>MLDebuggerT,<sp/>MLStringT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="comment">//&lt;Debugger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="comment">//&lt;Source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="comment">//&lt;Line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>a<sp/>breakpoint<sp/>in<sp/>:mini:`Source`<sp/>at<sp/>line<sp/>:mini:`Line`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref><sp/>*Debugger<sp/>=<sp/>(<ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LineNo<sp/>=<sp/>ml_integer_value(Args[2]);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*Breakpoints<sp/>=<sp/>mini_debugger_breakpoints(&amp;Debugger-&gt;Debug,<sp/>Source,<sp/>LineNo);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>Breakpoints[LineNo<sp/>/<sp/>SIZE_BITS]<sp/>|=<sp/>1L<sp/>&lt;&lt;<sp/>(LineNo<sp/>%<sp/>SIZE_BITS);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>++Debugger-&gt;Debug.Revision;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;breakpoint_clear&quot;</highlight><highlight class="normal">,<sp/>MLDebuggerT,<sp/>MLStringT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="comment">//&lt;Debugger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="comment">//&lt;Source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="comment">//&lt;Line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clears<sp/>any<sp/>breakpoints<sp/>from<sp/>:mini:`Source`<sp/>at<sp/>line<sp/>:mini:`Line`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref><sp/>*Debugger<sp/>=<sp/>(<ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LineNo<sp/>=<sp/>ml_integer_value(Args[2]);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*Breakpoints<sp/>=<sp/>mini_debugger_breakpoints(&amp;Debugger-&gt;Debug,<sp/>Source,<sp/>LineNo);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>Breakpoints[LineNo<sp/>/<sp/>SIZE_BITS]<sp/>&amp;=<sp/>~(1L<sp/>&lt;&lt;<sp/>(LineNo<sp/>%<sp/>SIZE_BITS));</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>++Debugger-&gt;Debug.Revision;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;error_mode&quot;</highlight><highlight class="normal">,<sp/>MLDebuggerT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="comment">//&lt;Debugger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>:mini:`Set`<sp/>is<sp/>not<sp/>:mini:`nil`<sp/>then<sp/>:mini:`Debugger`<sp/>will<sp/>stop<sp/>on<sp/>errors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref><sp/>*Debugger<sp/>=<sp/>(<ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Debug.BreakOnError<sp/>=<sp/>Args[1]<sp/>!=<sp/>MLNil;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="833"><highlight class="normal">}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;step_mode&quot;</highlight><highlight class="normal">,<sp/>MLDebuggerT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="comment">//&lt;Debugger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>:mini:`Set`<sp/>is<sp/>not<sp/>:mini:`nil`<sp/>then<sp/>:mini:`Debugger`<sp/>will<sp/>stop<sp/>on<sp/>after<sp/>each<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref><sp/>*Debugger<sp/>=<sp/>(<ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Debug.StepIn<sp/>=<sp/>Args[1]<sp/>!=<sp/>MLNil;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="843"><highlight class="normal">}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;step_in&quot;</highlight><highlight class="normal">,<sp/>MLDebuggerT,<sp/>MLStateT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="comment">//&lt;Debugger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="comment">//&lt;State</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Resume<sp/>:mini:`State`<sp/>with<sp/>:mini:`Value`<sp/>in<sp/>the<sp/>debugger,<sp/>stopping<sp/>after<sp/>the<sp/>next<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref><sp/>*Debugger<sp/>=<sp/>(<ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Debug.StepIn<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_debugger_step_mode(State,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;run(State,<sp/>Args[2]);</highlight></codeline>
<codeline lineno="856"><highlight class="normal">}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;step_over&quot;</highlight><highlight class="normal">,<sp/>MLDebuggerT,<sp/>MLStateT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="860"><highlight class="comment">//&lt;Debugger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="comment">//&lt;State</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Resume<sp/>:mini:`State`<sp/>with<sp/>:mini:`Value`<sp/>in<sp/>the<sp/>debugger,<sp/>stopping<sp/>after<sp/>the<sp/>next<sp/>line<sp/>in<sp/>the<sp/>same<sp/>function<sp/>(i.e.<sp/>stepping<sp/>over<sp/>function<sp/>calls).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref><sp/>*Debugger<sp/>=<sp/>(<ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Debug.StepIn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_debugger_step_mode(State,<sp/>1,<sp/>0);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;run(State,<sp/>Args[2]);</highlight></codeline>
<codeline lineno="869"><highlight class="normal">}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;step_out&quot;</highlight><highlight class="normal">,<sp/>MLDebuggerT,<sp/>MLStateT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="comment">//&lt;Debugger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="comment">//&lt;State</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Resume<sp/>:mini:`State`<sp/>with<sp/>:mini:`Value`<sp/>in<sp/>the<sp/>debugger,<sp/>stopping<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>current<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref><sp/>*Debugger<sp/>=<sp/>(<ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Debug.StepIn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_debugger_step_mode(State,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;run(State,<sp/>Args[2]);</highlight></codeline>
<codeline lineno="882"><highlight class="normal">}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;continue&quot;</highlight><highlight class="normal">,<sp/>MLDebuggerT,<sp/>MLStateT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="886"><highlight class="comment">//&lt;Debugger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="comment">//&lt;State</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Resume<sp/>:mini:`State`<sp/>with<sp/>:mini:`Value`<sp/>in<sp/>the<sp/>debugger.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref><sp/>*Debugger<sp/>=<sp/>(<ref refid="structml__mini__debugger__t" kindref="compound">ml_mini_debugger_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Debug.StepIn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_debugger_step_mode(State,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;run(State,<sp/>Args[2]);</highlight></codeline>
<codeline lineno="895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;locals&quot;</highlight><highlight class="normal">,<sp/>MLStateT)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="comment">//&lt;State</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="comment">//&gt;list[string]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>list<sp/>of<sp/>locals<sp/>in<sp/>:mini:`State`.<sp/>Returns<sp/>an<sp/>empty<sp/>list<sp/>if<sp/>:mini:`State`<sp/>does<sp/>not<sp/>have<sp/>any<sp/>debugging<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Locals<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/>ml_debugger_decls(State);<sp/>Decl;<sp/>Decl<sp/>=<sp/>Decl-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Locals,<sp/>ml_string(Decl-&gt;Ident,<sp/>-1));</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Locals;</highlight></codeline>
<codeline lineno="908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;trace&quot;</highlight><highlight class="normal">,<sp/>MLStateT)<sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="comment">//&lt;State</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="comment">//&gt;list[state]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>call<sp/>trace<sp/>from<sp/>:mini:`State`,<sp/>excluding<sp/>states<sp/>that<sp/>do<sp/>not<sp/>have<sp/>debugging<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Trace<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(State)<sp/>{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_debugger_check(State))<sp/>{</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Type<sp/>==<sp/>NULL)<sp/>State-&gt;Type<sp/>=<sp/>MLStateT;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Trace,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)State);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State<sp/>=<sp/>State-&gt;Caller;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Trace;</highlight></codeline>
<codeline lineno="925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">,<sp/>MLStateT)<sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="comment">//&lt;State</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="comment">//&gt;tuple[string,<sp/>integer]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>source<sp/>location<sp/>for<sp/>:mini:`State`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>Source<sp/>=<sp/>ml_debugger_source(State);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_tuplev(2,<sp/>ml_string(Source.Name,<sp/>-1),<sp/>ml_integer(Source.Line));</highlight></codeline>
<codeline lineno="935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal">ML_FUNCTIONX(MLTrace)<sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="comment">//@trace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="comment">//&gt;list[tuple[string,integer]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>call<sp/>stack<sp/>trace<sp/>(source<sp/>locations).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Trace<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>Caller;<sp/>State;<sp/>State<sp/>=<sp/>State-&gt;Caller)<sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>Source<sp/>=<sp/>ml_debugger_source(State);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Trace,<sp/>ml_tuplev(2,<sp/>ml_string(Source.Name,<sp/>-1),<sp/>ml_integer(Source.Line)));</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Trace);</highlight></codeline>
<codeline lineno="947"><highlight class="normal">}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_config_debugger(<ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*Context)<sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!!Context-&gt;Values[ML_DEBUGGER_INDEX];</highlight></codeline>
<codeline lineno="951"><highlight class="normal">}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Schedulers<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_SCHEDULER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ml_queue_block_t<sp/>ml_queue_block_t;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>QUEUE_BLOCK_SIZE<sp/>128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ml_queue_block_t<sp/>{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__queued__state__t" kindref="compound">ml_queued_state_t</ref><sp/>States[QUEUE_BLOCK_SIZE];</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_queue_block_t<sp/>*Next;</highlight></codeline>
<codeline lineno="964"><highlight class="normal">};</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ml_scheduler_queue_t<sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__scheduler__t" kindref="compound">ml_scheduler_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_queue_block_t<sp/>*WriteBlock,<sp/>*ReadBlock;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_THREADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_t<sp/>Lock[1];</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_cond_t<sp/>Available[1];</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>Counter,<sp/>Slice;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>WriteIndex,<sp/>ReadIndex,<sp/>Fill,<sp/>Space;</highlight></codeline>
<codeline lineno="975"><highlight class="normal">};</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__queued__state__t" kindref="compound">ml_queued_state_t</ref><sp/>ml_scheduler_queue_read(ml_scheduler_queue_t<sp/>*Queue)<sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_queue_block_t<sp/>*Block<sp/>=<sp/>Queue-&gt;ReadBlock;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>Queue-&gt;ReadIndex;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__queued__state__t" kindref="compound">ml_queued_state_t</ref><sp/>Next<sp/>=<sp/>Block-&gt;States[Index];</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>Block-&gt;States[Index]<sp/>=<sp/>(<ref refid="structml__queued__state__t" kindref="compound">ml_queued_state_t</ref>){NULL,<sp/>NULL};</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;ReadIndex<sp/>=<sp/>QUEUE_BLOCK_SIZE<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;ReadBlock<sp/>=<sp/>Block-&gt;Next;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;ReadIndex<sp/>=<sp/>Index<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>++Queue-&gt;Space;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>--Queue-&gt;Fill;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Counter<sp/>=<sp/>Queue-&gt;Slice;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Next;</highlight></codeline>
<codeline lineno="992"><highlight class="normal">}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><ref refid="structml__queued__state__t" kindref="compound">ml_queued_state_t</ref><sp/>ml_scheduler_queue_next(ml_scheduler_queue_t<sp/>*Queue)<sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__queued__state__t" kindref="compound">ml_queued_state_t</ref><sp/>Next<sp/>=<sp/>{NULL,<sp/>NULL};</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_THREADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_lock(Queue-&gt;Lock);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Queue-&gt;Fill)<sp/>Next<sp/>=<sp/>ml_scheduler_queue_read(Queue);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_THREADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_unlock(Queue-&gt;Lock);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Next;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_scheduler_queue_write(ml_scheduler_queue_t<sp/>*Queue,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_queue_block_t<sp/>*Block<sp/>=<sp/>Queue-&gt;WriteBlock;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Queue-&gt;Space<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>implies<sp/>ReadBlock<sp/>==<sp/>WriteBlock<sp/>and<sp/>ReadIndex<sp/>==<sp/>WriteIndex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_queue_block_t<sp/>*ReadBlock<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(ml_queue_block_t);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ReadIndex<sp/>=<sp/>Queue-&gt;ReadIndex;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(ReadBlock-&gt;States,<sp/>Block-&gt;States,<sp/>(ReadIndex<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__queued__state__t" kindref="compound">ml_queued_state_t</ref>));</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(Block-&gt;States,<sp/>0,<sp/>(ReadIndex<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__queued__state__t" kindref="compound">ml_queued_state_t</ref>));</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReadBlock-&gt;Next<sp/>=<sp/>Block-&gt;Next;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;ReadBlock<sp/>=<sp/>Block-&gt;Next<sp/>=<sp/>ReadBlock;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;Space<sp/>+=<sp/>QUEUE_BLOCK_SIZE;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>Queue-&gt;WriteIndex;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>Block-&gt;States[Index]<sp/>=<sp/>(<ref refid="structml__queued__state__t" kindref="compound">ml_queued_state_t</ref>){State,<sp/>Value};;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;WriteIndex<sp/>=<sp/>QUEUE_BLOCK_SIZE<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;WriteBlock<sp/>=<sp/>Block-&gt;Next;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;WriteIndex<sp/>=<sp/>Index<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>--Queue-&gt;Space;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>++Queue-&gt;Fill;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_scheduler_queue_add(ml_scheduler_queue_t<sp/>*Queue,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_THREADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_lock(Queue-&gt;Lock);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Fill<sp/>=<sp/>ml_scheduler_queue_write(Queue,<sp/>State,<sp/>Value);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_THREADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_unlock(Queue-&gt;Lock);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Fill;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_THREADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><ref refid="structml__queued__state__t" kindref="compound">ml_queued_state_t</ref><sp/>ml_scheduler_queue_next_wait(ml_scheduler_queue_t<sp/>*Queue)<sp/>{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_lock(Queue-&gt;Lock);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!Queue-&gt;Fill)<sp/>pthread_cond_wait(Queue-&gt;Available,<sp/>Queue-&gt;Lock);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__queued__state__t" kindref="compound">ml_queued_state_t</ref><sp/>Next<sp/>=<sp/>ml_scheduler_queue_read(Queue);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_unlock(Queue-&gt;Lock);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Next;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_scheduler_queue_add_signal(ml_scheduler_queue_t<sp/>*Queue,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Fill<sp/>=<sp/>ml_scheduler_queue_add(Queue,<sp/>State,<sp/>Value);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Fill<sp/>==<sp/>1)<sp/>pthread_cond_signal(Queue-&gt;Available);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Fill;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_scheduler_queue_next_wait<sp/>ml_scheduler_queue_next</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_scheduler_queue_add_signal<sp/>ml_scheduler_queue_add</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_THREADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal">__thread</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal">ml_scheduler_queue_t<sp/>*DefaultQueue<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_default_queue_init(<ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*Context,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Slice)<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_scheduler_queue_t<sp/>*Queue<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(ml_scheduler_queue_t);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.add<sp/>=<sp/>(ml_scheduler_fn)ml_scheduler_queue_add_signal;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_queue_block_t<sp/>*Block<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(ml_queue_block_t);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>Block-&gt;Next<sp/>=<sp/>Block;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;WriteBlock<sp/>=<sp/>Queue-&gt;ReadBlock<sp/>=<sp/>Block;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;WriteIndex<sp/>=<sp/>Queue-&gt;ReadIndex<sp/>=<sp/>QUEUE_BLOCK_SIZE<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Space<sp/>=<sp/>QUEUE_BLOCK_SIZE;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Fill<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_THREADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_init(Queue-&gt;Lock,<sp/>NULL);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_cond_init(Queue-&gt;Available,<sp/>NULL);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Slice<sp/>=<sp/>Slice;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Counter<sp/>=<sp/>Slice;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_context_set(Context,<sp/>ML_SCHEDULER_INDEX,<sp/>Queue);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_context_set(Context,<sp/>ML_COUNTER_INDEX,<sp/>&amp;Queue-&gt;Counter);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>DefaultQueue<sp/>=<sp/>Queue;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__queued__state__t" kindref="compound">ml_queued_state_t</ref><sp/>ml_default_queue_read()<sp/>{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_scheduler_queue_read(DefaultQueue);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><ref refid="structml__queued__state__t" kindref="compound">ml_queued_state_t</ref><sp/>ml_default_queue_next()<sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_scheduler_queue_next(DefaultQueue);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_default_queue_write(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_scheduler_queue_write(DefaultQueue,<sp/>State,<sp/>Value);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_default_queue_add(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_scheduler_queue_add(DefaultQueue,<sp/>State,<sp/>Value);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_THREADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><ref refid="structml__queued__state__t" kindref="compound">ml_queued_state_t</ref><sp/>ml_default_queue_next_wait()<sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_scheduler_queue_next_wait(DefaultQueue);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_default_queue_add_signal(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_scheduler_queue_add_signal(DefaultQueue,<sp/>State,<sp/>Value);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ml_scheduler_thread_t<sp/>ml_scheduler_thread_t;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ml_scheduler_thread_t<sp/>{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_scheduler_thread_t<sp/>*Next;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_scheduler_queue_t<sp/>*Queue;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_cond_t<sp/>Resume[1];</highlight></codeline>
<codeline lineno="1122"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_cond_t<sp/>Resume[1];</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_scheduler_queue_t<sp/>*Queue;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal">}<sp/>ml_scheduler_block_t;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ml_scheduler_thread_t<sp/>*NextThread<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MaxIdle<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>pthread_mutex_t<sp/>ThreadLock[1]<sp/>=<sp/>{PTHREAD_MUTEX_INITIALIZER};</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_scheduler_thread_resume(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumIdle<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_scheduler_block_t<sp/>*Block<sp/>=<sp/>(ml_scheduler_block_t<sp/>*)State;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//pthread_mutex_lock(Queue-&gt;Lock);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_cond_signal(Block-&gt;Resume);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//pthread_mutex_unlock(Queue-&gt;Lock);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_lock(ThreadLock);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NumIdle<sp/>&gt;=<sp/>MaxIdle)<sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_unlock(ThreadLock);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_exit(NULL);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_scheduler_thread_t<sp/>Thread<sp/>=<sp/>{NextThread,<sp/>NULL,<sp/>{PTHREAD_COND_INITIALIZER}};</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>NextThread<sp/>=<sp/>&amp;Thread;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>++NumIdle;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_cond_wait(Thread.Resume,<sp/>ThreadLock);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>--NumIdle;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_unlock(ThreadLock);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>DefaultQueue<sp/>=<sp/>Thread.Queue;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ml_scheduler_thread_fn(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data)<sp/>{</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>DefaultQueue<sp/>=<sp/>(ml_scheduler_queue_t<sp/>*)Data;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__queued__state__t" kindref="compound">ml_queued_state_t</ref><sp/>Queued<sp/>=<sp/>ml_default_queue_next_wait();</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queued.State-&gt;run(Queued.State,<sp/>Queued.Value);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_threads_set_max_count(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Max)<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>MaxIdle<sp/>=<sp/>Max;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_default_scheduler_split()<sp/>{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_lock(ThreadLock);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_scheduler_thread_t<sp/>*Thread<sp/>=<sp/>NextThread;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Thread)<sp/>{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NextThread<sp/>=<sp/>Thread-&gt;Next;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Thread-&gt;Queue<sp/>=<sp/>DefaultQueue;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_cond_signal(Thread-&gt;Resume);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_attr_t<sp/>Attr;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_attr_init(&amp;Attr);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_attr_setdetachstate(&amp;Attr,<sp/>PTHREAD_CREATE_DETACHED);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_t<sp/>Thread;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GC_pthread_create(&amp;Thread,<sp/>&amp;Attr,<sp/>ml_scheduler_thread_fn,<sp/>DefaultQueue);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_setname_np(Thread,<sp/></highlight><highlight class="stringliteral">&quot;minilang&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_unlock(ThreadLock);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_default_scheduler_join()<sp/>{</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_scheduler_block_t<sp/>Block<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{NULL,<sp/>NULL,<sp/>ml_scheduler_thread_resume},</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{PTHREAD_COND_INITIALIZER}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_lock(DefaultQueue-&gt;Lock);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Fill<sp/>=<sp/>ml_default_queue_write((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)&amp;Block,<sp/>MLNil);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Fill<sp/>==<sp/>1)<sp/>pthread_cond_signal(DefaultQueue-&gt;Available);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_cond_wait(Block.Resume,<sp/>DefaultQueue-&gt;Lock);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_unlock(DefaultQueue-&gt;Lock);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal">ML_FUNCTIONX(MLAtomic)<sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="comment">//@atomic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight><highlight class="comment">//&lt;Args...:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn:function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calls<sp/>:mini:`Fn(Args)`<sp/>in<sp/>a<sp/>new<sp/>context<sp/>without<sp/>a<sp/>scheduler<sp/>and<sp/>returns<sp/>the<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>ml_state(Caller);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_context_set(State-&gt;Context,<sp/>ML_SCHEDULER_INDEX,<sp/>&amp;DefaultScheduler);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_context_set(State-&gt;Context,<sp/>ML_COUNTER_INDEX,<sp/>&amp;DefaultCounter);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Args[0],<sp/>Count<sp/>-<sp/>1,<sp/>Args<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216" refid="structml__finalizer__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Fn;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal">}<sp/><ref refid="structml__finalizer__t" kindref="compound">ml_finalizer_t</ref>;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_finalize(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value,<sp/><ref refid="structml__finalizer__t" kindref="compound">ml_finalizer_t</ref><sp/>*Finalizer)<sp/>{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>ml_state(Finalizer-&gt;Caller);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;run<sp/>=<sp/>ml_end_state_run;</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_call(State,<sp/>Finalizer-&gt;Fn,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal">ML_FUNCTIONX(MLFinalizer)<sp/>{</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight><highlight class="comment">//@finalize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn:function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Registers<sp/>:mini:`Fn`<sp/>as<sp/>the<sp/>finalizer<sp/>for<sp/>:mini:`Value`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__finalizer__t" kindref="compound">ml_finalizer_t</ref><sp/>*Finalizer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__finalizer__t" kindref="compound">ml_finalizer_t</ref>);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>Finalizer-&gt;Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>Finalizer-&gt;Fn<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_register_finalizer_no_order(Value,<sp/>(GC_finalization_proc)ml_finalize,<sp/>Finalizer,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Semaphore<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243" refid="structml__semaphore__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>**States;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Value;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size,<sp/>Fill,<sp/>Write,<sp/>Read;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal">}<sp/><ref refid="structml__semaphore__t" kindref="compound">ml_semaphore_t</ref>;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal">ML_FUNCTION(MLSemaphore)<sp/>{</highlight></codeline>
<codeline lineno="1252"><highlight class="comment">//@semaphore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="comment">//&lt;Initial?<sp/>:<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight><highlight class="comment">//&gt;semaphore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>semaphore<sp/>with<sp/>initial<sp/>value<sp/>:mini:`Initial`<sp/>or<sp/>:mini:`1`<sp/>if<sp/>no<sp/>initial<sp/>value<sp/>is<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>&gt;<sp/>0)<sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__semaphore__t" kindref="compound">ml_semaphore_t</ref><sp/>*Semaphore<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__semaphore__t" kindref="compound">ml_semaphore_t</ref>);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/>Semaphore-&gt;Type<sp/>=<sp/>MLSemaphoreT;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>Semaphore-&gt;Value<sp/>=<sp/>(Count<sp/>&gt;<sp/>0)<sp/>?<sp/>ml_integer_value(Args[0])<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>Semaphore-&gt;Fill<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>Semaphore-&gt;Size<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>Semaphore-&gt;Read<sp/>=<sp/>Semaphore-&gt;Write<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>Semaphore-&gt;States<sp/>=<sp/>anew(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*,<sp/>4);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Semaphore;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal">ML_TYPE(MLSemaphoreT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;semaphore&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1269"><highlight class="comment">//<sp/>A<sp/>semaphore<sp/>for<sp/>synchronizing<sp/>concurrent<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLSemaphore</highlight></codeline>
<codeline lineno="1271"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_semaphore_wait(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__semaphore__t" kindref="compound">ml_semaphore_t</ref><sp/>*Semaphore)<sp/>{</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Value<sp/>=<sp/>Semaphore-&gt;Value;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value)<sp/>{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Semaphore-&gt;Value<sp/>=<sp/>Value<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Semaphore-&gt;Value));</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++Semaphore-&gt;Fill<sp/>&gt;<sp/>Semaphore-&gt;Size)<sp/>{</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Semaphore-&gt;Size<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>**States<sp/>=<sp/>anew(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*,<sp/>Size);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(States,<sp/>Semaphore-&gt;States,<sp/>Semaphore-&gt;Size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*));</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Semaphore-&gt;Read<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Semaphore-&gt;Write<sp/>=<sp/>Semaphore-&gt;Size;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Semaphore-&gt;States<sp/>=<sp/>States;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Semaphore-&gt;Size<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>Semaphore-&gt;States[Semaphore-&gt;Write]<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>Semaphore-&gt;Write<sp/>=<sp/>(Semaphore-&gt;Write<sp/>+<sp/>1)<sp/>%<sp/>Semaphore-&gt;Size;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_semaphore_signal(<ref refid="structml__semaphore__t" kindref="compound">ml_semaphore_t</ref><sp/>*Semaphore)<sp/>{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Fill<sp/>=<sp/>Semaphore-&gt;Fill;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Fill)<sp/>{</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Semaphore-&gt;Fill<sp/>=<sp/>Fill<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>Semaphore-&gt;States[Semaphore-&gt;Read];</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Semaphore-&gt;States[Semaphore-&gt;Read]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Semaphore-&gt;Read<sp/>=<sp/>(Semaphore-&gt;Read<sp/>+<sp/>1)<sp/>%<sp/>Semaphore-&gt;Size;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;run(State,<sp/>ml_integer(Semaphore-&gt;Value));</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Semaphore-&gt;Value;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;wait&quot;</highlight><highlight class="normal">,<sp/>MLSemaphoreT)<sp/>{</highlight></codeline>
<codeline lineno="1307"><highlight class="comment">//&lt;Semaphore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Waits<sp/>until<sp/>the<sp/>internal<sp/>value<sp/>in<sp/>:mini:`Semaphore`<sp/>is<sp/>postive,<sp/>then<sp/>decrements<sp/>it<sp/>and<sp/>returns<sp/>the<sp/>new<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_semaphore_wait(Caller,<sp/>(<ref refid="structml__semaphore__t" kindref="compound">ml_semaphore_t</ref><sp/>*)Args[0]);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;signal&quot;</highlight><highlight class="normal">,<sp/>MLSemaphoreT)<sp/>{</highlight></codeline>
<codeline lineno="1315"><highlight class="comment">//&lt;Semaphore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Increments<sp/>the<sp/>internal<sp/>value<sp/>in<sp/>:mini:`Semaphore`,<sp/>resuming<sp/>any<sp/>waiters.<sp/>Returns<sp/>the<sp/>new<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__semaphore__t" kindref="compound">ml_semaphore_t</ref><sp/>*Semaphore<sp/>=<sp/>(<ref refid="structml__semaphore__t" kindref="compound">ml_semaphore_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_semaphore_signal(Semaphore);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Semaphore-&gt;Value);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>MLSemaphoreT)<sp/>{</highlight></codeline>
<codeline lineno="1325"><highlight class="comment">//&lt;Semaphore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>internal<sp/>value<sp/>in<sp/>:mini:`Semaphore`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__semaphore__t" kindref="compound">ml_semaphore_t</ref><sp/>*Semaphore<sp/>=<sp/>(<ref refid="structml__semaphore__t" kindref="compound">ml_semaphore_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Semaphore-&gt;Value);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332" refid="structml__cond__waiter__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__semaphore__t" kindref="compound">ml_semaphore_t</ref><sp/>*Semaphore;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal">}<sp/><ref refid="structml__cond__waiter__t" kindref="compound">ml_cond_waiter_t</ref>;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337" refid="structml__condition__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cond__waiter__t" kindref="compound">ml_cond_waiter_t</ref><sp/>*Waiters;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size,<sp/>Fill,<sp/>Write,<sp/>Read;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal">}<sp/><ref refid="structml__condition__t" kindref="compound">ml_condition_t</ref>;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal">ML_FUNCTION(MLCondition)<sp/>{</highlight></codeline>
<codeline lineno="1345"><highlight class="comment">//@condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="comment">//&gt;condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>condition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__condition__t" kindref="compound">ml_condition_t</ref><sp/>*Condition<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__condition__t" kindref="compound">ml_condition_t</ref>);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>Condition-&gt;Type<sp/>=<sp/>MLConditionT;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>Condition-&gt;Fill<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>Condition-&gt;Size<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/>Condition-&gt;Read<sp/>=<sp/>Condition-&gt;Write<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>Condition-&gt;Waiters<sp/>=<sp/>anew(<ref refid="structml__cond__waiter__t" kindref="compound">ml_cond_waiter_t</ref>,<sp/>4);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Condition;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal">ML_TYPE(MLConditionT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;condition&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1359"><highlight class="comment">//<sp/>A<sp/>condition<sp/>for<sp/>synchronizing<sp/>concurrent<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLCondition</highlight></codeline>
<codeline lineno="1361"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;wait&quot;</highlight><highlight class="normal">,<sp/>MLConditionT,<sp/>MLSemaphoreT)<sp/>{</highlight></codeline>
<codeline lineno="1365"><highlight class="comment">//&lt;Condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight><highlight class="comment">//&lt;Semaphore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Increments<sp/>:mini:`Semaphore`,<sp/>waits<sp/>until<sp/>:mini:`Condition`<sp/>is<sp/>signalled,<sp/>then<sp/>decrements<sp/>:mini:`Semaphore`<sp/>(waiting<sp/>if<sp/>necessary)<sp/>and<sp/>returns<sp/>its<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__condition__t" kindref="compound">ml_condition_t</ref><sp/>*Condition<sp/>=<sp/>(<ref refid="structml__condition__t" kindref="compound">ml_condition_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__semaphore__t" kindref="compound">ml_semaphore_t</ref><sp/>*Semaphore<sp/>=<sp/>(<ref refid="structml__semaphore__t" kindref="compound">ml_semaphore_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++Condition-&gt;Fill<sp/>&gt;<sp/>Condition-&gt;Size)<sp/>{</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Condition-&gt;Size<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__cond__waiter__t" kindref="compound">ml_cond_waiter_t</ref><sp/>*Waiters<sp/>=<sp/>anew(<ref refid="structml__cond__waiter__t" kindref="compound">ml_cond_waiter_t</ref>,<sp/>Size);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Waiters,<sp/>Condition-&gt;Waiters,<sp/>Condition-&gt;Size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__cond__waiter__t" kindref="compound">ml_cond_waiter_t</ref>));</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Condition-&gt;Read<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Condition-&gt;Write<sp/>=<sp/>Condition-&gt;Size;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Condition-&gt;Waiters<sp/>=<sp/>Waiters;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Condition-&gt;Size<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>Condition-&gt;Waiters[Condition-&gt;Write].State<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/>Condition-&gt;Waiters[Condition-&gt;Write].Semaphore<sp/>=<sp/>Semaphore;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>Condition-&gt;Write<sp/>=<sp/>(Condition-&gt;Write<sp/>+<sp/>1)<sp/>%<sp/>Condition-&gt;Size;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_semaphore_signal(Semaphore);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;signal&quot;</highlight><highlight class="normal">,<sp/>MLConditionT)<sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="comment">//&lt;Condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Signals<sp/>:mini:`Condition`,<sp/>resuming<sp/>a<sp/>single<sp/>waiter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__condition__t" kindref="compound">ml_condition_t</ref><sp/>*Condition<sp/>=<sp/>(<ref refid="structml__condition__t" kindref="compound">ml_condition_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Condition-&gt;Fill)<sp/>{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Condition-&gt;Fill;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__cond__waiter__t" kindref="compound">ml_cond_waiter_t</ref><sp/>Waiter<sp/>=<sp/>Condition-&gt;Waiters[Condition-&gt;Read];</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Condition-&gt;Waiters[Condition-&gt;Read].State<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Condition-&gt;Waiters[Condition-&gt;Read].Semaphore<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Condition-&gt;Read<sp/>=<sp/>(Condition-&gt;Read<sp/>+<sp/>1)<sp/>%<sp/>Condition-&gt;Size;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_semaphore_wait(Waiter.State,<sp/>Waiter.Semaphore);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;broadcast&quot;</highlight><highlight class="normal">,<sp/>MLConditionT)<sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="comment">//&lt;Condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Signals<sp/>:mini:`Condition`,<sp/>resuming<sp/>all<sp/>waiters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__condition__t" kindref="compound">ml_condition_t</ref><sp/>*Condition<sp/>=<sp/>(<ref refid="structml__condition__t" kindref="compound">ml_condition_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Condition-&gt;Fill)<sp/>{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Condition-&gt;Fill;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__cond__waiter__t" kindref="compound">ml_cond_waiter_t</ref><sp/>Waiter<sp/>=<sp/>Condition-&gt;Waiters[Condition-&gt;Read];</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Condition-&gt;Waiters[Condition-&gt;Read].State<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Condition-&gt;Waiters[Condition-&gt;Read].Semaphore<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Condition-&gt;Read<sp/>=<sp/>(Condition-&gt;Read<sp/>+<sp/>1)<sp/>%<sp/>Condition-&gt;Size;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_semaphore_wait(Waiter.State,<sp/>Waiter.Semaphore);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418" refid="structml__rw__waiter__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Writer;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal">}<sp/><ref refid="structml__rw__waiter__t" kindref="compound">ml_rw_waiter_t</ref>;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight></codeline>
<codeline lineno="1423" refid="structml__rw__lock__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__rw__waiter__t" kindref="compound">ml_rw_waiter_t</ref><sp/>*Waiters;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Readers,<sp/>Writers;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size,<sp/>Fill,<sp/>Write,<sp/>Read;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal">}<sp/><ref refid="structml__rw__lock__t" kindref="compound">ml_rw_lock_t</ref>;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal">ML_FUNCTION(MLRWLock)<sp/>{</highlight></codeline>
<codeline lineno="1432"><highlight class="comment">//@rwlock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight><highlight class="comment">//&gt;rwlock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>read-write<sp/>lock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__rw__lock__t" kindref="compound">ml_rw_lock_t</ref><sp/>*RWLock<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__rw__lock__t" kindref="compound">ml_rw_lock_t</ref>);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/>RWLock-&gt;Type<sp/>=<sp/>MLRWLockT;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>RWLock-&gt;Readers<sp/>=<sp/>RWLock-&gt;Writers<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>RWLock-&gt;Fill<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>RWLock-&gt;Size<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/>RWLock-&gt;Read<sp/>=<sp/>RWLock-&gt;Write<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>RWLock-&gt;Waiters<sp/>=<sp/>anew(<ref refid="structml__rw__waiter__t" kindref="compound">ml_rw_waiter_t</ref>,<sp/>4);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)RWLock;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal">ML_TYPE(MLRWLockT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;rwlock&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1447"><highlight class="comment">//<sp/>A<sp/>read-write<sp/>lock<sp/>for<sp/>synchronizing<sp/>concurrent<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLRWLock</highlight></codeline>
<codeline lineno="1449"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;rdlock&quot;</highlight><highlight class="normal">,<sp/>MLRWLockT)<sp/>{</highlight></codeline>
<codeline lineno="1453"><highlight class="comment">//&lt;Lock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Locks<sp/>:mini:`Lock`<sp/>for<sp/>reading,<sp/>waiting<sp/>if<sp/>there<sp/>are<sp/>any<sp/>writers<sp/>using<sp/>or<sp/>waiting<sp/>to<sp/>use<sp/>:mini:`Lock`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__rw__lock__t" kindref="compound">ml_rw_lock_t</ref><sp/>*RWLock<sp/>=<sp/>(<ref refid="structml__rw__lock__t" kindref="compound">ml_rw_lock_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RWLock-&gt;Writers)<sp/>{</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++RWLock-&gt;Readers;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(RWLock);</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++RWLock-&gt;Fill<sp/>&gt;<sp/>RWLock-&gt;Size)<sp/>{</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>RWLock-&gt;Size<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__rw__waiter__t" kindref="compound">ml_rw_waiter_t</ref><sp/>*Waiters<sp/>=<sp/>anew(<ref refid="structml__rw__waiter__t" kindref="compound">ml_rw_waiter_t</ref>,<sp/>Size);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Waiters,<sp/>RWLock-&gt;Waiters,<sp/>RWLock-&gt;Size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__rw__waiter__t" kindref="compound">ml_rw_waiter_t</ref>));</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWLock-&gt;Read<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWLock-&gt;Write<sp/>=<sp/>RWLock-&gt;Size;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWLock-&gt;Waiters<sp/>=<sp/>Waiters;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWLock-&gt;Size<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>RWLock-&gt;Waiters[RWLock-&gt;Write].State<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>RWLock-&gt;Waiters[RWLock-&gt;Write].Writer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/>RWLock-&gt;Write<sp/>=<sp/>(RWLock-&gt;Write<sp/>+<sp/>1)<sp/>%<sp/>RWLock-&gt;Size;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;wrlock&quot;</highlight><highlight class="normal">,<sp/>MLRWLockT)<sp/>{</highlight></codeline>
<codeline lineno="1476"><highlight class="comment">//&lt;Lock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Locks<sp/>:mini:`Lock`<sp/>for<sp/>reading,<sp/>waiting<sp/>if<sp/>there<sp/>are<sp/>any<sp/>readers<sp/>or<sp/>other<sp/>writers<sp/>using<sp/>:mini:`Lock`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__rw__lock__t" kindref="compound">ml_rw_lock_t</ref><sp/>*RWLock<sp/>=<sp/>(<ref refid="structml__rw__lock__t" kindref="compound">ml_rw_lock_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RWLock-&gt;Writers<sp/>&amp;&amp;<sp/>!RWLock-&gt;Readers)<sp/>{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWLock-&gt;Writers<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(RWLock);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++RWLock-&gt;Fill<sp/>&gt;<sp/>RWLock-&gt;Size)<sp/>{</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>RWLock-&gt;Size<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__rw__waiter__t" kindref="compound">ml_rw_waiter_t</ref><sp/>*Waiters<sp/>=<sp/>anew(<ref refid="structml__rw__waiter__t" kindref="compound">ml_rw_waiter_t</ref>,<sp/>Size);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Waiters,<sp/>RWLock-&gt;Waiters,<sp/>RWLock-&gt;Size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__rw__waiter__t" kindref="compound">ml_rw_waiter_t</ref>));</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWLock-&gt;Read<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWLock-&gt;Write<sp/>=<sp/>RWLock-&gt;Size;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWLock-&gt;Waiters<sp/>=<sp/>Waiters;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWLock-&gt;Size<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/>RWLock-&gt;Writers<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/>RWLock-&gt;Waiters[RWLock-&gt;Write].State<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/>RWLock-&gt;Waiters[RWLock-&gt;Write].Writer<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/>RWLock-&gt;Write<sp/>=<sp/>(RWLock-&gt;Write<sp/>+<sp/>1)<sp/>%<sp/>RWLock-&gt;Size;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;unlock&quot;</highlight><highlight class="normal">,<sp/>MLRWLockT)<sp/>{</highlight></codeline>
<codeline lineno="1500"><highlight class="comment">//&lt;Lock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlocks<sp/>:mini:`Lock`,<sp/>resuming<sp/>any<sp/>waiting<sp/>writers<sp/>or<sp/>readers<sp/>(giving<sp/>preference<sp/>to<sp/>writers).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__rw__lock__t" kindref="compound">ml_rw_lock_t</ref><sp/>*RWLock<sp/>=<sp/>(<ref refid="structml__rw__lock__t" kindref="compound">ml_rw_lock_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RWLock-&gt;Readers)<sp/>--RWLock-&gt;Readers;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>RWLock-&gt;Writers<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(RWLock-&gt;Fill)<sp/>{</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__rw__waiter__t" kindref="compound">ml_rw_waiter_t</ref><sp/>Waiter<sp/>=<sp/>RWLock-&gt;Waiters[RWLock-&gt;Read];</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Waiter.Writer)<sp/>{</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RWLock-&gt;Writers<sp/>&amp;&amp;<sp/>!RWLock-&gt;Readers)<sp/>{</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWLock-&gt;Writers<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--RWLock-&gt;Fill;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWLock-&gt;Waiters[RWLock-&gt;Read].State<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWLock-&gt;Read<sp/>=<sp/>(RWLock-&gt;Read<sp/>+<sp/>1)<sp/>%<sp/>RWLock-&gt;Size;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Waiter.State-&gt;run(Waiter.State,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)RWLock);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWLock-&gt;Writers<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RWLock-&gt;Writers)<sp/>{</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++RWLock-&gt;Readers;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--RWLock-&gt;Fill;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWLock-&gt;Waiters[RWLock-&gt;Read].State<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWLock-&gt;Read<sp/>=<sp/>(RWLock-&gt;Read<sp/>+<sp/>1)<sp/>%<sp/>RWLock-&gt;Size;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Waiter.State-&gt;run(Waiter.State,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)RWLock);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)RWLock;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__channel__message__t" kindref="compound">ml_channel_message_t</ref><sp/><ref refid="structml__channel__message__t" kindref="compound">ml_channel_message_t</ref>;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535" refid="structml__channel__message__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__channel__message__t" kindref="compound">ml_channel_message_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__channel__message__t" kindref="compound">ml_channel_message_t</ref><sp/>*Next;</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Sender;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541" refid="structml__channel__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Sender;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__channel__message__t" kindref="compound">ml_channel_message_t</ref><sp/>*Head,<sp/>**Tail;</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Open;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal">}<sp/><ref refid="structml__channel__t" kindref="compound">ml_channel_t</ref>;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_channel_run(<ref refid="structml__channel__t" kindref="compound">ml_channel_t</ref><sp/>*Channel,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/>Channel-&gt;Open<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(Channel-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal">ML_FUNCTION(MLChannel)<sp/>{</highlight></codeline>
<codeline lineno="1555"><highlight class="comment">//@channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__channel__t" kindref="compound">ml_channel_t</ref><sp/>*Channel<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__channel__t" kindref="compound">ml_channel_t</ref>);</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/>Channel-&gt;Base.Type<sp/>=<sp/>MLChannelT;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/>Channel-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_channel_run;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>Channel-&gt;Tail<sp/>=<sp/>&amp;Channel-&gt;Head;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Channel;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal">ML_TYPE(MLChannelT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;channel&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLChannel</highlight></codeline>
<codeline lineno="1566"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal">ML_METHODVX(</highlight><highlight class="stringliteral">&quot;start&quot;</highlight><highlight class="normal">,<sp/>MLChannelT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="1570"><highlight class="comment">//&lt;Channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight><highlight class="comment">//&lt;Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__channel__t" kindref="compound">ml_channel_t</ref><sp/>*Channel<sp/>=<sp/>(<ref refid="structml__channel__t" kindref="compound">ml_channel_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/>Channel-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/>Channel-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/>Channel-&gt;Open<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Channel,<sp/>Function,<sp/>Count<sp/>-<sp/>1,<sp/>Args<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;open&quot;</highlight><highlight class="normal">,<sp/>MLChannelT)<sp/>{</highlight></codeline>
<codeline lineno="1584"><highlight class="comment">//&lt;Channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight><highlight class="comment">//&gt;channel<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__channel__t" kindref="compound">ml_channel_t</ref><sp/>*Channel<sp/>=<sp/>(<ref refid="structml__channel__t" kindref="compound">ml_channel_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Channel-&gt;Open<sp/>?<sp/>Args[0]<sp/>:<sp/>MLNil;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_channel_next(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__channel__t" kindref="compound">ml_channel_t</ref><sp/>*Channel,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Channel-&gt;Open)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;ChannelError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Channel<sp/>is<sp/>not<sp/>open&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__channel__message__t" kindref="compound">ml_channel_message_t</ref><sp/>*Message<sp/>=<sp/>Channel-&gt;Head;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__channel__message__t" kindref="compound">ml_channel_message_t</ref><sp/>*Next<sp/>=<sp/>Message-&gt;Next;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/>Channel-&gt;Head<sp/>=<sp/>Next;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>Channel-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Next)<sp/>{</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Caller-&gt;run(Caller,<sp/>Next-&gt;Value);</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Channel-&gt;Tail<sp/>=<sp/>&amp;Channel-&gt;Head;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(Message-&gt;Sender,<sp/>Value);</highlight></codeline>
<codeline lineno="1602"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;next&quot;</highlight><highlight class="normal">,<sp/>MLChannelT)<sp/>{</highlight></codeline>
<codeline lineno="1606"><highlight class="comment">//&lt;Channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_channel_next(Caller,<sp/>(<ref refid="structml__channel__t" kindref="compound">ml_channel_t</ref><sp/>*)Args[0],<sp/>MLNil);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;next&quot;</highlight><highlight class="normal">,<sp/>MLChannelT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="1613"><highlight class="comment">//&lt;Channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight><highlight class="comment">//&lt;Reply</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_channel_next(Caller,<sp/>(<ref refid="structml__channel__t" kindref="compound">ml_channel_t</ref><sp/>*)Args[0],<sp/>Args[1]);</highlight></codeline>
<codeline lineno="1617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;send&quot;</highlight><highlight class="normal">,<sp/>MLChannelT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="1621"><highlight class="comment">//&lt;Channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight><highlight class="comment">//&lt;Message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__channel__t" kindref="compound">ml_channel_t</ref><sp/>*Channel<sp/>=<sp/>(<ref refid="structml__channel__t" kindref="compound">ml_channel_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Channel-&gt;Open)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;ChannelError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Channel<sp/>is<sp/>not<sp/>open&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__channel__message__t" kindref="compound">ml_channel_message_t</ref><sp/>*Message<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__channel__message__t" kindref="compound">ml_channel_message_t</ref>);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/>Message-&gt;Sender<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/>Message-&gt;Value<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/>Channel-&gt;Tail[0]<sp/>=<sp/>Message;</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/>Channel-&gt;Tail<sp/>=<sp/>&amp;Message-&gt;Next;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Message<sp/>==<sp/>Channel-&gt;Head)<sp/>{</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CONTINUE(Channel-&gt;Base.Caller,<sp/>Channel-&gt;Head-&gt;Value);</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal">ML_METHODVX(</highlight><highlight class="stringliteral">&quot;close&quot;</highlight><highlight class="normal">,<sp/>MLChannelT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="1638"><highlight class="comment">//&lt;Channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight><highlight class="comment">//&lt;Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__channel__t" kindref="compound">ml_channel_t</ref><sp/>*Channel<sp/>=<sp/>(<ref refid="structml__channel__t" kindref="compound">ml_channel_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Channel,<sp/>Args[1],<sp/>Count<sp/>-<sp/>2,<sp/>Args<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1645"><highlight class="comment">ML_METHODX(&quot;error&quot;,<sp/>MLChannelT,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1646"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_state_t<sp/>*Channel<sp/>=<sp/>(ml_state_t<sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1647"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_state_t<sp/>*Receiver<sp/>=<sp/>Channel-&gt;Caller;</highlight></codeline>
<codeline lineno="1648"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(!Receiver)<sp/>ML_ERROR(&quot;ChannelError&quot;,<sp/>&quot;Channel<sp/>is<sp/>not<sp/>open&quot;);</highlight></codeline>
<codeline lineno="1649"><highlight class="comment"><sp/><sp/><sp/><sp/>Channel-&gt;Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1650"><highlight class="comment"><sp/><sp/><sp/><sp/>Channel-&gt;Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1651"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_error_t<sp/>*Error<sp/>=<sp/>xnew(ml_error_t,<sp/>1,<sp/>ml_error_value_t);</highlight></codeline>
<codeline lineno="1652"><highlight class="comment"><sp/><sp/><sp/><sp/>Error-&gt;Type<sp/>=<sp/>MLErrorT;</highlight></codeline>
<codeline lineno="1653"><highlight class="comment"><sp/><sp/><sp/><sp/>Error-&gt;Error-&gt;Type<sp/>=<sp/>MLErrorValueT;</highlight></codeline>
<codeline lineno="1654"><highlight class="comment"><sp/><sp/><sp/><sp/>Error-&gt;Error-&gt;Error<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="1655"><highlight class="comment"><sp/><sp/><sp/><sp/>Error-&gt;Error-&gt;Message<sp/>=<sp/>ml_string_value(Args[2]);</highlight></codeline>
<codeline lineno="1656"><highlight class="comment"><sp/><sp/><sp/><sp/>Error-&gt;Value<sp/>=<sp/>(ml_value_t<sp/>*)Error-&gt;Error;</highlight></codeline>
<codeline lineno="1657"><highlight class="comment"><sp/><sp/><sp/><sp/>ML_CONTINUE(Receiver,<sp/>Error);</highlight></codeline>
<codeline lineno="1658"><highlight class="comment">}</highlight></codeline>
<codeline lineno="1659"><highlight class="comment"></highlight></codeline>
<codeline lineno="1660"><highlight class="comment">ML_METHODX(&quot;raise&quot;,<sp/>MLChannelT,<sp/>MLStringT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="1661"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_state_t<sp/>*Channel<sp/>=<sp/>(ml_state_t<sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1662"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_state_t<sp/>*Receiver<sp/>=<sp/>Channel-&gt;Caller;</highlight></codeline>
<codeline lineno="1663"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(!Receiver)<sp/>ML_ERROR(&quot;ChannelError&quot;,<sp/>&quot;Channel<sp/>is<sp/>not<sp/>open&quot;);</highlight></codeline>
<codeline lineno="1664"><highlight class="comment"><sp/><sp/><sp/><sp/>Channel-&gt;Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1665"><highlight class="comment"><sp/><sp/><sp/><sp/>Channel-&gt;Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1666"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_error_t<sp/>*Error<sp/>=<sp/>xnew(ml_error_t,<sp/>1,<sp/>ml_error_value_t);</highlight></codeline>
<codeline lineno="1667"><highlight class="comment"><sp/><sp/><sp/><sp/>Error-&gt;Type<sp/>=<sp/>MLErrorT;</highlight></codeline>
<codeline lineno="1668"><highlight class="comment"><sp/><sp/><sp/><sp/>Error-&gt;Error-&gt;Type<sp/>=<sp/>MLErrorValueT;</highlight></codeline>
<codeline lineno="1669"><highlight class="comment"><sp/><sp/><sp/><sp/>Error-&gt;Error-&gt;Error<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="1670"><highlight class="comment"><sp/><sp/><sp/><sp/>Error-&gt;Error-&gt;Message<sp/>=<sp/>ml_typeof(Args[2])-&gt;Name;</highlight></codeline>
<codeline lineno="1671"><highlight class="comment"><sp/><sp/><sp/><sp/>Error-&gt;Value<sp/>=<sp/>Args[2];</highlight></codeline>
<codeline lineno="1672"><highlight class="comment"><sp/><sp/><sp/><sp/>ML_CONTINUE(Receiver,<sp/>Error);</highlight></codeline>
<codeline lineno="1673"><highlight class="comment">}</highlight></codeline>
<codeline lineno="1674"><highlight class="comment"></highlight></codeline>
<codeline lineno="1675"><highlight class="comment">ML_METHODX(&quot;raise&quot;,<sp/>MLChannelT,<sp/>MLErrorValueT)<sp/>{</highlight></codeline>
<codeline lineno="1676"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_state_t<sp/>*Channel<sp/>=<sp/>(ml_state_t<sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1677"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_state_t<sp/>*Receiver<sp/>=<sp/>Channel-&gt;Caller;</highlight></codeline>
<codeline lineno="1678"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(!Receiver)<sp/>ML_ERROR(&quot;ChannelError&quot;,<sp/>&quot;Channel<sp/>is<sp/>not<sp/>open&quot;);</highlight></codeline>
<codeline lineno="1679"><highlight class="comment"><sp/><sp/><sp/><sp/>Channel-&gt;Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1680"><highlight class="comment"><sp/><sp/><sp/><sp/>Channel-&gt;Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1681"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_error_t<sp/>*Error<sp/>=<sp/>xnew(ml_error_t,<sp/>1,<sp/>ml_error_value_t);</highlight></codeline>
<codeline lineno="1682"><highlight class="comment"><sp/><sp/><sp/><sp/>Error-&gt;Type<sp/>=<sp/>MLErrorT;</highlight></codeline>
<codeline lineno="1683"><highlight class="comment"><sp/><sp/><sp/><sp/>Error-&gt;Error[0]<sp/>=<sp/>*(ml_error_value_t<sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1684"><highlight class="comment"><sp/><sp/><sp/><sp/>ML_CONTINUE(Receiver,<sp/>Error);</highlight></codeline>
<codeline lineno="1685"><highlight class="comment">}</highlight></codeline>
<codeline lineno="1686"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_runtime_init()<sp/>{</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_THREADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_add_roots(&amp;DefaultQueue,<sp/>&amp;DefaultQueue<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_add_roots(MLArgCache,<sp/>MLArgCache<sp/>+<sp/>ML_ARG_CACHE_SIZE);</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_config_register(</highlight><highlight class="stringliteral">&quot;DEBUGGER&quot;</highlight><highlight class="normal">,<sp/>ml_config_debugger);</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_runtime_init.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ml_runtime.c"/>
  </compounddef>
</doxygen>
