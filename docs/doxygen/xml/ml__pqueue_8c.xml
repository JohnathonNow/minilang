<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__pqueue_8c" kind="file" language="C++">
    <compoundname>ml_pqueue.c</compoundname>
    <includes refid="minilang_8h" local="yes">minilang.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="ml__pqueue_8h" local="yes">ml_pqueue.h</includes>
    <includes refid="ml__sequence_8h" local="yes">ml_sequence.h</includes>
    <includes local="yes">ml_pqueue_init.c</includes>
    <incdepgraph>
      <node id="13">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_pqueue.c</label>
        <link refid="ml__pqueue_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ml_pqueue.h</label>
        <link refid="ml__pqueue_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>ml_sequence.h</label>
        <link refid="ml__sequence_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="18">
        <label>gc/gc.h</label>
      </node>
      <node id="16">
        <label>limits.h</label>
      </node>
      <node id="15">
        <label>ml_config.h</label>
      </node>
      <node id="21">
        <label>ml_pqueue_init.c</label>
      </node>
      <node id="6">
        <label>setjmp.h</label>
      </node>
      <node id="11">
        <label>stdarg.h</label>
      </node>
      <node id="14">
        <label>stdint.h</label>
      </node>
      <node id="9">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="10">
        <label>string.h</label>
      </node>
      <node id="4">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structml__pqueue__entry__t" prot="public">ml_pqueue_entry_t</innerclass>
    <innerclass refid="structml__pqueue__t" prot="public">ml_pqueue_t</innerclass>
    <innerclass refid="structml__pqueue__iter__t" prot="public">ml_pqueue_iter_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__pqueue_8c_1aebec330325aff5cbc7d9c9248e2cae4a" prot="public" static="no">
        <name>ML_CATEGORY</name>
        <initializer>&quot;pqueue&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="11" column="10" bodyfile="src/ml_pqueue.c" bodystart="11" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ml__pqueue_8c_1acf2b2d5888d5911818fbc34b16b45118" prot="public" static="no">
        <type>struct ml_pqueue_t</type>
        <definition>typedef struct ml_pqueue_t ml_pqueue_t</definition>
        <argsstring></argsstring>
        <name>ml_pqueue_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="13" column="26" bodyfile="src/ml_pqueue.c" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__pqueue_8c_1af268396f461c6e642d7ddef3adf567e9" prot="public" static="no">
        <type>struct ml_pqueue_entry_t</type>
        <definition>typedef struct ml_pqueue_entry_t ml_pqueue_entry_t</definition>
        <argsstring></argsstring>
        <name>ml_pqueue_entry_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="14" column="32" bodyfile="src/ml_pqueue.c" bodystart="14" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="ml__pqueue_8c_1adb6d8320cdbce2c8d4f52936c1f81390" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t* GreaterMethod</definition>
        <argsstring></argsstring>
        <name>GreaterMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="50" column="19" declfile="src/ml_pqueue.c" declline="50" declcolumn="19"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__pqueue_8c_1a731e8a6369d25a17b47e1b98a26f650d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLPQueueEntryT,(), &quot;pqueue::entry&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLPQueueEntryT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;pqueue::entry&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="23" column="1" declfile="src/ml_pqueue.c" declline="23" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a2dc5f3f0e805c7e248f529acd1f8c692" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLPQueueT,(MLSequenceT), &quot;pqueue&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLPQueueT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;pqueue&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="38" column="1" declfile="src/ml_pqueue.c" declline="38" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a8cde9493b3d556c14908da05f4a96dac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_pqueue</definition>
        <argsstring>(ml_value_t *Compare)</argsstring>
        <name>ml_pqueue</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="41" column="12" bodyfile="src/ml_pqueue.c" bodystart="41" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a764ff52f106fe99fe4be69463834ae83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLPQueueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLPQueueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="52" column="1" bodyfile="src/ml_pqueue.c" bodystart="52" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a899449e8cb64c80381ff6e7e7ea4d091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLPQueueT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLPQueueT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="58" column="1" bodyfile="src/ml_pqueue.c" bodystart="58" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a3587662d9487cf1a89f3101b64886723" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_pqueue_finish</definition>
        <argsstring>(ml_pqueue_t *Queue)</argsstring>
        <name>ml_pqueue_finish</name>
        <param>
          <type><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref> *</type>
          <declname>Queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="65" column="13" bodyfile="src/ml_pqueue.c" bodystart="65" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a8dea02b0a1406b1b0b33e9ad39299b45" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_pqueue_up2</definition>
        <argsstring>(ml_pqueue_t *Queue, ml_pqueue_entry_t *Entry)</argsstring>
        <name>ml_pqueue_up2</name>
        <param>
          <type><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref> *</type>
          <declname>Queue</declname>
        </param>
        <param>
          <type><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref> *</type>
          <declname>Entry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="89" column="13" bodyfile="src/ml_pqueue.c" bodystart="89" bodyend="98" declfile="src/ml_pqueue.c" declline="73" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1aab8a651bcbf634e913f3be35aa29d207" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_pqueue_up_run</definition>
        <argsstring>(ml_pqueue_t *Queue, ml_value_t *Result)</argsstring>
        <name>ml_pqueue_up_run</name>
        <param>
          <type><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref> *</type>
          <declname>Queue</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="75" column="13" bodyfile="src/ml_pqueue.c" bodystart="75" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a0c364d9c7ae9ace7231b854af28061a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_pqueue_down1</definition>
        <argsstring>(ml_pqueue_t *Queue, ml_pqueue_entry_t *Entry)</argsstring>
        <name>ml_pqueue_down1</name>
        <param>
          <type><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref> *</type>
          <declname>Queue</declname>
        </param>
        <param>
          <type><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref> *</type>
          <declname>Entry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="136" column="13" bodyfile="src/ml_pqueue.c" bodystart="136" bodyend="157" declfile="src/ml_pqueue.c" declline="100" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a840ba12d09d8fdab9c1f5349db0e2148" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_pqueue_down2</definition>
        <argsstring>(ml_pqueue_t *Queue, ml_value_t *Result)</argsstring>
        <name>ml_pqueue_down2</name>
        <param>
          <type><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref> *</type>
          <declname>Queue</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="102" column="13" bodyfile="src/ml_pqueue.c" bodystart="102" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a44dd23b86f89556bbfd500be2fa84a83" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_pqueue_down_right</definition>
        <argsstring>(ml_pqueue_t *Queue, ml_value_t *Result)</argsstring>
        <name>ml_pqueue_down_right</name>
        <param>
          <type><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref> *</type>
          <declname>Queue</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="115" column="13" bodyfile="src/ml_pqueue.c" bodystart="115" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a2057e3224000b3259c4aea3b6a4bdead" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_pqueue_down_left</definition>
        <argsstring>(ml_pqueue_t *Queue, ml_value_t *Result)</argsstring>
        <name>ml_pqueue_down_left</name>
        <param>
          <type><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref> *</type>
          <declname>Queue</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="121" column="13" bodyfile="src/ml_pqueue.c" bodystart="121" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1adc0afef9564be002c061a603506685e2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_pqueue_insert</definition>
        <argsstring>(ml_state_t *Caller, ml_pqueue_t *Queue, ml_pqueue_entry_t *Entry)</argsstring>
        <name>ml_pqueue_insert</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref> *</type>
          <declname>Queue</declname>
        </param>
        <param>
          <type><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref> *</type>
          <declname>Entry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="159" column="13" bodyfile="src/ml_pqueue.c" bodystart="159" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1adf642a5d10c09bf92670fd5c3bec481e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;insert&quot;, MLPQueueT, MLAnyT, MLAnyT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;insert&quot;</type>
        </param>
        <param>
          <type>MLPQueueT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="174" column="1" bodyfile="src/ml_pqueue.c" bodystart="174" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a7a14d405861d7a98d2f2c33a549b138a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;peek&quot;, MLPQueueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;peek&quot;</type>
        </param>
        <param>
          <type>MLPQueueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="190" column="1" bodyfile="src/ml_pqueue.c" bodystart="190" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a8f3fcb650ac521f55f7fe0aacc0e890b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;next&quot;, MLPQueueT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;next&quot;</type>
        </param>
        <param>
          <type>MLPQueueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="199" column="1" bodyfile="src/ml_pqueue.c" bodystart="199" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a5ab56669d749ba7b268f7f6755b6c33f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_pqueue_keep_run</definition>
        <argsstring>(ml_pqueue_t *Queue, ml_value_t *Value)</argsstring>
        <name>ml_pqueue_keep_run</name>
        <param>
          <type><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref> *</type>
          <declname>Queue</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="218" column="13" bodyfile="src/ml_pqueue.c" bodystart="218" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1aac47a0081fdbdd427055292bd4d1fc71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;keep&quot;, MLPQueueT, MLIntegerT, MLAnyT, MLAnyT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;keep&quot;</type>
        </param>
        <param>
          <type>MLPQueueT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="235" column="1" bodyfile="src/ml_pqueue.c" bodystart="235" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a6410c40890d7a94fb5c8747a6975db86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;count&quot;, MLPQueueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;count&quot;</type>
        </param>
        <param>
          <type>MLPQueueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="266" column="1" bodyfile="src/ml_pqueue.c" bodystart="266" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a38d42e55223e6bb6f52bc3b2c204596e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;requeue&quot;, MLPQueueEntryT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;requeue&quot;</type>
        </param>
        <param>
          <type>MLPQueueEntryT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="274" column="1" bodyfile="src/ml_pqueue.c" bodystart="274" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a2d936ea9f933f0d8ba807352f142101a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_pqueue_adjust_run</definition>
        <argsstring>(ml_pqueue_t *Queue, ml_value_t *Result)</argsstring>
        <name>ml_pqueue_adjust_run</name>
        <param>
          <type><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref> *</type>
          <declname>Queue</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="285" column="13" bodyfile="src/ml_pqueue.c" bodystart="285" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a5dbd5c29769d042afd5bf7d675ec84a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;adjust&quot;, MLPQueueEntryT, MLAnyT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;adjust&quot;</type>
        </param>
        <param>
          <type>MLPQueueEntryT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="295" column="1" bodyfile="src/ml_pqueue.c" bodystart="295" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1ab4f1c95d61892907aef4ed833abed4e8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_pqueue_raise_run</definition>
        <argsstring>(ml_pqueue_t *Queue, ml_value_t *Result)</argsstring>
        <name>ml_pqueue_raise_run</name>
        <param>
          <type><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref> *</type>
          <declname>Queue</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="313" column="13" bodyfile="src/ml_pqueue.c" bodystart="313" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1aa533948d1faa4bdbe8cec4b8ea01da1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;raise&quot;, MLPQueueEntryT, MLAnyT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;raise&quot;</type>
        </param>
        <param>
          <type>MLPQueueEntryT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="330" column="1" bodyfile="src/ml_pqueue.c" bodystart="330" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a6ac58d2a7b2d2e13fd1d0c4ec8753113" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_pqueue_lower_run</definition>
        <argsstring>(ml_pqueue_t *Queue, ml_value_t *Result)</argsstring>
        <name>ml_pqueue_lower_run</name>
        <param>
          <type><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref> *</type>
          <declname>Queue</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="348" column="13" bodyfile="src/ml_pqueue.c" bodystart="348" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a1bdd225383c355c7211d354c416fd108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;lower&quot;, MLPQueueEntryT, MLAnyT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;lower&quot;</type>
        </param>
        <param>
          <type>MLPQueueEntryT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="365" column="1" bodyfile="src/ml_pqueue.c" bodystart="365" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a7d902aa6cf0a3636e336a2deb5a6ff95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;remove&quot;, MLPQueueEntryT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;remove&quot;</type>
        </param>
        <param>
          <type>MLPQueueEntryT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="383" column="1" bodyfile="src/ml_pqueue.c" bodystart="383" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1afa026f08cf6a837782c6c8902e871dad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;value&quot;, MLPQueueEntryT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;value&quot;</type>
        </param>
        <param>
          <type>MLPQueueEntryT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="405" column="1" bodyfile="src/ml_pqueue.c" bodystart="405" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a9b8cdd305ba557c2b10c72015c6d894d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;priority&quot;, MLPQueueEntryT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;priority&quot;</type>
        </param>
        <param>
          <type>MLPQueueEntryT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="413" column="1" bodyfile="src/ml_pqueue.c" bodystart="413" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a6c6c89dc9d3c529f5d3378278a3918d1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_unpack, MLPQueueEntryT, ml_pqueue_entry_t *Entry, int Index)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_unpack</type>
        </param>
        <param>
          <type>MLPQueueEntryT</type>
        </param>
        <param>
          <type><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref> *</type>
          <declname>Entry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="421" column="19" bodyfile="src/ml_pqueue.c" bodystart="421" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a570c5da0063654b8a3ea5c3cfd583148" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;queued&quot;, MLPQueueEntryT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;queued&quot;</type>
        </param>
        <param>
          <type>MLPQueueEntryT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="427" column="1" bodyfile="src/ml_pqueue.c" bodystart="427" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a49b5989260eaaa23930c7973244ec050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLPQueueIterT,(), &quot;pqueue-iter&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLPQueueIterT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;pqueue-iter&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="448" column="1" declfile="src/ml_pqueue.c" declline="448" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1ac39c3933e5a57613fdb12dacede5279e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLPQueueT, ml_state_t *Caller, ml_pqueue_t *Queue)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLPQueueT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref> *</type>
          <declname>Queue</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="451" column="13" bodyfile="src/ml_pqueue.c" bodystart="451" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a032d3ab6ce6e9e913e6faeee7d6da091" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLPQueueIterT, ml_state_t *Caller, ml_pqueue_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLPQueueIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__pqueue__iter__t" kindref="compound">ml_pqueue_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="461" column="13" bodyfile="src/ml_pqueue.c" bodystart="461" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a54a6c4409c0c49d0c272c5cc028d07a7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLPQueueIterT, ml_state_t *Caller, ml_pqueue_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLPQueueIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__pqueue__iter__t" kindref="compound">ml_pqueue_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="466" column="13" bodyfile="src/ml_pqueue.c" bodystart="466" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a4ceb21b5fea4585ab2a3bc8167dad513" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLPQueueIterT, ml_state_t *Caller, ml_pqueue_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLPQueueIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__pqueue__iter__t" kindref="compound">ml_pqueue_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="470" column="13" bodyfile="src/ml_pqueue.c" bodystart="470" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="ml__pqueue_8c_1a02440ba449a7b2108c0b06305543110e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_pqueue_init</definition>
        <argsstring>(stringmap_t *Globals)</argsstring>
        <name>ml_pqueue_init</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Globals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_pqueue.c" line="474" column="6" bodyfile="src/ml_pqueue.c" bodystart="474" bodyend="477"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;minilang.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_pqueue.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_sequence.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>optimize<sp/>(&quot;no-tree-loop-distribute-patterns&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ML_CATEGORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;pqueue&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="structml__pqueue__entry__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/>*Priority;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">ML_TYPE(MLPQueueEntryT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;pqueue::entry&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>entry<sp/>in<sp/>a<sp/>priority<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="structml__pqueue__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Compare;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>**Entries;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry,<sp/>*Test,<sp/>*Parent;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[2];</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Priority,<sp/>*Value;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/>Size;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">ML_TYPE(MLPQueueT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;pqueue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>priority<sp/>queue<sp/>with<sp/>values<sp/>and<sp/>associated<sp/>priorities.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_pqueue(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Compare)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.Type<sp/>=<sp/>MLPQueueT;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Compare<sp/>=<sp/>Compare;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Size<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Entries<sp/>=<sp/>anew(<ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*,<sp/>Queue-&gt;Size);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Queue;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*GreaterMethod;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">ML_METHOD(MLPQueueT)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//&gt;pqueue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>priority<sp/>queue<sp/>using<sp/>:mini:`&gt;`<sp/>to<sp/>compare<sp/>priorities.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue(GreaterMethod);</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">ML_METHOD(MLPQueueT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//&lt;Greater</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//&gt;pqueue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>priority<sp/>queue<sp/>using<sp/>:mini:`Greater`<sp/>to<sp/>compare<sp/>priorities.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue(Args[0]);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_pqueue_finish(<ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Queue-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>Queue-&gt;Value;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.Caller<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Value<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_pqueue_up2(<ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue,<sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_pqueue_up_run(<ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_finish(Queue);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry<sp/>=<sp/>Queue-&gt;Entry;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result<sp/>==<sp/>MLNil)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_finish(Queue);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>**Entries<sp/>=<sp/>Queue-&gt;Entries;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Parent<sp/>=<sp/>Queue-&gt;Parent;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>Entry-&gt;Index;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>Entries[Parent-&gt;Index]<sp/>=<sp/>Entry;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>Entries[Index]<sp/>=<sp/>Parent;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>Entry-&gt;Index<sp/>=<sp/>Parent-&gt;Index;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>Parent-&gt;Index<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_up2(Queue,<sp/>Entry);</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_pqueue_up2(<ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue,<sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Entry-&gt;Index<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_finish(Queue);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>**Entries<sp/>=<sp/>Queue-&gt;Entries;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ParentIndex<sp/>=<sp/>(Entry-&gt;Index<sp/>-<sp/>1)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Parent<sp/>=<sp/>Queue-&gt;Parent<sp/>=<sp/>Entries[ParentIndex];</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Entry<sp/>=<sp/>Entry;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Args[0]<sp/>=<sp/>Entry-&gt;Priority;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Args[1]<sp/>=<sp/>Parent-&gt;Priority;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Queue,<sp/>Queue-&gt;Compare,<sp/>2,<sp/>Queue-&gt;Args);</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_pqueue_down1(<ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue,<sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_pqueue_down2(<ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry<sp/>=<sp/>Queue-&gt;Entry;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Parent<sp/>=<sp/>Queue-&gt;Parent;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parent<sp/>==<sp/>Entry)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_finish(Queue);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>**Entries<sp/>=<sp/>Queue-&gt;Entries;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>Entry-&gt;Index;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>Entries[Parent-&gt;Index]<sp/>=<sp/>Entry;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>Entries[Index]<sp/>=<sp/>Parent;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>Entry-&gt;Index<sp/>=<sp/>Parent-&gt;Index;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>Parent-&gt;Index<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_down1(Queue,<sp/>Entry);</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_pqueue_down_right(<ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_finish(Queue);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result<sp/>!=<sp/>MLNil)<sp/>Queue-&gt;Parent<sp/>=<sp/>Queue-&gt;Test;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_pqueue_down2(Queue,<sp/>MLNil);</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_pqueue_down_left(<ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_finish(Queue);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result<sp/>!=<sp/>MLNil)<sp/>Queue-&gt;Parent<sp/>=<sp/>Queue-&gt;Test;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>**Entries<sp/>=<sp/>Queue-&gt;Entries;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Right<sp/>=<sp/>Queue-&gt;Test-&gt;Index<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Right<sp/>&lt;<sp/>Queue-&gt;Count)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_pqueue_down_right;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Test<sp/>=<sp/>Queue-&gt;Test<sp/>=<sp/>Entries[Right];</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;Args[0]<sp/>=<sp/>Test-&gt;Priority;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;Args[1]<sp/>=<sp/>Queue-&gt;Parent-&gt;Priority;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Queue,<sp/>Queue-&gt;Compare,<sp/>2,<sp/>Queue-&gt;Args);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_pqueue_down2(Queue,<sp/>MLNil);</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_pqueue_down1(<ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue,<sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>**Entries<sp/>=<sp/>Queue-&gt;Entries;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Entry<sp/>=<sp/>Entry;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Parent<sp/>=<sp/>Entry;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Left<sp/>=<sp/>2<sp/>*<sp/>Entry-&gt;Index<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Left<sp/>&lt;<sp/>Queue-&gt;Count)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_pqueue_down_left;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Test<sp/>=<sp/>Queue-&gt;Test<sp/>=<sp/>Entries[Left];</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;Args[0]<sp/>=<sp/>Test-&gt;Priority;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;Args[1]<sp/>=<sp/>Entry-&gt;Priority;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Queue,<sp/>Queue-&gt;Compare,<sp/>2,<sp/>Queue-&gt;Args);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Right<sp/>=<sp/>Left<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Right<sp/>&lt;<sp/>Queue-&gt;Count)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_pqueue_down_right;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Test<sp/>=<sp/>Queue-&gt;Test<sp/>=<sp/>Entries[Right];</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;Args[0]<sp/>=<sp/>Test-&gt;Priority;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;Args[1]<sp/>=<sp/>Entry-&gt;Priority;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Queue,<sp/>Queue-&gt;Compare,<sp/>2,<sp/>Queue-&gt;Args);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_finish(Queue);</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_pqueue_insert(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue,<sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Queue-&gt;Count<sp/>==<sp/>Queue-&gt;Size)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;Size<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>**Entries<sp/>=<sp/>anew(<ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*,<sp/>Queue-&gt;Size);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Entries,<sp/>Queue-&gt;Entries,<sp/>Queue-&gt;Count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*));</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;Entries<sp/>=<sp/>Entries;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>Entry-&gt;Index<sp/>=<sp/>Queue-&gt;Count++;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Entries[Entry-&gt;Index]<sp/>=<sp/>Entry;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_pqueue_up_run;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_up2(Queue,<sp/>Entry);</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;insert&quot;</highlight><highlight class="normal">,<sp/>MLPQueueT,<sp/>MLAnyT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//&lt;Queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//&lt;Priority</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//&gt;pqueue::entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>and<sp/>returns<sp/>a<sp/>new<sp/>entry<sp/>in<sp/>:mini:`Queue`<sp/>with<sp/>value<sp/>:mini:`Value`<sp/>and<sp/>priority<sp/>:mini:`Priority`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue<sp/>=<sp/>(<ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>Entry-&gt;Type<sp/>=<sp/>MLPQueueEntryT;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>Entry-&gt;Queue<sp/>=<sp/>Queue;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>Entry-&gt;Value<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>Entry-&gt;Priority<sp/>=<sp/>Args[2];</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Entry;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_insert(Caller,<sp/>Queue,<sp/>Entry);</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;peek&quot;</highlight><highlight class="normal">,<sp/>MLPQueueT)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//&lt;Queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//&gt;pqueue::entry|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>highest<sp/>priority<sp/>entry<sp/>in<sp/>:mini:`Queue`<sp/>without<sp/>removing<sp/>it,<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>:mini:`Queue`<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue<sp/>=<sp/>(<ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Queue-&gt;Count)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Queue-&gt;Entries[0];</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;next&quot;</highlight><highlight class="normal">,<sp/>MLPQueueT)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">//&lt;Queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//&gt;pqueue::entry|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Removes<sp/>and<sp/>returns<sp/>the<sp/>highest<sp/>priority<sp/>entry<sp/>in<sp/>:mini:`Queue`,<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>:mini:`Queue`<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue<sp/>=<sp/>(<ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Queue-&gt;Count)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Next<sp/>=<sp/>Queue-&gt;Entries[0];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>Next-&gt;Index<sp/>=<sp/>INT_MAX;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry<sp/>=<sp/>Queue-&gt;Entries[--Queue-&gt;Count];</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Entries[Queue-&gt;Count]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Queue-&gt;Count)<sp/>ML_RETURN(Next);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Entries[0]<sp/>=<sp/>Entry;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>Entry-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Next;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_down1(Queue,<sp/>Entry);</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_pqueue_keep_run(<ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(Queue-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>!=<sp/>MLNil)<sp/>ML_CONTINUE(Queue-&gt;Base.Caller,<sp/>MLNil);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref>);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>Entry-&gt;Type<sp/>=<sp/>MLPQueueEntryT;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>Entry-&gt;Queue<sp/>=<sp/>Queue;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>Entry-&gt;Value<sp/>=<sp/>Queue-&gt;Value;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>Entry-&gt;Priority<sp/>=<sp/>Queue-&gt;Priority;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Next<sp/>=<sp/>Queue-&gt;Entries[0];</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>Next-&gt;Index<sp/>=<sp/>INT_MAX;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>Entry-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Entries[0]<sp/>=<sp/>Entry;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Next;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_pqueue_up_run;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_down1(Queue,<sp/>Entry);</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;keep&quot;</highlight><highlight class="normal">,<sp/>MLPQueueT,<sp/>MLIntegerT,<sp/>MLAnyT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//&lt;Queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//&lt;Target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//&lt;Priority</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//&gt;pqueue::entry|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>and<sp/>returns<sp/>a<sp/>new<sp/>entry<sp/>in<sp/>:mini:`Queue`<sp/>with<sp/>value<sp/>:mini:`Value`<sp/>and<sp/>priority<sp/>:mini:`Priority`<sp/>if<sp/>either<sp/>:mini:`Queue`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>has<sp/>fewer<sp/>than<sp/>:mini:`Target`<sp/>entries<sp/>or<sp/>:mini:`Priority`<sp/>is<sp/>lower<sp/>than<sp/>the<sp/>current<sp/>highest<sp/>priority<sp/>entry<sp/>in<sp/>:mini:`Queue`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(removing<sp/>the<sp/>current<sp/>highest<sp/>priority<sp/>entry<sp/>in<sp/>this<sp/>case).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>entry<sp/>removed<sp/>from<sp/>:mini:`Queue`<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>no<sp/>entry<sp/>was<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue<sp/>=<sp/>(<ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Target<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Queue-&gt;Count<sp/>&lt;<sp/>Target)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref>);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entry-&gt;Type<sp/>=<sp/>MLPQueueEntryT;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entry-&gt;Queue<sp/>=<sp/>Queue;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entry-&gt;Value<sp/>=<sp/>Args[2];</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entry-&gt;Priority<sp/>=<sp/>Args[3];</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;Value<sp/>=<sp/>MLNil;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_insert(Caller,<sp/>Queue,<sp/>Entry);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_pqueue_keep_run;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Value<sp/>=<sp/>Args[2];</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Args[0]<sp/>=<sp/>Queue-&gt;Priority<sp/>=<sp/>Args[3];</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Args[1]<sp/>=<sp/>Queue-&gt;Entries[0]-&gt;Priority;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Queue,<sp/>Queue-&gt;Compare,<sp/>2,<sp/>Queue-&gt;Args);</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;count&quot;</highlight><highlight class="normal">,<sp/>MLPQueueT)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">//&lt;Queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>entries<sp/>in<sp/>:mini:`Queue`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue<sp/>=<sp/>(<ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Queue-&gt;Count);</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;requeue&quot;</highlight><highlight class="normal">,<sp/>MLPQueueEntryT)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">//&lt;Entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//&gt;pqueue::entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>:mini:`Entry`<sp/>back<sp/>into<sp/>its<sp/>priority<sp/>queue<sp/>if<sp/>it<sp/>is<sp/>not<sp/>currently<sp/>in<sp/>the<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry<sp/>=<sp/>(<ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue<sp/>=<sp/>Entry-&gt;Queue;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Entry;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Entry-&gt;Index<sp/>==<sp/>INT_MAX)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_insert(Caller,<sp/>Queue,<sp/>Entry);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Entry);</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_pqueue_adjust_run(<ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_finish(Queue);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result<sp/>!=<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_pqueue_up_run;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_up2(Queue,<sp/>Queue-&gt;Entry);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_down1(Queue,<sp/>Queue-&gt;Entry);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;adjust&quot;</highlight><highlight class="normal">,<sp/>MLPQueueEntryT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">//&lt;Entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">//&lt;Priority</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">//&gt;pqueue::entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Changes<sp/>the<sp/>priority<sp/>of<sp/>:mini:`Entry`<sp/>to<sp/>:mini:`Priority`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry<sp/>=<sp/>(<ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Priority<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue<sp/>=<sp/>Entry-&gt;Queue;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_pqueue_adjust_run;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Entry<sp/>=<sp/>Entry;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Queue-&gt;Entry;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Args[0]<sp/>=<sp/>Priority;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Args[1]<sp/>=<sp/>Entry-&gt;Priority;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Queue,<sp/>Queue-&gt;Compare,<sp/>2,<sp/>Queue-&gt;Args);</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_pqueue_raise_run(<ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_finish(Queue);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Priority<sp/>=<sp/>Queue-&gt;Value;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Queue-&gt;Entry;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result<sp/>!=<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry<sp/>=<sp/>Queue-&gt;Entry;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entry-&gt;Priority<sp/>=<sp/>Priority;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Entry-&gt;Index<sp/>!=<sp/>INT_MAX)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_pqueue_up_run;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_up2(Queue,<sp/>Entry);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_insert(Queue-&gt;Base.Caller,<sp/>Queue,<sp/>Entry);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_finish(Queue);</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;raise&quot;</highlight><highlight class="normal">,<sp/>MLPQueueEntryT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">//&lt;Entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">//&lt;Priority</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">//&gt;pqueue::entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Changes<sp/>the<sp/>priority<sp/>of<sp/>:mini:`Entry`<sp/>to<sp/>:mini:`Priority`<sp/>only<sp/>if<sp/>its<sp/>current<sp/>priority<sp/>is<sp/>less<sp/>than<sp/>:mini:`Priority`.<sp/>:mini:`Entry`<sp/>is<sp/>added<sp/>back<sp/>into<sp/>its<sp/>queue<sp/>if<sp/>the<sp/>priority<sp/>changes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry<sp/>=<sp/>(<ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Priority<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue<sp/>=<sp/>Entry-&gt;Queue;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_pqueue_raise_run;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Entry<sp/>=<sp/>Entry;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Value<sp/>=<sp/>Priority;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Args[0]<sp/>=<sp/>Priority;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Args[1]<sp/>=<sp/>Entry-&gt;Priority;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Queue,<sp/>Queue-&gt;Compare,<sp/>2,<sp/>Queue-&gt;Args);</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_pqueue_lower_run(<ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_finish(Queue);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Priority<sp/>=<sp/>Queue-&gt;Value;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Queue-&gt;Entry;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result<sp/>!=<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry<sp/>=<sp/>Queue-&gt;Entry;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entry-&gt;Priority<sp/>=<sp/>Priority;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Entry-&gt;Index<sp/>!=<sp/>INT_MAX)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_pqueue_up_run;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_up2(Queue,<sp/>Entry);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_insert(Queue-&gt;Base.Caller,<sp/>Queue,<sp/>Entry);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_pqueue_finish(Queue);</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;lower&quot;</highlight><highlight class="normal">,<sp/>MLPQueueEntryT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//&lt;Entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">//&lt;Priority</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">//&gt;pqueue::entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Changes<sp/>the<sp/>priority<sp/>of<sp/>:mini:`Entry`<sp/>to<sp/>:mini:`Priority`<sp/>only<sp/>if<sp/>its<sp/>current<sp/>priority<sp/>is<sp/>greater<sp/>than<sp/>:mini:`Priority`.<sp/>:mini:`Entry`<sp/>is<sp/>added<sp/>back<sp/>into<sp/>its<sp/>queue<sp/>if<sp/>the<sp/>priority<sp/>changes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry<sp/>=<sp/>(<ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Priority<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue<sp/>=<sp/>Entry-&gt;Queue;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_pqueue_lower_run;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Entry<sp/>=<sp/>Entry;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Value<sp/>=<sp/>Priority;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Args[0]<sp/>=<sp/>Entry-&gt;Priority;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Args[1]<sp/>=<sp/>Priority;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Queue,<sp/>Queue-&gt;Compare,<sp/>2,<sp/>Queue-&gt;Args);</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;remove&quot;</highlight><highlight class="normal">,<sp/>MLPQueueEntryT)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">//&lt;Entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">//&gt;pqueue::entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Removes<sp/>:mini:`Entry`<sp/>from<sp/>its<sp/>priority<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry<sp/>=<sp/>(<ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Entry-&gt;Index<sp/>==<sp/>INT_MAX)<sp/>ML_RETURN(Entry);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue<sp/>=<sp/>Entry-&gt;Queue;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Next<sp/>=<sp/>Queue-&gt;Entries[--Queue-&gt;Count];</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Entries[Queue-&gt;Count]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>Next-&gt;Index<sp/>=<sp/>Entry-&gt;Index;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Entries[Index]<sp/>=<sp/>Next;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>Entry-&gt;Index<sp/>=<sp/>INT_MAX;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_pqueue_adjust_run;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Entry<sp/>=<sp/>Next;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Entry;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Args[0]<sp/>=<sp/>Next-&gt;Priority;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Args[1]<sp/>=<sp/>Entry-&gt;Priority;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Queue,<sp/>Queue-&gt;Compare,<sp/>2,<sp/>Queue-&gt;Args);</highlight></codeline>
<codeline lineno="403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>MLPQueueEntryT)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">//&lt;Entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>value<sp/>associated<sp/>with<sp/>:mini:`Entry`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry<sp/>=<sp/>(<ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Entry-&gt;Value;</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;priority&quot;</highlight><highlight class="normal">,<sp/>MLPQueueEntryT)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//&lt;Entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>priority<sp/>associated<sp/>with<sp/>:mini:`Entry`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry<sp/>=<sp/>(<ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Entry-&gt;Priority;</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_unpack,<sp/>MLPQueueEntryT,<sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Entry-&gt;Value;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>==<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Entry-&gt;Priority;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;queued&quot;</highlight><highlight class="normal">,<sp/>MLPQueueEntryT)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">//&lt;Entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//&gt;pqueue::entry|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Entry`<sp/>if<sp/>it<sp/>is<sp/>currently<sp/>in<sp/>the<sp/>priority<sp/>queue,<sp/>otherwise<sp/>returns<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry<sp/>=<sp/>(<ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Entry-&gt;Index<sp/>==<sp/>INT_MAX)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Entry;</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_unpack,<sp/>MLPQueueEntryT,<sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>*Entry,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Entry-&gt;Value;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>==<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Entry-&gt;Priority;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442" refid="structml__pqueue__iter__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__entry__t" kindref="compound">ml_pqueue_entry_t</ref><sp/>**Entries;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index,<sp/>Count;</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}<sp/><ref refid="structml__pqueue__iter__t" kindref="compound">ml_pqueue_iter_t</ref>;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal">ML_TYPE(MLPQueueIterT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;pqueue-iter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLPQueueT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__pqueue__t" kindref="compound">ml_pqueue_t</ref><sp/>*Queue)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Queue-&gt;Count)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__pqueue__iter__t" kindref="compound">ml_pqueue_iter_t</ref><sp/>*Iter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__pqueue__iter__t" kindref="compound">ml_pqueue_iter_t</ref>);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Type<sp/>=<sp/>MLPQueueIterT;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Entries<sp/>=<sp/>Queue-&gt;Entries;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Count<sp/>=<sp/>Queue-&gt;Count;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLPQueueIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__pqueue__iter__t" kindref="compound">ml_pqueue_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++Iter-&gt;Index<sp/>==<sp/>Iter-&gt;Count)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLPQueueIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__pqueue__iter__t" kindref="compound">ml_pqueue_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Iter-&gt;Index<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLPQueueIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__pqueue__iter__t" kindref="compound">ml_pqueue_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iter-&gt;Entries[Iter-&gt;Index]);</highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_pqueue_init(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Globals)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_pqueue_init.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;pqueue&quot;</highlight><highlight class="normal">,<sp/>MLPQueueT);</highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ml_pqueue.c"/>
  </compounddef>
</doxygen>
