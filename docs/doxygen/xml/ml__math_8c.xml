<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__math_8c" kind="file" language="C++">
    <compoundname>ml_math.c</compoundname>
    <includes refid="ml__math_8h" local="yes">ml_math.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">float.h</includes>
    <includes local="yes">ml_math_init.c</includes>
    <incdepgraph>
      <node id="14">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_math.c</label>
        <link refid="ml__math_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ml_math.h</label>
        <link refid="ml__math_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="21">
        <label>float.h</label>
      </node>
      <node id="19">
        <label>gc/gc.h</label>
      </node>
      <node id="17">
        <label>limits.h</label>
      </node>
      <node id="20">
        <label>math.h</label>
      </node>
      <node id="16">
        <label>ml_config.h</label>
      </node>
      <node id="22">
        <label>ml_math_init.c</label>
      </node>
      <node id="7">
        <label>setjmp.h</label>
      </node>
      <node id="12">
        <label>stdarg.h</label>
      </node>
      <node id="15">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>stdio.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="11">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__math_8c_1aebec330325aff5cbc7d9c9248e2cae4a" prot="public" static="no">
        <name>ML_CATEGORY</name>
        <initializer>&quot;math&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="12" column="10" bodyfile="src/ml_math.c" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__math_8c_1a00ef33b7479157ffdf72388b6513df2a" prot="public" static="no">
        <name>MATH_REAL</name>
        <param><defname>NAME</defname></param>
        <param><defname>CNAME</defname></param>
        <param><defname>EXPORT</defname></param>
        <initializer>ML_METHOD_ANON(NAME ## Method, &quot;math::&quot; #EXPORT); \
\
ML_METHOD(NAME ## Method, MLRealT) { \
/*@math::EXPORT
//&gt;real
// Returns :mini:`EXPORT(Arg/1)`.
//$= math::EXPORT(1.2345)
//$= math::EXPORT(-1.2345)
*/\
	return ml_real(CNAME(ml_real_value(Args[0]))); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="19" column="9" bodyfile="src/ml_math.c" bodystart="14" bodyend="20"/>
      </memberdef>
      <memberdef kind="define" id="ml__math_8c_1a7d65896a1381bc5a02f165cf8b04d89f" prot="public" static="no">
        <name>MATH_NUMBER</name>
        <param><defname>NAME</defname></param>
        <param><defname>CNAME</defname></param>
        <param><defname>EXPORT</defname></param>
        <initializer>ML_METHOD_ANON(NAME ## Method, &quot;math::&quot; #EXPORT); \
\
ML_METHOD(NAME ## Method, MLRealT) { \
/*@math::EXPORT
//&gt;real
// Returns :mini:`EXPORT(Arg/1)`.
//$= math::EXPORT(1.2345)
//$= math::EXPORT(-1.2345)
*/\
	return ml_real(CNAME(ml_real_value(Args[0]))); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="97" column="9" bodyfile="src/ml_math.c" bodystart="87" bodyend="93"/>
      </memberdef>
      <memberdef kind="define" id="ml__math_8c_1adacedaf70b863cf68b5bf2cc4a272788" prot="public" static="no">
        <name>MATH_NUMBER_KEEP_REAL</name>
        <param><defname>NAME</defname></param>
        <param><defname>CNAME</defname></param>
        <param><defname>EXPORT</defname></param>
        <initializer>MATH_NUMBER(NAME, CNAME, EXPORT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="105" column="9" bodyfile="src/ml_math.c" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__math_8c_1a10f470d991dc573cc12dbcece61fe1ed" prot="public" static="no">
        <name>MATH_REAL_REAL</name>
        <param><defname>NAME</defname></param>
        <param><defname>CNAME</defname></param>
        <param><defname>EXPORT</defname></param>
        <initializer>ML_METHOD_DECL(NAME ## Method, &quot;math::&quot; #EXPORT); \
\
ML_METHOD(NAME ## Method, MLRealT, MLRealT) { \
/*@math::EXPORT
//&gt;real
// Returns :mini:`EXPORT(Arg/1, Arg/2)`.
*/\
	return ml_real(CNAME(ml_real_value(Args[0]), ml_real_value(Args[1]))); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="112" column="9" bodyfile="src/ml_math.c" bodystart="99" bodyend="105"/>
      </memberdef>
      <memberdef kind="define" id="ml__math_8c_1ad2f3678bf5eae3684fc497130b946eae" prot="public" static="no">
        <name>MIN</name>
        <param><defname>X</defname></param>
        <param><defname>Y</defname></param>
        <initializer>(X &lt; Y) ? X : Y</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="252" column="9" bodyfile="src/ml_math.c" bodystart="239" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__math_8c_1a5e7b78b3a413e7f4e7e5f6543e6d8ff8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;%&quot;, MLRealT, MLRealT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;%&quot;</type>
        </param>
        <param>
          <type>MLRealT</type>
        </param>
        <param>
          <type>MLRealT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="107" column="1" bodyfile="src/ml_math.c" bodystart="107" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1ae134f68c531bc16ca8819cd39e7f55c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;^&quot;, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;^&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="115" column="1" bodyfile="src/ml_math.c" bodystart="115" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a96719e43af647d975e42e107aead54bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;^&quot;, MLRealT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;^&quot;</type>
        </param>
        <param>
          <type>MLRealT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="139" column="1" bodyfile="src/ml_math.c" bodystart="139" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a43cf9041b3c02802b964848492e71240" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;^&quot;, MLRealT, MLRealT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;^&quot;</type>
        </param>
        <param>
          <type>MLRealT</type>
        </param>
        <param>
          <type>MLRealT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="148" column="1" bodyfile="src/ml_math.c" bodystart="148" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a9a24d7ea8f04fa54562cc37a5c8f4d4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;!&quot;, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;!&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="227" column="1" bodyfile="src/ml_math.c" bodystart="227" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a06f600368c9141b60d8be6c62d7ee62e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;!&quot;, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;!&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="241" column="1" bodyfile="src/ml_math.c" bodystart="241" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a9bd955d76c2361871a1e6ebbfb30a354" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(GCDMethod, &quot;math::gcd&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>GCDMethod</type>
        </param>
        <param>
          <type>&quot;math::gcd&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="257" column="1" declfile="src/ml_math.c" declline="257" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1acc7ca5066e1cdc97d9e6ab8d9d7d5d36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(GCDMethod, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>GCDMethod</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="259" column="1" bodyfile="src/ml_math.c" bodystart="259" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1aee86c0733b8e6e9011cde0b458814e40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_NUMBER_KEEP_REAL</definition>
        <argsstring>(Acos, acos, acos)</argsstring>
        <name>MATH_NUMBER_KEEP_REAL</name>
        <param>
          <type>Acos</type>
        </param>
        <param>
          <type>acos</type>
        </param>
        <param>
          <type>acos</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="283" column="1" declfile="src/ml_math.c" declline="283" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a3781f485203321471d40869087608d2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_NUMBER_KEEP_REAL</definition>
        <argsstring>(Asin, asin, asin)</argsstring>
        <name>MATH_NUMBER_KEEP_REAL</name>
        <param>
          <type>Asin</type>
        </param>
        <param>
          <type>asin</type>
        </param>
        <param>
          <type>asin</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="284" column="1" declfile="src/ml_math.c" declline="284" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a01eaa6248061389c39f10e5a44b693ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_NUMBER_KEEP_REAL</definition>
        <argsstring>(Atan, atan, atan)</argsstring>
        <name>MATH_NUMBER_KEEP_REAL</name>
        <param>
          <type>Atan</type>
        </param>
        <param>
          <type>atan</type>
        </param>
        <param>
          <type>atan</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="285" column="1" declfile="src/ml_math.c" declline="285" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a77feb80b8fb34bd03f489898a8da62a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(AtanMethod, MLRealT, MLRealT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>AtanMethod</type>
        </param>
        <param>
          <type>MLRealT</type>
        </param>
        <param>
          <type>MLRealT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="286" column="1" bodyfile="src/ml_math.c" bodystart="286" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1aa2ec9928609a4a9749fbcf04d4157edf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_REAL</definition>
        <argsstring>(Ceil, ceil, ceil)</argsstring>
        <name>MATH_REAL</name>
        <param>
          <type>Ceil</type>
        </param>
        <param>
          <type>ceil</type>
        </param>
        <param>
          <type>ceil</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="292" column="1" declfile="src/ml_math.c" declline="292" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a89c25d3b376a4bb8a632fe9f26fb18dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_NUMBER_KEEP_REAL</definition>
        <argsstring>(Cos, cos, cos)</argsstring>
        <name>MATH_NUMBER_KEEP_REAL</name>
        <param>
          <type>Cos</type>
        </param>
        <param>
          <type>cos</type>
        </param>
        <param>
          <type>cos</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="293" column="1" declfile="src/ml_math.c" declline="293" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1af42df7f26cd92209157efe8544a5b9a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_NUMBER_KEEP_REAL</definition>
        <argsstring>(Cosh, cosh, cosh)</argsstring>
        <name>MATH_NUMBER_KEEP_REAL</name>
        <param>
          <type>Cosh</type>
        </param>
        <param>
          <type>cosh</type>
        </param>
        <param>
          <type>cosh</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="294" column="1" declfile="src/ml_math.c" declline="294" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1af6298b21154175e61b91dfb2c131474c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_NUMBER_KEEP_REAL</definition>
        <argsstring>(Exp, exp, exp)</argsstring>
        <name>MATH_NUMBER_KEEP_REAL</name>
        <param>
          <type>Exp</type>
        </param>
        <param>
          <type>exp</type>
        </param>
        <param>
          <type>exp</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="295" column="1" declfile="src/ml_math.c" declline="295" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1aec4ae1f4bc273145c652ae56b19fe760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_REAL</definition>
        <argsstring>(Abs, fabs, abs)</argsstring>
        <name>MATH_REAL</name>
        <param>
          <type>Abs</type>
        </param>
        <param>
          <type>fabs</type>
        </param>
        <param>
          <type>abs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="296" column="1" declfile="src/ml_math.c" declline="296" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1aebe4b64e7d7f83b7b5832db11cf54b58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(AbsMethod, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>AbsMethod</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="297" column="1" bodyfile="src/ml_math.c" bodystart="297" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a60f781fa580b75081da796bd9b1243e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_REAL</definition>
        <argsstring>(Floor, floor, floor)</argsstring>
        <name>MATH_REAL</name>
        <param>
          <type>Floor</type>
        </param>
        <param>
          <type>floor</type>
        </param>
        <param>
          <type>floor</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="315" column="1" declfile="src/ml_math.c" declline="315" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a860ad2a5baf6e2f185253809eba9cbb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(FloorMethod, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>FloorMethod</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="316" column="1" bodyfile="src/ml_math.c" bodystart="316" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1ae03ae8ac0b8021e2338e92f124e05666" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_NUMBER</definition>
        <argsstring>(Log, log, log)</argsstring>
        <name>MATH_NUMBER</name>
        <param>
          <type>Log</type>
        </param>
        <param>
          <type>log</type>
        </param>
        <param>
          <type>log</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="323" column="1" declfile="src/ml_math.c" declline="323" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1aaefffece120abd15f2c235bb6bbd200d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_NUMBER</definition>
        <argsstring>(Log10, log10, log10)</argsstring>
        <name>MATH_NUMBER</name>
        <param>
          <type>Log10</type>
        </param>
        <param>
          <type>log10</type>
        </param>
        <param>
          <type>log10</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="324" column="1" declfile="src/ml_math.c" declline="324" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a9f27c739cce4397f38aa71f8464bc704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_NUMBER_KEEP_REAL</definition>
        <argsstring>(Sin, sin, sin)</argsstring>
        <name>MATH_NUMBER_KEEP_REAL</name>
        <param>
          <type>Sin</type>
        </param>
        <param>
          <type>sin</type>
        </param>
        <param>
          <type>sin</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="325" column="1" declfile="src/ml_math.c" declline="325" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a085fae3226a33e8732619ef262afdb9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_NUMBER_KEEP_REAL</definition>
        <argsstring>(Sinh, sinh, sinh)</argsstring>
        <name>MATH_NUMBER_KEEP_REAL</name>
        <param>
          <type>Sinh</type>
        </param>
        <param>
          <type>sinh</type>
        </param>
        <param>
          <type>sinh</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="326" column="1" declfile="src/ml_math.c" declline="326" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a74610f92d24de04f6fd001c4952b993d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_NUMBER</definition>
        <argsstring>(Sqrt, sqrt, sqrt)</argsstring>
        <name>MATH_NUMBER</name>
        <param>
          <type>Sqrt</type>
        </param>
        <param>
          <type>sqrt</type>
        </param>
        <param>
          <type>sqrt</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="327" column="1" declfile="src/ml_math.c" declline="327" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a1225bd16515c8fc0bdd396989ffa5dcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(SqrtMethod, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>SqrtMethod</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="328" column="1" bodyfile="src/ml_math.c" bodystart="328" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a39ef7a76680cdaa0c38899a22f79fdf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_ANON</definition>
        <argsstring>(SquareMethod, &quot;math::square&quot;)</argsstring>
        <name>ML_METHOD_ANON</name>
        <param>
          <type>SquareMethod</type>
        </param>
        <param>
          <type>&quot;math::square&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="351" column="1" declfile="src/ml_math.c" declline="351" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a12426c912c13a973ba9f86a67fd1a4b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(SquareMethod, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>SquareMethod</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="352" column="1" bodyfile="src/ml_math.c" bodystart="352" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a73150c18d774643e0c101635214ac25d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(SquareMethod, MLRealT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>SquareMethod</type>
        </param>
        <param>
          <type>MLRealT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="361" column="1" bodyfile="src/ml_math.c" bodystart="361" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a45d4932a4172242e91f5e1837e9541e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_NUMBER_KEEP_REAL</definition>
        <argsstring>(Tan, tan, tan)</argsstring>
        <name>MATH_NUMBER_KEEP_REAL</name>
        <param>
          <type>Tan</type>
        </param>
        <param>
          <type>tan</type>
        </param>
        <param>
          <type>tan</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="382" column="1" declfile="src/ml_math.c" declline="382" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a4d6c899fcf126b08b8879e787a5d354f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_NUMBER_KEEP_REAL</definition>
        <argsstring>(Tanh, tanh, tanh)</argsstring>
        <name>MATH_NUMBER_KEEP_REAL</name>
        <param>
          <type>Tanh</type>
        </param>
        <param>
          <type>tanh</type>
        </param>
        <param>
          <type>tanh</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="383" column="1" declfile="src/ml_math.c" declline="383" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a2b1be40204799dbf6f935d452bbddd51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_REAL</definition>
        <argsstring>(Erf, erf, erf)</argsstring>
        <name>MATH_REAL</name>
        <param>
          <type>Erf</type>
        </param>
        <param>
          <type>erf</type>
        </param>
        <param>
          <type>erf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="384" column="1" declfile="src/ml_math.c" declline="384" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a05f3335e54008d0ea0c55b7d5b2dc379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_REAL</definition>
        <argsstring>(Erfc, erfc, erfc)</argsstring>
        <name>MATH_REAL</name>
        <param>
          <type>Erfc</type>
        </param>
        <param>
          <type>erfc</type>
        </param>
        <param>
          <type>erfc</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="385" column="1" declfile="src/ml_math.c" declline="385" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1abcb5dee7053a0bcf53b3093737a1028e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_REAL_REAL</definition>
        <argsstring>(Hypot, hypot, hypot)</argsstring>
        <name>MATH_REAL_REAL</name>
        <param>
          <type>Hypot</type>
        </param>
        <param>
          <type>hypot</type>
        </param>
        <param>
          <type>hypot</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="386" column="1" declfile="src/ml_math.c" declline="386" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a8f470e71072fd796c27d012a4ecc1a5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_REAL</definition>
        <argsstring>(Gamma, lgamma, gamma)</argsstring>
        <name>MATH_REAL</name>
        <param>
          <type>Gamma</type>
        </param>
        <param>
          <type>lgamma</type>
        </param>
        <param>
          <type>gamma</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="387" column="1" declfile="src/ml_math.c" declline="387" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a3cfebaa9c9cd89e9a6cf28d1e5ce3629" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_NUMBER_KEEP_REAL</definition>
        <argsstring>(Acosh, acosh, acosh)</argsstring>
        <name>MATH_NUMBER_KEEP_REAL</name>
        <param>
          <type>Acosh</type>
        </param>
        <param>
          <type>acosh</type>
        </param>
        <param>
          <type>acosh</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="388" column="1" declfile="src/ml_math.c" declline="388" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1ade481fa6130404defd720812e60feec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_NUMBER_KEEP_REAL</definition>
        <argsstring>(Asinh, asinh, asinh)</argsstring>
        <name>MATH_NUMBER_KEEP_REAL</name>
        <param>
          <type>Asinh</type>
        </param>
        <param>
          <type>asinh</type>
        </param>
        <param>
          <type>asinh</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="389" column="1" declfile="src/ml_math.c" declline="389" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1ab583a072c8d1b238c08542fa29acb0f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_NUMBER_KEEP_REAL</definition>
        <argsstring>(Atanh, atanh, atanh)</argsstring>
        <name>MATH_NUMBER_KEEP_REAL</name>
        <param>
          <type>Atanh</type>
        </param>
        <param>
          <type>atanh</type>
        </param>
        <param>
          <type>atanh</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="390" column="1" declfile="src/ml_math.c" declline="390" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a6a49c20322586af7a5795e766fd0530b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_REAL</definition>
        <argsstring>(Cbrt, cbrt, cbrt)</argsstring>
        <name>MATH_REAL</name>
        <param>
          <type>Cbrt</type>
        </param>
        <param>
          <type>cbrt</type>
        </param>
        <param>
          <type>cbrt</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="391" column="1" declfile="src/ml_math.c" declline="391" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a229ac34fb421f5024a6378dcaf0aabfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_REAL</definition>
        <argsstring>(Expm1, expm1, expm1)</argsstring>
        <name>MATH_REAL</name>
        <param>
          <type>Expm1</type>
        </param>
        <param>
          <type>expm1</type>
        </param>
        <param>
          <type>expm1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="392" column="1" declfile="src/ml_math.c" declline="392" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a84e2de2d2d5c7c8645729c6d8550d20c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_REAL</definition>
        <argsstring>(Log1p, log1p, log1p)</argsstring>
        <name>MATH_REAL</name>
        <param>
          <type>Log1p</type>
        </param>
        <param>
          <type>log1p</type>
        </param>
        <param>
          <type>log1p</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="393" column="1" declfile="src/ml_math.c" declline="393" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a3ea42c1bbf59bdd66472de17be0989d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_REAL_REAL</definition>
        <argsstring>(Rem, remainder, rem)</argsstring>
        <name>MATH_REAL_REAL</name>
        <param>
          <type>Rem</type>
        </param>
        <param>
          <type>remainder</type>
        </param>
        <param>
          <type>rem</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="394" column="1" declfile="src/ml_math.c" declline="394" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1ac0dda1d2328d56679bf8b3de64d19764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_REAL</definition>
        <argsstring>(Round, round, round)</argsstring>
        <name>MATH_REAL</name>
        <param>
          <type>Round</type>
        </param>
        <param>
          <type>round</type>
        </param>
        <param>
          <type>round</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="395" column="1" declfile="src/ml_math.c" declline="395" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1ac83f11f19d47f8368fa82949544e566a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(RoundMethod, MLRealT, MLRealT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>RoundMethod</type>
        </param>
        <param>
          <type>MLRealT</type>
        </param>
        <param>
          <type>MLRealT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="397" column="1" bodyfile="src/ml_math.c" bodystart="397" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1ab11365c101544e35e115790ec7fc6b41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double logit</definition>
        <argsstring>(double X)</argsstring>
        <name>logit</name>
        <param>
          <type>double</type>
          <declname>X</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="407" column="8" bodyfile="src/ml_math.c" bodystart="407" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a3ae99ccecd94f8b5606afa006e024540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MATH_REAL</definition>
        <argsstring>(Logit, logit, logit)</argsstring>
        <name>MATH_REAL</name>
        <param>
          <type>Logit</type>
        </param>
        <param>
          <type>logit</type>
        </param>
        <param>
          <type>logit</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="411" column="1" declfile="src/ml_math.c" declline="411" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a32a8868239edbe5c9fef070e1d9006ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_ANON</definition>
        <argsstring>(ArgMethod, &quot;math::arg&quot;)</argsstring>
        <name>ML_METHOD_ANON</name>
        <param>
          <type>ArgMethod</type>
        </param>
        <param>
          <type>&quot;math::arg&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="413" column="1" declfile="src/ml_math.c" declline="413" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a0aa46e7bf3cb2920f8c77607234e162e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(ArgMethod, MLRealT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>ArgMethod</type>
        </param>
        <param>
          <type>MLRealT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="415" column="1" bodyfile="src/ml_math.c" bodystart="415" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a7681189b7cdc34305e4467455c033d2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_ANON</definition>
        <argsstring>(ConjMethod, &quot;math::conj&quot;)</argsstring>
        <name>ML_METHOD_ANON</name>
        <param>
          <type>ConjMethod</type>
        </param>
        <param>
          <type>&quot;math::conj&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="423" column="1" declfile="src/ml_math.c" declline="423" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a31155710fc3149954be7feb2ab13341e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(ConjMethod, MLRealT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>ConjMethod</type>
        </param>
        <param>
          <type>MLRealT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="425" column="1" bodyfile="src/ml_math.c" bodystart="425" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1aa5bf7fd4bb43662f475ac440bf953cd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLRandomT,(MLFunctionT), &quot;random&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLRandomT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;random&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="471" column="1" declfile="src/ml_math.c" declline="471" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a80abdf0c1d9ceec924ac9ad5f0691cd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLRandomSeed)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLRandomSeed</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="473" column="1" bodyfile="src/ml_math.c" bodystart="473" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="ml__math_8c_1a6fe9eb087418b1e91eb516db995969bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_math_init</definition>
        <argsstring>(stringmap_t *Globals)</argsstring>
        <name>ml_math_init</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Globals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_math.c" line="481" column="6" bodyfile="src/ml_math.c" bodystart="481" bodyend="529"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ml_math.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>I</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ML_CATEGORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;math&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MATH_REAL(NAME,<sp/>CNAME,<sp/>EXPORT)<sp/>\</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor">ML_METHOD_ANON(NAME<sp/>##<sp/>Method,<sp/>&quot;math::&quot;<sp/>#EXPORT);<sp/>\</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor">ML_METHOD(NAME<sp/>##<sp/>Method,<sp/>MLRealT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="comment">/*@math::EXPORT</highlight></codeline>
<codeline lineno="19"><highlight class="comment">//&gt;real</highlight></codeline>
<codeline lineno="20"><highlight class="comment">//<sp/>Returns<sp/>:mini:`EXPORT(Arg/1)`.</highlight></codeline>
<codeline lineno="21"><highlight class="comment">//$=<sp/>math::EXPORT(1.2345)</highlight></codeline>
<codeline lineno="22"><highlight class="comment">//$=<sp/>math::EXPORT(-1.2345)</highlight></codeline>
<codeline lineno="23"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>ml_real(CNAME(ml_real_value(Args[0])));<sp/>\</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MATH_NUMBER(NAME,<sp/>CNAME,<sp/>EXPORT)<sp/>\</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor">ML_METHOD_ANON(NAME<sp/>##<sp/>Method,<sp/>&quot;math::&quot;<sp/>#EXPORT);<sp/>\</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor">ML_METHOD(NAME<sp/>##<sp/>Method,<sp/>MLRealT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"></highlight><highlight class="comment">/*@math::EXPORT</highlight></codeline>
<codeline lineno="34"><highlight class="comment">//&gt;real</highlight></codeline>
<codeline lineno="35"><highlight class="comment">//<sp/>Returns<sp/>:mini:`EXPORT(Arg/1)`.</highlight></codeline>
<codeline lineno="36"><highlight class="comment">//$=<sp/>math::EXPORT(1.2345)</highlight></codeline>
<codeline lineno="37"><highlight class="comment">//$=<sp/>math::EXPORT(-1.2345)</highlight></codeline>
<codeline lineno="38"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>complex<sp/>double<sp/>Result<sp/>=<sp/>c<sp/>##<sp/>CNAME(ml_real_value(Args[0]));<sp/>\</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(fabs(cimag(Result))<sp/>&lt;=<sp/>DBL_EPSILON)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_real(creal(Result));<sp/>\</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_complex(Result);<sp/>\</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor">ML_METHOD(NAME<sp/>##<sp/>Method,<sp/>MLComplexT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="comment">/*@math::EXPORT</highlight></codeline>
<codeline lineno="49"><highlight class="comment">//&gt;complex</highlight></codeline>
<codeline lineno="50"><highlight class="comment">//<sp/>Returns<sp/>:mini:`EXPORT(Arg/1)`.</highlight></codeline>
<codeline lineno="51"><highlight class="comment">//$=<sp/>math::EXPORT(1.2345<sp/>+<sp/>6.789i)</highlight></codeline>
<codeline lineno="52"><highlight class="comment">//$=<sp/>math::EXPORT(-1.2345<sp/>+<sp/>6.789i)</highlight></codeline>
<codeline lineno="53"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>complex<sp/>double<sp/>Result<sp/>=<sp/>c<sp/>##<sp/>CNAME(ml_complex_value(Args[0]));<sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(fabs(cimag(Result))<sp/>&lt;=<sp/>DBL_EPSILON)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_real(creal(Result));<sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_complex(Result);<sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MATH_NUMBER_KEEP_REAL(NAME,<sp/>CNAME,<sp/>EXPORT)<sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor">ML_METHOD_ANON(NAME<sp/>##<sp/>Method,<sp/>&quot;math::&quot;<sp/>#EXPORT);<sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor">ML_METHOD(NAME<sp/>##<sp/>Method,<sp/>MLRealT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"></highlight><highlight class="comment">/*@math::EXPORT</highlight></codeline>
<codeline lineno="67"><highlight class="comment">//&gt;real</highlight></codeline>
<codeline lineno="68"><highlight class="comment">//<sp/>Returns<sp/>:mini:`EXPORT(Arg/1)`.</highlight></codeline>
<codeline lineno="69"><highlight class="comment">//$=<sp/>math::EXPORT(1.2345)</highlight></codeline>
<codeline lineno="70"><highlight class="comment">//$=<sp/>math::EXPORT(-1.2345)</highlight></codeline>
<codeline lineno="71"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>ml_real(CNAME(ml_real_value(Args[0])));<sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor">ML_METHOD(NAME<sp/>##<sp/>Method,<sp/>MLComplexT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"></highlight><highlight class="comment">/*@math::EXPORT</highlight></codeline>
<codeline lineno="77"><highlight class="comment">//&gt;complex</highlight></codeline>
<codeline lineno="78"><highlight class="comment">//<sp/>Returns<sp/>:mini:`EXPORT(Arg/1)`.</highlight></codeline>
<codeline lineno="79"><highlight class="comment">//$=<sp/>math::EXPORT(1.2345<sp/>+<sp/>6.789i)</highlight></codeline>
<codeline lineno="80"><highlight class="comment">//$=<sp/>math::EXPORT(-1.2345<sp/>+<sp/>6.789i)</highlight></codeline>
<codeline lineno="81"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>complex<sp/>double<sp/>Result<sp/>=<sp/>c<sp/>##<sp/>CNAME(ml_complex_value(Args[0]));<sp/>\</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(fabs(cimag(Result))<sp/>&lt;=<sp/>DBL_EPSILON)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_real(creal(Result));<sp/>\</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_complex(Result);<sp/>\</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MATH_NUMBER(NAME,<sp/>CNAME,<sp/>EXPORT)<sp/>\</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor">ML_METHOD_ANON(NAME<sp/>##<sp/>Method,<sp/>&quot;math::&quot;<sp/>#EXPORT);<sp/>\</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor">ML_METHOD(NAME<sp/>##<sp/>Method,<sp/>MLRealT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"></highlight><highlight class="comment">/*@math::EXPORT</highlight></codeline>
<codeline lineno="97"><highlight class="comment">//&gt;real</highlight></codeline>
<codeline lineno="98"><highlight class="comment">//<sp/>Returns<sp/>:mini:`EXPORT(Arg/1)`.</highlight></codeline>
<codeline lineno="99"><highlight class="comment">//$=<sp/>math::EXPORT(1.2345)</highlight></codeline>
<codeline lineno="100"><highlight class="comment">//$=<sp/>math::EXPORT(-1.2345)</highlight></codeline>
<codeline lineno="101"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>ml_real(CNAME(ml_real_value(Args[0])));<sp/>\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MATH_NUMBER_KEEP_REAL(NAME,<sp/>CNAME,<sp/>EXPORT)<sp/>MATH_NUMBER(NAME,<sp/>CNAME,<sp/>EXPORT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MATH_REAL_REAL(NAME,<sp/>CNAME,<sp/>EXPORT)<sp/>\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor">ML_METHOD_DECL(NAME<sp/>##<sp/>Method,<sp/>&quot;math::&quot;<sp/>#EXPORT);<sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor">ML_METHOD(NAME<sp/>##<sp/>Method,<sp/>MLRealT,<sp/>MLRealT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"></highlight><highlight class="comment">/*@math::EXPORT</highlight></codeline>
<codeline lineno="114"><highlight class="comment">//&gt;real</highlight></codeline>
<codeline lineno="115"><highlight class="comment">//<sp/>Returns<sp/>:mini:`EXPORT(Arg/1,<sp/>Arg/2)`.</highlight></codeline>
<codeline lineno="116"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>ml_real(CNAME(ml_real_value(Args[0]),<sp/>ml_real_value(Args[1])));<sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;%&quot;</highlight><highlight class="normal">,<sp/>MLRealT,<sp/>MLRealT)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//&lt;X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//&lt;Y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//&gt;real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>remainder<sp/>of<sp/>:mini:`X`<sp/>on<sp/>division<sp/>by<sp/>:mini:`Y`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(fmod(ml_real_value(Args[0]),<sp/>ml_real_value(Args[1])));</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;^&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//&lt;X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//&lt;Y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//&gt;number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`X`<sp/>raised<sp/>to<sp/>the<sp/>power<sp/>of<sp/>:mini:`Y`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>N<sp/>:=<sp/>2<sp/>^<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>type(N)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>R<sp/>:=<sp/>2<sp/>^<sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>type(R)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Base<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Exponent<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Exponent<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>N<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Exponent)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Exponent<sp/>&amp;<sp/>1)<sp/>N<sp/>*=<sp/>Base;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base<sp/>*=<sp/>Base;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Exponent<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(N);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(pow(Base,<sp/>Exponent));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;^&quot;</highlight><highlight class="normal">,<sp/>MLRealT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//&lt;X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//&lt;Y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//&gt;number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`X`<sp/>raised<sp/>to<sp/>the<sp/>power<sp/>of<sp/>:mini:`Y`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>2.3<sp/>^<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(pow(ml_real_value(Args[0]),<sp/>ml_integer_value_fast(Args[1])));</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;^&quot;</highlight><highlight class="normal">,<sp/>MLRealT,<sp/>MLRealT)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//&lt;X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//&lt;Y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//&gt;number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`X`<sp/>raised<sp/>to<sp/>the<sp/>power<sp/>of<sp/>:mini:`Y`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>R<sp/>:=<sp/>2.3<sp/>^<sp/>1.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>type(R)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>C<sp/>:=<sp/>-2.3<sp/>^<sp/>1.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>type(C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Base<sp/>=<sp/>ml_real_value(Args[0]);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Exponent<sp/>=<sp/>ml_real_value(Args[1]);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Base<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Result<sp/>=<sp/>cpow(Base,<sp/>Exponent);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(cimag(Result))<sp/>&lt;=<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(creal(Result));</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(Result);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(pow(Base,<sp/>Exponent));</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;^&quot;</highlight><highlight class="normal">,<sp/>MLComplexT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//&lt;X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//&lt;Y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//&gt;number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`X`<sp/>raised<sp/>to<sp/>the<sp/>power<sp/>of<sp/>:mini:`Y`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>(1<sp/>+<sp/>2i)<sp/>^<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Base<sp/>=<sp/>ml_complex_value(Args[0]);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Power<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Power<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(0);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Power<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>Power<sp/>&lt;<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>Base;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--Power<sp/>&gt;<sp/>0)<sp/>Result<sp/>*=<sp/>Base;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>cpow(Base,<sp/>Power);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(cimag(Result))<sp/>&lt;=<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(creal(Result));</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(Result);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;^&quot;</highlight><highlight class="normal">,<sp/>MLComplexT,<sp/>MLNumberT)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//&lt;X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//&lt;Y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//&gt;number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`X`<sp/>raised<sp/>to<sp/>the<sp/>power<sp/>of<sp/>:mini:`Y`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>(1<sp/>+<sp/>2i)<sp/>^<sp/>(2<sp/>+<sp/>3i)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>V<sp/>=<sp/>cpow(ml_complex_value(Args[0]),<sp/>ml_complex_value(Args[1]));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(cimag(V))<sp/>&lt;=<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(creal(V));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(V);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;^&quot;</highlight><highlight class="normal">,<sp/>MLNumberT,<sp/>MLComplexT)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//&lt;X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//&lt;Y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//&gt;number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`X`<sp/>raised<sp/>to<sp/>the<sp/>power<sp/>of<sp/>:mini:`Y`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>2.3<sp/>^<sp/>(1<sp/>+<sp/>2i)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>V<sp/>=<sp/>cpow(ml_complex_value(Args[0]),<sp/>ml_complex_value(Args[1]));</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(cimag(V))<sp/>&lt;<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(creal(V));</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(V);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;!&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//&lt;N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>factorial<sp/>of<sp/>:mini:`N`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>!10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&gt;<sp/>20)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Factorials<sp/>over<sp/>20<sp/>are<sp/>not<sp/>supported<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>F<sp/>=<sp/>N;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--N<sp/>&gt;<sp/>1)<sp/>F<sp/>*=<sp/>N;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(F);</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIN(X,<sp/>Y)<sp/>(X<sp/>&lt;<sp/>Y)<sp/>?<sp/>X<sp/>:<sp/>Y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;!&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//&lt;N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//&lt;R</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>ways<sp/>of<sp/>choosing<sp/>:mini:`R`<sp/>elements<sp/>from<sp/>:mini:`N`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>C<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(K<sp/>&gt;<sp/>N<sp/>-<sp/>K)<sp/>K<sp/>=<sp/>N<sp/>-<sp/>K;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>K;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C<sp/>*=<sp/>(N<sp/>-<sp/>I);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C<sp/>/=<sp/>(I<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(C);</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal">ML_METHOD_DECL(GCDMethod,<sp/></highlight><highlight class="stringliteral">&quot;math::gcd&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal">ML_METHOD(GCDMethod,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//@gcd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>greatest<sp/>common<sp/>divisor<sp/>of<sp/>:mini:`A`<sp/>and<sp/>:mini:`B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>A<sp/>=<sp/>labs(ml_integer_value_fast(Args[0]));</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>B<sp/>=<sp/>labs(ml_integer_value_fast(Args[1]));</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(B<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Shift<sp/>=<sp/>__builtin_ctzl(A<sp/>|<sp/>B);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>A<sp/>&gt;&gt;=<sp/>__builtin_ctz(A);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B<sp/>&gt;&gt;=<sp/>__builtin_ctz(B);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A<sp/>&gt;<sp/>B)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C<sp/>=<sp/>B;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B<sp/>=<sp/>A;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>=<sp/>C;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B<sp/>=<sp/>B<sp/>-<sp/>A;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(B<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(A<sp/>&lt;&lt;<sp/>Shift);</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">MATH_NUMBER_KEEP_REAL(Acos,<sp/>acos,<sp/>acos);</highlight></codeline>
<codeline lineno="297"><highlight class="normal">MATH_NUMBER_KEEP_REAL(Asin,<sp/>asin,<sp/>asin);</highlight></codeline>
<codeline lineno="298"><highlight class="normal">MATH_NUMBER_KEEP_REAL(Atan,<sp/>atan,<sp/>atan);</highlight></codeline>
<codeline lineno="299"><highlight class="normal">ML_METHOD(AtanMethod,<sp/>MLRealT,<sp/>MLRealT)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//@math::atan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//&gt;real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`atan(Arg/2<sp/>/<sp/>Arg/1)`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(atan2(ml_real_value(Args[0]),<sp/>ml_real_value(Args[1])));</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal">MATH_REAL(Ceil,<sp/>ceil,<sp/>ceil);</highlight></codeline>
<codeline lineno="306"><highlight class="normal">MATH_NUMBER_KEEP_REAL(Cos,<sp/>cos,<sp/>cos);</highlight></codeline>
<codeline lineno="307"><highlight class="normal">MATH_NUMBER_KEEP_REAL(Cosh,<sp/>cosh,<sp/>cosh);</highlight></codeline>
<codeline lineno="308"><highlight class="normal">MATH_NUMBER_KEEP_REAL(Exp,<sp/>exp,<sp/>exp);</highlight></codeline>
<codeline lineno="309"><highlight class="normal">MATH_REAL(Abs,<sp/>fabs,<sp/>abs);</highlight></codeline>
<codeline lineno="310"><highlight class="normal">ML_METHOD(AbsMethod,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="comment">//@abs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">//&lt;N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>absolute<sp/>value<sp/>of<sp/>:mini:`N`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(labs(ml_integer_value_fast(Args[0])));</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__USE_GNU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal">complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>clog10(complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Z)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clog(Z)<sp/>/<sp/>log(10);</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal">MATH_REAL(Floor,<sp/>floor,<sp/>floor);</highlight></codeline>
<codeline lineno="329"><highlight class="normal">ML_METHOD(FloorMethod,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment">//@floor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">//&lt;N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>floor<sp/>of<sp/>:mini:`N`<sp/>(:mini:`=<sp/>N`<sp/>for<sp/>an<sp/>integer).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal">MATH_NUMBER(Log,<sp/>log,<sp/>log);</highlight></codeline>
<codeline lineno="337"><highlight class="normal">MATH_NUMBER(Log10,<sp/>log10,<sp/>log10);</highlight></codeline>
<codeline lineno="338"><highlight class="normal">MATH_NUMBER_KEEP_REAL(Sin,<sp/>sin,<sp/>sin);</highlight></codeline>
<codeline lineno="339"><highlight class="normal">MATH_NUMBER_KEEP_REAL(Sinh,<sp/>sinh,<sp/>sinh);</highlight></codeline>
<codeline lineno="340"><highlight class="normal">MATH_NUMBER(Sqrt,<sp/>sqrt,<sp/>sqrt);</highlight></codeline>
<codeline lineno="341"><highlight class="normal">ML_METHOD(SqrtMethod,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">//@math::sqrt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer|real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>square<sp/>root<sp/>of<sp/>:mini:`Arg/1`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>N<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(csqrt(N));</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(-NAN);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&lt;=<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>X<sp/>=<sp/>N<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>X1<sp/>=<sp/>(X<sp/>+<sp/>N<sp/>/<sp/>X)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(X1<sp/>&gt;=<sp/>X)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X<sp/>=<sp/>X1;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(X<sp/>*<sp/>X<sp/>==<sp/>N)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(X);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(sqrt(N));</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal">ML_METHOD_ANON(SquareMethod,<sp/></highlight><highlight class="stringliteral">&quot;math::square&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="365"><highlight class="normal">ML_METHOD(SquareMethod,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//@math::square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">//&lt;N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`N<sp/>*<sp/>N`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>math::square(10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>N<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(N<sp/>*<sp/>N);</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal">ML_METHOD(SquareMethod,<sp/>MLRealT)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">//@math::square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//&lt;R</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">//&gt;real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`R<sp/>*<sp/>R`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>math::square(1.234)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>ml_real_value(Args[0]);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(N<sp/>*<sp/>N);</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal">ML_METHOD(SquareMethod,<sp/>MLComplexT)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">//@math::square</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//&lt;C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">//&gt;complex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`C<sp/>*<sp/>C`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>math::square(1<sp/>+<sp/>2i)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>ml_complex_value(Args[0]);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(N<sp/>*<sp/>N);</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal">MATH_NUMBER_KEEP_REAL(Tan,<sp/>tan,<sp/>tan);</highlight></codeline>
<codeline lineno="396"><highlight class="normal">MATH_NUMBER_KEEP_REAL(Tanh,<sp/>tanh,<sp/>tanh);</highlight></codeline>
<codeline lineno="397"><highlight class="normal">MATH_REAL(Erf,<sp/>erf,<sp/>erf);</highlight></codeline>
<codeline lineno="398"><highlight class="normal">MATH_REAL(Erfc,<sp/>erfc,<sp/>erfc);</highlight></codeline>
<codeline lineno="399"><highlight class="normal">MATH_REAL_REAL(Hypot,<sp/>hypot,<sp/>hypot);</highlight></codeline>
<codeline lineno="400"><highlight class="normal">MATH_REAL(Gamma,<sp/>lgamma,<sp/>gamma);</highlight></codeline>
<codeline lineno="401"><highlight class="normal">MATH_NUMBER_KEEP_REAL(Acosh,<sp/>acosh,<sp/>acosh);</highlight></codeline>
<codeline lineno="402"><highlight class="normal">MATH_NUMBER_KEEP_REAL(Asinh,<sp/>asinh,<sp/>asinh);</highlight></codeline>
<codeline lineno="403"><highlight class="normal">MATH_NUMBER_KEEP_REAL(Atanh,<sp/>atanh,<sp/>atanh);</highlight></codeline>
<codeline lineno="404"><highlight class="normal">MATH_REAL(Cbrt,<sp/>cbrt,<sp/>cbrt);</highlight></codeline>
<codeline lineno="405"><highlight class="normal">MATH_REAL(Expm1,<sp/>expm1,<sp/>expm1);</highlight></codeline>
<codeline lineno="406"><highlight class="normal">MATH_REAL(Log1p,<sp/>log1p,<sp/>log1p);</highlight></codeline>
<codeline lineno="407"><highlight class="normal">MATH_REAL_REAL(Rem,<sp/>remainder,<sp/>rem);</highlight></codeline>
<codeline lineno="408"><highlight class="normal">MATH_REAL(Round,<sp/>round,<sp/>round);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal">ML_METHOD(RoundMethod,<sp/>MLRealT,<sp/>MLRealT)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//@math::round</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//&gt;real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`round(Arg/1<sp/>*<sp/>Arg/2)<sp/>/<sp/>Arg/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>math::round(1.2345,<sp/>100)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>math::round(-1.2345,<sp/>32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Scale<sp/>=<sp/>ml_real_value(Args[1]);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(round(ml_real_value(Args[0])<sp/>*<sp/>Scale)<sp/>/<sp/>Scale);</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>logit(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>X)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>log(X<sp/>/<sp/>(1<sp/>-<sp/>X));</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal">MATH_REAL(Logit,<sp/>logit,<sp/>logit);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal">ML_METHOD_ANON(ArgMethod,<sp/></highlight><highlight class="stringliteral">&quot;math::arg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal">ML_METHOD(ArgMethod,<sp/>MLRealT)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//@arg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//&lt;R</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">//&gt;real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>complex<sp/>argument<sp/>of<sp/>:mini:`R`<sp/>(:mini:`=<sp/>0`<sp/>for<sp/>a<sp/>real<sp/>number).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(0.0);</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal">ML_METHOD_ANON(ConjMethod,<sp/></highlight><highlight class="stringliteral">&quot;math::conj&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal">ML_METHOD(ConjMethod,<sp/>MLRealT)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment">//@conj</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="comment">//&lt;R</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="comment">//&gt;real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>complex<sp/>conjugate<sp/>of<sp/>:mini:`R`<sp/>(:mini:`=<sp/>R`<sp/>for<sp/>a<sp/>real<sp/>number).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal">ML_METHOD(AbsMethod,<sp/>MLComplexT)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="comment">//@abs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="comment">//&lt;Z</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">//&gt;real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>absolute<sp/>value<sp/>(magnitude)<sp/>of<sp/>:mini:`Z`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(cabs(ml_complex_value(Args[0])));</highlight></codeline>
<codeline lineno="454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal">ML_METHOD(ArgMethod,<sp/>MLComplexT)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment">//@arg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="comment">//&lt;Z</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="comment">//&gt;real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>complex<sp/>argument<sp/>of<sp/>:mini:`Z`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(carg(ml_complex_value(Args[0])));</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal">ML_METHOD(ConjMethod,<sp/>MLComplexT)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">//@conj</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="comment">//&lt;Z</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="comment">//&gt;real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>complex<sp/>conjugate<sp/>of<sp/>:mini:`Z`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(conj(ml_complex_value(Args[0])));</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="475"><highlight class="comment">ML_DEF(math::pi);</highlight></codeline>
<codeline lineno="476"><highlight class="comment">//&gt;real</highlight></codeline>
<codeline lineno="477"><highlight class="comment">//<sp/>Pi.</highlight></codeline>
<codeline lineno="478"><highlight class="comment"></highlight></codeline>
<codeline lineno="479"><highlight class="comment">ML_DEF(math::e);</highlight></codeline>
<codeline lineno="480"><highlight class="comment">//&gt;real</highlight></codeline>
<codeline lineno="481"><highlight class="comment">//<sp/>Euler&apos;s<sp/>constant.</highlight></codeline>
<codeline lineno="482"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal">ML_TYPE(MLRandomT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;random&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal">ML_FUNCTION(MLRandomSeed)<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="comment">//@random::seed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>srandom(ml_integer_value(Args[0]));</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_math_init(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Globals)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_math_init.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>MLRandomT-&gt;Constructor<sp/>=<sp/>ml_method(</highlight><highlight class="stringliteral">&quot;random&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLRandomT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;seed&quot;</highlight><highlight class="normal">,<sp/>MLRandomSeed);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Globals)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;math&quot;</highlight><highlight class="normal">,<sp/>ml_module(</highlight><highlight class="stringliteral">&quot;math&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;gcd&quot;</highlight><highlight class="normal">,<sp/>GCDMethod,</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;acos&quot;</highlight><highlight class="normal">,<sp/>AcosMethod,</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;asin&quot;</highlight><highlight class="normal">,<sp/>AsinMethod,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;atan&quot;</highlight><highlight class="normal">,<sp/>AtanMethod,</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ceil&quot;</highlight><highlight class="normal">,<sp/>CeilMethod,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;cos&quot;</highlight><highlight class="normal">,<sp/>CosMethod,</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;cosh&quot;</highlight><highlight class="normal">,<sp/>CoshMethod,</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exp&quot;</highlight><highlight class="normal">,<sp/>ExpMethod,</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;abs&quot;</highlight><highlight class="normal">,<sp/>AbsMethod,</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;floor&quot;</highlight><highlight class="normal">,<sp/>FloorMethod,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;log&quot;</highlight><highlight class="normal">,<sp/>LogMethod,</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;log10&quot;</highlight><highlight class="normal">,<sp/>Log10Method,</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;logit&quot;</highlight><highlight class="normal">,<sp/>LogitMethod,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sin&quot;</highlight><highlight class="normal">,<sp/>SinMethod,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sinh&quot;</highlight><highlight class="normal">,<sp/>SinhMethod,</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sqrt&quot;</highlight><highlight class="normal">,<sp/>SqrtMethod,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;square&quot;</highlight><highlight class="normal">,<sp/>SquareMethod,</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;√&quot;</highlight><highlight class="normal">,<sp/>SqrtMethod,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;tan&quot;</highlight><highlight class="normal">,<sp/>TanMethod,</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;tanh&quot;</highlight><highlight class="normal">,<sp/>TanhMethod,</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;erf&quot;</highlight><highlight class="normal">,<sp/>ErfMethod,</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;erfc&quot;</highlight><highlight class="normal">,<sp/>ErfcMethod,</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;hypot&quot;</highlight><highlight class="normal">,<sp/>HypotMethod,</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;gamma&quot;</highlight><highlight class="normal">,<sp/>GammaMethod,</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;acosh&quot;</highlight><highlight class="normal">,<sp/>AcoshMethod,</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;asinh&quot;</highlight><highlight class="normal">,<sp/>AsinhMethod,</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;atanh&quot;</highlight><highlight class="normal">,<sp/>AtanhMethod,</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;cbrt&quot;</highlight><highlight class="normal">,<sp/>CbrtMethod,</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;∛&quot;</highlight><highlight class="normal">,<sp/>CbrtMethod,</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expm1&quot;</highlight><highlight class="normal">,<sp/>Expm1Method,</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;log1p&quot;</highlight><highlight class="normal">,<sp/>Log1pMethod,</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;rem&quot;</highlight><highlight class="normal">,<sp/>RemMethod,</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;round&quot;</highlight><highlight class="normal">,<sp/>RoundMethod,</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;arg&quot;</highlight><highlight class="normal">,<sp/>ArgMethod,</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;conj&quot;</highlight><highlight class="normal">,<sp/>ConjMethod,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;pi&quot;</highlight><highlight class="normal">,<sp/>ml_real(M_PI),</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;π&quot;</highlight><highlight class="normal">,<sp/>ml_real(M_PI),</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,<sp/>ml_real(M_E),</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ℯ&quot;</highlight><highlight class="normal">,<sp/>ml_real(M_E),</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL));</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;random&quot;</highlight><highlight class="normal">,<sp/>MLRandomT);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ml_math.c"/>
  </compounddef>
</doxygen>
