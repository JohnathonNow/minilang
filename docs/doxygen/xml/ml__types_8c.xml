<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__types_8c" kind="file" language="C++">
    <compoundname>ml_types.c</compoundname>
    <includes refid="minilang_8h" local="yes">minilang.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes refid="sha256_8h" local="yes">sha256.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdint.h</includes>
    <includes refid="ml__compiler2_8h" local="yes">ml_compiler2.h</includes>
    <includes refid="ml__runtime_8h" local="yes">ml_runtime.h</includes>
    <includes refid="ml__number_8h" local="yes">ml_number.h</includes>
    <includes refid="ml__string_8h" local="yes">ml_string.h</includes>
    <includes refid="ml__method_8h" local="yes">ml_method.h</includes>
    <includes refid="ml__list_8h" local="yes">ml_list.h</includes>
    <includes refid="ml__map_8h" local="yes">ml_map.h</includes>
    <includes refid="ml__set_8h" local="yes">ml_set.h</includes>
    <includes local="no">regex.h</includes>
    <includes local="yes">ml_types_init.c</includes>
    <incdepgraph>
      <node id="13">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>ml_bytecode.h</label>
        <link refid="ml__bytecode_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>ml_compiler2.h</label>
        <link refid="ml__compiler2_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>ml_expr_types.h</label>
        <link refid="ml__expr__types_8h_source"/>
      </node>
      <node id="28">
        <label>ml_list.h</label>
        <link refid="ml__list_8h_source"/>
      </node>
      <node id="17">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>ml_map.h</label>
        <link refid="ml__map_8h_source"/>
      </node>
      <node id="27">
        <label>ml_method.h</label>
        <link refid="ml__method_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>ml_number.h</label>
        <link refid="ml__number_8h_source"/>
      </node>
      <node id="23">
        <label>ml_opcodes.h</label>
        <link refid="ml__opcodes_8h_source"/>
      </node>
      <node id="7">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>ml_set.h</label>
        <link refid="ml__set_8h_source"/>
      </node>
      <node id="26">
        <label>ml_string.h</label>
        <link refid="ml__string_8h_source"/>
      </node>
      <node id="1">
        <label>src/ml_types.c</label>
        <link refid="ml__types_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>sha256.h</label>
        <link refid="sha256_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="18">
        <label>gc/gc.h</label>
      </node>
      <node id="16">
        <label>limits.h</label>
      </node>
      <node id="15">
        <label>ml_config.h</label>
      </node>
      <node id="32">
        <label>ml_types_init.c</label>
      </node>
      <node id="31">
        <label>regex.h</label>
      </node>
      <node id="6">
        <label>setjmp.h</label>
      </node>
      <node id="11">
        <label>stdarg.h</label>
      </node>
      <node id="20">
        <label>stddef.h</label>
      </node>
      <node id="14">
        <label>stdint.h</label>
      </node>
      <node id="9">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="10">
        <label>string.h</label>
      </node>
      <node id="4">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structml__typed__fn__entry__t" prot="public">ml_typed_fn_entry_t</innerclass>
    <innerclass refid="structml__union__type__t" prot="public">ml_union_type_t</innerclass>
    <innerclass refid="structml__type__case__t" prot="public">ml_type_case_t</innerclass>
    <innerclass refid="structml__type__switch__t" prot="public">ml_type_switch_t</innerclass>
    <innerclass refid="structml__compare__state__t" prot="public">ml_compare_state_t</innerclass>
    <innerclass refid="structml__comp__state__t" prot="public">ml_comp_state_t</innerclass>
    <innerclass refid="structml__any__switch__t" prot="public">ml_any_switch_t</innerclass>
    <innerclass refid="structml__find__refs__t" prot="public">ml_find_refs_t</innerclass>
    <innerclass refid="structml__partial__function__t" prot="public">ml_partial_function_t</innerclass>
    <innerclass refid="structml__argless__function__t" prot="public">ml_argless_function_t</innerclass>
    <innerclass refid="structml__tuple__assign__t" prot="public">ml_tuple_assign_t</innerclass>
    <innerclass refid="structml__tuple__call__t" prot="public">ml_tuple_call_t</innerclass>
    <innerclass refid="structml__tuple__visit__t" prot="public">ml_tuple_visit_t</innerclass>
    <innerclass refid="structml__tuple__iter__t" prot="public">ml_tuple_iter_t</innerclass>
    <innerclass refid="structml__tuple__compare__state__t" prot="public">ml_tuple_compare_state_t</innerclass>
    <innerclass refid="structml__exchange__t" prot="public">ml_exchange_t</innerclass>
    <innerclass refid="structml__weak__ref__t" prot="public">ml_weak_ref_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__types_8c_1aebec330325aff5cbc7d9c9248e2cae4a" prot="public" static="no">
        <name>ML_CATEGORY</name>
        <initializer>&quot;type&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="26" column="10" bodyfile="src/ml_types.c" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__types_8c_1a5c090be5e6b0464e389154bf9ed44568" prot="public" static="no">
        <name>ML_TYPED_FN_LOCK</name>
        <param></param>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="305" column="9" bodyfile="src/ml_types.c" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__types_8c_1acad5c2dad5961386c2365ad4eaec0160" prot="public" static="no">
        <name>ML_TYPED_FN_UNLOCK</name>
        <param></param>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="306" column="9" bodyfile="src/ml_types.c" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__types_8c_1adc84c293ea55fe29564d8a4679daafd6" prot="public" static="no">
        <name>ml_comp_any_any_any</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>ML_METHODVX(NAME, MLAnyT, MLAnyT, MLAnyT) { \
/*&gt;<ref refid="structml__value__t" kindref="compound">any</ref>|nil
// Returns :mini:`Arg/n` if :mini:`Arg/1 SYMBOL Arg/2 SYMBOL ... SYMBOL Arg/n` and :mini:`nil` otherwise.
*/\
	<ref refid="structml__compare__state__t" kindref="compound">ml_compare_state_t</ref> *State = xnew(<ref refid="structml__compare__state__t" kindref="compound">ml_compare_state_t</ref>, Count - 1, <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *); \
	State-&gt;Base.Caller = Caller; \
	State-&gt;Base.Context = Caller-&gt;Context; \
	State-&gt;Base.run = (ml_state_fn)ml_compare_state_run; \
	State-&gt;Comparison = ml_method(NAME); \
	for (int I = 2; I &lt; Count; ++I) State-&gt;Values[I - 1] = Args[I]; \
	State-&gt;Args = State-&gt;Values; \
	State-&gt;End = State-&gt;Args + (Count - 2); \
	return ml_call((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *)State, State-&gt;Comparison, 2, Args); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1262" column="9" bodyfile="src/ml_types.c" bodystart="1260" bodyend="1272"/>
      </memberdef>
      <memberdef kind="define" id="ml__types_8c_1a756233db9c6cb510d88c8d85e6af1c70" prot="public" static="no">
        <name>ml_comp_method_boolean_boolean</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>ML_METHOD(#NAME, MLBooleanT, MLBooleanT) { \
/*&gt;boolean|nil
// Returns :mini:`Arg/2` if :mini:`Arg/1 SYMBOL Arg/2` and :mini:`nil` otherwise.
//$= true NAME true
//$= true NAME false
//$= false NAME true
//$= false NAME false
*/\
	<ref refid="structml__boolean__t" kindref="compound">ml_boolean_t</ref> *BooleanA = (<ref refid="structml__boolean__t" kindref="compound">ml_boolean_t</ref> *)Args[0]; \
	<ref refid="structml__boolean__t" kindref="compound">ml_boolean_t</ref> *BooleanB = (<ref refid="structml__boolean__t" kindref="compound">ml_boolean_t</ref> *)Args[1]; \
	return BooleanA-&gt;Value SYMBOL BooleanB-&gt;Value ? Args[1] : MLNil; \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2768" column="9" bodyfile="src/ml_types.c" bodystart="2760" bodyend="2766"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ml__types_8c_1a386a1a7bd5d89b620258a20d3f10f53f" prot="public" static="no">
        <type>struct ml_typed_fn_entry_t</type>
        <definition>typedef struct ml_typed_fn_entry_t ml_typed_fn_entry_t</definition>
        <argsstring></argsstring>
        <name>ml_typed_fn_entry_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="310" column="34" bodyfile="src/ml_types.c" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__types_8c_1a80688ff282816ec77a091f5925ff51eb" prot="public" static="no">
        <type>struct ml_partial_function_t</type>
        <definition>typedef struct ml_partial_function_t ml_partial_function_t</definition>
        <argsstring></argsstring>
        <name>ml_partial_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1766" column="23"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="ml__types_8c_1a080bc27a5d78537392a4e410120c68f3" prot="public" static="yes" mutable="no">
        <type><ref refid="structinthash__t" kindref="compound">inthash_t</ref></type>
        <definition>inthash_t MLTypedFns[1]</definition>
        <argsstring>[1]</argsstring>
        <name>MLTypedFns</name>
        <initializer>= {INTHASH_INIT}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="318" column="18" bodyfile="src/ml_types.c" bodystart="318" bodyend="318"/>
      </memberdef>
      <memberdef kind="variable" id="ml__types_8c_1a88950e1c1a38a4e9e24e3459d63971c5" prot="public" static="yes" mutable="no">
        <type><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref></type>
        <definition>ml_integer_t One[1]</definition>
        <argsstring>[1]</argsstring>
        <name>One</name>
        <initializer>= {{MLIntegerT, 1}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1174" column="21" bodyfile="src/ml_types.c" bodystart="1174" bodyend="1174"/>
      </memberdef>
      <memberdef kind="variable" id="ml__types_8c_1ad94b790e5962feb5a654b959502e7634" prot="public" static="yes" mutable="no">
        <type><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref></type>
        <definition>ml_integer_t NegOne[1]</definition>
        <argsstring>[1]</argsstring>
        <name>NegOne</name>
        <initializer>= {{MLIntegerT, -1}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1175" column="21" bodyfile="src/ml_types.c" bodystart="1175" bodyend="1175"/>
      </memberdef>
      <memberdef kind="variable" id="ml__types_8c_1a2a523802d8ecdcaff761efe547c417d0" prot="public" static="yes" mutable="no">
        <type><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref></type>
        <definition>ml_integer_t Zero[1]</definition>
        <argsstring>[1]</argsstring>
        <name>Zero</name>
        <initializer>= {{MLIntegerT, 0}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1176" column="21" bodyfile="src/ml_types.c" bodystart="1176" bodyend="1176"/>
      </memberdef>
      <memberdef kind="variable" id="ml__types_8c_1ac43d969fbe5a342abed50e864648d8a6" prot="public" static="no" mutable="no">
        <type><ref refid="structml__boolean__t" kindref="compound">ml_boolean_t</ref></type>
        <definition>ml_boolean_t MLFalse[1]</definition>
        <argsstring>[1]</argsstring>
        <name>MLFalse</name>
        <initializer>= {{MLBooleanT, &quot;false&quot;, 0}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2668" column="14" bodyfile="src/ml_types.c" bodystart="2668" bodyend="2668"/>
      </memberdef>
      <memberdef kind="variable" id="ml__types_8c_1ab754c24228b373da8e45aae165e1be22" prot="public" static="no" mutable="no">
        <type><ref refid="structml__boolean__t" kindref="compound">ml_boolean_t</ref></type>
        <definition>ml_boolean_t MLTrue[1]</definition>
        <argsstring>[1]</argsstring>
        <name>MLTrue</name>
        <initializer>= {{MLBooleanT, &quot;true&quot;, 1}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2669" column="14" bodyfile="src/ml_types.c" bodystart="2669" bodyend="2669"/>
      </memberdef>
      <memberdef kind="variable" id="ml__types_8c_1a5166672f4c2db0d30705fd43099d36e9" prot="public" static="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t* MLBooleans[2]</definition>
        <argsstring>[2]</argsstring>
        <name>MLBooleans</name>
        <initializer>= {
	[0] = (<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *)MLFalse,
	[1] = (<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *)MLTrue
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2671" column="19" bodyfile="src/ml_types.c" bodystart="2671" bodyend="2674"/>
      </memberdef>
      <memberdef kind="variable" id="ml__types_8c_1acb691b8ab8295533b6548e21857794df" prot="public" static="no" mutable="no">
        <type><ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref></type>
        <definition>ml_externals_t MLExternals[1]</definition>
        <argsstring>[1]</argsstring>
        <name>MLExternals</name>
        <initializer>= {{MLExternalSetT, NULL, {INTHASH_INIT}, {STRINGMAP_INIT}}}</initializer>
        <briefdescription>
<para>external </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2869" column="16" bodyfile="src/ml_types.c" bodystart="2869" bodyend="2869"/>
      </memberdef>
      <memberdef kind="variable" id="ml__types_8c_1a8cd875ae3f5bb2fa5e01a84dd0011b53" prot="public" static="yes" mutable="no">
        <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref></type>
        <definition>stringmap_t MLDeserializers[1]</definition>
        <argsstring>[1]</argsstring>
        <name>MLDeserializers</name>
        <initializer>= {STRINGMAP_INIT}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="3023" column="20" bodyfile="src/ml_types.c" bodystart="3023" bodyend="3023"/>
      </memberdef>
      <memberdef kind="variable" id="ml__types_8c_1a5b3025f795889e855f6fe91f81a3c006" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLWeakRefT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLWeakRefT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="3248" column="18" declfile="src/ml_types.c" declline="3248" declcolumn="18"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__types_8c_1adc895ef23d985715d7a3e22520123677" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(IterateMethod, &quot;iterate&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>IterateMethod</type>
        </param>
        <param>
          <type>&quot;iterate&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="28" column="1" declfile="src/ml_types.c" declline="28" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1af886356cd5a0fd5d87ad4e9e25e4d5c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(ValueMethod, &quot;value&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>ValueMethod</type>
        </param>
        <param>
          <type>&quot;value&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="29" column="1" declfile="src/ml_types.c" declline="29" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a6837da818d6bab89641372af9e01f466" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(KeyMethod, &quot;key&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>KeyMethod</type>
        </param>
        <param>
          <type>&quot;key&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="30" column="1" declfile="src/ml_types.c" declline="30" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a81d9b308abfe048c422b8b738bec990d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(NextMethod, &quot;next&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>NextMethod</type>
        </param>
        <param>
          <type>&quot;next&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="31" column="1" declfile="src/ml_types.c" declline="31" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a225e5cdb82e79b99264653a7273473e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(CompareMethod, &quot;&lt;&gt;&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>CompareMethod</type>
        </param>
        <param>
          <type>&quot;&lt;&gt;&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="32" column="1" declfile="src/ml_types.c" declline="32" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1acd0a2de58721b1dc2cf3284d78fb8c7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(MinMethod, &quot;min&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>MinMethod</type>
        </param>
        <param>
          <type>&quot;min&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="33" column="1" declfile="src/ml_types.c" declline="33" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a2086eca2abd32d5f39a30b7139a954f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(MaxMethod, &quot;max&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>MaxMethod</type>
        </param>
        <param>
          <type>&quot;max&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="34" column="1" declfile="src/ml_types.c" declline="34" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a6450cab80257d60b331e872fe580f82a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(IndexMethod, &quot;[]&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>IndexMethod</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="35" column="1" declfile="src/ml_types.c" declline="35" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ae8823f9d313924831740aa116870da26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(SymbolMethod, &quot;::&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>SymbolMethod</type>
        </param>
        <param>
          <type>&quot;::&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="36" column="1" declfile="src/ml_types.c" declline="36" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a5435946dd9ad9aff013ace788d5a56a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(CallMethod, &quot;()&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>CallMethod</type>
        </param>
        <param>
          <type>&quot;()&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="37" column="1" declfile="src/ml_types.c" declline="37" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ab3742d0117852c7016c03956dfa2246b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(AssignMethod, &quot;:=&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>AssignMethod</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="38" column="1" declfile="src/ml_types.c" declline="38" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1acec277f1943f7ab9e213b8a2d64ac216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(EqualMethod, &quot;=&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>EqualMethod</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="39" column="1" declfile="src/ml_types.c" declline="39" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a2bc76a7b908b9db72924ffabfc1f8b01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(LessMethod, &quot;&lt;&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>LessMethod</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="40" column="1" declfile="src/ml_types.c" declline="40" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a01e81e23233ae3fcfa2ed1f3c548037c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(GreaterMethod, &quot;&gt;&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>GreaterMethod</type>
        </param>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="41" column="1" declfile="src/ml_types.c" declline="41" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a078b029afff9cdeaccd9091882fb986b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(NotEqualMethod, &quot;!=&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>NotEqualMethod</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="42" column="1" declfile="src/ml_types.c" declline="42" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a2b4d9fc87c8ddd8e859cf4be0890c953" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(LessEqualMethod, &quot;&lt;=&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>LessEqualMethod</type>
        </param>
        <param>
          <type>&quot;&lt;=&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="43" column="1" declfile="src/ml_types.c" declline="43" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a2da46da139d017d1c8f070e838380c89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(GreaterEqualMethod, &quot;&gt;=&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>GreaterEqualMethod</type>
        </param>
        <param>
          <type>&quot;&gt;=&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="44" column="1" declfile="src/ml_types.c" declline="44" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a45b04317972628227dbc17f0d4c251fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(AddMethod, &quot;+&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>AddMethod</type>
        </param>
        <param>
          <type>&quot;+&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="45" column="1" declfile="src/ml_types.c" declline="45" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a9294dc1082eed852c4e40e058760b47d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(MulMethod, &quot;*&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>MulMethod</type>
        </param>
        <param>
          <type>&quot;*&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="46" column="1" declfile="src/ml_types.c" declline="46" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a375faffc97d8d86a6e0c7efd13261636" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(AndMethod, &quot;/\\&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>AndMethod</type>
        </param>
        <param>
          <type>&quot;/\\&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="47" column="1" declfile="src/ml_types.c" declline="47" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aa045d70233dd692f7e156af557c1a19e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(OrMethod, &quot;\\/&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>OrMethod</type>
        </param>
        <param>
          <type>&quot;\\/&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="48" column="1" declfile="src/ml_types.c" declline="48" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a484e8b82cca10d9ecda0306f283cde54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(XorMethod, &quot;&gt;&lt;&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>XorMethod</type>
        </param>
        <param>
          <type>&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="49" column="1" declfile="src/ml_types.c" declline="49" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a2b1ac18c5296a74d8e9336512190ad85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(RangeMethod, &quot;..&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>RangeMethod</type>
        </param>
        <param>
          <type>&quot;..&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="50" column="1" declfile="src/ml_types.c" declline="50" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1af7ead48504d78951875c0088ba663eb8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uintptr_t</type>
        <definition>static uintptr_t rotl</definition>
        <argsstring>(uintptr_t X, unsigned int N)</argsstring>
        <name>rotl</name>
        <param>
          <type>uintptr_t</type>
          <declname>X</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="52" column="25" bodyfile="src/ml_types.c" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a42d65fa3b62e5cfb96923fcc2e8b997b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_INTERFACE</definition>
        <argsstring>(MLAnyT,(), &quot;any&quot;,.Rank=1)</argsstring>
        <name>ML_INTERFACE</name>
        <param>
          <type>MLAnyT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;any&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Rank</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="59" column="1" declfile="src/ml_types.c" declline="59" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a1d9527ceb93ccd4e507e1527d0d431a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_INTERFACE</definition>
        <argsstring>(MLSequenceT,(), &quot;sequence&quot;)</argsstring>
        <name>ML_INTERFACE</name>
        <param>
          <type>MLSequenceT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;sequence&quot;</type>
        </param>
        <briefdescription>
<para>any </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="63" column="1" declfile="src/ml_types.c" declline="63" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a69a4ec9904a67be844cd8ceed93d2dbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_INTERFACE</definition>
        <argsstring>(MLFunctionT,(), &quot;function&quot;)</argsstring>
        <name>ML_INTERFACE</name>
        <param>
          <type>MLFunctionT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;function&quot;</type>
        </param>
        <briefdescription>
<para>sequence </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="67" column="1" declfile="src/ml_types.c" declline="67" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aaa4156156c384aba904c797a03b7be8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ml_function_source</definition>
        <argsstring>(ml_value_t *Value, const char **Source, int *Line)</argsstring>
        <name>ml_function_source</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>Source</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>Line</declname>
        </param>
        <briefdescription>
<para>function </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="71" column="5" bodyfile="src/ml_types.c" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a5ef958052f579529a3dcd5fc7d8d3a36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;source&quot;, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;source&quot;</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="77" column="1" bodyfile="src/ml_types.c" bodystart="77" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a8f5ab78e3162399acc6dfce578eff296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLType)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>type</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="87" column="1" bodyfile="src/ml_types.c" bodystart="87" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1acfe7c1e1fdbe42a6efcc012624860e34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long ml_type_hash</definition>
        <argsstring>(ml_type_t *Type)</argsstring>
        <name>ml_type_hash</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="97" column="6" bodyfile="src/ml_types.c" bodystart="97" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a98eaed4815f6143a34777b5a61f11588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_type_call</definition>
        <argsstring>(ml_state_t *Caller, ml_type_t *Type, int Count, ml_value_t **Args)</argsstring>
        <name>ml_type_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="101" column="6" bodyfile="src/ml_types.c" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ab3c3920298575a9b790201bbbd79bab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLTypeT,(MLFunctionT), &quot;type&quot;,.hash=(void *) ml_type_hash,.call=(void *) ml_type_call,.Constructor=(ml_value_t *) MLType)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLTypeT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;type&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>hash</declname>
          <defval>(void *) ml_type_hash</defval>
          <briefdescription><para>type </para>
</briefdescription>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_type_call</defval>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLType</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="105" column="1" declfile="src/ml_types.c" declline="105" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a17f216249380c8315a9fffc541eccb59" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ML_TYPED_FN</definition>
        <argsstring>(ml_value_is_constant, MLTypeT, ml_value_t *Value)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_value_is_constant</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="114" column="12" bodyfile="src/ml_types.c" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a695af5de887e67be1a67917a8a3e2168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;name&quot;, MLTypeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;name&quot;</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>type</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="118" column="1" bodyfile="src/ml_types.c" bodystart="118" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a07a70f5d433a0c89955dac17025ba694" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;rank&quot;, MLTypeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;rank&quot;</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>type</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="127" column="1" bodyfile="src/ml_types.c" bodystart="127" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1adbb13883074155cfc4f0c7efe53eb48c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_type_exports_fn</definition>
        <argsstring>(const char *Name, void *Value, ml_value_t *Exports)</argsstring>
        <name>ml_type_exports_fn</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Exports</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="136" column="12" bodyfile="src/ml_types.c" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a03384ab3333005a2e362d90c6280bb2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;exports&quot;, MLTypeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;exports&quot;</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="141" column="1" bodyfile="src/ml_types.c" bodystart="141" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a1601b18c08c85718a31314ceed7b4156" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;constructor&quot;, MLTypeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;constructor&quot;</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="151" column="1" bodyfile="src/ml_types.c" bodystart="151" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a900af811da3173ac5a262ca089409638" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;parents&quot;, MLTypeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;parents&quot;</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>type</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="212" column="1" bodyfile="src/ml_types.c" bodystart="212" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1af79437bf43f4af2bb1c027760d08c931" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_default_call</definition>
        <argsstring>(ml_state_t *Caller, ml_value_t *Value, int Count, ml_value_t **Args)</argsstring>
        <name>ml_default_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="229" column="6" bodyfile="src/ml_types.c" bodystart="229" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a093661bf7854acd034da312aaa49f89f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long ml_default_hash</definition>
        <argsstring>(ml_value_t *Value, ml_hash_chain_t *Chain)</argsstring>
        <name>ml_default_hash</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref> *</type>
          <declname>Chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="239" column="6" bodyfile="src/ml_types.c" bodystart="239" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a73bf3edecce945aeb176908e1964ba0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_default_assign</definition>
        <argsstring>(ml_state_t *Caller, ml_value_t *Ref, ml_value_t *Value)</argsstring>
        <name>ml_default_assign</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Ref</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="249" column="6" bodyfile="src/ml_types.c" bodystart="249" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a898c6631f391ae4c28335557e45b04b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_type_init</definition>
        <argsstring>(ml_type_t *Type,...)</argsstring>
        <name>ml_type_init</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="253" column="6" bodyfile="src/ml_types.c" bodystart="253" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aeca7d2568ebec62d0b16da0b097031fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
        <definition>ml_type_t * ml_type</definition>
        <argsstring>(ml_type_t *Parent, const char *Name)</argsstring>
        <name>ml_type</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Parent</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="267" column="11" bodyfile="src/ml_types.c" bodystart="267" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a8c748aae794a8370aa9be9d69e938333" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_type_add_parent</definition>
        <argsstring>(ml_type_t *Type, ml_type_t *Parent)</argsstring>
        <name>ml_type_add_parent</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Type</declname>
        </param>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="280" column="6" bodyfile="src/ml_types.c" bodystart="280" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a7e2f917c975783372ba1f6aec5dabfb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * ml_typed_fn_get</definition>
        <argsstring>(ml_type_t *Type, void *TypedFn)</argsstring>
        <name>ml_typed_fn_get</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>TypedFn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="320" column="6" bodyfile="src/ml_types.c" bodystart="320" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a17afe233e5fbfafbabe7de73fc448794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_typed_fn_set</definition>
        <argsstring>(ml_type_t *Type, void *TypedFn, void *Function)</argsstring>
        <name>ml_typed_fn_set</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>TypedFn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="340" column="6" bodyfile="src/ml_types.c" bodystart="340" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ab24455896255a3c9f3298949a1dea295" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLTypeUnionT,(MLTypeT), &quot;type::union&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLTypeUnionT</type>
        </param>
        <param>
          <type>(MLTypeT)</type>
        </param>
        <param>
          <type>&quot;type::union&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="354" column="1" declfile="src/ml_types.c" declline="354" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a4aef6aa8c06c2d2a78c6ba4281a19778" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
        <definition>ml_type_t * ml_union_type</definition>
        <argsstring>(int NumTypes, ml_type_t *Types[])</argsstring>
        <name>ml_union_type</name>
        <param>
          <type>int</type>
          <declname>NumTypes</declname>
        </param>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Types</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="357" column="11" bodyfile="src/ml_types.c" bodystart="357" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a026ee4b42081eb8c1a94dee0dfd9ec46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;|&quot;, MLTypeT, MLTypeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;|&quot;</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="380" column="1" bodyfile="src/ml_types.c" bodystart="380" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a42b4a2a15f6b684826474c5839f94af9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;|&quot;, MLTypeUnionT, MLTypeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;|&quot;</type>
        </param>
        <param>
          <type>MLTypeUnionT</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="401" column="1" bodyfile="src/ml_types.c" bodystart="401" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a4878d835eb1577d7320651ead3bc42ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;|&quot;, MLTypeT, MLTypeUnionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;|&quot;</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <param>
          <type>MLTypeUnionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="422" column="1" bodyfile="src/ml_types.c" bodystart="422" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ad659ca221561c97bbebaccfe57fbab89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;?&quot;, MLTypeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;?&quot;</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="443" column="1" bodyfile="src/ml_types.c" bodystart="443" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1af7470f664e5234a64a2b9c5f8d7afa39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;?&quot;, MLTypeUnionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;?&quot;</type>
        </param>
        <param>
          <type>MLTypeUnionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="462" column="1" bodyfile="src/ml_types.c" bodystart="462" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1af6f7cc51ffbed864058172a6df171516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLTypeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="481" column="1" bodyfile="src/ml_types.c" bodystart="481" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a6602bb9d960578fafc4d3a56719601a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;::&quot;, MLTypeT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;::&quot;</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>type</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="491" column="1" bodyfile="src/ml_types.c" bodystart="491" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a7d0be7bed59cd58205f4e5ed1cc7fcc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLNilT,(MLFunctionT, MLSequenceT), &quot;nil&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLNilT</type>
        </param>
        <param>
          <type>(MLFunctionT, MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;nil&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="603" column="1" declfile="src/ml_types.c" declline="603" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a669614d5548cb31a1726d0eb6e7e79c4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ML_TYPED_FN</definition>
        <argsstring>(ml_value_is_constant, MLNilT, ml_value_t *Value)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_value_is_constant</type>
        </param>
        <param>
          <type>MLNilT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="606" column="12" bodyfile="src/ml_types.c" bodystart="606" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a6c4f8c064b14ce41cfbbcc5130dafd6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLSomeFn)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLSomeFn</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="610" column="1" bodyfile="src/ml_types.c" bodystart="610" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ae437f02fa55eb1644f14e52b0438e98a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLSomeT,(MLFunctionT), &quot;some&quot;,.Constructor=(ml_value_t *) MLSomeFn)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLSomeT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;some&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLSomeFn</defval>
          <briefdescription><para>internal </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="615" column="1" declfile="src/ml_types.c" declline="615" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a7cb33ba61eeeab3fc05389314fa45047" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ML_TYPED_FN</definition>
        <argsstring>(ml_value_is_constant, MLSomeT, ml_value_t *Value)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_value_is_constant</type>
        </param>
        <param>
          <type>MLSomeT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="620" column="12" bodyfile="src/ml_types.c" bodystart="620" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a026a13d0df24a1818dcf1753a7bb328f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_blank_assign</definition>
        <argsstring>(ml_state_t *Caller, ml_value_t *Blank, ml_value_t *Value)</argsstring>
        <name>ml_blank_assign</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Blank</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="624" column="13" bodyfile="src/ml_types.c" bodystart="624" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a424cc8ea23d39912c69c1e9f94f51939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLBlankT,(), &quot;blank&quot;,.assign=ml_blank_assign)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLBlankT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;blank&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>assign</declname>
          <defval>ml_blank_assign</defval>
          <briefdescription><para>internal </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="628" column="1" declfile="src/ml_types.c" declline="628" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a299b4f502cc7b97ae984f18f06f2b9ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_VALUE</definition>
        <argsstring>(MLNil, MLNilT)</argsstring>
        <name>ML_VALUE</name>
        <param>
          <type>MLNil</type>
        </param>
        <param>
          <type>MLNilT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="633" column="1" declfile="src/ml_types.c" declline="633" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1af717bf1b0f1767a98054d910c8347577" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLNilT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLNilT</type>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="636" column="1" bodyfile="src/ml_types.c" bodystart="636" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a450f6820e06bb8478ddfaa3626f48bc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_VALUE</definition>
        <argsstring>(MLSome, MLSomeT)</argsstring>
        <name>ML_VALUE</name>
        <param>
          <type>MLSome</type>
        </param>
        <param>
          <type>MLSomeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="643" column="1" declfile="src/ml_types.c" declline="643" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1acdb35ab98cbf194d2d302fed2435b3f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLSomeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLSomeT</type>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="646" column="1" bodyfile="src/ml_types.c" bodystart="646" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a4b58e0a6a4f185584429be7ef271d5d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_VALUE</definition>
        <argsstring>(MLBlank, MLBlankT)</argsstring>
        <name>ML_VALUE</name>
        <param>
          <type>MLBlank</type>
        </param>
        <param>
          <type>MLBlankT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="653" column="1" declfile="src/ml_types.c" declline="653" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1af9a7fe89f4b283c913981ade8b99fa1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ml_is_subtype</definition>
        <argsstring>(ml_type_t *T, ml_type_t *U)</argsstring>
        <name>ml_is_subtype</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>T</declname>
        </param>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>U</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="729" column="5" bodyfile="src/ml_types.c" bodystart="729" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a6adfe649f280c7e3284b2aa682c77668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
        <definition>ml_type_t * ml_type_max</definition>
        <argsstring>(ml_type_t *T, ml_type_t *U)</argsstring>
        <name>ml_type_max</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>T</declname>
        </param>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>U</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="805" column="11" bodyfile="src/ml_types.c" bodystart="805" bodyend="841"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aa8835218d7a16809336c41ad229d628c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;*&quot;, MLTypeT, MLTypeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;*&quot;</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="843" column="1" bodyfile="src/ml_types.c" bodystart="843" bodyend="849"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ac20120f117ef298f91f433e3b83ef3af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;&quot;, MLTypeT, MLTypeT)</argsstring>
        <name>ML_METHOD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="851" column="1" bodyfile="src/ml_types.c" bodystart="851" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ad6b526677fa42aba1f98c451a9110c00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;=&quot;, MLTypeT, MLTypeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&lt;=&quot;</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="863" column="1" bodyfile="src/ml_types.c" bodystart="863" bodyend="873"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a8c515229caaebc5799d04a9413dad5d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&gt;&quot;, MLTypeT, MLTypeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="875" column="1" bodyfile="src/ml_types.c" bodystart="875" bodyend="885"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1afe0171737f819f3b3ea5038103f0b051" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&gt;=&quot;, MLTypeT, MLTypeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&gt;=&quot;</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="887" column="1" bodyfile="src/ml_types.c" bodystart="887" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a15bbb83eca6675a3b63d5e0485ad86cd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLNilT, ml_state_t *Caller, ml_value_t *Value)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLNilT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="910" column="13" bodyfile="src/ml_types.c" bodystart="910" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a6daa58b73325c45d957c9860b45521e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(MLVisit)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>MLVisit</type>
        </param>
        <briefdescription>
<para>general </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="918" column="1" bodyfile="src/ml_types.c" bodystart="918" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a91163783df516dcb478e446f99b8da01" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_visitor_call</definition>
        <argsstring>(ml_state_t *Caller, ml_visitor_t *Visitor, int Count, ml_value_t **Args)</argsstring>
        <name>ml_visitor_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref> *</type>
          <declname>Visitor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="938" column="13" bodyfile="src/ml_types.c" bodystart="938" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a929c63f6b9cad91c40b882512dde312d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLVisitorT,(MLFunctionT), &quot;visitor&quot;,.call=(void *) ml_visitor_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLVisitorT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;visitor&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_visitor_call</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="960" column="1" declfile="src/ml_types.c" declline="960" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a121c4c8287bc1c6e615922ff0569c017" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;visit&quot;, MLVisitorT, MLAnyT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;visit&quot;</type>
        </param>
        <param>
          <type>MLVisitorT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="971" column="1" bodyfile="src/ml_types.c" bodystart="971" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a4bd535d35e37058a19620c6b4bf68421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(CopyMethod, &quot;copy&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>CopyMethod</type>
        </param>
        <param>
          <type>&quot;copy&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="979" column="1" declfile="src/ml_types.c" declline="979" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a21e790d47256d069a79c79f6cec2c82d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(MLCopy)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>MLCopy</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="981" column="1" bodyfile="src/ml_types.c" bodystart="981" bodyend="998"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a1abf5dff58211646936843e91c45d66d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;copy&quot;, MLVisitorT, MLAnyT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;copy&quot;</type>
        </param>
        <param>
          <type>MLVisitorT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1000" column="1" bodyfile="src/ml_types.c" bodystart="1000" bodyend="1014"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a04a6912c75afe78852dff6c87a1019de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;const&quot;, MLVisitorT, MLAnyT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;const&quot;</type>
        </param>
        <param>
          <type>MLVisitorT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1016" column="1" bodyfile="src/ml_types.c" bodystart="1016" bodyend="1030"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aaa59e2b8e4f4f4ab4aa8addd4e4bc546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;in&quot;, MLAnyT, MLTypeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;in&quot;</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <briefdescription>
<para>any </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1034" column="1" bodyfile="src/ml_types.c" bodystart="1034" bodyend="1040"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a261944f60f2557cf1617b7b0ba3645f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_ANON</definition>
        <argsstring>(MLCompilerSwitch, &quot;compiler::switch&quot;)</argsstring>
        <name>ML_METHOD_ANON</name>
        <param>
          <type>MLCompilerSwitch</type>
        </param>
        <param>
          <type>&quot;compiler::switch&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1042" column="1" declfile="src/ml_types.c" declline="1042" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a420055ae8f63e4c11042894bb61225d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLCompilerSwitch, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLCompilerSwitch</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="1044" column="1" bodyfile="src/ml_types.c" bodystart="1044" bodyend="1047"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a4433549b6974e2a5e4a545355af8e1f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLCompilerSwitch, MLTypeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLCompilerSwitch</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="1049" column="1" bodyfile="src/ml_types.c" bodystart="1049" bodyend="1055"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a3ad7d3f478a24a742a1faef641faeb86" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_type_switch</definition>
        <argsstring>(ml_state_t *Caller, ml_type_switch_t *Switch, int Count, ml_value_t **Args)</argsstring>
        <name>ml_type_switch</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__type__switch__t" kindref="compound">ml_type_switch_t</ref> *</type>
          <declname>Switch</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1067" column="13" bodyfile="src/ml_types.c" bodystart="1067" bodyend="1074"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a8db0282cd68412fbf46117efb1b78a3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLTypeSwitchT,(MLFunctionT), &quot;type-switch&quot;,.call=(void *) ml_type_switch)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLTypeSwitchT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;type-switch&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_type_switch</defval>
          <briefdescription><para>internal </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1076" column="1" declfile="src/ml_types.c" declline="1076" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a203d54ee62e98b1832289a8ebb6f4f1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION_INLINE</definition>
        <argsstring>(MLTypeSwitch)</argsstring>
        <name>ML_FUNCTION_INLINE</name>
        <param>
          <type>MLTypeSwitch</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="1081" column="1" bodyfile="src/ml_types.c" bodystart="1081" bodyend="1108"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a2f6a2bb070c64b29b267cd3634c0cf3b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_serialize, MLTypeSwitchT, ml_type_switch_t *Switch)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_serialize</type>
        </param>
        <param>
          <type>MLTypeSwitchT</type>
        </param>
        <param>
          <type><ref refid="structml__type__switch__t" kindref="compound">ml_type_switch_t</ref> *</type>
          <declname>Switch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1110" column="19" bodyfile="src/ml_types.c" bodystart="1110" bodyend="1127"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ab99029669d6c4322eeaf3bfa92d2599b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_DESERIALIZER</definition>
        <argsstring>(&quot;type-switch&quot;)</argsstring>
        <name>ML_DESERIALIZER</name>
        <param>
          <type>&quot;type-switch&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1129" column="1" bodyfile="src/ml_types.c" bodystart="1129" bodyend="1155"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aa58ad31c484662813dc95ef0410ebb90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long ml_hash_chain</definition>
        <argsstring>(ml_value_t *Value, ml_hash_chain_t *Chain)</argsstring>
        <name>ml_hash_chain</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref> *</type>
          <declname>Chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1157" column="6" bodyfile="src/ml_types.c" bodystart="1157" bodyend="1164"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ae0b8a4b0d539a1970eb8ddbab0efe64b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODVZ</definition>
        <argsstring>(&quot;()&quot;, MLAnyT)</argsstring>
        <name>ML_METHODVZ</name>
        <param>
          <type>&quot;()&quot;</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="1180" column="1" bodyfile="src/ml_types.c" bodystart="1180" bodyend="1186"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1acc48183c7eebce1a517e3a965b6244ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;&gt;&quot;, MLAnyT, MLAnyT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&lt;&gt;&quot;</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1188" column="1" bodyfile="src/ml_types.c" bodystart="1188" bodyend="1201"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aedd57404882ea9e70fe49744e065fb74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;&gt;&quot;, MLNilT, MLAnyT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&lt;&gt;&quot;</type>
        </param>
        <param>
          <type>MLNilT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="1203" column="1" bodyfile="src/ml_types.c" bodystart="1203" bodyend="1206"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ac6fd98f7128e166035afcf1f68756d09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;&gt;&quot;, MLAnyT, MLNilT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&lt;&gt;&quot;</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <param>
          <type>MLNilT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="1208" column="1" bodyfile="src/ml_types.c" bodystart="1208" bodyend="1211"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a25d511c6d618f24d36d3376e043fb496" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;&gt;&quot;, MLNilT, MLNilT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&lt;&gt;&quot;</type>
        </param>
        <param>
          <type>MLNilT</type>
        </param>
        <param>
          <type>MLNilT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="1213" column="1" bodyfile="src/ml_types.c" bodystart="1213" bodyend="1216"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ad78278131a580a0dd67c56ae11f331b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;#&quot;, MLAnyT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;#&quot;</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1218" column="1" bodyfile="src/ml_types.c" bodystart="1218" bodyend="1224"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aac9f838ce40e071353393c812a4a1008" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_compare_state_run</definition>
        <argsstring>(ml_compare_state_t *State, ml_value_t *Result)</argsstring>
        <name>ml_compare_state_run</name>
        <param>
          <type><ref refid="structml__compare__state__t" kindref="compound">ml_compare_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1249" column="13" bodyfile="src/ml_types.c" bodystart="1249" bodyend="1258"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ad795e4a212ad95c42f453a9a4a768c0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml_comp_any_any_any</definition>
        <argsstring>(&quot;=&quot;,=)</argsstring>
        <name>ml_comp_any_any_any</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1274" column="1" declfile="src/ml_types.c" declline="1274" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a96429354f750a4787f425023821788d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml_comp_any_any_any</definition>
        <argsstring>(&quot;&lt;=&quot;,&lt;=)</argsstring>
        <name>ml_comp_any_any_any</name>
        <param>
          <type>&quot;&lt;=&quot;</type>
        </param>
        <param>
          <type>&lt;=</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1276" column="1" declfile="src/ml_types.c" declline="1276" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a8483b506979bb9e14f29d9845de304d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml_comp_any_any_any</definition>
        <argsstring>(&quot;&gt;&quot;, &gt;)</argsstring>
        <name>ml_comp_any_any_any</name>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1277" column="1" declfile="src/ml_types.c" declline="1277" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a6d6bb3633270180de695a13027c1d09f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml_comp_any_any_any</definition>
        <argsstring>(&quot;&gt;=&quot;, &gt;=)</argsstring>
        <name>ml_comp_any_any_any</name>
        <param>
          <type>&quot;&gt;=&quot;</type>
        </param>
        <param>
          <type>&gt;=</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1278" column="1" declfile="src/ml_types.c" declline="1278" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a102d034ad12ca14004c996b2754d8ce2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_distinct_state_run</definition>
        <argsstring>(ml_compare_state_t *State, ml_value_t *Result)</argsstring>
        <name>ml_distinct_state_run</name>
        <param>
          <type><ref refid="structml__compare__state__t" kindref="compound">ml_compare_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1280" column="13" bodyfile="src/ml_types.c" bodystart="1280" bodyend="1289"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a9fbdaf7a144a732682a40a1e7860f190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODVX</definition>
        <argsstring>(&quot;!=&quot;, MLAnyT, MLAnyT, MLAnyT)</argsstring>
        <name>ML_METHODVX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1291" column="1" bodyfile="src/ml_types.c" bodystart="1291" bodyend="1303"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a6cb03cd65ef7f11e45b7907fbd2959a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_min_state_run</definition>
        <argsstring>(ml_comp_state_t *State, ml_value_t *Result)</argsstring>
        <name>ml_min_state_run</name>
        <param>
          <type><ref refid="structml__comp__state__t" kindref="compound">ml_comp_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1310" column="13" bodyfile="src/ml_types.c" bodystart="1310" bodyend="1315"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ab613337d430f41342917003167515183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;min&quot;, MLAnyT, MLAnyT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;min&quot;</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1317" column="1" bodyfile="src/ml_types.c" bodystart="1317" bodyend="1329"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a508e338f57d9e841456e9356635c6168" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_max_state_run</definition>
        <argsstring>(ml_comp_state_t *State, ml_value_t *Result)</argsstring>
        <name>ml_max_state_run</name>
        <param>
          <type><ref refid="structml__comp__state__t" kindref="compound">ml_comp_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1331" column="13" bodyfile="src/ml_types.c" bodystart="1331" bodyend="1336"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a2a8f74970f3acabd344c18ca7b179182" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;max&quot;, MLAnyT, MLAnyT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;max&quot;</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1338" column="1" bodyfile="src/ml_types.c" bodystart="1338" bodyend="1350"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ab60dd3a48e1918393e017d5635bda8f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLAnyT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1352" column="1" bodyfile="src/ml_types.c" bodystart="1352" bodyend="1359"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a6e1ada279b2ef8752c40d5540f6efb66" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_any_switch</definition>
        <argsstring>(ml_state_t *Caller, ml_any_switch_t *Switch, int Count, ml_value_t **Args)</argsstring>
        <name>ml_any_switch</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__any__switch__t" kindref="compound">ml_any_switch_t</ref> *</type>
          <declname>Switch</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1367" column="13" bodyfile="src/ml_types.c" bodystart="1367" bodyend="1372"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a185f5287b4ccfacba3098e945fd7e52e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLAnySwitchT,(MLFunctionT), &quot;any-switch&quot;,.call=(void *) ml_any_switch)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLAnySwitchT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;any-switch&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_any_switch</defval>
          <briefdescription><para>internal </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1374" column="1" declfile="src/ml_types.c" declline="1374" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a0ba6ca40be0d9f0859f36e7bcceb663a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION_INLINE</definition>
        <argsstring>(MLAnySwitch)</argsstring>
        <name>ML_FUNCTION_INLINE</name>
        <param>
          <type>MLAnySwitch</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="1379" column="1" bodyfile="src/ml_types.c" bodystart="1379" bodyend="1391"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1acf7fee9f8e7e1c4d7564eb22e66f9530" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_value_set_name</definition>
        <argsstring>(ml_value_t *Value, const char *Name)</argsstring>
        <name>ml_value_set_name</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1393" column="6" bodyfile="src/ml_types.c" bodystart="1393" bodyend="1396"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a8cb204adc3a8e2d5dd02afb6a3b48f98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_value_find_all</definition>
        <argsstring>(ml_value_t *Value, void *Data, ml_value_find_fn RefFn)</argsstring>
        <name>ml_value_find_all</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>ml_value_find_fn</type>
          <declname>RefFn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1398" column="6" bodyfile="src/ml_types.c" bodystart="1398" bodyend="1402"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a74a7f8cc2292a047b9b9786884011245" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_find_all_fn</definition>
        <argsstring>(ml_find_refs_t *FindRefs, ml_value_t *Value, int HasRefs)</argsstring>
        <name>ml_find_all_fn</name>
        <param>
          <type><ref refid="structml__find__refs__t" kindref="compound">ml_find_refs_t</ref> *</type>
          <declname>FindRefs</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>HasRefs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1410" column="12" bodyfile="src/ml_types.c" bodystart="1410" bodyend="1416"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aac88462236078315436a16b90e519e42" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_find_all_typed_fn</definition>
        <argsstring>(ml_find_refs_t *FindRefs, ml_value_t *Value, int HasRefs)</argsstring>
        <name>ml_find_all_typed_fn</name>
        <param>
          <type><ref refid="structml__find__refs__t" kindref="compound">ml_find_refs_t</ref> *</type>
          <declname>FindRefs</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>HasRefs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1418" column="12" bodyfile="src/ml_types.c" bodystart="1418" bodyend="1424"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1af26a63570f0b5ed122e82a07e9af2cda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLFindAll)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLFindAll</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>general</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="1426" column="1" bodyfile="src/ml_types.c" bodystart="1426" bodyend="1443"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a3f176cd90c96418ab1c256d8bb380f64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ml_value_is_constant</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_value_is_constant</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1445" column="5" bodyfile="src/ml_types.c" bodystart="1445" bodyend="1449"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ada2a688c5106d70a54431533d4bdf12f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLIsConstant)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLIsConstant</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>general</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="1451" column="1" bodyfile="src/ml_types.c" bodystart="1451" bodyend="1467"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ae73f12ecd8e7e2808051e632a4a4be06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_iterate</definition>
        <argsstring>(ml_state_t *Caller, ml_value_t *Value)</argsstring>
        <name>ml_iterate</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1471" column="6" bodyfile="src/ml_types.c" bodystart="1471" bodyend="1477"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ac43acf7cb1f818d158117bde4fd04970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_iter_value</definition>
        <argsstring>(ml_state_t *Caller, ml_value_t *Iter)</argsstring>
        <name>ml_iter_value</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1479" column="6" bodyfile="src/ml_types.c" bodystart="1479" bodyend="1485"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ac5128aa4a2c0a4ceba680d70e99e9ec9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_iter_key</definition>
        <argsstring>(ml_state_t *Caller, ml_value_t *Iter)</argsstring>
        <name>ml_iter_key</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1487" column="6" bodyfile="src/ml_types.c" bodystart="1487" bodyend="1493"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ad17892853f1c491d8f8f0d1efbeab631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_iter_next</definition>
        <argsstring>(ml_state_t *Caller, ml_value_t *Iter)</argsstring>
        <name>ml_iter_next</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1495" column="6" bodyfile="src/ml_types.c" bodystart="1495" bodyend="1501"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a1b18ff0ce327d06817b067507747fb43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;!&quot;, MLFunctionT, MLTupleT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;!&quot;</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>function</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="1505" column="1" bodyfile="src/ml_types.c" bodystart="1505" bodyend="1514"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a7a56cdfcb29f4d10c83cd76ed958f6c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;!&quot;, MLFunctionT, MLListT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;!&quot;</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <param>
          <type>MLListT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>function</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="1516" column="1" bodyfile="src/ml_types.c" bodystart="1516" bodyend="1528"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ae16f715610205c148a2aa4bc08f90721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;!&quot;, MLFunctionT, MLMapT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;!&quot;</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <param>
          <type>MLMapT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>function</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="1530" column="1" bodyfile="src/ml_types.c" bodystart="1530" bodyend="1554"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a70b54e0112dcff304cb8ad83bd8d3cb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;!&quot;, MLFunctionT, MLTupleT, MLMapT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;!&quot;</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <param>
          <type>MLMapT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>function</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="1556" column="1" bodyfile="src/ml_types.c" bodystart="1556" bodyend="1585"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ab4ab946e8b83fd1d753bfedc7bf67cce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;!&quot;, MLFunctionT, MLListT, MLMapT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;!&quot;</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <param>
          <type>MLListT</type>
        </param>
        <param>
          <type>MLMapT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>function</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="1587" column="1" bodyfile="src/ml_types.c" bodystart="1587" bodyend="1615"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aaaabaa73b7b609fb67e29f59b4976555" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static void __attribute__</definition>
        <argsstring>((noinline))</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(noinline)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1617" column="8" bodyfile="src/ml_types.c" bodystart="1617" bodyend="1621"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a194202ce3f64c9fb8c1faa7694884416" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_cfunction_call</definition>
        <argsstring>(ml_state_t *Caller, ml_cfunction_t *Function, int Count, ml_value_t **Args)</argsstring>
        <name>ml_cfunction_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__cfunction__t" kindref="compound">ml_cfunction_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1623" column="13" bodyfile="src/ml_types.c" bodystart="1623" bodyend="1634"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a5474706af90eff477908ed06913dd2b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLCFunctionT,(MLFunctionT), &quot;c-function&quot;,.call=(void *) ml_cfunction_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLCFunctionT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;c-function&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_cfunction_call</defval>
          <briefdescription><para>internal </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1636" column="1" declfile="src/ml_types.c" declline="1636" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a4dab66076d1225501ffc21cdee9e4f58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_cfunction</definition>
        <argsstring>(void *Data, ml_callback_t Callback)</argsstring>
        <name>ml_cfunction</name>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>ml_callback_t</type>
          <declname>Callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1641" column="12" bodyfile="src/ml_types.c" bodystart="1641" bodyend="1647"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aa1b3fff1cb68ab1cb5b6d3ecab0c2fe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_cfunction2</definition>
        <argsstring>(void *Data, ml_callback_t Callback, const char *Source, int Line)</argsstring>
        <name>ml_cfunction2</name>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>ml_callback_t</type>
          <declname>Callback</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1649" column="12" bodyfile="src/ml_types.c" bodystart="1649" bodyend="1657"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ae962ec502f4f9114eea4417e200fae0e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ML_TYPED_FN</definition>
        <argsstring>(ml_function_source, MLCFunctionT, ml_cfunction_t *Function, const char **Source, int *Line)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_function_source</type>
        </param>
        <param>
          <type>MLCFunctionT</type>
        </param>
        <param>
          <type><ref refid="structml__cfunction__t" kindref="compound">ml_cfunction_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>Source</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>Line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1659" column="12" bodyfile="src/ml_types.c" bodystart="1659" bodyend="1667"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ac1fa914695e0dece66ce7432991a09df" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLCFunctionT, ml_state_t *Caller, ml_cfunction_t *Function)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLCFunctionT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__cfunction__t" kindref="compound">ml_cfunction_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1669" column="13" bodyfile="src/ml_types.c" bodystart="1669" bodyend="1671"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a7fc6b14583bed203e44e63e6588ebd9e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_cfunctionx_call</definition>
        <argsstring>(ml_state_t *Caller, ml_cfunctionx_t *Function, int Count, ml_value_t **Args)</argsstring>
        <name>ml_cfunctionx_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1679" column="13" bodyfile="src/ml_types.c" bodystart="1679" bodyend="1691"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a995fee951e68a924c104cceabb220a31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLCFunctionXT,(MLFunctionT), &quot;c-functionx&quot;,.call=(void *) ml_cfunctionx_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLCFunctionXT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;c-functionx&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_cfunctionx_call</defval>
          <briefdescription><para>internal </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1693" column="1" declfile="src/ml_types.c" declline="1693" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a4f12e606788420aea5100e7d98afaa98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_cfunctionx</definition>
        <argsstring>(void *Data, ml_callbackx_t Callback)</argsstring>
        <name>ml_cfunctionx</name>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>ml_callbackx_t</type>
          <declname>Callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1698" column="12" bodyfile="src/ml_types.c" bodystart="1698" bodyend="1704"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1acfca23baadd73cf2fdf43fa1f3b70484" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_cfunctionx2</definition>
        <argsstring>(void *Data, ml_callbackx_t Callback, const char *Source, int Line)</argsstring>
        <name>ml_cfunctionx2</name>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>ml_callbackx_t</type>
          <declname>Callback</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1706" column="12" bodyfile="src/ml_types.c" bodystart="1706" bodyend="1714"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a43fb5ecccf30aa6bd92c32d131e4dece" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ML_TYPED_FN</definition>
        <argsstring>(ml_function_source, MLCFunctionXT, ml_cfunctionx_t *Function, const char **Source, int *Line)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_function_source</type>
        </param>
        <param>
          <type>MLCFunctionXT</type>
        </param>
        <param>
          <type><ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>Source</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>Line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1716" column="12" bodyfile="src/ml_types.c" bodystart="1716" bodyend="1724"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aef87ab88d5081a70220af474c05d5843" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_cfunctionz_call</definition>
        <argsstring>(ml_state_t *Caller, ml_cfunctionx_t *Function, int Count, ml_value_t **Args)</argsstring>
        <name>ml_cfunctionz_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1726" column="13" bodyfile="src/ml_types.c" bodystart="1726" bodyend="1728"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a3792a0abd5b087816bdc4d24d111eeb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLCFunctionZT,(MLFunctionT), &quot;c-functionx&quot;,.call=(void *) ml_cfunctionz_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLCFunctionZT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;c-functionx&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_cfunctionz_call</defval>
          <briefdescription><para>internal </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1730" column="1" declfile="src/ml_types.c" declline="1730" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a252e978a7061780e27b57543de0cac41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_cfunctionz</definition>
        <argsstring>(void *Data, ml_callbackx_t Callback)</argsstring>
        <name>ml_cfunctionz</name>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>ml_callbackx_t</type>
          <declname>Callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1735" column="12" bodyfile="src/ml_types.c" bodystart="1735" bodyend="1741"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aeb48a5339734553aa56ba454a2fde388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_cfunctionz2</definition>
        <argsstring>(void *Data, ml_callbackx_t Callback, const char *Source, int Line)</argsstring>
        <name>ml_cfunctionz2</name>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>ml_callbackx_t</type>
          <declname>Callback</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1743" column="12" bodyfile="src/ml_types.c" bodystart="1743" bodyend="1751"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a5a30ce9a92200e9d3e18ae5a5a192cf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_return_nil</definition>
        <argsstring>(void *Data, int Count, ml_value_t **Args)</argsstring>
        <name>ml_return_nil</name>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1753" column="12" bodyfile="src/ml_types.c" bodystart="1753" bodyend="1755"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aef83dd25fbabc95164ac704ad4244e1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_identity</definition>
        <argsstring>(void *Data, int Count, ml_value_t **Args)</argsstring>
        <name>ml_identity</name>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1757" column="12" bodyfile="src/ml_types.c" bodystart="1757" bodyend="1759"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1af2402cd7e050b4559fa6bfd13693f53b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_partial_function_call</definition>
        <argsstring>(ml_state_t *Caller, ml_partial_function_t *Partial, int Count, ml_value_t **Args)</argsstring>
        <name>ml_partial_function_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__partial__function__t" kindref="compound">ml_partial_function_t</ref> *</type>
          <declname>Partial</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1780" column="13" bodyfile="src/ml_types.c" bodystart="1780" bodyend="1796"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a6984a77fd3bf08fcc095d5891b704298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLFunctionPartialT,(MLFunctionT, MLSequenceT), &quot;partial-function&quot;,.call=(void *) ml_partial_function_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLFunctionPartialT</type>
        </param>
        <param>
          <type>(MLFunctionT, MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;partial-function&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_partial_function_call</defval>
          <briefdescription><para>function </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1798" column="1" declfile="src/ml_types.c" declline="1798" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ae6c282373b99db9484e876f3c130edc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_partial_function</definition>
        <argsstring>(ml_value_t *Function, int Count)</argsstring>
        <name>ml_partial_function</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1803" column="12" bodyfile="src/ml_types.c" bodystart="1803" bodyend="1810"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a5d921d52fb2c715f5b9a4d50f7c80d26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_partial_function_set</definition>
        <argsstring>(ml_value_t *Partial0, size_t Index, ml_value_t *Value)</argsstring>
        <name>ml_partial_function_set</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Partial0</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Index</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1812" column="12" bodyfile="src/ml_types.c" bodystart="1812" bodyend="1817"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a7e4d1b9de1a6d3231d6c817a3272fca9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;arity&quot;, MLFunctionPartialT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;arity&quot;</type>
        </param>
        <param>
          <type>MLFunctionPartialT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>function</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="1819" column="1" bodyfile="src/ml_types.c" bodystart="1819" bodyend="1823"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a836ce473b085889a968be8b2a322f34a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;set&quot;, MLFunctionPartialT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;set&quot;</type>
        </param>
        <param>
          <type>MLFunctionPartialT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>function</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="1825" column="1" bodyfile="src/ml_types.c" bodystart="1825" bodyend="1829"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a0895e6de34c10a89543380b12f9bf40d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(&quot;[]&quot;, MLFunctionPartialT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>&quot;&quot;</type>
          <array>[]</array>
        </param>
        <param>
          <type>MLFunctionPartialT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>function</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="1831" column="1" bodyfile="src/ml_types.c" bodystart="1831" bodyend="1840"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ac9360d7bfb8991b2943a1b85d4eee3bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;$!&quot;, MLFunctionT, MLListT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;$!&quot;</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <param>
          <type>MLListT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>function</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="1842" column="1" bodyfile="src/ml_types.c" bodystart="1842" bodyend="1856"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ad9b816b19437b592257bff3807646a51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;!!&quot;, MLFunctionT, MLListT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;!!&quot;</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <param>
          <type>MLListT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>function</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="1858" column="1" bodyfile="src/ml_types.c" bodystart="1858" bodyend="1877"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a2efec3926a31539880fb626395191f9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(&quot;$&quot;, MLFunctionT, MLAnyT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>&quot;$&quot;</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>function</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="1879" column="1" bodyfile="src/ml_types.c" bodystart="1879" bodyend="1891"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a342fe5c7e16ad704abf16fb38ac539ec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLFunctionPartialT, ml_state_t *Caller, ml_partial_function_t *Partial)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLFunctionPartialT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__partial__function__t" kindref="compound">ml_partial_function_t</ref> *</type>
          <declname>Partial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1893" column="13" bodyfile="src/ml_types.c" bodystart="1893" bodyend="1896"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a448236d520e6ebb67d370d8703a5a08f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_argless_function_call</definition>
        <argsstring>(ml_state_t *Caller, ml_argless_function_t *Argless, int Count, ml_value_t **Args)</argsstring>
        <name>ml_argless_function_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__argless__function__t" kindref="compound">ml_argless_function_t</ref> *</type>
          <declname>Argless</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1903" column="13" bodyfile="src/ml_types.c" bodystart="1903" bodyend="1905"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a64b0bec92ef66f4edf402bc6d6e82ad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLFunctionArglessT,(MLFunctionT, MLSequenceT), &quot;argless-function&quot;,.call=(void *) ml_argless_function_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLFunctionArglessT</type>
        </param>
        <param>
          <type>(MLFunctionT, MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;argless-function&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_argless_function_call</defval>
          <briefdescription><para>internal </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1907" column="1" declfile="src/ml_types.c" declline="1907" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ac71114664ac966f9d4f74553ce0d58d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;/&quot;, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;/&quot;</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>function</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="1912" column="1" bodyfile="src/ml_types.c" bodystart="1912" bodyend="1921"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a5f936d02e092d9b4af0ac6281f93f082" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLFunctionArglessT, ml_state_t *Caller, ml_argless_function_t *Argless)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLFunctionArglessT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__argless__function__t" kindref="compound">ml_argless_function_t</ref> *</type>
          <declname>Argless</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1923" column="13" bodyfile="src/ml_types.c" bodystart="1923" bodyend="1925"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ae46906a2eab7949c5797e8b60848f090" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>static long ml_tuple_hash</definition>
        <argsstring>(ml_tuple_t *Tuple, ml_hash_chain_t *Chain)</argsstring>
        <name>ml_tuple_hash</name>
        <param>
          <type><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref> *</type>
          <declname>Tuple</declname>
        </param>
        <param>
          <type><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref> *</type>
          <declname>Chain</declname>
        </param>
        <briefdescription>
<para>tuple </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1930" column="13" bodyfile="src/ml_types.c" bodystart="1930" bodyend="1934"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aa32713164d3318536bf2a92626463315" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_tuple_deref</definition>
        <argsstring>(ml_tuple_t *Ref)</argsstring>
        <name>ml_tuple_deref</name>
        <param>
          <type><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref> *</type>
          <declname>Ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1936" column="19" bodyfile="src/ml_types.c" bodystart="1936" bodyend="1956"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1af1d0408c93589e97ae08382c184f39f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_tuple_assign_run</definition>
        <argsstring>(ml_tuple_assign_t *State, ml_value_t *Result)</argsstring>
        <name>ml_tuple_assign_run</name>
        <param>
          <type><ref refid="structml__tuple__assign__t" kindref="compound">ml_tuple_assign_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1965" column="13" bodyfile="src/ml_types.c" bodystart="1965" bodyend="1975"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a2e8461511775bf2289f2701f13170bce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_tuple_assign</definition>
        <argsstring>(ml_state_t *Caller, ml_tuple_t *Ref, ml_value_t *Values)</argsstring>
        <name>ml_tuple_assign</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref> *</type>
          <declname>Ref</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="1977" column="13" bodyfile="src/ml_types.c" bodystart="1977" bodyend="1988"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aea0caee60240748715781df41f71964a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_tuple_call_run</definition>
        <argsstring>(ml_tuple_call_t *State, ml_value_t *Result)</argsstring>
        <name>ml_tuple_call_run</name>
        <param>
          <type><ref refid="structml__tuple__call__t" kindref="compound">ml_tuple_call_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2009" column="13" bodyfile="src/ml_types.c" bodystart="2009" bodyend="2024"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a311cec820112631cfdb29c8655e2f26c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_tuple_call</definition>
        <argsstring>(ml_state_t *Caller, ml_tuple_t *Functions, int Count, ml_value_t **Args)</argsstring>
        <name>ml_tuple_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref> *</type>
          <declname>Functions</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2026" column="13" bodyfile="src/ml_types.c" bodystart="2026" bodyend="2038"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a7fedbb98f6bc0be0457cbbe4eb2f0331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLTuple)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLTuple</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>tuple</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="2040" column="1" bodyfile="src/ml_types.c" bodystart="2040" bodyend="2055"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a597cc73a0f9825fe4b52e406cd673b80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLTupleT,(MLFunctionT, MLSequenceT), &quot;tuple&quot;,.hash=(void *) ml_tuple_hash,.deref=(void *) ml_tuple_deref,.assign=(void *) ml_tuple_assign,.call=(void *) ml_tuple_call,.Constructor=(ml_value_t *) MLTuple)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLTupleT</type>
        </param>
        <param>
          <type>(MLFunctionT, MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;tuple&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>hash</declname>
          <defval>(void *) ml_tuple_hash</defval>
          <briefdescription><para>tuple </para>
</briefdescription>
        </param>
        <param>
          <type>.</type>
          <declname>deref</declname>
          <defval>(void *) ml_tuple_deref</defval>
        </param>
        <param>
          <type>.</type>
          <declname>assign</declname>
          <defval>(void *) ml_tuple_assign</defval>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_tuple_call</defval>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLTuple</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2057" column="1" declfile="src/ml_types.c" declline="2057" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ae13e721db699188c433847a01e6d1a7f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_value_find_all, MLTupleT, ml_tuple_t *Tuple, void *Data, ml_value_find_fn RefFn)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_value_find_all</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <param>
          <type><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref> *</type>
          <declname>Tuple</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>ml_value_find_fn</type>
          <declname>RefFn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2070" column="13" bodyfile="src/ml_types.c" bodystart="2070" bodyend="2073"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ad1da786023754e703ca06556b9f7ca81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_tuple</definition>
        <argsstring>(size_t Size)</argsstring>
        <name>ml_tuple</name>
        <param>
          <type>size_t</type>
          <declname>Size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2075" column="12" bodyfile="src/ml_types.c" bodystart="2075" bodyend="2080"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a6355ebf14b0030fadf3721fa2c3d6769" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_tuple_visit_run</definition>
        <argsstring>(ml_tuple_visit_t *State, ml_value_t *Value)</argsstring>
        <name>ml_tuple_visit_run</name>
        <param>
          <type><ref refid="structml__tuple__visit__t" kindref="compound">ml_tuple_visit_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2090" column="13" bodyfile="src/ml_types.c" bodystart="2090" bodyend="2098"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1acea9d9379df3cce09e53cf1acd8218df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;visit&quot;, MLVisitorT, MLTupleT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;visit&quot;</type>
        </param>
        <param>
          <type>MLVisitorT</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2100" column="1" bodyfile="src/ml_types.c" bodystart="2100" bodyend="2114"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a5d4de1c0ad0a65f286b36021b0f14a4a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_tuple_copy_run</definition>
        <argsstring>(ml_tuple_visit_t *State, ml_value_t *Value)</argsstring>
        <name>ml_tuple_copy_run</name>
        <param>
          <type><ref refid="structml__tuple__visit__t" kindref="compound">ml_tuple_visit_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2116" column="13" bodyfile="src/ml_types.c" bodystart="2116" bodyend="2125"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a99f7f5782665dc60fc7c3368235e3e7d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_tuple_copy</definition>
        <argsstring>(ml_state_t *Caller, ml_visitor_t *Visitor, ml_tuple_t *Source)</argsstring>
        <name>ml_tuple_copy</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref> *</type>
          <declname>Visitor</declname>
        </param>
        <param>
          <type><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref> *</type>
          <declname>Source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2127" column="13" bodyfile="src/ml_types.c" bodystart="2127" bodyend="2142"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a218b6d25b7c1c8b73d381c7776fc8bd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;copy&quot;, MLVisitorT, MLTupleT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;copy&quot;</type>
        </param>
        <param>
          <type>MLVisitorT</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2144" column="1" bodyfile="src/ml_types.c" bodystart="2144" bodyend="2150"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a5c488d7c7ca704ca193a5e42e39b8754" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;const&quot;, MLVisitorT, MLTupleT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;const&quot;</type>
        </param>
        <param>
          <type>MLVisitorT</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2152" column="1" bodyfile="src/ml_types.c" bodystart="2152" bodyend="2158"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a72f3d9de4cc85cc53b441b5532837d62" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ML_TYPED_FN</definition>
        <argsstring>(ml_value_is_constant, MLTupleT, ml_tuple_t *Tuple)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_value_is_constant</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <param>
          <type><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref> *</type>
          <declname>Tuple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2160" column="12" bodyfile="src/ml_types.c" bodystart="2160" bodyend="2165"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ae9bffa4140ad905a353c0d4a348237d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_tuplen</definition>
        <argsstring>(size_t Size, ml_value_t **Values)</argsstring>
        <name>ml_tuplen</name>
        <param>
          <type>size_t</type>
          <declname>Size</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2214" column="12" bodyfile="src/ml_types.c" bodystart="2214" bodyend="2220"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a781da074da646ee433bbc14d8ebeedd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_tuplev</definition>
        <argsstring>(size_t Size,...)</argsstring>
        <name>ml_tuplev</name>
        <param>
          <type>size_t</type>
          <declname>Size</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2222" column="12" bodyfile="src/ml_types.c" bodystart="2222" bodyend="2233"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a8f3d07715072ebb78a856e5cbb68348f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_unpack</definition>
        <argsstring>(ml_value_t *Value, int Index)</argsstring>
        <name>ml_unpack</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2237" column="12" bodyfile="src/ml_types.c" bodystart="2237" bodyend="2241"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a6962c7b559c090da9a8ad34e3ec799ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_unpack, MLNilT, ml_value_t *Value, int Index)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_unpack</type>
        </param>
        <param>
          <type>MLNilT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2243" column="19" bodyfile="src/ml_types.c" bodystart="2243" bodyend="2245"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a9c021e6ea5ead074ed6c015b132d2e19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;size&quot;, MLTupleT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;size&quot;</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>tuple</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="2247" column="1" bodyfile="src/ml_types.c" bodystart="2247" bodyend="2254"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a39ca38cbcdcc4a417ae2ef19591aad84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;[]&quot;, MLTupleT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&quot;</type>
          <array>[]</array>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>tuple</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="2256" column="1" bodyfile="src/ml_types.c" bodystart="2256" bodyend="2268"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aa179fd7dcda970f3c289f1fa2ae9c8f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLTupleIterT,(), &quot;tuple-iter&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLTupleIterT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;tuple-iter&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2276" column="1" declfile="src/ml_types.c" declline="2276" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aa904602f77de0e49cf0f293c50f8a451" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLTupleIterT, ml_state_t *Caller, ml_tuple_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLTupleIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__tuple__iter__t" kindref="compound">ml_tuple_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2279" column="13" bodyfile="src/ml_types.c" bodystart="2279" bodyend="2283"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1adc08d0dd68cfe0de3d5505f90eacec9b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLTupleIterT, ml_state_t *Caller, ml_tuple_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLTupleIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__tuple__iter__t" kindref="compound">ml_tuple_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2285" column="13" bodyfile="src/ml_types.c" bodystart="2285" bodyend="2287"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a2ab852b2653788129cdc6206f46caac5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLTupleIterT, ml_state_t *Caller, ml_tuple_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLTupleIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__tuple__iter__t" kindref="compound">ml_tuple_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2289" column="13" bodyfile="src/ml_types.c" bodystart="2289" bodyend="2291"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a418f3dc402fd9effc175a5a9e840488e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLTupleT, ml_state_t *Caller, ml_tuple_t *Tuple)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref> *</type>
          <declname>Tuple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2293" column="13" bodyfile="src/ml_types.c" bodystart="2293" bodyend="2301"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a0beb3a0099e68c097182d7fbcd61381c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLTupleT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>tuple</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="2303" column="1" bodyfile="src/ml_types.c" bodystart="2303" bodyend="2320"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a2b9ff1ff143705614dc04f4cad4cd1d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_unpack, MLTupleT, ml_tuple_t *Tuple, int Index)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_unpack</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <param>
          <type><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref> *</type>
          <declname>Tuple</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2322" column="19" bodyfile="src/ml_types.c" bodystart="2322" bodyend="2325"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ac07047a91f3cce13f9f8b82fb63ac6d1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_tuple_compare</definition>
        <argsstring>(ml_tuple_t *A, ml_tuple_t *B)</argsstring>
        <name>ml_tuple_compare</name>
        <param>
          <type><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref> *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2327" column="19" bodyfile="src/ml_types.c" bodystart="2327" bodyend="2350"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a62eb3ad56850db5c5b5d1cd73ce4e8fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;&gt;&quot;, MLTupleT, MLTupleT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&lt;&gt;&quot;</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>tuple</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="2352" column="1" bodyfile="src/ml_types.c" bodystart="2352" bodyend="2359"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a0fa34668294629e014626cc4988f7e54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLComparisonStateT,(MLStateT), &quot;comparison_state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLComparisonStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;comparison_state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2361" column="1" declfile="src/ml_types.c" declline="2361" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a450d44de98059c6b8c312e92c2837c0a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_tuple_compare_equal_run</definition>
        <argsstring>(ml_tuple_compare_state_t *State, ml_value_t *Result)</argsstring>
        <name>ml_tuple_compare_equal_run</name>
        <param>
          <type><ref refid="structml__tuple__compare__state__t" kindref="compound">ml_tuple_compare_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2372" column="13" bodyfile="src/ml_types.c" bodystart="2372" bodyend="2380"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ac26be2926d9aebdc91bc724571fcc30c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;=&quot;, MLTupleT, MLTupleT)</argsstring>
        <name>ML_METHODX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2382" column="1" bodyfile="src/ml_types.c" bodystart="2382" bodyend="2415"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a594675eba1e2b9068262a2c54c368737" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_tuple_compare_order_run</definition>
        <argsstring>(ml_tuple_compare_state_t *State, ml_value_t *Result)</argsstring>
        <name>ml_tuple_compare_order_run</name>
        <param>
          <type><ref refid="structml__tuple__compare__state__t" kindref="compound">ml_tuple_compare_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2465" column="13" bodyfile="src/ml_types.c" bodystart="2465" bodyend="2473" declfile="src/ml_types.c" declline="2452" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a4e798a1d6798233d1ba5146846d42b76" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_tuple_compare_order2_run</definition>
        <argsstring>(ml_tuple_compare_state_t *State, ml_value_t *Result)</argsstring>
        <name>ml_tuple_compare_order2_run</name>
        <param>
          <type><ref refid="structml__tuple__compare__state__t" kindref="compound">ml_tuple_compare_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2454" column="13" bodyfile="src/ml_types.c" bodystart="2454" bodyend="2463"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a7a7c19d84090f4de710638dba14a16e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;&lt;=&quot;, MLTupleT, MLTupleT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;&lt;=&quot;</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2519" column="1" bodyfile="src/ml_types.c" bodystart="2519" bodyend="2561"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a139d66967b2f43f50318845ed59acb50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;&gt;&quot;, MLTupleT, MLTupleT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2563" column="1" bodyfile="src/ml_types.c" bodystart="2563" bodyend="2605"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a94b32024a4dd10e6ab9d4bbac908951b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;&gt;=&quot;, MLTupleT, MLTupleT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;&gt;=&quot;</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2607" column="1" bodyfile="src/ml_types.c" bodystart="2607" bodyend="2649"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a3ba5e154d14909cec5af308711303256" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>static long ml_boolean_hash</definition>
        <argsstring>(ml_boolean_t *Boolean, ml_hash_chain_t *Chain)</argsstring>
        <name>ml_boolean_hash</name>
        <param>
          <type><ref refid="structml__boolean__t" kindref="compound">ml_boolean_t</ref> *</type>
          <declname>Boolean</declname>
        </param>
        <param>
          <type><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref> *</type>
          <declname>Chain</declname>
        </param>
        <briefdescription>
<para>boolean </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2654" column="13" bodyfile="src/ml_types.c" bodystart="2654" bodyend="2656"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a21f6dc347145ceb1193233f3a2504eb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLBooleanT,(), &quot;boolean&quot;,.hash=(void *) ml_boolean_hash)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLBooleanT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;boolean&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>hash</declname>
          <defval>(void *) ml_boolean_hash</defval>
          <briefdescription><para>boolean </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2658" column="1" declfile="src/ml_types.c" declline="2658" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a8d525a422b3aae1946db6f324cee2911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ml_boolean_value</definition>
        <argsstring>(const ml_value_t *Value)</argsstring>
        <name>ml_boolean_value</name>
        <param>
          <type>const <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2664" column="5" bodyfile="src/ml_types.c" bodystart="2664" bodyend="2666"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a4de417a9693be1993bc79d75ef524633" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_boolean</definition>
        <argsstring>(int Value)</argsstring>
        <name>ml_boolean</name>
        <param>
          <type>int</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2676" column="12" bodyfile="src/ml_types.c" bodystart="2676" bodyend="2678"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a0e123e7144cab41756ad50beb4ffe3c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ML_TYPED_FN</definition>
        <argsstring>(ml_value_is_constant, MLBooleanT, ml_value_t *Value)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_value_is_constant</type>
        </param>
        <param>
          <type>MLBooleanT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2680" column="12" bodyfile="src/ml_types.c" bodystart="2680" bodyend="2682"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a615d20fa18363f40f2ea7f59751190ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLBooleanT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLBooleanT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>boolean</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="2684" column="1" bodyfile="src/ml_types.c" bodystart="2684" bodyend="2695"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ac610530b92f44e2a0436780c13620de6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&quot;, MLBooleanT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&quot;</type>
        </param>
        <param>
          <type>MLBooleanT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>boolean</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="2697" column="1" bodyfile="src/ml_types.c" bodystart="2697" bodyend="2703"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a9646aba7aa0f29e02fbefeb8efab254f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(&quot;/\\&quot;, MLBooleanT, MLBooleanT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>&quot;/\\&quot;</type>
        </param>
        <param>
          <type>MLBooleanT</type>
        </param>
        <param>
          <type>MLBooleanT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>boolean</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="2705" column="1" bodyfile="src/ml_types.c" bodystart="2705" bodyend="2718"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1acd72fc087e1dc84203b181224fcf3a03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(&quot;\\/&quot;, MLBooleanT, MLBooleanT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>&quot;\\/&quot;</type>
        </param>
        <param>
          <type>MLBooleanT</type>
        </param>
        <param>
          <type>MLBooleanT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>boolean</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="2720" column="1" bodyfile="src/ml_types.c" bodystart="2720" bodyend="2733"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a65b4774a5658385a7b821e9b8b6befcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&gt;&lt;&quot;, MLBooleanT, MLBooleanT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>boolean</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="2735" column="1" bodyfile="src/ml_types.c" bodystart="2735" bodyend="2747"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a6a76132ea9dc29ab2cbd15a98b51f578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;&gt;&quot;, MLBooleanT, MLBooleanT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&lt;&gt;&quot;</type>
        </param>
        <param>
          <type>MLBooleanT</type>
        </param>
        <param>
          <type>MLBooleanT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>boolean</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="2749" column="1" bodyfile="src/ml_types.c" bodystart="2749" bodyend="2758"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a178a9f0badeed1ca67ea026b66c5e3fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml_comp_method_boolean_boolean</definition>
        <argsstring>(=,==)</argsstring>
        <name>ml_comp_method_boolean_boolean</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2768" column="1" declfile="src/ml_types.c" declline="2768" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a020752d5b913a6a9afe077e4d4711e09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml_comp_method_boolean_boolean</definition>
        <argsstring>(!=, !=)</argsstring>
        <name>ml_comp_method_boolean_boolean</name>
        <param>
          <type>!</type>
        </param>
        <param>
          <type>!</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2769" column="1" declfile="src/ml_types.c" declline="2769" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a8216b2c83affddc3a662a2f629c494bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml_comp_method_boolean_boolean</definition>
        <argsstring>(&lt;=,&lt;=)</argsstring>
        <name>ml_comp_method_boolean_boolean</name>
        <param>
          <type>&lt;=</type>
        </param>
        <param>
          <type>&lt;=</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2772" column="1" declfile="src/ml_types.c" declline="2772" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aaa74ad03967faaef98feace200c83e20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml_comp_method_boolean_boolean</definition>
        <argsstring>(&gt;=, &gt;=)</argsstring>
        <name>ml_comp_method_boolean_boolean</name>
        <param>
          <type>&gt;=</type>
        </param>
        <param>
          <type>&gt;=</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2773" column="1" declfile="src/ml_types.c" declline="2773" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aecb7b70c6bf32faeb8ba1af8d007aca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(RandomBoolean)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>RandomBoolean</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2775" column="1" bodyfile="src/ml_types.c" bodystart="2775" bodyend="2788"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ade34305c8e1d01c3f5c991c3ff96762d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLModuleT,(), &quot;module&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLModuleT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;module&quot;</type>
        </param>
        <briefdescription>
<para>module </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2793" column="1" declfile="src/ml_types.c" declline="2793" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1adf382d44cd55bf368c5db9c68f2bff70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;::&quot;, MLModuleT, MLStringT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;::&quot;</type>
        </param>
        <param>
          <type>MLModuleT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2795" column="1" bodyfile="src/ml_types.c" bodystart="2795" bodyend="2807"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a22e79696e4efaa289f4f1b6332e7e661" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_module</definition>
        <argsstring>(const char *Path,...)</argsstring>
        <name>ml_module</name>
        <param>
          <type>const char *</type>
          <declname>Path</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2809" column="12" bodyfile="src/ml_types.c" bodystart="2809" bodyend="2821"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1acac060898666963df524cfbdac10cf5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ml_module_path</definition>
        <argsstring>(ml_value_t *Module)</argsstring>
        <name>ml_module_path</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Module</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2823" column="12" bodyfile="src/ml_types.c" bodystart="2823" bodyend="2825"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aa2308737acbdc14b3b0a6031e565a7c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_module_import</definition>
        <argsstring>(ml_value_t *Module0, const char *Name)</argsstring>
        <name>ml_module_import</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Module0</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2827" column="12" bodyfile="src/ml_types.c" bodystart="2827" bodyend="2830"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a40302bcbd4814127767b95aedb4e2078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_module_export</definition>
        <argsstring>(ml_value_t *Module0, const char *Name, ml_value_t *Value)</argsstring>
        <name>ml_module_export</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Module0</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2832" column="12" bodyfile="src/ml_types.c" bodystart="2832" bodyend="2836"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aa67aa7a3eee4c32513a6e0d183589f3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLModuleT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLModuleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>module</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="2838" column="1" bodyfile="src/ml_types.c" bodystart="2838" bodyend="2847"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a410fd547ab2e8d68e241f828c53fdd88" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_module_exports_fn</definition>
        <argsstring>(const char *Name, void *Value, ml_value_t *Exports)</argsstring>
        <name>ml_module_exports_fn</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Exports</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2849" column="12" bodyfile="src/ml_types.c" bodystart="2849" bodyend="2852"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a04ebc5ac8a0a11d4a7eedce893e71df5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;path&quot;, MLModuleT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;path&quot;</type>
        </param>
        <param>
          <type>MLModuleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2854" column="1" bodyfile="src/ml_types.c" bodystart="2854" bodyend="2857"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a12a34ab1c3cc7e0d16fa96a9468a502f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;exports&quot;, MLModuleT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;exports&quot;</type>
        </param>
        <param>
          <type>MLModuleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2859" column="1" bodyfile="src/ml_types.c" bodystart="2859" bodyend="2864"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a1796789db0afb2d2543f7f8a19550375" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_external</definition>
        <argsstring>(const char *Name, const char *Source, int Line)</argsstring>
        <name>ml_external</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2871" column="12" bodyfile="src/ml_types.c" bodystart="2871" bodyend="2879"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a7f50e01b28821fe562f30e45ae9db961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLExternal)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLExternal</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2885" column="1" bodyfile="src/ml_types.c" bodystart="2885" bodyend="2900"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ac099edba3844366634b49c1d5236c125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLExternalT,(), &quot;external&quot;,.Constructor=(ml_value_t *) MLExternal)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLExternalT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;external&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLExternal</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2902" column="1" declfile="src/ml_types.c" declline="2902" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a838f5d37ae8621b16df88216be18e2fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;::&quot;, MLExternalT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;::&quot;</type>
        </param>
        <param>
          <type>MLExternalT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2908" column="1" bodyfile="src/ml_types.c" bodystart="2908" bodyend="2921"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a9d3f91a0cfdf8c6ed16b0916b3b5debc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLExternalSetT,(), &quot;externals&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLExternalSetT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;externals&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2923" column="1" declfile="src/ml_types.c" declline="2923" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1af9ac2221c437afdd863ed24c99086163" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLExternalSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLExternalSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2925" column="1" bodyfile="src/ml_types.c" bodystart="2925" bodyend="2932"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a5b8a5c0b1eefe66f0c74d924ce2fa8d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;add&quot;, MLExternalSetT, MLStringT, MLAnyT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;add&quot;</type>
        </param>
        <param>
          <type>MLExternalSetT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2934" column="1" bodyfile="src/ml_types.c" bodystart="2934" bodyend="2943"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a380b46a551115456d5964f87854170f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ml_externals_get_name</definition>
        <argsstring>(ml_externals_t *Externals, ml_value_t *Value)</argsstring>
        <name>ml_externals_get_name</name>
        <param>
          <type><ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref> *</type>
          <declname>Externals</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2945" column="12" bodyfile="src/ml_types.c" bodystart="2945" bodyend="2952"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1afbbd21d0403b4ff590e5ebf1696a42dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_externals_get_value</definition>
        <argsstring>(ml_externals_t *Externals, const char *Name)</argsstring>
        <name>ml_externals_get_value</name>
        <param>
          <type><ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref> *</type>
          <declname>Externals</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2954" column="12" bodyfile="src/ml_types.c" bodystart="2954" bodyend="2961"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a0f673d48564801f5bf41926ceb9d7d1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_externals_add</definition>
        <argsstring>(ml_externals_t *Externals, const char *Name, void *Value)</argsstring>
        <name>ml_externals_add</name>
        <param>
          <type><ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref> *</type>
          <declname>Externals</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2963" column="6" bodyfile="src/ml_types.c" bodystart="2963" bodyend="2966"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a78e180c2c39aaff40016215e9020402b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_externals_default_add</definition>
        <argsstring>(const char *Name, void *Value)</argsstring>
        <name>ml_externals_default_add</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2968" column="6" bodyfile="src/ml_types.c" bodystart="2968" bodyend="2971"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ac9f222cc38b1c1db612626c8996f691a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLExternalGet)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLExternalGet</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2973" column="1" bodyfile="src/ml_types.c" bodystart="2973" bodyend="2983"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a36ffeecd1459ca6287dab760bceb1de9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLExternalAdd)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLExternalAdd</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2985" column="1" bodyfile="src/ml_types.c" bodystart="2985" bodyend="2995"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ac4b483f0cb19f3c2492b0b966b661770" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLExternalDefault)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLExternalDefault</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="2997" column="1" bodyfile="src/ml_types.c" bodystart="2997" bodyend="3015"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a06ebdfbc1846b43caef6d3d8ee970f7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_serialize</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_serialize</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="3017" column="12" bodyfile="src/ml_types.c" bodystart="3017" bodyend="3021"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a57aecb5be286c7a71b4b7fb7e355fd15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_deserializer_define</definition>
        <argsstring>(const char *Type, ml_deserializer_t Deserializer)</argsstring>
        <name>ml_deserializer_define</name>
        <param>
          <type>const char *</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>ml_deserializer_t</type>
          <declname>Deserializer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="3025" column="6" bodyfile="src/ml_types.c" bodystart="3025" bodyend="3027"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a532d8b47261157966ec0f0f45db97af3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_deserialize</definition>
        <argsstring>(const char *Type, int Count, ml_value_t **Args)</argsstring>
        <name>ml_deserialize</name>
        <param>
          <type>const char *</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="3029" column="12" bodyfile="src/ml_types.c" bodystart="3029" bodyend="3033"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aa10956f7c11237c4b4e976da21a6f37d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_symbol_call</definition>
        <argsstring>(ml_state_t *Caller, ml_symbol_t *Symbol, int Count, ml_value_t **Args)</argsstring>
        <name>ml_symbol_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__symbol__t" kindref="compound">ml_symbol_t</ref> *</type>
          <declname>Symbol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
<para>symbol </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="3038" column="13" bodyfile="src/ml_types.c" bodystart="3038" bodyend="3044"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ac6826b25fa1dce1ad05ae0f521da8c60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLSymbolT,(MLFunctionT), &quot;symbol&quot;,.call=(void *) ml_symbol_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLSymbolT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;symbol&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_symbol_call</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="3046" column="1" declfile="src/ml_types.c" declline="3046" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1af40c21abe6f857df644d104ec5417f90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_symbol</definition>
        <argsstring>(const char *Name)</argsstring>
        <name>ml_symbol</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="3050" column="12" bodyfile="src/ml_types.c" bodystart="3050" bodyend="3055"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a063c92461332dc66e254c13da95047cd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_serialize, MLSymbolT, ml_symbol_t *Symbol)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_serialize</type>
        </param>
        <param>
          <type>MLSymbolT</type>
        </param>
        <param>
          <type><ref refid="structml__symbol__t" kindref="compound">ml_symbol_t</ref> *</type>
          <declname>Symbol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="3057" column="19" bodyfile="src/ml_types.c" bodystart="3057" bodyend="3062"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a731b4ab5d41efafa74f4fc7fd1edcff9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLSymbolRangeT,(), &quot;symbol::range&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLSymbolRangeT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;symbol::range&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="3064" column="1" declfile="src/ml_types.c" declline="3064" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ab9ac81d4ac526e59ac3f04cc9961dd8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;..&quot;, MLSymbolT, MLSymbolT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;..&quot;</type>
        </param>
        <param>
          <type>MLSymbolT</type>
        </param>
        <param>
          <type>MLSymbolT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="3066" column="1" bodyfile="src/ml_types.c" bodystart="3066" bodyend="3072"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1aba55978964132df612b51aff0deab985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;::&quot;, MLSymbolT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;::&quot;</type>
        </param>
        <param>
          <type>MLSymbolT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="3074" column="1" bodyfile="src/ml_types.c" bodystart="3074" bodyend="3076"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ad0020d9b570be7e0efdb9a34254a5b6b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_exchange_run</definition>
        <argsstring>(ml_exchange_t *State, ml_value_t *Result)</argsstring>
        <name>ml_exchange_run</name>
        <param>
          <type><ref refid="structml__exchange__t" kindref="compound">ml_exchange_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="3088" column="13" bodyfile="src/ml_types.c" bodystart="3088" bodyend="3096"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a697f34dc359542885ffab2b9634cdce7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONZ</definition>
        <argsstring>(MLExchange)</argsstring>
        <name>ML_FUNCTIONZ</name>
        <param>
          <type>MLExchange</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="3098" column="1" bodyfile="src/ml_types.c" bodystart="3098" bodyend="3112"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1abaefe9d01592751ebb04eb22522cb923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONZ</definition>
        <argsstring>(MLReplace)</argsstring>
        <name>ML_FUNCTIONZ</name>
        <param>
          <type>MLReplace</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="3114" column="1" bodyfile="src/ml_types.c" bodystart="3114" bodyend="3129"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1af50b7aca5368f4952372d64f7b30eed7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLDeref)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLDeref</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="3131" column="1" bodyfile="src/ml_types.c" bodystart="3131" bodyend="3137"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a5273610eeceba343a5c90afac8211f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONZ</definition>
        <argsstring>(MLAssign)</argsstring>
        <name>ML_FUNCTIONZ</name>
        <param>
          <type>MLAssign</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="3139" column="1" bodyfile="src/ml_types.c" bodystart="3139" bodyend="3147"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a6639b645c36a4119bd0e2957438d6779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONZ</definition>
        <argsstring>(MLCall)</argsstring>
        <name>ML_FUNCTIONZ</name>
        <param>
          <type>MLCall</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="3149" column="1" bodyfile="src/ml_types.c" bodystart="3149" bodyend="3158"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a85d58685f3460a8322dd8661f11d7742" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONZ</definition>
        <argsstring>(MLCompareAndSet)</argsstring>
        <name>ML_FUNCTIONZ</name>
        <param>
          <type>MLCompareAndSet</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="3160" column="1" bodyfile="src/ml_types.c" bodystart="3160" bodyend="3178"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a4a2dda7175a60ea278192c233e0197b9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_mem_trace</definition>
        <argsstring>(void *Ptr, inthash_t *Cache)</argsstring>
        <name>ml_mem_trace</name>
        <param>
          <type>void *</type>
          <declname>Ptr</declname>
        </param>
        <param>
          <type><ref refid="structinthash__t" kindref="compound">inthash_t</ref> *</type>
          <declname>Cache</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="3180" column="19" bodyfile="src/ml_types.c" bodystart="3180" bodyend="3198"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a66db88f6be9adea8ef101c182585d234" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLMemTrace)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLMemTrace</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>memory</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="3200" column="1" bodyfile="src/ml_types.c" bodystart="3200" bodyend="3210"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1ae68ab793d5594b4a382ba4f921547d9e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t ml_mem_size</definition>
        <argsstring>(void *Ptr, inthash_t *Cache)</argsstring>
        <name>ml_mem_size</name>
        <param>
          <type>void *</type>
          <declname>Ptr</declname>
        </param>
        <param>
          <type><ref refid="structinthash__t" kindref="compound">inthash_t</ref> *</type>
          <declname>Cache</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="3212" column="15" bodyfile="src/ml_types.c" bodystart="3212" bodyend="3221"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a651d48b97b6b27eedf6dee87c5975a18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLMemSize)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLMemSize</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>memory</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="3223" column="1" bodyfile="src/ml_types.c" bodystart="3223" bodyend="3233"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1afd51b3ae98a811a887a5c873b9d4098e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLMemCollect)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLMemCollect</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>memory</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="3235" column="1" bodyfile="src/ml_types.c" bodystart="3235" bodyend="3241"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a5af44061516d018d45bdf7dadf53b4bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLWeakRef)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLWeakRef</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>type</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="3250" column="1" bodyfile="src/ml_types.c" bodystart="3250" bodyend="3261"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a81dc87df30ca00b0aacd8c596be3fc00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLWeakRefT,(), &quot;weak-ref&quot;,.Constructor=(ml_value_t *) MLWeakRef)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLWeakRefT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;weak-ref&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLWeakRef</defval>
          <briefdescription><para>type </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="3263" column="1" declfile="src/ml_types.c" declline="3263" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1acbf8800e5f9215487c1486c9f96f7e45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;get&quot;, MLWeakRefT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;get&quot;</type>
        </param>
        <param>
          <type>MLWeakRefT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>type</para>
        </inbodydescription>
        <location file="src/ml_types.c" line="3269" column="1" bodyfile="src/ml_types.c" bodystart="3269" bodyend="3275"/>
      </memberdef>
      <memberdef kind="function" id="ml__types_8c_1a4c01a7e9a9beb0e447ec08b7b41767bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_init</definition>
        <argsstring>(stringmap_t *Globals)</argsstring>
        <name>ml_init</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Globals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_types.c" line="3277" column="6" bodyfile="src/ml_types.c" bodystart="3277" bodyend="3386"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;minilang.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sha256.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_compiler2.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_runtime.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_number.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_string.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_method.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_list.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_map.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_set.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tre/regex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;regex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ML_CATEGORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;type&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">ML_METHOD_DECL(IterateMethod,<sp/></highlight><highlight class="stringliteral">&quot;iterate&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">ML_METHOD_DECL(ValueMethod,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal">ML_METHOD_DECL(KeyMethod,<sp/></highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal">ML_METHOD_DECL(NextMethod,<sp/></highlight><highlight class="stringliteral">&quot;next&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal">ML_METHOD_DECL(CompareMethod,<sp/></highlight><highlight class="stringliteral">&quot;&lt;&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">ML_METHOD_DECL(MinMethod,<sp/></highlight><highlight class="stringliteral">&quot;min&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal">ML_METHOD_DECL(MaxMethod,<sp/></highlight><highlight class="stringliteral">&quot;max&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal">ML_METHOD_DECL(IndexMethod,<sp/></highlight><highlight class="stringliteral">&quot;[]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal">ML_METHOD_DECL(SymbolMethod,<sp/></highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal">ML_METHOD_DECL(CallMethod,<sp/></highlight><highlight class="stringliteral">&quot;()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal">ML_METHOD_DECL(AssignMethod,<sp/></highlight><highlight class="stringliteral">&quot;:=&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal">ML_METHOD_DECL(EqualMethod,<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal">ML_METHOD_DECL(LessMethod,<sp/></highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">ML_METHOD_DECL(GreaterMethod,<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal">ML_METHOD_DECL(NotEqualMethod,<sp/></highlight><highlight class="stringliteral">&quot;!=&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">ML_METHOD_DECL(LessEqualMethod,<sp/></highlight><highlight class="stringliteral">&quot;&lt;=&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">ML_METHOD_DECL(GreaterEqualMethod,<sp/></highlight><highlight class="stringliteral">&quot;&gt;=&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">ML_METHOD_DECL(AddMethod,<sp/></highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">ML_METHOD_DECL(MulMethod,<sp/></highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">ML_METHOD_DECL(AndMethod,<sp/></highlight><highlight class="stringliteral">&quot;/\\&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">ML_METHOD_DECL(OrMethod,<sp/></highlight><highlight class="stringliteral">&quot;\\/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">ML_METHOD_DECL(XorMethod,<sp/></highlight><highlight class="stringliteral">&quot;&gt;&lt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal">ML_METHOD_DECL(RangeMethod,<sp/></highlight><highlight class="stringliteral">&quot;..&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uintptr_t<sp/>rotl(uintptr_t<sp/>X,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Mask<sp/>=<sp/>(CHAR_BIT<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uintptr_t)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(X<sp/>&lt;&lt;<sp/>(N<sp/>&amp;<sp/>Mask))<sp/>|<sp/>(X<sp/>&gt;&gt;<sp/>((-N)<sp/>&amp;<sp/>Mask<sp/>));</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Types<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">ML_INTERFACE(MLAnyT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;any&quot;</highlight><highlight class="normal">,<sp/>.Rank<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="61"><highlight class="comment">//<sp/>Base<sp/>type<sp/>for<sp/>all<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">ML_INTERFACE(MLSequenceT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;sequence&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="comment">//<sp/>The<sp/>base<sp/>type<sp/>for<sp/>any<sp/>sequence<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">ML_INTERFACE(MLFunctionT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;function&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="comment">//<sp/>The<sp/>base<sp/>type<sp/>of<sp/>all<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_function_source(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**Source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Line)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_function_source)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Value),<sp/>ml_function_source);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(function)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(Value,<sp/>Source,<sp/>Line);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_function_source(Args[0],<sp/>&amp;Source,<sp/>&amp;Line))<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_tuplev(2,<sp/>ml_string(Source,<sp/>-1),<sp/>ml_integer(Line));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">ML_FUNCTION(MLType)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="comment">//@type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//&gt;type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>type<sp/>of<sp/>:mini:`Value`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)ml_typeof(Args[0]);</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ml_type_hash(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(intptr_t)Type;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_type_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>Type-&gt;Constructor,<sp/>Count,<sp/>Args);</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">ML_TYPE(MLTypeT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="107"><highlight class="comment">//<sp/>Type<sp/>of<sp/>all<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Every<sp/>type<sp/>contains<sp/>a<sp/>set<sp/>of<sp/>named<sp/>exports,<sp/>which<sp/>allows<sp/>them<sp/>to<sp/>be<sp/>used<sp/>as<sp/>modules.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>.hash<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_type_hash,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_type_call,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLType</highlight></codeline>
<codeline lineno="112"><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_value_is_constant,<sp/>MLTypeT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>MLTypeT)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="comment">//&lt;Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>name<sp/>of<sp/>:mini:`Type`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Type-&gt;Name,<sp/>-1);</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;rank&quot;</highlight><highlight class="normal">,<sp/>MLTypeT)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="comment">//&lt;Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>rank<sp/>of<sp/>:mini:`Type`,<sp/>i.e.<sp/>the<sp/>depth<sp/>of<sp/>its<sp/>inheritence<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Type-&gt;Rank);</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_type_exports_fn(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Exports)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_map_insert(Exports,<sp/>ml_string(Name,<sp/>-1),<sp/>Value);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;exports&quot;</highlight><highlight class="normal">,<sp/>MLTypeT)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//&gt;map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>map<sp/>of<sp/>all<sp/>the<sp/>exports<sp/>from<sp/>:mini:`Type`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Exports<sp/>=<sp/>ml_map();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_foreach(Type-&gt;Exports,<sp/>Exports,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_type_exports_fn);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Exports;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;constructor&quot;</highlight><highlight class="normal">,<sp/>MLTypeT)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//&gt;function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>constructor<sp/>for<sp/>:mini:`Type`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Type-&gt;Constructor;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">ML_TYPE(MLTypeGenericT,<sp/>(MLTypeT),<sp/></highlight><highlight class="stringliteral">&quot;generic-type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ml_generic_rule_t<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_generic_rule_t<sp/>*Next;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumArgs;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>Args[];</highlight></codeline>
<codeline lineno="169"><highlight class="normal">};</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_generic_fill(ml_generic_rule_t<sp/>*Rule,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**Args2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumArgs,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>Args2[0]<sp/>=<sp/>Rule-&gt;Type;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Rule-&gt;NumArgs;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uintptr_t<sp/>Arg<sp/>=<sp/>Rule-&gt;Args[I<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Arg<sp/>&gt;&gt;<sp/>48)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>Arg<sp/>&amp;<sp/>0xFFFF;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args2[I]<sp/>=<sp/>(J<sp/>&lt;<sp/>NumArgs)<sp/>?<sp/>Args[J]<sp/>:<sp/>MLAnyT;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args2[I]<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Arg;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_generic_parents(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Parents,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumArgs,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*V<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Args[0]<sp/>==<sp/>MLTupleT)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumArgs2<sp/>=<sp/>NumArgs;<sp/>--NumArgs2<sp/>&gt;<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Parent<sp/>=<sp/>ml_generic_type(NumArgs2,<sp/>Args);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Parents,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Parent);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ml_generic_rule_t<sp/>*Rule<sp/>=<sp/>V-&gt;Rules;<sp/>Rule;<sp/>Rule<sp/>=<sp/>Rule-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumArgs2<sp/>=<sp/>Rule-&gt;NumArgs;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Args2[NumArgs2];</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_generic_fill(Rule,<sp/>Args2,<sp/>NumArgs,<sp/>Args);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Parent<sp/>=<sp/>ml_generic_type(NumArgs2,<sp/>Args2);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Parents,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Parent);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_generic_parents(Parents,<sp/>NumArgs2,<sp/>Args2);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;parents&quot;</highlight><highlight class="normal">,<sp/>MLTypeGenericT)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_generic_type_t<sp/>*Type<sp/>=<sp/>(ml_generic_type_t<sp/>*)Args[0];</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Parents<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_generic_parents(Parents,<sp/>Type-&gt;NumArgs,<sp/>Type-&gt;Args);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parents;</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;parents&quot;</highlight><highlight class="normal">,<sp/>MLTypeT)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="comment">//&lt;Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">//&gt;list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>list<sp/>of<sp/>the<sp/>parent<sp/>types<sp/>of<sp/>:mini:`Type`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Parents<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_generic_parents(Parents,<sp/>1,<sp/>&amp;Type);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Type-&gt;Parents-&gt;Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Parent<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Type-&gt;Parents-&gt;Keys[I];</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parent)<sp/>ml_list_put(Parents,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Parent);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parents;</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_default_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ML_ERROR(&quot;TypeError&quot;,<sp/>&quot;&lt;%s&gt;<sp/>is<sp/>not<sp/>callable&quot;,<sp/>ml_typeof(Value)-&gt;Name);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Deref<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Deref<sp/>!=<sp/>Value)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>Deref,<sp/>Count,<sp/>Args);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args2<sp/>=<sp/>ml_alloc_args(Count<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>Args2[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>Args2[I<sp/>+<sp/>1]<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>CallMethod,<sp/>Count<sp/>+<sp/>1,<sp/>Args2);</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ml_default_hash(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Chain)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Hash<sp/>=<sp/>5381;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*P<sp/>=<sp/>ml_typeof(Value)-&gt;Name;<sp/>P[0];<sp/>++P)<sp/>Hash<sp/>=<sp/>((Hash<sp/>&lt;&lt;<sp/>5)<sp/>+<sp/>Hash)<sp/>+<sp/>P[0];</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Hash;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">/*ml_value_t<sp/>*ml_default_deref(ml_value_t<sp/>*Ref)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>Ref;</highlight></codeline>
<codeline lineno="247"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_default_assign(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Ref,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&lt;%s&gt;<sp/>is<sp/>not<sp/>assignable&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Ref)-&gt;Name);</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_type_init(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>Args;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>Type);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Parent;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((Parent<sp/>=<sp/>va_arg(Args,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)))<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parent-&gt;Rank<sp/>&gt;<sp/>Rank)<sp/>Rank<sp/>=<sp/>Parent-&gt;Rank;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_type_add_parent(Type,<sp/>Parent);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Type<sp/>!=<sp/>MLAnyT)<sp/>Type-&gt;Rank<sp/>=<sp/>Rank<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Type-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;of&quot;</highlight><highlight class="normal">,<sp/>Type-&gt;Constructor);</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_type(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Parent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref>);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Type<sp/>=<sp/>MLTypeT;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_init(Type,<sp/>Parent,<sp/>NULL);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Name<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;hash<sp/>=<sp/>Parent-&gt;hash;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;call<sp/>=<sp/>Parent-&gt;call;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;deref<sp/>=<sp/>Parent-&gt;deref;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;assign<sp/>=<sp/>Parent-&gt;assign;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Constructor<sp/>=<sp/>ml_method_anon(Name);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Type;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_type_add_parent(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Parent)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inthash_insert(Type-&gt;Parents,<sp/>(uintptr_t)Parent,<sp/>Parent))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//inthash_insert(Type-&gt;Parents,<sp/>(uintptr_t)Parent,<sp/>Parent);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Parent-&gt;Parents-&gt;Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Parent2<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Parent-&gt;Parents-&gt;Keys[I];</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parent2)<sp/>ml_type_add_parent(Type,<sp/>Parent2);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Type-&gt;Rank<sp/>&lt;=<sp/>Parent-&gt;Rank)<sp/>Type-&gt;Rank<sp/>=<sp/>Parent-&gt;Rank<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parent-&gt;Type<sp/>==<sp/>MLTypeGenericT)<sp/>ml_type_add_parent(Type,<sp/>ml_generic_type_args(Parent)[0]);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdatomic.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>atomic_flag<sp/>MLTypedFnLock[1]<sp/>=<sp/>{ATOMIC_FLAG_INIT};</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_TYPED_FN_LOCK()<sp/>while<sp/>(atomic_flag_test_and_set(MLTypedFnLock))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_TYPED_FN_UNLOCK()<sp/>atomic_flag_clear(MLTypedFnLock)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_TYPED_FN_LOCK()<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_TYPED_FN_UNLOCK()<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__typed__fn__entry__t" kindref="compound">ml_typed_fn_entry_t</ref><sp/><ref refid="structml__typed__fn__entry__t" kindref="compound">ml_typed_fn_entry_t</ref>;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312" refid="structml__typed__fn__entry__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__typed__fn__entry__t" kindref="compound">ml_typed_fn_entry_t</ref><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__typed__fn__entry__t" kindref="compound">ml_typed_fn_entry_t</ref><sp/>*Next;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Fn;</highlight></codeline>
<codeline lineno="316"><highlight class="normal">};</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structinthash__t" kindref="compound">inthash_t</ref><sp/>MLTypedFns[1]<sp/>=<sp/>{INTHASH_INIT};</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ml_typed_fn_get(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*TypedFn)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_TYPED_FN_LOCK();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinthash__result__t" kindref="compound">inthash_result_t</ref><sp/>Result<sp/>=<sp/>inthash_search2_inline(Type-&gt;TypedFns,<sp/>(uintptr_t)TypedFn);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result.Present)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_TYPED_FN_UNLOCK();</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result.Value;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BestRank<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*BestFn<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__typed__fn__entry__t" kindref="compound">ml_typed_fn_entry_t</ref><sp/>*Entry<sp/>=<sp/>inthash_search(MLTypedFns,<sp/>(uintptr_t)TypedFn);<sp/>Entry;<sp/>Entry<sp/>=<sp/>Entry-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Entry-&gt;Type-&gt;Rank<sp/>&gt;<sp/>BestRank<sp/>&amp;&amp;<sp/>ml_is_subtype(Type,<sp/>Entry-&gt;Type))<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BestRank<sp/>=<sp/>Entry-&gt;Type-&gt;Rank;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BestFn<sp/>=<sp/>Entry-&gt;Fn;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>inthash_insert(Type-&gt;TypedFns,<sp/>(uintptr_t)TypedFn,<sp/>BestFn);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_TYPED_FN_UNLOCK();</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BestFn;</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_typed_fn_set(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*TypedFn,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Function)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__typed__fn__entry__t" kindref="compound">ml_typed_fn_entry_t</ref><sp/>*Entry<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__typed__fn__entry__t" kindref="compound">ml_typed_fn_entry_t</ref>);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>Entry-&gt;Type<sp/>=<sp/>Type;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>Entry-&gt;Fn<sp/>=<sp/>Function;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>Entry-&gt;Next<sp/>=<sp/>inthash_insert(MLTypedFns,<sp/>(uintptr_t)TypedFn,<sp/>Entry);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>inthash_insert(Type-&gt;TypedFns,<sp/>(uintptr_t)TypedFn,<sp/>Function);</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348" refid="structml__union__type__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumTypes;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Types[];</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}<sp/><ref refid="structml__union__type__t" kindref="compound">ml_union_type_t</ref>;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal">ML_TYPE(MLTypeUnionT,<sp/>(MLTypeT),<sp/></highlight><highlight class="stringliteral">&quot;type::union&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_union_type(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumTypes,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Types[])<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__union__type__t" kindref="compound">ml_union_type_t</ref><sp/>*Type<sp/>=<sp/>xnew(<ref refid="structml__union__type__t" kindref="compound">ml_union_type_t</ref>,<sp/>NumTypes,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.Type<sp/>=<sp/>MLTypeUnionT;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>strlen(Types[0]-&gt;Name)<sp/>+<sp/>NumTypes;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>NumTypes;<sp/>++I)<sp/>Length<sp/>+=<sp/>strlen(Types[I]-&gt;Name);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>snew(Length);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.Name<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>Name<sp/>=<sp/>stpcpy(Name,<sp/>Types[0]-&gt;Name);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>NumTypes;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Name++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;|&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Name<sp/>=<sp/>stpcpy(Name,<sp/>Types[I]-&gt;Name);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>*Name<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.hash<sp/>=<sp/>ml_default_hash;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.Rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;NumTypes<sp/>=<sp/>NumTypes;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NumTypes;<sp/>++I)<sp/>Type-&gt;Types[I]<sp/>=<sp/>Types[I];</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Type;</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">,<sp/>MLTypeT,<sp/>MLTypeT)<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">//&gt;type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>union<sp/>interface<sp/>of<sp/>:mini:`Type/1`<sp/>and<sp/>:mini:`Type/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type1<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type2<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__union__type__t" kindref="compound">ml_union_type_t</ref><sp/>*Type<sp/>=<sp/>xnew(<ref refid="structml__union__type__t" kindref="compound">ml_union_type_t</ref>,<sp/>2,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.Type<sp/>=<sp/>MLTypeUnionT;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_asprintf((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)&amp;Type-&gt;Base.Name,<sp/></highlight><highlight class="stringliteral">&quot;%s|%s&quot;</highlight><highlight class="normal">,<sp/>Type1-&gt;Name,<sp/>Type2-&gt;Name);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.hash<sp/>=<sp/>ml_default_hash;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.Rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;NumTypes<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Types[0]<sp/>=<sp/>Type1;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Types[1]<sp/>=<sp/>Type2;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Type;</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">,<sp/>MLTypeUnionT,<sp/>MLTypeT)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">//&gt;type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>union<sp/>interface<sp/>of<sp/>:mini:`Type/1`<sp/>and<sp/>:mini:`Type/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__union__type__t" kindref="compound">ml_union_type_t</ref><sp/>*Type1<sp/>=<sp/>(<ref refid="structml__union__type__t" kindref="compound">ml_union_type_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type2<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__union__type__t" kindref="compound">ml_union_type_t</ref><sp/>*Type<sp/>=<sp/>xnew(<ref refid="structml__union__type__t" kindref="compound">ml_union_type_t</ref>,<sp/>Type1-&gt;NumTypes<sp/>+<sp/>1,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.Type<sp/>=<sp/>MLTypeUnionT;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_asprintf((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)&amp;Type-&gt;Base.Name,<sp/></highlight><highlight class="stringliteral">&quot;%s|%s&quot;</highlight><highlight class="normal">,<sp/>Type1-&gt;Base.Name,<sp/>Type2-&gt;Name);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.hash<sp/>=<sp/>ml_default_hash;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.Rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;NumTypes<sp/>=<sp/>Type1-&gt;NumTypes<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Type1-&gt;NumTypes;<sp/>++I)<sp/>Type-&gt;Types[I]<sp/>=<sp/>Type1-&gt;Types[I];</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Types[Type1-&gt;NumTypes]<sp/>=<sp/>Type2;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Type;</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">,<sp/>MLTypeT,<sp/>MLTypeUnionT)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//&gt;type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>union<sp/>interface<sp/>of<sp/>:mini:`Type/1`<sp/>and<sp/>:mini:`Type/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type1<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__union__type__t" kindref="compound">ml_union_type_t</ref><sp/>*Type2<sp/>=<sp/>(<ref refid="structml__union__type__t" kindref="compound">ml_union_type_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__union__type__t" kindref="compound">ml_union_type_t</ref><sp/>*Type<sp/>=<sp/>xnew(<ref refid="structml__union__type__t" kindref="compound">ml_union_type_t</ref>,<sp/>Type2-&gt;NumTypes<sp/>+<sp/>1,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.Type<sp/>=<sp/>MLTypeUnionT;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_asprintf((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)&amp;Type-&gt;Base.Name,<sp/></highlight><highlight class="stringliteral">&quot;%s|%s&quot;</highlight><highlight class="normal">,<sp/>Type1-&gt;Name,<sp/>Type2-&gt;Base.Name);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.hash<sp/>=<sp/>ml_default_hash;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.Rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;NumTypes<sp/>=<sp/>Type2-&gt;NumTypes<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Types[0]<sp/>=<sp/>Type1;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Type2-&gt;NumTypes;<sp/>++I)<sp/>Type-&gt;Types[I<sp/>+<sp/>1]<sp/>=<sp/>Type2-&gt;Types[I];</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Type;</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;?&quot;</highlight><highlight class="normal">,<sp/>MLTypeT)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">//&gt;type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>union<sp/>interface<sp/>of<sp/>:mini:`Type`<sp/>and<sp/>:mini:`type(nil)`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type1<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__union__type__t" kindref="compound">ml_union_type_t</ref><sp/>*Type<sp/>=<sp/>xnew(<ref refid="structml__union__type__t" kindref="compound">ml_union_type_t</ref>,<sp/>2,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.Type<sp/>=<sp/>MLTypeUnionT;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_asprintf((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)&amp;Type-&gt;Base.Name,<sp/></highlight><highlight class="stringliteral">&quot;%s|nil&quot;</highlight><highlight class="normal">,<sp/>Type1-&gt;Name);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.hash<sp/>=<sp/>ml_default_hash;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.Rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;NumTypes<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Types[0]<sp/>=<sp/>Type1;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Types[1]<sp/>=<sp/>MLNilT;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Type;</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;?&quot;</highlight><highlight class="normal">,<sp/>MLTypeUnionT)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">//&gt;type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>union<sp/>interface<sp/>of<sp/>:mini:`Type/1`<sp/>and<sp/>:mini:`Type/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__union__type__t" kindref="compound">ml_union_type_t</ref><sp/>*Type1<sp/>=<sp/>(<ref refid="structml__union__type__t" kindref="compound">ml_union_type_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__union__type__t" kindref="compound">ml_union_type_t</ref><sp/>*Type<sp/>=<sp/>xnew(<ref refid="structml__union__type__t" kindref="compound">ml_union_type_t</ref>,<sp/>Type1-&gt;NumTypes<sp/>+<sp/>1,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.Type<sp/>=<sp/>MLTypeUnionT;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_asprintf((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)&amp;Type-&gt;Base.Name,<sp/></highlight><highlight class="stringliteral">&quot;%s|nil&quot;</highlight><highlight class="normal">,<sp/>Type1-&gt;Base.Name);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.hash<sp/>=<sp/>ml_default_hash;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.Rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;NumTypes<sp/>=<sp/>Type1-&gt;NumTypes<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Type1-&gt;NumTypes;<sp/>++I)<sp/>Type-&gt;Types[I]<sp/>=<sp/>Type1-&gt;Types[I];</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Types[Type1-&gt;NumTypes]<sp/>=<sp/>MLNilT;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Type;</highlight></codeline>
<codeline lineno="479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLTypeT)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>a<sp/>representation<sp/>of<sp/>:mini:`Value`<sp/>to<sp/>:mini:`Buffer`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;&lt;&lt;%s&gt;&gt;&quot;</highlight><highlight class="normal">,<sp/>Type-&gt;Name);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,<sp/>MLTypeT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="comment">//&lt;Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="comment">//&gt;any<sp/>|<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>value<sp/>of<sp/>:mini:`Name`<sp/>exported<sp/>from<sp/>:mini:`Type`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>error<sp/>if<sp/>:mini:`Name`<sp/>is<sp/>not<sp/>present.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>allows<sp/>types<sp/>to<sp/>behave<sp/>as<sp/>modules.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>stringmap_search(Type-&gt;Exports,<sp/>Name);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value<sp/>?:<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ModuleError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Symbol<sp/>%s<sp/>not<sp/>exported<sp/>from<sp/>type<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Name,<sp/>Type-&gt;Name);</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>atomic_flag<sp/>MLGenericsLock[1]<sp/>=<sp/>{ATOMIC_FLAG_INIT};</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_GENERICS_LOCK()<sp/>while<sp/>(atomic_flag_test_and_set(MLGenericsLock))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_GENERICS_UNLOCK()<sp/>atomic_flag_clear(MLGenericsLock)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_GENERICS_LOCK()<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_GENERICS_UNLOCK()<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_generic_type(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumArgs,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Args[])<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structinthash__t" kindref="compound">inthash_t</ref><sp/>GenericTypeCache[1]<sp/>=<sp/>{INTHASH_INIT};</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>Hash<sp/>=<sp/>(uintptr_t)3541;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>NumArgs;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>Hash<sp/>=<sp/>rotl(Hash,<sp/>1)<sp/>^<sp/>(uintptr_t)Args[I];</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_GENERICS_LOCK();</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_generic_type_t<sp/>*Type<sp/>=<sp/>(ml_generic_type_t<sp/>*)inthash_search(GenericTypeCache,<sp/>Hash);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Type)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Type-&gt;NumArgs<sp/>!=<sp/>NumArgs)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>next;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NumArgs;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Args[I]<sp/>!=<sp/>Type-&gt;Args[I])<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>next;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_GENERICS_UNLOCK();</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Type;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>next:</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Type<sp/>=<sp/>Type-&gt;NextGeneric;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>Type<sp/>=<sp/>xnew(ml_generic_type_t,<sp/>NumArgs,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Base<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>Base-&gt;Name;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Rank<sp/>=<sp/>Base-&gt;Rank;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NumArgs<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>strlen(Base-&gt;Name)<sp/>+<sp/>NumArgs<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>NumArgs;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Length<sp/>+=<sp/>strlen(Args[I]-&gt;Name);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rank<sp/>+=<sp/>Args[I]-&gt;Rank;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name2<sp/>=<sp/>snew(Length);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>stpcpy(Name2,<sp/>Base-&gt;Name);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*End++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>End<sp/>=<sp/>stpcpy(End,<sp/>Args[1]-&gt;Name);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>2;<sp/>I<sp/>&lt;<sp/>NumArgs;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*End++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>End<sp/>=<sp/>stpcpy(End,<sp/>Args[I]-&gt;Name);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*End++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*End<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Name<sp/>=<sp/>Name2;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.Type<sp/>=<sp/>MLTypeGenericT;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.Name<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.hash<sp/>=<sp/>Base-&gt;hash;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.call<sp/>=<sp/>Base-&gt;call;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.deref<sp/>=<sp/>Base-&gt;deref;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.assign<sp/>=<sp/>Base-&gt;assign;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.Rank<sp/>=<sp/>Rank<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;Base.Interface<sp/>=<sp/>Args[0]-&gt;Interface;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;NumArgs<sp/>=<sp/>NumArgs;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NumArgs;<sp/>++I)<sp/>Type-&gt;Args[I]<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>Type-&gt;NextGeneric<sp/>=<sp/>(ml_generic_type_t<sp/>*)inthash_insert(GenericTypeCache,<sp/>Hash,<sp/>Type);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_GENERICS_UNLOCK();</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Type;</highlight></codeline>
<codeline lineno="573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_type_add_rule(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*T,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*U,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>Args;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>U);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(va_arg(Args,<sp/>uintptr_t))<sp/>++Count;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_generic_rule_t<sp/>*Rule<sp/>=<sp/>xnew(ml_generic_rule_t,<sp/>Count,<sp/>uintptr_t);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>Rule-&gt;Type<sp/>=<sp/>U;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>Rule-&gt;NumArgs<sp/>=<sp/>Count<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>*RuleArgs<sp/>=<sp/>Rule-&gt;Args;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>U);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uintptr_t<sp/>Arg<sp/>=<sp/>va_arg(Args,<sp/>uintptr_t);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Arg)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*RuleArgs++<sp/>=<sp/>Arg;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_generic_rule_t<sp/>**Slot<sp/>=<sp/>&amp;T-&gt;Rules;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Rank<sp/>=<sp/>U-&gt;Rank;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Slot[0]<sp/>&amp;&amp;<sp/>Slot[0]-&gt;Type-&gt;Rank<sp/>&gt;<sp/>Rank)<sp/>Slot<sp/>=<sp/>&amp;Slot[0]-&gt;Next;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>Rule-&gt;Next<sp/>=<sp/>Slot[0];</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>Rule;</highlight></codeline>
<codeline lineno="597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Values<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal">ML_TYPE(MLNilT,<sp/>(MLFunctionT,<sp/>MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;nil&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_value_is_constant,<sp/>MLNilT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal">ML_FUNCTION(MLSomeFn)<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal">ML_TYPE(MLSomeT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;some&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLSomeFn</highlight></codeline>
<codeline lineno="618"><highlight class="normal">);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_value_is_constant,<sp/>MLSomeT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_blank_assign(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Blank,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal">ML_TYPE(MLBlankT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;blank&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>.assign<sp/>=<sp/>ml_blank_assign</highlight></codeline>
<codeline lineno="631"><highlight class="normal">);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal">ML_VALUE(MLNil,<sp/>MLNilT);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLNilT)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;nil&quot;</highlight><highlight class="normal">,<sp/>3);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal">ML_VALUE(MLSome,<sp/>MLSomeT);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLSomeT)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;some&quot;</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="651"><highlight class="normal">}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal">ML_VALUE(MLBlank,<sp/>MLBlankT);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_find_generic_parent0(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TNumArgs,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**TArgs,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*U,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Max,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TArgs[0]<sp/>==<sp/>U)<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Max<sp/>&gt;<sp/>TNumArgs)<sp/>Max<sp/>=<sp/>TNumArgs;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Max;<sp/>++I)<sp/>Args[I]<sp/>=<sp/>TArgs[I];</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Max;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ml_generic_rule_t<sp/>*Rule<sp/>=<sp/>TArgs[0]-&gt;Rules;<sp/>Rule;<sp/>Rule<sp/>=<sp/>Rule-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TNumArgs2<sp/>=<sp/>Rule-&gt;NumArgs;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*TArgs2[TNumArgs2];</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_generic_fill(Rule,<sp/>TArgs2,<sp/>TNumArgs,<sp/>TArgs);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Find<sp/>=<sp/>ml_find_generic_parent0(TNumArgs2,<sp/>TArgs2,<sp/>U,<sp/>Max,<sp/>Args);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Find<sp/>&gt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Find;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_find_generic_parent(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*T,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*U,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Max,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(T-&gt;Type<sp/>==<sp/>MLTypeGenericT)<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_generic_type_t<sp/>*GenericT<sp/>=<sp/>(ml_generic_type_t<sp/>*)T;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_find_generic_parent0(GenericT-&gt;NumArgs,<sp/>GenericT-&gt;Args,<sp/>U,<sp/>Max,<sp/>Args);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Find<sp/>=<sp/>ml_find_generic_parent0(1,<sp/>&amp;T,<sp/>U,<sp/>Max,<sp/>Args);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Find<sp/>&gt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Find;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>T-&gt;Parents-&gt;Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Parent<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)T-&gt;Parents-&gt;Keys[I];</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Rank<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parent<sp/>&amp;&amp;<sp/>(Parent-&gt;Rank<sp/>&gt;<sp/>Rank))<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Find2<sp/>=<sp/>ml_find_generic_parent(Parent,<sp/>U,<sp/>Max,<sp/>Args);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Find2<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rank<sp/>=<sp/>Parent-&gt;Rank;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Find<sp/>=<sp/>Find2;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Find;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_is_generic_subtype1(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TNumArgs,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**TArgs,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*U)<sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TArgs[0]<sp/>==<sp/>U)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ml_generic_rule_t<sp/>*Rule<sp/>=<sp/>TArgs[0]-&gt;Rules;<sp/>Rule;<sp/>Rule<sp/>=<sp/>Rule-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TNumArgs2<sp/>=<sp/>Rule-&gt;NumArgs;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*TArgs2[TNumArgs2];</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_generic_fill(Rule,<sp/>TArgs2,<sp/>TNumArgs,<sp/>TArgs);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_generic_subtype1(TNumArgs2,<sp/>TArgs2,<sp/>U))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_is_generic_subtype(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TNumArgs,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**TArgs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UNumArgs,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**UArgs)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TArgs[0]<sp/>==<sp/>UArgs[0])<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(UNumArgs<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(UNumArgs<sp/>&lt;=<sp/>TNumArgs)<sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>UNumArgs;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is_subtype(TArgs[I],<sp/>UArgs[I]))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>different;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal">different:</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ml_generic_rule_t<sp/>*Rule<sp/>=<sp/>TArgs[0]-&gt;Rules;<sp/>Rule;<sp/>Rule<sp/>=<sp/>Rule-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TNumArgs2<sp/>=<sp/>Rule-&gt;NumArgs;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*TArgs2[TNumArgs2];</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_generic_fill(Rule,<sp/>TArgs2,<sp/>TNumArgs,<sp/>TArgs);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_generic_subtype(TNumArgs2,<sp/>TArgs2,<sp/>UNumArgs,<sp/>UArgs))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="725"><highlight class="normal">}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_is_subtype(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*T,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*U)<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(T<sp/>==<sp/>U)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(U<sp/>==<sp/>MLAnyT)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(U-&gt;Type<sp/>==<sp/>MLTypeUnionT)<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__union__type__t" kindref="compound">ml_union_type_t</ref><sp/>*Union<sp/>=<sp/>(<ref refid="structml__union__type__t" kindref="compound">ml_union_type_t</ref><sp/>*)U;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Union-&gt;NumTypes;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_subtype(T,<sp/>Union-&gt;Types[I]))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inthash_search(T-&gt;Parents,<sp/>(uintptr_t)U))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(T-&gt;Type<sp/>==<sp/>MLTypeGenericT)<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_generic_type_t<sp/>*GenericT<sp/>=<sp/>(ml_generic_type_t<sp/>*)T;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GenericT-&gt;Args[0]<sp/>==<sp/>U)<sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(U-&gt;Type<sp/>==<sp/>MLTypeGenericT)<sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_generic_type_t<sp/>*GenericU<sp/>=<sp/>(ml_generic_type_t<sp/>*)U;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_is_generic_subtype(GenericT-&gt;NumArgs,<sp/>GenericT-&gt;Args,<sp/>GenericU-&gt;NumArgs,<sp/>GenericU-&gt;Args);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_is_generic_subtype1(GenericT-&gt;NumArgs,<sp/>GenericT-&gt;Args,<sp/>U);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(U-&gt;Type<sp/>==<sp/>MLTypeGenericT)<sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_generic_type_t<sp/>*GenericU<sp/>=<sp/>(ml_generic_type_t<sp/>*)U;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_is_generic_subtype(1,<sp/>&amp;T,<sp/>GenericU-&gt;NumArgs,<sp/>GenericU-&gt;Args);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_is_generic_subtype1(1,<sp/>&amp;T,<sp/>U);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_generic_type_max(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Max,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TNumArgs,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**TArgs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UNumArgs,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**UArgs)<sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TArgs[0]<sp/>==<sp/>UArgs[0])<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TNumArgs<sp/>&gt;<sp/>UNumArgs)<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Args[TNumArgs];</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>TArgs[0];</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>UNumArgs;<sp/>++I)<sp/>Args[I]<sp/>=<sp/>ml_type_max(TArgs[I],<sp/>UArgs[I]);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>UNumArgs;<sp/>I<sp/>&lt;<sp/>TNumArgs;<sp/>++I)<sp/>Args[I]<sp/>=<sp/>MLAnyT;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_generic_type(TNumArgs,<sp/>Args);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Args[UNumArgs];</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>UArgs[0];</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>TNumArgs;<sp/>++I)<sp/>Args[I]<sp/>=<sp/>ml_type_max(TArgs[I],<sp/>UArgs[I]);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>TNumArgs;<sp/>I<sp/>&lt;<sp/>UNumArgs;<sp/>++I)<sp/>Args[I]<sp/>=<sp/>MLAnyT;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_generic_type(UNumArgs,<sp/>Args);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TArgs[0]<sp/>==<sp/>MLTupleT<sp/>&amp;&amp;<sp/>TNumArgs<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ml_generic_rule_t<sp/>*URule<sp/>=<sp/>UArgs[0]-&gt;Rules;<sp/>URule;<sp/>URule<sp/>=<sp/>URule-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(URule-&gt;Type-&gt;Rank<sp/>&lt;=<sp/>Max-&gt;Rank)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Max;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UNumArgs2<sp/>=<sp/>URule-&gt;NumArgs;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*UArgs2[UNumArgs2];</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_generic_fill(URule,<sp/>UArgs2,<sp/>UNumArgs,<sp/>UArgs);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Max<sp/>=<sp/>ml_generic_type_max(Max,<sp/>TNumArgs<sp/>-<sp/>1,<sp/>TArgs,<sp/>UNumArgs2,<sp/>UArgs2);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ml_generic_rule_t<sp/>*TRule<sp/>=<sp/>TArgs[0]-&gt;Rules;<sp/>TRule;<sp/>TRule<sp/>=<sp/>TRule-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TRule-&gt;Type-&gt;Rank<sp/>&lt;=<sp/>Max-&gt;Rank)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Max;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TNumArgs2<sp/>=<sp/>TRule-&gt;NumArgs;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*TArgs2[TNumArgs2];</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_generic_fill(TRule,<sp/>TArgs2,<sp/>TNumArgs,<sp/>TArgs);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ml_generic_rule_t<sp/>*URule<sp/>=<sp/>UArgs[0]-&gt;Rules;<sp/>URule;<sp/>URule<sp/>=<sp/>URule-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(URule-&gt;Type-&gt;Rank<sp/>&lt;=<sp/>Max-&gt;Rank)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Max;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UNumArgs2<sp/>=<sp/>URule-&gt;NumArgs;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*UArgs2[UNumArgs2];</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_generic_fill(URule,<sp/>UArgs2,<sp/>UNumArgs,<sp/>UArgs);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Max<sp/>=<sp/>ml_generic_type_max(Max,<sp/>TNumArgs2,<sp/>TArgs2,<sp/>UNumArgs2,<sp/>UArgs2);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Max;</highlight></codeline>
<codeline lineno="801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_type_max(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*T,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*U)<sp/>{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(T<sp/>==<sp/>U)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Max<sp/>=<sp/>MLAnyT;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(T-&gt;Rank<sp/>&lt;<sp/>U-&gt;Rank)<sp/>{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inthash_search(U-&gt;Parents,<sp/>(uintptr_t)T))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inthash_search(T-&gt;Parents,<sp/>(uintptr_t)U))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>U;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>T-&gt;Parents-&gt;Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Parent<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)T-&gt;Parents-&gt;Keys[I];</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parent<sp/>&amp;&amp;<sp/>Parent-&gt;Rank<sp/>&gt;<sp/>Max-&gt;Rank)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inthash_search(U-&gt;Parents,<sp/>(uintptr_t)Parent))<sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Max<sp/>=<sp/>Parent;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(T-&gt;Type<sp/>==<sp/>MLTypeGenericT)<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_generic_type_t<sp/>*GenericT<sp/>=<sp/>(ml_generic_type_t<sp/>*)T;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(U-&gt;Type<sp/>==<sp/>MLTypeGenericT)<sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_generic_type_t<sp/>*GenericU<sp/>=<sp/>(ml_generic_type_t<sp/>*)U;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Max<sp/>=<sp/>ml_generic_type_max(Max,<sp/>GenericT-&gt;NumArgs,<sp/>GenericT-&gt;Args,<sp/>GenericU-&gt;NumArgs,<sp/>GenericU-&gt;Args);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GenericT-&gt;Args[0]<sp/>==<sp/>U)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>U;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Max<sp/>=<sp/>ml_generic_type_max(Max,<sp/>GenericT-&gt;NumArgs,<sp/>GenericT-&gt;Args,<sp/>1,<sp/>&amp;U);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(U-&gt;Type<sp/>==<sp/>MLTypeGenericT)<sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_generic_type_t<sp/>*GenericU<sp/>=<sp/>(ml_generic_type_t<sp/>*)U;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Max<sp/>=<sp/>ml_generic_type_max(Max,<sp/>1,<sp/>&amp;T,<sp/>GenericU-&gt;NumArgs,<sp/>GenericU-&gt;Args);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Max<sp/>=<sp/>ml_generic_type_max(Max,<sp/>1,<sp/>&amp;T,<sp/>1,<sp/>&amp;U);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Max;</highlight></codeline>
<codeline lineno="841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/>MLTypeT,<sp/>MLTypeT)<sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="comment">//&gt;type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>closest<sp/>common<sp/>parent<sp/>type<sp/>of<sp/>:mini:`Type/1`<sp/>and<sp/>:mini:`Type/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)ml_type_max((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[0],<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[1]);</highlight></codeline>
<codeline lineno="849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">,<sp/>MLTypeT,<sp/>MLTypeT)<sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="comment">//&gt;type<sp/>or<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Type/2`<sp/>if<sp/>:mini:`Type/2`<sp/>is<sp/>a<sp/>strict<sp/>parent<sp/>of<sp/>:mini:`Type/1`,<sp/>otherwise<sp/>returns<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type1<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type2<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Type1<sp/>==<sp/>Type2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_subtype(Type1,<sp/>Type2))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;=&quot;</highlight><highlight class="normal">,<sp/>MLTypeT,<sp/>MLTypeT)<sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="comment">//&gt;type<sp/>or<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Type/2`<sp/>if<sp/>:mini:`Type/2`<sp/>is<sp/>a<sp/>parent<sp/>of<sp/>:mini:`Type/1`,<sp/>otherwise<sp/>returns<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type1<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type2<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Type1<sp/>==<sp/>Type2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_subtype(Type1,<sp/>Type2))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLTypeT,<sp/>MLTypeT)<sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="comment">//&gt;type<sp/>or<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Type/2`<sp/>if<sp/>:mini:`Type/2`<sp/>is<sp/>a<sp/>strict<sp/>sub-type<sp/>of<sp/>:mini:`Type/1`,<sp/>otherwise<sp/>returns<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type1<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type2<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Type1<sp/>==<sp/>Type2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_subtype(Type2,<sp/>Type1))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="885"><highlight class="normal">}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&gt;=&quot;</highlight><highlight class="normal">,<sp/>MLTypeT,<sp/>MLTypeT)<sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="comment">//&gt;type<sp/>or<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Type/2`<sp/>if<sp/>:mini:`Type/2`<sp/>is<sp/>a<sp/>sub-type<sp/>of<sp/>:mini:`Type/1`,<sp/>otherwise<sp/>returns<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type1<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type2<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Type1<sp/>==<sp/>Type2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_subtype(Type2,<sp/>Type1))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal">ML_METHODVX(</highlight><highlight class="stringliteral">&quot;[]&quot;</highlight><highlight class="normal">,<sp/>MLTypeT,<sp/>MLTypeT)<sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="comment">//&lt;Base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type/1,...,Type/n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="comment">//&gt;type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>generic<sp/>type<sp/>:mini:`Base[Type/1,<sp/>...,<sp/>Type/n]`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>2;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ML_CHECKX_ARG_TYPE(I,<sp/>MLTypeT);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_generic_type(Count,<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**)Args));</highlight></codeline>
<codeline lineno="907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLNilT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copying<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal">ML_FUNCTIONX(MLVisit)<sp/>{</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="comment">//@visit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Fn(V,<sp/>Value)`<sp/>where<sp/>:mini:`V`<sp/>is<sp/>a<sp/>newly<sp/>created<sp/>:mini:`visitor`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(1,<sp/>MLFunctionT);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref><sp/>*Visitor<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref>);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>Visitor-&gt;Type<sp/>=<sp/>MLVisitorT;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>Visitor-&gt;Fn<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>Visitor-&gt;Error<sp/>=<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CallError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Recursive<sp/>visit<sp/>detected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>Visitor-&gt;Args[0]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Visitor;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args2<sp/>=<sp/>ml_alloc_args(2);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>Args2[0]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Visitor;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>Args2[1]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>Visitor-&gt;Fn,<sp/>2,<sp/>Args2);</highlight></codeline>
<codeline lineno="936"><highlight class="normal">}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_visitor_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref><sp/>*Visitor,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>ml_deref(Args[0]);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>ml_deref(Args[1]);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inthash_insert(Visitor-&gt;Cache,<sp/>(uintptr_t)Value,<sp/>Result);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_NANBOXING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_tag(Value))<sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>inthash_search(Visitor-&gt;Cache,<sp/>(uintptr_t)Value);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result)<sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_NANBOXING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inthash_insert(Visitor-&gt;Cache,<sp/>(uintptr_t)Value,<sp/>Visitor-&gt;Error);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Visitor-&gt;Args[1]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>Visitor-&gt;Fn,<sp/>2,<sp/>Visitor-&gt;Args);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal">ML_TYPE(MLVisitorT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;visitor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>to<sp/>apply<sp/>a<sp/>transformation<sp/>recursively<sp/>to<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="comment">//<sp/>:mini:`fun<sp/>(V:<sp/>visitor)(Value:<sp/>any,<sp/>Result:<sp/>any):<sp/>any`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Adds<sp/>the<sp/>pair<sp/>:mini:`(Value,<sp/>Result)`<sp/>to<sp/>:mini:`V`&apos;s<sp/>cache<sp/>and<sp/>returns<sp/>:mini:`Result`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="comment">//<sp/>:mini:`fun<sp/>(V:<sp/>visitor)(Value:<sp/>any):<sp/>any`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Visits<sp/>:mini:`Value`<sp/>with<sp/>:mini:`V`<sp/>returning<sp/>the<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_visitor_call</highlight></codeline>
<codeline lineno="969"><highlight class="normal">);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;visit&quot;</highlight><highlight class="normal">,<sp/>MLVisitorT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="comment">//&lt;Visitor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Default<sp/>visitor<sp/>implementation,<sp/>just<sp/>returns<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="977"><highlight class="normal">}</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal">ML_METHOD_DECL(CopyMethod,<sp/></highlight><highlight class="stringliteral">&quot;copy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal">ML_FUNCTIONX(MLCopy)<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="comment">//@copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn?:function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>copy<sp/>of<sp/>:mini:`Value`<sp/>using<sp/>a<sp/>new<sp/>:mini:`copy`<sp/>instance<sp/>which<sp/>applies<sp/>:mini:`Fn(Copy,<sp/>Value)`<sp/>to<sp/>each<sp/>value.<sp/>If<sp/>omitted,<sp/>:mini:`Fn`<sp/>defaults<sp/>to<sp/>:mini:`:copy`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref><sp/>*Visitor<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref>);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>Visitor-&gt;Type<sp/>=<sp/>MLVisitorT;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>Visitor-&gt;Fn<sp/>=<sp/>Count<sp/>&gt;<sp/>1<sp/>?<sp/>Args[1]<sp/>:<sp/>CopyMethod;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>Visitor-&gt;Error<sp/>=<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CallError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Recursive<sp/>visit<sp/>detected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>Visitor-&gt;Args[0]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Visitor;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args2<sp/>=<sp/>ml_alloc_args(2);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>Args2[0]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Visitor;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>Args2[1]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>Visitor-&gt;Fn,<sp/>2,<sp/>Args2);</highlight></codeline>
<codeline lineno="998"><highlight class="normal">}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;copy&quot;</highlight><highlight class="normal">,<sp/>MLVisitorT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight><highlight class="comment">//&lt;Visitor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Default<sp/>visitor<sp/>implementation,<sp/>just<sp/>returns<sp/>:mini:`Value`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_NANBOXING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_tag(Args[1]))<sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref><sp/>*Visitor<sp/>=<sp/>(<ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>inthash_insert(Visitor-&gt;Cache,<sp/>(uintptr_t)Args[1],<sp/>Args[1]);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_NANBOXING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="1014"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;const&quot;</highlight><highlight class="normal">,<sp/>MLVisitorT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="comment">//&lt;Visitor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Default<sp/>visitor<sp/>implementation,<sp/>just<sp/>returns<sp/>:mini:`Value`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_NANBOXING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_tag(Args[1]))<sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref><sp/>*Visitor<sp/>=<sp/>(<ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>inthash_insert(Visitor-&gt;Cache,<sp/>(uintptr_t)Args[1],<sp/>Args[1]);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_NANBOXING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="1030"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;in&quot;</highlight><highlight class="normal">,<sp/>MLAnyT,<sp/>MLTypeT)<sp/>{</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="comment">//&gt;Value<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Value`<sp/>if<sp/>it<sp/>is<sp/>an<sp/>instance<sp/>of<sp/>:mini:`Type`<sp/>or<sp/>a<sp/>type<sp/>that<sp/>inherits<sp/>from<sp/>:mini:`Type`<sp/>and<sp/>:mini:`nil`<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_is_subtype(ml_typeof(Args[0]),<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[1])<sp/>?<sp/>Args[0]<sp/>:<sp/>MLNil;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal">ML_METHOD_ANON(MLCompilerSwitch,<sp/></highlight><highlight class="stringliteral">&quot;compiler::switch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal">ML_METHOD(MLCompilerSwitch,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="1047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal">ML_METHOD(MLCompilerSwitch,<sp/>MLTypeT)<sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Switch<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)stringmap_search(Type-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;switch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Switch)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SwitchError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>does<sp/>not<sp/>support<sp/>switch&quot;</highlight><highlight class="normal">,<sp/>Type-&gt;Name);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Switch;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057" refid="structml__type__case__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Index;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal">}<sp/><ref refid="structml__type__case__t" kindref="compound">ml_type_case_t</ref>;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062" refid="structml__type__switch__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__case__t" kindref="compound">ml_type_case_t</ref><sp/>Cases[];</highlight></codeline>
<codeline lineno="1065"><highlight class="normal">}<sp/><ref refid="structml__type__switch__t" kindref="compound">ml_type_switch_t</ref>;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_type_switch(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__type__switch__t" kindref="compound">ml_type_switch_t</ref><sp/>*Switch,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>ml_typeof(ml_deref(Args[0]));</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__type__case__t" kindref="compound">ml_type_case_t</ref><sp/>*Case<sp/>=<sp/>Switch-&gt;Cases;;<sp/>++Case)<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_subtype(Type,<sp/>Case-&gt;Type))<sp/>ML_RETURN(Case-&gt;Index);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal">ML_TYPE(MLTypeSwitchT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;type-switch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_type_switch</highlight></codeline>
<codeline lineno="1079"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal">ML_FUNCTION_INLINE(MLTypeSwitch)<sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Total<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLListT);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Total<sp/>+=<sp/>ml_list_length(Args[I]);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__switch__t" kindref="compound">ml_type_switch_t</ref><sp/>*Switch<sp/>=<sp/>xnew(<ref refid="structml__type__switch__t" kindref="compound">ml_type_switch_t</ref>,<sp/>Total,<sp/><ref refid="structml__type__case__t" kindref="compound">ml_type_case_t</ref>);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>Switch-&gt;Type<sp/>=<sp/>MLTypeSwitchT;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__case__t" kindref="compound">ml_type_case_t</ref><sp/>*Case<sp/>=<sp/>Switch-&gt;Cases;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[I],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Iter-&gt;Value;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLTypeT))<sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Type<sp/>=<sp/>MLNilT;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>value<sp/>in<sp/>type<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Index<sp/>=<sp/>ml_integer(I);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Case;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>Case-&gt;Type<sp/>=<sp/>MLAnyT;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/>Case-&gt;Index<sp/>=<sp/>ml_integer(Count);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Switch;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_serialize,<sp/>MLTypeSwitchT,<sp/><ref refid="structml__type__switch__t" kindref="compound">ml_type_switch_t</ref><sp/>*Switch)<sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_put(Result,<sp/>ml_cstring(</highlight><highlight class="stringliteral">&quot;type-switch&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Index<sp/>=<sp/>NULL,<sp/>*Last<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__type__case__t" kindref="compound">ml_type_case_t</ref><sp/>*Case<sp/>=<sp/>Switch-&gt;Cases;;<sp/>++Case)<sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Case-&gt;Type<sp/>!=<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Case-&gt;Index<sp/>!=<sp/>Index)<sp/>{</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index<sp/>=<sp/>Case-&gt;Index;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Last<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Result,<sp/>Last);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Last,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Case-&gt;Type);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal">ML_DESERIALIZER(</highlight><highlight class="stringliteral">&quot;type-switch&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Total<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLListT);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Total<sp/>+=<sp/>ml_list_length(Args[I]);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__switch__t" kindref="compound">ml_type_switch_t</ref><sp/>*Switch<sp/>=<sp/>xnew(<ref refid="structml__type__switch__t" kindref="compound">ml_type_switch_t</ref>,<sp/>Total,<sp/><ref refid="structml__type__case__t" kindref="compound">ml_type_case_t</ref>);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>Switch-&gt;Type<sp/>=<sp/>MLTypeSwitchT;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__case__t" kindref="compound">ml_type_case_t</ref><sp/>*Case<sp/>=<sp/>Switch-&gt;Cases;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[I],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Iter-&gt;Value;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLTypeT))<sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Type<sp/>=<sp/>MLNilT;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>value<sp/>in<sp/>type<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Index<sp/>=<sp/>ml_integer(I);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Case;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>Case-&gt;Type<sp/>=<sp/>MLAnyT;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/>Case-&gt;Index<sp/>=<sp/>ml_integer(Count);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Switch;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ml_hash_chain(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Chain)<sp/>{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Value<sp/>=<sp/>ml_deref(Value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Link<sp/>=<sp/>Chain;<sp/>Link;<sp/>Link<sp/>=<sp/>Link-&gt;Previous)<sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Link-&gt;Value<sp/>==<sp/>Value)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Link-&gt;Index;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>NewChain[1]<sp/>=<sp/>{{Chain,<sp/>Value,<sp/>Chain<sp/>?<sp/>Chain-&gt;Index<sp/>+<sp/>1<sp/>:<sp/>1}};</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_typeof(Value)-&gt;hash(Value,<sp/>NewChain);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_NANBOXING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NegOne<sp/>ml_int32(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>One<sp/>ml_int32(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Zero<sp/>ml_int32(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>One[1]<sp/>=<sp/>{{MLIntegerT,<sp/>1}};</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>NegOne[1]<sp/>=<sp/>{{MLIntegerT,<sp/>-1}};</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>Zero[1]<sp/>=<sp/>{{MLIntegerT,<sp/>0}};</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal">ML_METHODVZ(</highlight><highlight class="stringliteral">&quot;()&quot;</highlight><highlight class="normal">,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>ml_deref(Args[0]);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>ml_typeof(Value);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Type-&gt;call<sp/>==<sp/>ml_default_call)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&lt;%s&gt;<sp/>is<sp/>not<sp/>callable&quot;</highlight><highlight class="normal">,<sp/>Type-&gt;Name);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Type-&gt;call(Caller,<sp/>Value,<sp/>Count<sp/>-<sp/>1,<sp/>Args<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLAnyT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compares<sp/>:mini:`Value/1`<sp/>and<sp/>:mini:`Value/2`<sp/>and<sp/>returns<sp/>:mini:`-1`,<sp/>:mini:`0`<sp/>or<sp/>:mini:`1`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>comparison<sp/>is<sp/>based<sp/>on<sp/>the<sp/>types<sp/>and<sp/>internal<sp/>addresses<sp/>of<sp/>:mini:`Value/1`<sp/>and<sp/>:mini:`Value/2`<sp/>and<sp/>thus<sp/>only<sp/>has<sp/>no<sp/>persistent<sp/>meaning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type1<sp/>=<sp/>ml_typeof(Args[0]);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type2<sp/>=<sp/>ml_typeof(Args[1]);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Type1<sp/>&lt;<sp/>Type2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)NegOne;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Type1<sp/>&gt;<sp/>Type2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)One;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Args[0]<sp/>&lt;<sp/>Args[1])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)NegOne;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Args[0]<sp/>&gt;<sp/>Args[1])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)One;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Zero;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLNilT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)NegOne;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLAnyT,<sp/>MLNilT)<sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)One;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLNilT,<sp/>MLNilT)<sp/>{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Zero;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>hash<sp/>for<sp/>:mini:`Value`<sp/>for<sp/>use<sp/>in<sp/>lookup<sp/>tables,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(ml_typeof(Value)-&gt;hash(Value,<sp/>NULL));</highlight></codeline>
<codeline lineno="1224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">,<sp/>MLAnyT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="comment">//&gt;Value/2<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Value/2`<sp/>if<sp/>:mini:`Value/1`<sp/>and<sp/>:mini:`Value/2`<sp/>are<sp/>exactly<sp/>the<sp/>same<sp/>instance<sp/>and<sp/>:mini:`nil`<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Args[0]<sp/>==<sp/>Args[1])<sp/>?<sp/>Args[1]<sp/>:<sp/>MLNil;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;!=&quot;</highlight><highlight class="normal">,<sp/>MLAnyT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight><highlight class="comment">//&gt;Value/2<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Value/2`<sp/>if<sp/>:mini:`Value/1`<sp/>and<sp/>:mini:`Value/2`<sp/>are<sp/>not<sp/>exactly<sp/>the<sp/>same<sp/>instance<sp/>and<sp/>:mini:`nil`<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Args[0]<sp/>!=<sp/>Args[1])<sp/>?<sp/>Args[1]<sp/>:<sp/>MLNil;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242" refid="structml__compare__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Comparison;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args,<sp/>**End;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Values[];</highlight></codeline>
<codeline lineno="1247"><highlight class="normal">}<sp/><ref refid="structml__compare__state__t" kindref="compound">ml_compare_state_t</ref>;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_compare_state_run(<ref refid="structml__compare__state__t" kindref="compound">ml_compare_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Result);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Result);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Result;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++State-&gt;Args<sp/>==<sp/>State-&gt;End)<sp/>{</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State-&gt;Base.Caller,<sp/>State-&gt;Comparison,<sp/>2,<sp/>State-&gt;Args<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Comparison,<sp/>2,<sp/>State-&gt;Args<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_comp_any_any_any(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="1261"><highlight class="preprocessor">ML_METHODVX(NAME,<sp/>MLAnyT,<sp/>MLAnyT,<sp/>MLAnyT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1262"><highlight class="preprocessor"></highlight><highlight class="comment">/*&gt;any|nil</highlight></codeline>
<codeline lineno="1263"><highlight class="comment">//<sp/>Returns<sp/>:mini:`Arg/n`<sp/>if<sp/>:mini:`Arg/1<sp/>SYMBOL<sp/>Arg/2<sp/>SYMBOL<sp/>...<sp/>SYMBOL<sp/>Arg/n`<sp/>and<sp/>:mini:`nil`<sp/>otherwise.</highlight></codeline>
<codeline lineno="1264"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="1265"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_compare_state_t<sp/>*State<sp/>=<sp/>xnew(ml_compare_state_t,<sp/>Count<sp/>-<sp/>1,<sp/>ml_value_t<sp/>*);<sp/>\</highlight></codeline>
<codeline lineno="1266"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;<sp/>\</highlight></codeline>
<codeline lineno="1267"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;<sp/>\</highlight></codeline>
<codeline lineno="1268"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_compare_state_run;<sp/>\</highlight></codeline>
<codeline lineno="1269"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>State-&gt;Comparison<sp/>=<sp/>ml_method(NAME);<sp/>\</highlight></codeline>
<codeline lineno="1270"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>2;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>State-&gt;Values[I<sp/>-<sp/>1]<sp/>=<sp/>Args[I];<sp/>\</highlight></codeline>
<codeline lineno="1271"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>State-&gt;Args<sp/>=<sp/>State-&gt;Values;<sp/>\</highlight></codeline>
<codeline lineno="1272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>State-&gt;End<sp/>=<sp/>State-&gt;Args<sp/>+<sp/>(Count<sp/>-<sp/>2);<sp/>\</highlight></codeline>
<codeline lineno="1273"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>ml_call((ml_state_t<sp/>*)State,<sp/>State-&gt;Comparison,<sp/>2,<sp/>Args);<sp/>\</highlight></codeline>
<codeline lineno="1274"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal">ml_comp_any_any_any(</highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">,<sp/>=);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal">ml_comp_any_any_any(</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">,<sp/>&lt;);</highlight></codeline>
<codeline lineno="1278"><highlight class="normal">ml_comp_any_any_any(</highlight><highlight class="stringliteral">&quot;&lt;=&quot;</highlight><highlight class="normal">,<sp/>&lt;=);</highlight></codeline>
<codeline lineno="1279"><highlight class="normal">ml_comp_any_any_any(</highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">,<sp/>&gt;);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal">ml_comp_any_any_any(</highlight><highlight class="stringliteral">&quot;&gt;=&quot;</highlight><highlight class="normal">,<sp/>&gt;=);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_distinct_state_run(<ref refid="structml__compare__state__t" kindref="compound">ml_compare_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Result);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Result);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>State-&gt;Comparison;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++State-&gt;Args<sp/>==<sp/>State-&gt;End)<sp/>{</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State-&gt;Base.Caller,<sp/>NotEqualMethod,<sp/>2,<sp/>State-&gt;Args<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>NotEqualMethod,<sp/>2,<sp/>State-&gt;Args<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal">ML_METHODVX(</highlight><highlight class="stringliteral">&quot;!=&quot;</highlight><highlight class="normal">,<sp/>MLAnyT,<sp/>MLAnyT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="comment">//&gt;any|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Arg/n`<sp/>if<sp/>:mini:`Arg/1<sp/>!=<sp/>Arg/i`<sp/>for<sp/>i<sp/>=<sp/>2,<sp/>...,<sp/>n<sp/>and<sp/>:mini:`nil`<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compare__state__t" kindref="compound">ml_compare_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__compare__state__t" kindref="compound">ml_compare_state_t</ref>,<sp/>Count<sp/>-<sp/>1,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_distinct_state_run;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Comparison<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>2;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>State-&gt;Values[I<sp/>-<sp/>1]<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args<sp/>=<sp/>State-&gt;Values;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;End<sp/>=<sp/>State-&gt;Args<sp/>+<sp/>(Count<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>NotEqualMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="1305" refid="structml__comp__state__t" refkind="compound"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[2];</highlight></codeline>
<codeline lineno="1310"><highlight class="normal">}<sp/><ref refid="structml__comp__state__t" kindref="compound">ml_comp_state_t</ref>;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_min_state_run(<ref refid="structml__comp__state__t" kindref="compound">ml_comp_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result<sp/>!=<sp/>MLNil)<sp/>ML_RETURN(State-&gt;Args[0]);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(State-&gt;Args[1]);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;min&quot;</highlight><highlight class="normal">,<sp/>MLAnyT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A`<sp/>if<sp/>:mini:`A<sp/>&lt;<sp/>B`<sp/>and<sp/>:mini:`B`<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__comp__state__t" kindref="compound">ml_comp_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__comp__state__t" kindref="compound">ml_comp_state_t</ref>);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_min_state_run;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>LessMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_max_state_run(<ref refid="structml__comp__state__t" kindref="compound">ml_comp_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result<sp/>!=<sp/>MLNil)<sp/>ML_RETURN(State-&gt;Args[0]);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(State-&gt;Args[1]);</highlight></codeline>
<codeline lineno="1338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;max&quot;</highlight><highlight class="normal">,<sp/>MLAnyT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A`<sp/>if<sp/>:mini:`A<sp/>&gt;<sp/>B`<sp/>and<sp/>:mini:`B`<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__comp__state__t" kindref="compound">ml_comp_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__comp__state__t" kindref="compound">ml_comp_state_t</ref>);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_max_state_run;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>GreaterMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>a<sp/>representation<sp/>of<sp/>:mini:`Value`<sp/>to<sp/>:mini:`Buffer`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Args[1])-&gt;Name);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="1361" refid="structml__any__switch__t" refkind="compound"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Default;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinthash__t" kindref="compound">inthash_t</ref><sp/>Cases[1];</highlight></codeline>
<codeline lineno="1367"><highlight class="normal">}<sp/><ref refid="structml__any__switch__t" kindref="compound">ml_any_switch_t</ref>;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_any_switch(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__any__switch__t" kindref="compound">ml_any_switch_t</ref><sp/>*Switch,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg<sp/>=<sp/>ml_deref(Args[0]);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Index<sp/>=<sp/>inthash_search(Switch-&gt;Cases,<sp/>(uintptr_t)Arg);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Index<sp/>?:<sp/>Switch-&gt;Default);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal">ML_TYPE(MLAnySwitchT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;any-switch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_any_switch</highlight></codeline>
<codeline lineno="1379"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal">ML_FUNCTION_INLINE(MLAnySwitch)<sp/>{</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLListT);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__any__switch__t" kindref="compound">ml_any_switch_t</ref><sp/>*Switch<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__any__switch__t" kindref="compound">ml_any_switch_t</ref>);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/>Switch-&gt;Type<sp/>=<sp/>MLAnySwitchT;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[I],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inthash_insert(Switch-&gt;Cases,<sp/>(uintptr_t)Iter-&gt;Value,<sp/>ml_integer(I));</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/>Switch-&gt;Default<sp/>=<sp/>ml_integer(Count);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Switch;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_value_set_name(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)<sp/>{</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_value_set_name)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Value),<sp/>ml_value_set_name);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(function)<sp/>function(Value,<sp/>Name);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_value_find_all(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_value_find_fn<sp/>RefFn)<sp/>{</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_value_find_all)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Value),<sp/>ml_value_find_all);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(function)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(Value,<sp/>Data,<sp/>RefFn);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/>RefFn(Data,<sp/>Value,<sp/>0);</highlight></codeline>
<codeline lineno="1404" refid="structml__find__refs__t" refkind="compound"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Refs;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinthash__t" kindref="compound">inthash_t</ref><sp/>Done[1];</highlight></codeline>
<codeline lineno="1410"><highlight class="normal">}<sp/><ref refid="structml__find__refs__t" kindref="compound">ml_find_refs_t</ref>;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_find_all_fn(<ref refid="structml__find__refs__t" kindref="compound">ml_find_refs_t</ref><sp/>*FindRefs,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HasRefs)<sp/>{</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inthash_insert(FindRefs-&gt;Done,<sp/>(uintptr_t)Value,<sp/>Value))<sp/>{</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(FindRefs-&gt;Refs,<sp/>Value);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_find_all_typed_fn(<ref refid="structml__find__refs__t" kindref="compound">ml_find_refs_t</ref><sp/>*FindRefs,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HasRefs)<sp/>{</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inthash_insert(FindRefs-&gt;Done,<sp/>(uintptr_t)Value,<sp/>Value))<sp/>{</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>FindRefs-&gt;Type))<sp/>ml_list_put(FindRefs-&gt;Refs,<sp/>Value);</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal">ML_FUNCTION(MLFindAll)<sp/>{</highlight></codeline>
<codeline lineno="1430"><highlight class="comment">//@findall</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="comment">//&lt;Filter?:boolean|type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight><highlight class="comment">//&gt;list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>list<sp/>of<sp/>all<sp/>unique<sp/>values<sp/>referenced<sp/>by<sp/>:mini:`Value`<sp/>(including<sp/>:mini:`Value`).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__find__refs__t" kindref="compound">ml_find_refs_t</ref><sp/>FindRefs[1]<sp/>=<sp/>{{ml_list(),<sp/>MLAnyT,<sp/>{INTHASH_INIT}}};</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_value_find_fn<sp/>RefFn<sp/>=<sp/>(ml_value_find_fn)ml_find_all_fn;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>MLTypeT);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FindRefs-&gt;Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RefFn<sp/>=<sp/>(ml_value_find_fn)ml_find_all_typed_fn;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_value_find_all(Args[0],<sp/>FindRefs,<sp/>(ml_value_find_fn)RefFn);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FindRefs-&gt;Refs;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_value_is_constant(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_value_is_constant)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Value),<sp/>ml_value_is_constant);</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(function)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(Value);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal">ML_FUNCTION(MLIsConstant)<sp/>{</highlight></codeline>
<codeline lineno="1455"><highlight class="comment">//@isconstant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight><highlight class="comment">//&gt;any|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`some`<sp/>if<sp/>it<sp/>is<sp/>a<sp/>constant<sp/>(i.e.<sp/>directly<sp/>immutable<sp/>and<sp/>not<sp/>referencing<sp/>any<sp/>mutable<sp/>values),<sp/>otherwise<sp/>returns<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>isconstant(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>isconstant(1.5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>isconstant(&quot;Hello&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>isconstant(true)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>isconstant([1,<sp/>2,<sp/>3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>isconstant((1,<sp/>2,<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>isconstant((1,<sp/>[2],<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_value_is_constant(Args[0]))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Iterators<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_iterate(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_iterate)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Value),<sp/>ml_iterate);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(function)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args<sp/>=<sp/>ml_alloc_args(1);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>IterateMethod,<sp/>1,<sp/>Args);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_iter_value(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_iter_value)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Iter),<sp/>ml_iter_value);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(function)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(Caller,<sp/>Iter);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args<sp/>=<sp/>ml_alloc_args(1);</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>Iter;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>ValueMethod,<sp/>1,<sp/>Args);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_iter_key(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_iter_key)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Iter),<sp/>ml_iter_key);</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(function)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(Caller,<sp/>Iter);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args<sp/>=<sp/>ml_alloc_args(1);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>Iter;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>KeyMethod,<sp/>1,<sp/>Args);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_iter_next(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_iter_next)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Iter),<sp/>ml_iter_next);</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(function)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(Caller,<sp/>Iter);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args<sp/>=<sp/>ml_alloc_args(1);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>Iter;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>NextMethod,<sp/>1,<sp/>Args);</highlight></codeline>
<codeline lineno="1503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Functions<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;!&quot;</highlight><highlight class="normal">,<sp/>MLFunctionT,<sp/>MLTupleT)<sp/>{</highlight></codeline>
<codeline lineno="1509"><highlight class="comment">//&lt;Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight><highlight class="comment">//&lt;Tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calls<sp/>:mini:`Function`<sp/>with<sp/>the<sp/>values<sp/>in<sp/>:mini:`Tuple`<sp/>as<sp/>positional<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Tuple<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>Function,<sp/>Tuple-&gt;Size,<sp/>Tuple-&gt;Values);</highlight></codeline>
<codeline lineno="1516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;!&quot;</highlight><highlight class="normal">,<sp/>MLFunctionT,<sp/>MLListT)<sp/>{</highlight></codeline>
<codeline lineno="1520"><highlight class="comment">//&lt;Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight><highlight class="comment">//&lt;List</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calls<sp/>:mini:`Function`<sp/>with<sp/>the<sp/>values<sp/>in<sp/>:mini:`List`<sp/>as<sp/>positional<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count2<sp/>=<sp/>ml_list_length(List);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args2<sp/>=<sp/>ml_alloc_args(Count2);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_to_array(List,<sp/>Args2);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>Function,<sp/>Count2,<sp/>Args2);</highlight></codeline>
<codeline lineno="1530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;!&quot;</highlight><highlight class="normal">,<sp/>MLFunctionT,<sp/>MLMapT)<sp/>{</highlight></codeline>
<codeline lineno="1534"><highlight class="comment">//&lt;Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight><highlight class="comment">//&lt;Map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calls<sp/>:mini:`Function`<sp/>with<sp/>the<sp/>keys<sp/>and<sp/>values<sp/>in<sp/>:mini:`Map`<sp/>as<sp/>named<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>error<sp/>if<sp/>any<sp/>of<sp/>the<sp/>keys<sp/>in<sp/>:mini:`Map`<sp/>is<sp/>not<sp/>a<sp/>string<sp/>or<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Map<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count2<sp/>=<sp/>ml_map_size(Map)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args2<sp/>=<sp/>ml_alloc_args(Count2);</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Names<sp/>=<sp/>ml_names();</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Arg<sp/>=<sp/>Args2;</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/>*(Arg++)<sp/>=<sp/>Names;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_MAP_FOREACH(Map,<sp/>Node)<sp/>{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Name<sp/>=<sp/>Node-&gt;Key;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Name,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_names_add(Names,<sp/>Name);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Parameter<sp/>names<sp/>must<sp/>be<sp/>strings<sp/>or<sp/>methods&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(Arg++)<sp/>=<sp/>Node-&gt;Value;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>Function,<sp/>Count2,<sp/>Args2);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;!&quot;</highlight><highlight class="normal">,<sp/>MLFunctionT,<sp/>MLTupleT,<sp/>MLMapT)<sp/>{</highlight></codeline>
<codeline lineno="1560"><highlight class="comment">//&lt;Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight><highlight class="comment">//&lt;Tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight><highlight class="comment">//&lt;Map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calls<sp/>:mini:`Function`<sp/>with<sp/>the<sp/>values<sp/>in<sp/>:mini:`Tuple`<sp/>as<sp/>positional<sp/>arguments<sp/>and<sp/>the<sp/>keys<sp/>and<sp/>values<sp/>in<sp/>:mini:`Map`<sp/>as<sp/>named<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>error<sp/>if<sp/>any<sp/>of<sp/>the<sp/>keys<sp/>in<sp/>:mini:`Map`<sp/>is<sp/>not<sp/>a<sp/>string<sp/>or<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Tuple<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Map<sp/>=<sp/>Args[2];</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TupleCount<sp/>=<sp/>Tuple-&gt;Size;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MapCount<sp/>=<sp/>ml_map_size(Map);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count2<sp/>=<sp/>TupleCount<sp/>+<sp/>MapCount<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args2<sp/>=<sp/>ml_alloc_args(Count2);</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(Args2,<sp/>Tuple-&gt;Values,<sp/>TupleCount<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*));</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Names<sp/>=<sp/>ml_names();</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Arg<sp/>=<sp/>Args2<sp/>+<sp/>TupleCount;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/>*(Arg++)<sp/>=<sp/>Names;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_MAP_FOREACH(Map,<sp/>Node)<sp/>{</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Name<sp/>=<sp/>Node-&gt;Key;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Name,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_names_add(Names,<sp/>Name);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Parameter<sp/>names<sp/>must<sp/>be<sp/>strings<sp/>or<sp/>methods&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(Arg++)<sp/>=<sp/>Node-&gt;Value;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>Function,<sp/>Count2,<sp/>Args2);</highlight></codeline>
<codeline lineno="1587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;!&quot;</highlight><highlight class="normal">,<sp/>MLFunctionT,<sp/>MLListT,<sp/>MLMapT)<sp/>{</highlight></codeline>
<codeline lineno="1591"><highlight class="comment">//&lt;Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight><highlight class="comment">//&lt;List</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight><highlight class="comment">//&lt;Map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calls<sp/>:mini:`Function`<sp/>with<sp/>the<sp/>values<sp/>in<sp/>:mini:`List`<sp/>as<sp/>positional<sp/>arguments<sp/>and<sp/>the<sp/>keys<sp/>and<sp/>values<sp/>in<sp/>:mini:`Map`<sp/>as<sp/>named<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>error<sp/>if<sp/>any<sp/>of<sp/>the<sp/>keys<sp/>in<sp/>:mini:`Map`<sp/>is<sp/>not<sp/>a<sp/>string<sp/>or<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ListCount<sp/>=<sp/>ml_list_length(Args[1]);</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Map<sp/>=<sp/>Args[2];</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MapCount<sp/>=<sp/>ml_map_size(Map);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count2<sp/>=<sp/>ListCount<sp/>+<sp/>MapCount<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args2<sp/>=<sp/>ml_alloc_args(Count2);</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_to_array(Args[1],<sp/>Args2);</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Names<sp/>=<sp/>ml_names();</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Arg<sp/>=<sp/>Args2<sp/>+<sp/>ListCount;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>*(Arg++)<sp/>=<sp/>Names;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_MAP_FOREACH(Map,<sp/>Node)<sp/>{</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Name<sp/>=<sp/>Node-&gt;Key;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Name,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_names_add(Names,<sp/>Name);</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Parameter<sp/>names<sp/>must<sp/>be<sp/>strings<sp/>or<sp/>methods&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(Arg++)<sp/>=<sp/>Node-&gt;Value;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>Function,<sp/>Count2,<sp/>Args2);</highlight></codeline>
<codeline lineno="1617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__attribute__<sp/>((noinline))<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cfunction_call_deref(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__cfunction__t" kindref="compound">ml_cfunction_t</ref><sp/>*Function,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I)<sp/>{</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[I]<sp/>=<sp/>Args[I]-&gt;Type-&gt;deref(Args[I]);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--I<sp/>&gt;=<sp/>0)<sp/>Args[I]<sp/>=<sp/>ml_deref(Args[I]);</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN((Function-&gt;Callback)(Function-&gt;Data,<sp/>Count,<sp/>Args));</highlight></codeline>
<codeline lineno="1623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cfunction_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__cfunction__t" kindref="compound">ml_cfunction_t</ref><sp/>*Function,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Count;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_NANBOXING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_tag(Args[I])<sp/>&amp;&amp;<sp/>Args[I]-&gt;Type-&gt;deref<sp/>!=<sp/>ml_default_deref)<sp/>{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Args[I]-&gt;Type-&gt;deref<sp/>!=<sp/>ml_default_deref)<sp/>{</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_cfunction_call_deref(Caller,<sp/>Function,<sp/>Count,<sp/>Args,<sp/>I);</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN((Function-&gt;Callback)(Function-&gt;Data,<sp/>Count,<sp/>Args));</highlight></codeline>
<codeline lineno="1636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal">ML_TYPE(MLCFunctionT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;c-function&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_cfunction_call</highlight></codeline>
<codeline lineno="1641"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cfunction(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_callback_t<sp/>Callback)<sp/>{</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cfunction__t" kindref="compound">ml_cfunction_t</ref><sp/>*Function<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__cfunction__t" kindref="compound">ml_cfunction_t</ref>);</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Type<sp/>=<sp/>MLCFunctionT;</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Data<sp/>=<sp/>Data;</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Callback<sp/>=<sp/>Callback;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Function;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cfunction2(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_callback_t<sp/>Callback,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line)<sp/>{</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cfunction__t" kindref="compound">ml_cfunction_t</ref><sp/>*Function<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__cfunction__t" kindref="compound">ml_cfunction_t</ref>);</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Type<sp/>=<sp/>MLCFunctionT;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Data<sp/>=<sp/>Data;</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Callback<sp/>=<sp/>Callback;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Source<sp/>=<sp/>Source;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Line<sp/>=<sp/>Line;</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Function;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_function_source,<sp/>MLCFunctionT,<sp/><ref refid="structml__cfunction__t" kindref="compound">ml_cfunction_t</ref><sp/>*Function,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**Source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Line)<sp/>{</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function-&gt;Source)<sp/>{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Source<sp/>=<sp/>Function-&gt;Source;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Line<sp/>=<sp/>Function-&gt;Line;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLCFunctionT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__cfunction__t" kindref="compound">ml_cfunction_t</ref><sp/>*Function)<sp/>{</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN((Function-&gt;Callback)(Function-&gt;Data,<sp/>0,<sp/>NULL));</highlight></codeline>
<codeline lineno="1673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__attribute__<sp/>((noinline))<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cfunctionx_call_deref(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref><sp/>*Function,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I)<sp/>{</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[I]<sp/>=<sp/>Args[I]-&gt;Type-&gt;deref(Args[I]);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--I<sp/>&gt;=<sp/>0)<sp/>Args[I]<sp/>=<sp/>ml_deref(Args[I]);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Function-&gt;Callback)(Caller,<sp/>Function-&gt;Data,<sp/>Count,<sp/>Args);</highlight></codeline>
<codeline lineno="1679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cfunctionx_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref><sp/>*Function,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Count;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_NANBOXING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_tag(Args[I])<sp/>&amp;&amp;<sp/>Args[I]-&gt;Type-&gt;deref<sp/>!=<sp/>ml_default_deref)<sp/>{</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Args[I]-&gt;Type-&gt;deref<sp/>!=<sp/>ml_default_deref)<sp/>{</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_cfunctionx_call_deref(Caller,<sp/>Function,<sp/>Count,<sp/>Args,<sp/>I);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>Args[I]<sp/>=<sp/>ml_deref(Args[I]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Function-&gt;Callback)(Caller,<sp/>Function-&gt;Data,<sp/>Count,<sp/>Args);</highlight></codeline>
<codeline lineno="1693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal">ML_TYPE(MLCFunctionXT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;c-functionx&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_cfunctionx_call</highlight></codeline>
<codeline lineno="1698"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cfunctionx(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_callbackx_t<sp/>Callback)<sp/>{</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref><sp/>*Function<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref>);</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Type<sp/>=<sp/>MLCFunctionXT;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Data<sp/>=<sp/>Data;</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Callback<sp/>=<sp/>Callback;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Function;</highlight></codeline>
<codeline lineno="1706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cfunctionx2(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_callbackx_t<sp/>Callback,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line)<sp/>{</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref><sp/>*Function<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref>);</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Type<sp/>=<sp/>MLCFunctionXT;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Data<sp/>=<sp/>Data;</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Callback<sp/>=<sp/>Callback;</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Source<sp/>=<sp/>Source;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Line<sp/>=<sp/>Line;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Function;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_function_source,<sp/>MLCFunctionXT,<sp/><ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref><sp/>*Function,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**Source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Line)<sp/>{</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function-&gt;Source)<sp/>{</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Source<sp/>=<sp/>Function-&gt;Source;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Line<sp/>=<sp/>Function-&gt;Line;</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1726"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cfunctionz_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref><sp/>*Function,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Function-&gt;Callback)(Caller,<sp/>Function-&gt;Data,<sp/>Count,<sp/>Args);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal">ML_TYPE(MLCFunctionZT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;c-functionx&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_cfunctionz_call</highlight></codeline>
<codeline lineno="1735"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cfunctionz(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_callbackx_t<sp/>Callback)<sp/>{</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref><sp/>*Function<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref>);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Type<sp/>=<sp/>MLCFunctionZT;</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Data<sp/>=<sp/>Data;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Callback<sp/>=<sp/>Callback;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Function;</highlight></codeline>
<codeline lineno="1743"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cfunctionz2(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_callbackx_t<sp/>Callback,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line)<sp/>{</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref><sp/>*Function<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref>);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Type<sp/>=<sp/>MLCFunctionZT;</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Data<sp/>=<sp/>Data;</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Callback<sp/>=<sp/>Callback;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Source<sp/>=<sp/>Source;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Line<sp/>=<sp/>Line;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Function;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_return_nil(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_identity(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="1761" refid="structml__partial__function__t" refkind="compound"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__partial__function__t" kindref="compound">ml_partial_function_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function;</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/>Set;</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[];</highlight></codeline>
<codeline lineno="1768"><highlight class="normal">}<sp/><ref refid="structml__partial__function__t" kindref="compound">ml_partial_function_t</ref>;</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__attribute__<sp/>((noinline))<sp/>ml_partial_function_copy_args(<ref refid="structml__partial__function__t" kindref="compound">ml_partial_function_t</ref><sp/>*Partial,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CombinedCount,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**CombinedArgs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Copy[Count];</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(Copy,<sp/>Args,<sp/>Count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*));</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0,<sp/>J<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>I<sp/>&lt;<sp/>Partial-&gt;Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CombinedArgs[I]<sp/>=<sp/>Partial-&gt;Args[I]<sp/>?:<sp/>(J<sp/>&lt;<sp/>Count)<sp/>?<sp/>Copy[J++]<sp/>:<sp/>MLNil;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>I<sp/>&lt;<sp/>CombinedCount;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CombinedArgs[I]<sp/>=<sp/>(J<sp/>&lt;<sp/>Count)<sp/>?<sp/>Copy[J++]<sp/>:<sp/>MLNil;</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_partial_function_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__partial__function__t" kindref="compound">ml_partial_function_t</ref><sp/>*Partial,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CombinedCount<sp/>=<sp/>Count<sp/>+<sp/>Partial-&gt;Set;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CombinedCount<sp/>&lt;<sp/>Partial-&gt;Count)<sp/>CombinedCount<sp/>=<sp/>Partial-&gt;Count;</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**CombinedArgs<sp/>=<sp/>ml_alloc_args(CombinedCount);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CombinedArgs<sp/>==<sp/>Args)<sp/>{</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_partial_function_copy_args(Partial,<sp/>CombinedCount,<sp/>CombinedArgs,<sp/>Count,<sp/>Args);</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0,<sp/>J<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>I<sp/>&lt;<sp/>Partial-&gt;Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CombinedArgs[I]<sp/>=<sp/>Partial-&gt;Args[I]<sp/>?:<sp/>(J<sp/>&lt;<sp/>Count)<sp/>?<sp/>Args[J++]<sp/>:<sp/>MLNil;</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>I<sp/>&lt;<sp/>CombinedCount;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CombinedArgs[I]<sp/>=<sp/>(J<sp/>&lt;<sp/>Count)<sp/>?<sp/>Args[J++]<sp/>:<sp/>MLNil;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>Partial-&gt;Function,<sp/>CombinedCount,<sp/>CombinedArgs);</highlight></codeline>
<codeline lineno="1798"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal">ML_TYPE(MLFunctionPartialT,<sp/>(MLFunctionT,<sp/>MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;partial-function&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_partial_function_call</highlight></codeline>
<codeline lineno="1803"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_partial_function(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__partial__function__t" kindref="compound">ml_partial_function_t</ref><sp/>*Partial<sp/>=<sp/>xnew(<ref refid="structml__partial__function__t" kindref="compound">ml_partial_function_t</ref>,<sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>Partial-&gt;Type<sp/>=<sp/>MLFunctionPartialT;</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/>Partial-&gt;Function<sp/>=<sp/>Function;</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/>Partial-&gt;Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/>Partial-&gt;Set<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Partial;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_partial_function_set(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Partial0,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Index,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__partial__function__t" kindref="compound">ml_partial_function_t</ref><sp/>*Partial<sp/>=<sp/>(<ref refid="structml__partial__function__t" kindref="compound">ml_partial_function_t</ref><sp/>*)Partial0;</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/>++Partial-&gt;Set;</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Partial-&gt;Count<sp/>&lt;<sp/>Index<sp/>+<sp/>1)<sp/>Partial-&gt;Count<sp/>=<sp/>Index<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Partial-&gt;Args[Index]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;arity&quot;</highlight><highlight class="normal">,<sp/>MLFunctionPartialT)<sp/>{</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__partial__function__t" kindref="compound">ml_partial_function_t</ref><sp/>*Partial<sp/>=<sp/>(<ref refid="structml__partial__function__t" kindref="compound">ml_partial_function_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Partial-&gt;Count);</highlight></codeline>
<codeline lineno="1825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;set&quot;</highlight><highlight class="normal">,<sp/>MLFunctionPartialT)<sp/>{</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__partial__function__t" kindref="compound">ml_partial_function_t</ref><sp/>*Partial<sp/>=<sp/>(<ref refid="structml__partial__function__t" kindref="compound">ml_partial_function_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Partial-&gt;Set);</highlight></codeline>
<codeline lineno="1831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;[]&quot;</highlight><highlight class="normal">,<sp/>MLFunctionPartialT)<sp/>{</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__partial__function__t" kindref="compound">ml_partial_function_t</ref><sp/>*Partial<sp/>=<sp/>xnew(<ref refid="structml__partial__function__t" kindref="compound">ml_partial_function_t</ref>,<sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/>Partial-&gt;Type<sp/>=<sp/>MLFunctionPartialT;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/>Partial-&gt;Function<sp/>=<sp/>IndexMethod;</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/>Partial-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>Partial-&gt;Set<sp/>=<sp/>Count<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>Partial-&gt;Args[I]<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_chainedv(2,<sp/>Args[0],<sp/>Partial);</highlight></codeline>
<codeline lineno="1842"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;$!&quot;</highlight><highlight class="normal">,<sp/>MLFunctionT,<sp/>MLListT)<sp/>{</highlight></codeline>
<codeline lineno="1846"><highlight class="comment">//&lt;Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight><highlight class="comment">//&lt;List</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight><highlight class="comment">//&gt;function::partial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>function<sp/>equivalent<sp/>to<sp/>:mini:`fun(Args...)<sp/>Function(List[1],<sp/>List[2],<sp/>...,<sp/>Args...)`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__list__t" kindref="compound">ml_list_t</ref><sp/>*ArgsList<sp/>=<sp/>(<ref refid="structml__list__t" kindref="compound">ml_list_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__partial__function__t" kindref="compound">ml_partial_function_t</ref><sp/>*Partial<sp/>=<sp/>xnew(<ref refid="structml__partial__function__t" kindref="compound">ml_partial_function_t</ref>,<sp/>ArgsList-&gt;Length,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/>Partial-&gt;Type<sp/>=<sp/>MLFunctionPartialT;</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/>Partial-&gt;Function<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/>Partial-&gt;Count<sp/>=<sp/>Partial-&gt;Set<sp/>=<sp/>ArgsList-&gt;Length;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Arg<sp/>=<sp/>Partial-&gt;Args;</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(ArgsList,<sp/>Node)<sp/>*Arg++<sp/>=<sp/>Node-&gt;Value;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Partial;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;!!&quot;</highlight><highlight class="normal">,<sp/>MLFunctionT,<sp/>MLListT)<sp/>{</highlight></codeline>
<codeline lineno="1862"><highlight class="comment">//&lt;Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight><highlight class="comment">//&lt;List</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight><highlight class="comment">//&gt;function::partial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight><highlight class="comment">//<sp/>..<sp/>deprecated::<sp/>2.7.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Use<sp/>:mini:`$!`<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>function<sp/>equivalent<sp/>to<sp/>:mini:`fun(Args...)<sp/>Function(List[1],<sp/>List[2],<sp/>...,<sp/>Args...)`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__list__t" kindref="compound">ml_list_t</ref><sp/>*ArgsList<sp/>=<sp/>(<ref refid="structml__list__t" kindref="compound">ml_list_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__partial__function__t" kindref="compound">ml_partial_function_t</ref><sp/>*Partial<sp/>=<sp/>xnew(<ref refid="structml__partial__function__t" kindref="compound">ml_partial_function_t</ref>,<sp/>ArgsList-&gt;Length,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/>Partial-&gt;Type<sp/>=<sp/>MLFunctionPartialT;</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/>Partial-&gt;Function<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/>Partial-&gt;Count<sp/>=<sp/>Partial-&gt;Set<sp/>=<sp/>ArgsList-&gt;Length;</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Arg<sp/>=<sp/>Partial-&gt;Args;</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(ArgsList,<sp/>Node)<sp/>*Arg++<sp/>=<sp/>Node-&gt;Value;</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Partial;</highlight></codeline>
<codeline lineno="1879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;$&quot;</highlight><highlight class="normal">,<sp/>MLFunctionT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="1883"><highlight class="comment">//&lt;Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight><highlight class="comment">//&lt;Values...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight><highlight class="comment">//&gt;function::partial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>function<sp/>equivalent<sp/>to<sp/>:mini:`fun(Args...)<sp/>Function(Values...,<sp/>Args...)`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__partial__function__t" kindref="compound">ml_partial_function_t</ref><sp/>*Partial<sp/>=<sp/>xnew(<ref refid="structml__partial__function__t" kindref="compound">ml_partial_function_t</ref>,<sp/>Count<sp/>-<sp/>1,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/>Partial-&gt;Type<sp/>=<sp/>MLFunctionPartialT;</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/>Partial-&gt;Function<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/>Partial-&gt;Count<sp/>=<sp/>Partial-&gt;Set<sp/>=<sp/>Count<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>Partial-&gt;Args[I<sp/>-<sp/>1]<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Partial;</highlight></codeline>
<codeline lineno="1893"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLFunctionPartialT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__partial__function__t" kindref="compound">ml_partial_function_t</ref><sp/>*Partial)<sp/>{</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Partial-&gt;Set<sp/>!=<sp/>Partial-&gt;Count)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;CallError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Partial<sp/>function<sp/>used<sp/>with<sp/>missing<sp/>arguments&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>Partial-&gt;Function,<sp/>Partial-&gt;Count,<sp/>Partial-&gt;Args);</highlight></codeline>
<codeline lineno="1898" refid="structml__argless__function__t" refkind="compound"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function;</highlight></codeline>
<codeline lineno="1903"><highlight class="normal">}<sp/><ref refid="structml__argless__function__t" kindref="compound">ml_argless_function_t</ref>;</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_argless_function_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__argless__function__t" kindref="compound">ml_argless_function_t</ref><sp/>*Argless,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>Argless-&gt;Function,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="1907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal">ML_TYPE(MLFunctionArglessT,<sp/>(MLFunctionT,<sp/>MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;argless-function&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_argless_function_call</highlight></codeline>
<codeline lineno="1912"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="1916"><highlight class="comment">//&lt;Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight><highlight class="comment">//&gt;function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>function<sp/>equivalent<sp/>to<sp/>:mini:`fun(Args...)<sp/>Function()`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__argless__function__t" kindref="compound">ml_argless_function_t</ref><sp/>*Argless<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__argless__function__t" kindref="compound">ml_argless_function_t</ref>);</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/>Argless-&gt;Type<sp/>=<sp/>MLFunctionArglessT;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/>Argless-&gt;Function<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Argless;</highlight></codeline>
<codeline lineno="1923"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLFunctionArglessT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__argless__function__t" kindref="compound">ml_argless_function_t</ref><sp/>*Argless)<sp/>{</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>Argless-&gt;Function,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="1927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tuples<sp/>//</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ml_tuple_hash(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Tuple,<sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Chain)<sp/>{</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Hash<sp/>=<sp/>739;</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Tuple-&gt;Size;<sp/>++I)<sp/>Hash<sp/>=<sp/>((Hash<sp/>&lt;&lt;<sp/>3)<sp/>+<sp/>Hash)<sp/>+<sp/>ml_hash_chain(Tuple-&gt;Values[I],<sp/>Chain);</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Hash;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_tuple_deref(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Ref)<sp/>{</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Ref-&gt;NoRefs)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Ref;</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Ref-&gt;Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Old<sp/>=<sp/>Ref-&gt;Values[I];</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*New<sp/>=<sp/>ml_deref(Old);</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Old<sp/>!=<sp/>New)<sp/>{</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Deref<sp/>=<sp/>xnew(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref>,<sp/>Ref-&gt;Size,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Deref-&gt;Type<sp/>=<sp/>MLTupleT;</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Deref-&gt;Size<sp/>=<sp/>Ref-&gt;Size;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Deref-&gt;NoRefs<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>0;<sp/>J<sp/>&lt;<sp/>I;<sp/>++J)<sp/>Deref-&gt;Values[J]<sp/>=<sp/>Ref-&gt;Values[J];</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Deref-&gt;Values[I]<sp/>=<sp/>New;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>I<sp/>+<sp/>1;<sp/>J<sp/>&lt;<sp/>Ref-&gt;Size;<sp/>++J)<sp/>{</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Deref-&gt;Values[J]<sp/>=<sp/>ml_deref(Ref-&gt;Values[J]);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Deref;</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/>Ref-&gt;NoRefs<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Ref;</highlight></codeline>
<codeline lineno="1958" refid="structml__tuple__assign__t" refkind="compound"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Ref;</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Values;</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="1965"><highlight class="normal">}<sp/><ref refid="structml__tuple__assign__t" kindref="compound">ml_tuple_assign_t</ref>;</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_tuple_assign_run(<ref refid="structml__tuple__assign__t" kindref="compound">ml_tuple_assign_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Ref<sp/>=<sp/>State-&gt;Ref;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Values<sp/>=<sp/>State-&gt;Values;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>State-&gt;Index;</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>==<sp/>Ref-&gt;Size)<sp/>ML_RETURN(Values);</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>Index<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>ml_deref(ml_unpack(Values,<sp/>Index<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_assign(State,<sp/>Ref-&gt;Values[Index],<sp/>Value);</highlight></codeline>
<codeline lineno="1977"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_tuple_assign(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Ref,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Values)<sp/>{</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Ref-&gt;Size)<sp/>ML_RETURN(Values);</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__assign__t" kindref="compound">ml_tuple_assign_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__tuple__assign__t" kindref="compound">ml_tuple_assign_t</ref>);</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_tuple_assign_run;</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Ref<sp/>=<sp/>Ref;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values<sp/>=<sp/>Values;</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>ml_deref(ml_unpack(Values,<sp/>1));</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_assign(State,<sp/>Ref-&gt;Values[0],<sp/>Value);</highlight></codeline>
<codeline lineno="1990" refid="structml__tuple__call__t" refkind="compound"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Functions;</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Tuple;</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index,<sp/>Count;</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[];</highlight></codeline>
<codeline lineno="1998"><highlight class="normal">}<sp/><ref refid="structml__tuple__call__t" kindref="compound">ml_tuple_call_t</ref>;</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2001"><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__attribute__<sp/>((noinline))<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_tuple_call_finish(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Tuple)<sp/>{</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Types[Tuple-&gt;Size<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/>Types[0]<sp/>=<sp/>MLTupleT;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Tuple-&gt;Size;<sp/>++I)<sp/>Types[I<sp/>+<sp/>1]<sp/>=<sp/>ml_typeof(Tuple-&gt;Values[I]);</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/>Tuple-&gt;Type<sp/>=<sp/>ml_generic_type(Tuple-&gt;Size<sp/>+<sp/>1,<sp/>Types);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2010"><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_tuple_call_run(<ref refid="structml__tuple__call__t" kindref="compound">ml_tuple_call_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>State-&gt;Index;</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Tuple<sp/>=<sp/>State-&gt;Tuple;</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/>Tuple-&gt;Values[Index]<sp/>=<sp/>Result;</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Functions<sp/>=<sp/>State-&gt;Functions;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++Index<sp/>==<sp/>Functions-&gt;Size)<sp/>{</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_call_finish(Tuple);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Tuple);</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Functions-&gt;Values[Index],<sp/>State-&gt;Count,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="2026"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_tuple_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Functions,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Functions-&gt;Size)<sp/>ML_RETURN(ml_tuple(0));</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__call__t" kindref="compound">ml_tuple_call_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__tuple__call__t" kindref="compound">ml_tuple_call_t</ref>,<sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_tuple_call_run;</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Functions<sp/>=<sp/>Functions;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Tuple<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)ml_tuple(Functions-&gt;Size);</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(State-&gt;Args,<sp/>Args,<sp/>Count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*));</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Functions-&gt;Values[0],<sp/>Count,<sp/>Args);</highlight></codeline>
<codeline lineno="2040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal">ML_FUNCTION(MLTuple)<sp/>{</highlight></codeline>
<codeline lineno="2044"><highlight class="comment">//@tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2046"><highlight class="normal"></highlight><highlight class="comment">//&lt;:...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value/n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight><highlight class="comment">//&gt;tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>tuple<sp/>of<sp/>values<sp/>:mini:`Value/1,<sp/>...,<sp/>Value/n`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Tuple<sp/>=<sp/>ml_tuple(Count);</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>ml_deref(Args[I]);</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(ml_is_error(Value))<sp/>return<sp/>Value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Tuple,<sp/>I<sp/>+<sp/>1,<sp/>Value);</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Tuple;</highlight></codeline>
<codeline lineno="2057"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal">ML_TYPE(MLTupleT,<sp/>(MLFunctionT,<sp/>MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;tuple&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2061"><highlight class="comment">//<sp/>An<sp/>immutable<sp/>tuple<sp/>of<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight><highlight class="comment">//<sp/>:mini:`(Tuple:<sp/>tuple)(Arg/1,<sp/>...,<sp/>Arg/n)`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Returns<sp/>:mini:`(Tuple[1](Arg/1,<sp/>...,<sp/>Arg/n),<sp/>...,<sp/>Tuple[k](Arg/1,<sp/>...,<sp/>Arg/n))`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/>.hash<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_tuple_hash,</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/>.deref<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_tuple_deref,</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/>.assign<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_tuple_assign,</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_tuple_call,</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLTuple</highlight></codeline>
<codeline lineno="2070"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_value_find_all,<sp/>MLTupleT,<sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Tuple,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_value_find_fn<sp/>RefFn)<sp/>{</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RefFn(Data,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Tuple,<sp/>1))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Tuple-&gt;Size;<sp/>++I)<sp/>ml_value_find_all(Tuple-&gt;Values[I],<sp/>Data,<sp/>RefFn);</highlight></codeline>
<codeline lineno="2075"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_tuple(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size)<sp/>{</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Tuple<sp/>=<sp/>xnew(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref>,<sp/>Size,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/>Tuple-&gt;Type<sp/>=<sp/>MLTupleT;</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/>Tuple-&gt;Size<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Tuple;</highlight></codeline>
<codeline lineno="2082" refid="structml__tuple__visit__t" refkind="compound"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Visitor,<sp/>*Dest;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Values;</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[1];</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index,<sp/>Size;</highlight></codeline>
<codeline lineno="2090"><highlight class="normal">}<sp/><ref refid="structml__tuple__visit__t" kindref="compound">ml_tuple_visit_t</ref>;</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_tuple_visit_run(<ref refid="structml__tuple__visit__t" kindref="compound">ml_tuple_visit_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>State-&gt;Index<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&gt;<sp/>State-&gt;Size)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>*++State-&gt;Values;</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>State-&gt;Visitor,<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="2100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;visit&quot;</highlight><highlight class="normal">,<sp/>MLVisitorT,<sp/>MLTupleT)<sp/>{</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref><sp/>*Visitor<sp/>=<sp/>(<ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Source-&gt;Size)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__visit__t" kindref="compound">ml_tuple_visit_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__tuple__visit__t" kindref="compound">ml_tuple_visit_t</ref>);</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_tuple_visit_run;</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Visitor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Visitor;</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Size<sp/>=<sp/>Source-&gt;Size;</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values<sp/>=<sp/>Source-&gt;Values;</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Source-&gt;Values[0];</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Visitor,<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="2116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_tuple_copy_run(<ref refid="structml__tuple__visit__t" kindref="compound">ml_tuple_visit_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_tuple_set(State-&gt;Dest,<sp/>State-&gt;Index,<sp/>Value);</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>State-&gt;Index<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&gt;<sp/>State-&gt;Size)<sp/>ML_RETURN(State-&gt;Dest);</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>*++State-&gt;Values;</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>State-&gt;Visitor,<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="2127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_tuple_copy(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref><sp/>*Visitor,<sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Source)<sp/>{</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Dest<sp/>=<sp/>ml_tuple(Source-&gt;Size);</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/>inthash_insert(Visitor-&gt;Cache,<sp/>(uintptr_t)Source,<sp/>Dest);</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Source-&gt;Size)<sp/>ML_RETURN(Dest);</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__visit__t" kindref="compound">ml_tuple_visit_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__tuple__visit__t" kindref="compound">ml_tuple_visit_t</ref>);</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_tuple_copy_run;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Visitor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Visitor;</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Dest<sp/>=<sp/>Dest;</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Size<sp/>=<sp/>Source-&gt;Size;</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values<sp/>=<sp/>Source-&gt;Values;</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Source-&gt;Values[0];</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Visitor,<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="2144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"></highlight></codeline>
<codeline lineno="2146"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;copy&quot;</highlight><highlight class="normal">,<sp/>MLVisitorT,<sp/>MLTupleT)<sp/>{</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight><highlight class="comment">//&lt;Copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight><highlight class="comment">//&lt;Tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"></highlight><highlight class="comment">//&gt;tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>tuple<sp/>containing<sp/>copies<sp/>of<sp/>the<sp/>elements<sp/>of<sp/>:mini:`Tuple`<sp/>created<sp/>using<sp/>:mini:`Copy`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_tuple_copy(Caller,<sp/>(<ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref><sp/>*)Args[0],<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Args[1]);</highlight></codeline>
<codeline lineno="2152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;const&quot;</highlight><highlight class="normal">,<sp/>MLVisitorT,<sp/>MLTupleT)<sp/>{</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"></highlight><highlight class="comment">//&lt;Copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight><highlight class="comment">//&lt;Tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"></highlight><highlight class="comment">//&gt;tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>tuple<sp/>containing<sp/>copies<sp/>of<sp/>the<sp/>elements<sp/>of<sp/>:mini:`Tuple`<sp/>created<sp/>using<sp/>:mini:`Copy`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_tuple_copy(Caller,<sp/>(<ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref><sp/>*)Args[0],<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Args[1]);</highlight></codeline>
<codeline lineno="2160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_value_is_constant,<sp/>MLTupleT,<sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Tuple)<sp/>{</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Tuple-&gt;Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_value_is_constant(Tuple-&gt;Values[I]))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_tuple_set(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Tuple0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Tuple<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Tuple0;</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/>Tuple-&gt;Values[Index<sp/>-<sp/>1]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tuple-&gt;Type<sp/>==<sp/>MLTupleT)<sp/>{</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Tuple-&gt;Size;<sp/>++I)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Tuple-&gt;Values[I])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value;</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Types[Tuple-&gt;Size<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Types[0]<sp/>=<sp/>MLTupleT;</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Tuple-&gt;Size;<sp/>++I)<sp/>Types[I<sp/>+<sp/>1]<sp/>=<sp/>ml_typeof(Tuple-&gt;Values[I]);</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tuple-&gt;Type<sp/>=<sp/>ml_generic_type(Tuple-&gt;Size<sp/>+<sp/>1,<sp/>Types);</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value;</highlight></codeline>
<codeline lineno="2182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_tuplen(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Values)<sp/>{</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Tuple<sp/>=<sp/>xnew(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref>,<sp/>Size,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/>Tuple-&gt;Size<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Types[Size<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/>Types[0]<sp/>=<sp/>MLTupleT;</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tuple-&gt;Values[I]<sp/>=<sp/>Values[I];</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Types[I<sp/>+<sp/>1]<sp/>=<sp/>ml_typeof(Values[I]);</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/>Tuple-&gt;Type<sp/>=<sp/>ml_generic_type(Size<sp/>+<sp/>1,<sp/>Types);</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Tuple;</highlight></codeline>
<codeline lineno="2195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_tuplev(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Tuple<sp/>=<sp/>xnew(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref>,<sp/>Size,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/>Tuple-&gt;Size<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Types[Size<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/>Types[0]<sp/>=<sp/>MLTupleT;</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>Args;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>Size);</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>va_arg(Args,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tuple-&gt;Values[I]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Types[I<sp/>+<sp/>1]<sp/>=<sp/>ml_typeof(Value);</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/>Tuple-&gt;Type<sp/>=<sp/>ml_generic_type(Size<sp/>+<sp/>1,<sp/>Types);</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Tuple;</highlight></codeline>
<codeline lineno="2212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2215"><highlight class="normal"></highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_tuplen(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Values)<sp/>{</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Tuple<sp/>=<sp/>xnew(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref>,<sp/>Size,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/>Tuple-&gt;Type<sp/>=<sp/>MLTupleT;</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/>Tuple-&gt;Size<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>Tuple-&gt;Values[I]<sp/>=<sp/>Values[I];</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Tuple;</highlight></codeline>
<codeline lineno="2222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_tuplev(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Tuple<sp/>=<sp/>xnew(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref>,<sp/>Size,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/>Tuple-&gt;Type<sp/>=<sp/>MLTupleT;</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/>Tuple-&gt;Size<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>Args;</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>Size);</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tuple-&gt;Values[I]<sp/>=<sp/>va_arg(Args,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Tuple;</highlight></codeline>
<codeline lineno="2235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"></highlight></codeline>
<codeline lineno="2237"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_unpack(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index)<sp/>{</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_unpack)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Value),<sp/>ml_unpack);</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_simple_inline(IndexMethod,<sp/>2,<sp/>Value,<sp/>ml_integer(Index));</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(Value,<sp/>Index);</highlight></codeline>
<codeline lineno="2243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_unpack,<sp/>MLNilT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index)<sp/>{</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;size&quot;</highlight><highlight class="normal">,<sp/>MLTupleT)<sp/>{</highlight></codeline>
<codeline lineno="2251"><highlight class="comment">//&lt;Tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>:mini:`Tuple`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Tuple<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Tuple-&gt;Size);</highlight></codeline>
<codeline lineno="2256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;[]&quot;</highlight><highlight class="normal">,<sp/>MLTupleT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="2260"><highlight class="comment">//&lt;Tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2261"><highlight class="normal"></highlight><highlight class="comment">//&lt;Index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2262"><highlight class="normal"></highlight><highlight class="comment">//&gt;any<sp/>|<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>:mini:`Index`-th<sp/>element<sp/>in<sp/>:mini:`Tuple`<sp/>or<sp/>an<sp/>error<sp/>if<sp/>:mini:`Index`<sp/>is<sp/>out<sp/>of<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Indexing<sp/>starts<sp/>at<sp/>:mini:`1`.<sp/>Negative<sp/>indices<sp/>count<sp/>from<sp/>the<sp/>end,<sp/>with<sp/>:mini:`-1`<sp/>returning<sp/>the<sp/>last<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Tuple<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--Index<sp/>&lt;<sp/>0)<sp/>Index<sp/>+=<sp/>Tuple-&gt;Size<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;<sp/>0<sp/>||<sp/>Index<sp/>&gt;=<sp/>Tuple-&gt;Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Tuple<sp/>index<sp/>out<sp/>of<sp/>bounds&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Tuple-&gt;Values[Index];</highlight></codeline>
<codeline lineno="2270" refid="structml__tuple__iter__t" refkind="compound"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Values;</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size,<sp/>Index;</highlight></codeline>
<codeline lineno="2276"><highlight class="normal">}<sp/><ref refid="structml__tuple__iter__t" kindref="compound">ml_tuple_iter_t</ref>;</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"></highlight></codeline>
<codeline lineno="2278"><highlight class="normal">ML_TYPE(MLTupleIterT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;tuple-iter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"></highlight></codeline>
<codeline lineno="2281"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLTupleIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__tuple__iter__t" kindref="compound">ml_tuple_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iter-&gt;Index<sp/>==<sp/>Iter-&gt;Size)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/>++Iter-&gt;Index;</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="2285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLTupleIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__tuple__iter__t" kindref="compound">ml_tuple_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Iter-&gt;Index));</highlight></codeline>
<codeline lineno="2289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLTupleIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__tuple__iter__t" kindref="compound">ml_tuple_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iter-&gt;Values[Iter-&gt;Index<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="2293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLTupleT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Tuple)<sp/>{</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Tuple-&gt;Size)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__iter__t" kindref="compound">ml_tuple_iter_t</ref><sp/>*Iter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__tuple__iter__t" kindref="compound">ml_tuple_iter_t</ref>);</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Type<sp/>=<sp/>MLTupleIterT;</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Size<sp/>=<sp/>Tuple-&gt;Size;</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Index<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Values<sp/>=<sp/>Tuple-&gt;Values;</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="2303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLTupleT)<sp/>{</highlight></codeline>
<codeline lineno="2307"><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>a<sp/>representation<sp/>of<sp/>:mini:`Value`<sp/>to<sp/>:mini:`Buffer`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Value<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value-&gt;Size)<sp/>{</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_simple_append(Buffer,<sp/>Value-&gt;Values[0]);</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Value-&gt;Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_simple_append(Buffer,<sp/>Value-&gt;Values[I]);</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="2322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_unpack,<sp/>MLTupleT,<sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Tuple,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index)<sp/>{</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&gt;<sp/>Tuple-&gt;Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Tuple-&gt;Values[Index<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="2327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_tuple_compare(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*A,<sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*B)<sp/>{</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Replace<sp/>this<sp/>with<sp/>a<sp/>state<sp/>to<sp/>remove<sp/>ml_simple_call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[2];</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result;</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N;</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Size<sp/>&gt;<sp/>B-&gt;Size)<sp/>{</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/>=<sp/>B-&gt;Size;</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)One;</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Size<sp/>&lt;<sp/>B-&gt;Size)<sp/>{</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/>=<sp/>A-&gt;Size;</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)NegOne;</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/>=<sp/>A-&gt;Size;</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Zero;</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>A-&gt;Values[I];</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>B-&gt;Values[I];</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*C<sp/>=<sp/>ml_simple_call(CompareMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(C))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>C;</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_integer_value(C))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>C;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="2352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLTupleT,<sp/>MLTupleT)<sp/>{</highlight></codeline>
<codeline lineno="2356"><highlight class="comment">//&lt;Tuple/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"></highlight><highlight class="comment">//&lt;Tuple/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`-1`,<sp/>:mini:`0`<sp/>or<sp/>:mini:`1`<sp/>depending<sp/>on<sp/>whether<sp/>:mini:`Tuple/1`<sp/>is<sp/>less<sp/>than,<sp/>equal<sp/>to<sp/>or<sp/>greater<sp/>than<sp/>:mini:`Tuple/2`<sp/>using<sp/>lexicographical<sp/>ordering.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_tuple_compare((<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Args[0],<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Args[1]);</highlight></codeline>
<codeline lineno="2361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"></highlight></codeline>
<codeline lineno="2363"><highlight class="normal">ML_TYPE(MLComparisonStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;comparison_state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__comparison__state__t" kindref="compound">ml_comparison_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result,<sp/>*Order,<sp/>*Default;</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**A,<sp/>**B;</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[2];</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count;</highlight></codeline>
<codeline lineno="2372"><highlight class="normal">}<sp/><ref refid="structml__tuple__compare__state__t" kindref="compound">ml_tuple_compare_state_t</ref>;</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"></highlight></codeline>
<codeline lineno="2374"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_tuple_compare_equal_run(<ref refid="structml__tuple__compare__state__t" kindref="compound">ml_tuple_compare_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Base.Caller;</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result<sp/>==<sp/>MLNil)<sp/>ML_RETURN(State-&gt;Result);</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--State-&gt;Count<sp/>==<sp/>0)<sp/>ML_RETURN(State-&gt;Default);</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>*++State-&gt;A;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>*++State-&gt;B;</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>EqualMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="2382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">,<sp/>MLTupleT,<sp/>MLTupleT)<sp/>{</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2387"><highlight class="normal"></highlight><highlight class="comment">//&gt;B<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2388"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`B`<sp/>if<sp/>:mini:`A:size<sp/>=<sp/>B:size`<sp/>and<sp/>:mini:`A/i<sp/>=<sp/>B/i`<sp/>for<sp/>each<sp/>:mini:`i`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>=((1,<sp/>2,<sp/>3),<sp/>(1,<sp/>2,<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>=((1,<sp/>2,<sp/>3),<sp/>(1,<sp/>2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>=((1,<sp/>2),<sp/>(1,<sp/>2,<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2392"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>=((1,<sp/>2,<sp/>3),<sp/>(1,<sp/>2,<sp/>4))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>=((1,<sp/>3,<sp/>2),<sp/>(1,<sp/>2,<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>Caller;<sp/>State<sp/>&amp;&amp;<sp/>State-&gt;Type<sp/>==<sp/>MLComparisonStateT;<sp/>State<sp/>=<sp/>State-&gt;Caller)<sp/>{</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__comparison__state__t" kindref="compound">ml_comparison_state_t</ref><sp/>*Previous<sp/>=<sp/>(<ref refid="structml__comparison__state__t" kindref="compound">ml_comparison_state_t</ref><sp/>*)State;</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Previous-&gt;A<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A<sp/>&amp;&amp;<sp/>Previous-&gt;B<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B)<sp/>ML_RETURN(B);</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Size<sp/>!=<sp/>B-&gt;Size)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!A-&gt;Size)<sp/>ML_RETURN(B);</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__compare__state__t" kindref="compound">ml_tuple_compare_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__tuple__compare__state__t" kindref="compound">ml_tuple_compare_state_t</ref>);</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.Type<sp/>=<sp/>MLComparisonStateT;</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.run<sp/>=<sp/>(ml_state_fn)ml_tuple_compare_equal_run;</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.A<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A;</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.B<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Result<sp/>=<sp/>MLNil;</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Default<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>A-&gt;Size;</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;A<sp/>=<sp/>A-&gt;Values;</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;B<sp/>=<sp/>B-&gt;Values;</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>A-&gt;Values[0];</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>B-&gt;Values[0];</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>EqualMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="2417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;!=&quot;</highlight><highlight class="normal">,<sp/>MLTupleT,<sp/>MLTupleT)<sp/>{</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2421"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight><highlight class="comment">//&gt;B<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`B`<sp/>if<sp/>:mini:`A:size<sp/>!=<sp/>B:size`<sp/>or<sp/>:mini:`A/i<sp/>!=<sp/>B/i`<sp/>for<sp/>some<sp/>:mini:`i`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2424"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>!=((1,<sp/>2,<sp/>3),<sp/>(1,<sp/>2,<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>!=((1,<sp/>2,<sp/>3),<sp/>(1,<sp/>2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2426"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>!=((1,<sp/>2),<sp/>(1,<sp/>2,<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>!=((1,<sp/>2,<sp/>3),<sp/>(1,<sp/>2,<sp/>4))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>!=((1,<sp/>3,<sp/>2),<sp/>(1,<sp/>2,<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>Caller;<sp/>State<sp/>&amp;&amp;<sp/>State-&gt;Type<sp/>==<sp/>MLComparisonStateT;<sp/>State<sp/>=<sp/>State-&gt;Caller)<sp/>{</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__comparison__state__t" kindref="compound">ml_comparison_state_t</ref><sp/>*Previous<sp/>=<sp/>(<ref refid="structml__comparison__state__t" kindref="compound">ml_comparison_state_t</ref><sp/>*)State;</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Previous-&gt;A<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A<sp/>&amp;&amp;<sp/>Previous-&gt;B<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Size<sp/>!=<sp/>B-&gt;Size)<sp/>ML_RETURN(B);</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!A-&gt;Size)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__compare__state__t" kindref="compound">ml_tuple_compare_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__tuple__compare__state__t" kindref="compound">ml_tuple_compare_state_t</ref>);</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.Type<sp/>=<sp/>MLComparisonStateT;</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.run<sp/>=<sp/>(ml_state_fn)ml_tuple_compare_equal_run;</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.A<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A;</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.B<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Result<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Default<sp/>=<sp/>MLNil;</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>A-&gt;Size;</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;A<sp/>=<sp/>A-&gt;Values;</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;B<sp/>=<sp/>B-&gt;Values;</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>A-&gt;Values[0];</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>B-&gt;Values[0];</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>EqualMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="2452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_tuple_compare_order_run(<ref refid="structml__tuple__compare__state__t" kindref="compound">ml_tuple_compare_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result);</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"></highlight></codeline>
<codeline lineno="2456"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_tuple_compare_order2_run(<ref refid="structml__tuple__compare__state__t" kindref="compound">ml_tuple_compare_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Base.Caller;</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result<sp/>==<sp/>MLNil)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--State-&gt;Count<sp/>==<sp/>0)<sp/>ML_RETURN(State-&gt;Default);</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>*++State-&gt;A;</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>*++State-&gt;B;</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.run<sp/>=<sp/>(ml_state_fn)ml_tuple_compare_order_run;</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>State-&gt;Order,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="2465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_tuple_compare_order_run(<ref refid="structml__tuple__compare__state__t" kindref="compound">ml_tuple_compare_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Base.Caller;</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result<sp/>!=<sp/>MLNil)<sp/>ML_RETURN(State-&gt;Result);</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>*State-&gt;A;</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>*State-&gt;B;</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.run<sp/>=<sp/>(ml_state_fn)ml_tuple_compare_order2_run;</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>EqualMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="2475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">,<sp/>MLTupleT,<sp/>MLTupleT)<sp/>{</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"></highlight><highlight class="comment">//&gt;B<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2481"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`B`<sp/>if<sp/>:mini:`A/i<sp/>=<sp/>B/i`<sp/>for<sp/>each<sp/>:mini:`i<sp/>=<sp/>1<sp/>..<sp/>j-1`<sp/>and<sp/>:mini:`A/j<sp/>&lt;<sp/>B/j`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&lt;((1,<sp/>2,<sp/>3),<sp/>(1,<sp/>2,<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&lt;((1,<sp/>2,<sp/>3),<sp/>(1,<sp/>2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&lt;((1,<sp/>2),<sp/>(1,<sp/>2,<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&lt;((1,<sp/>2,<sp/>3),<sp/>(1,<sp/>2,<sp/>4))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2486"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&lt;((1,<sp/>3,<sp/>2),<sp/>(1,<sp/>2,<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>Caller;<sp/>State<sp/>&amp;&amp;<sp/>State-&gt;Type<sp/>==<sp/>MLComparisonStateT;<sp/>State<sp/>=<sp/>State-&gt;Caller)<sp/>{</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__comparison__state__t" kindref="compound">ml_comparison_state_t</ref><sp/>*Previous<sp/>=<sp/>(<ref refid="structml__comparison__state__t" kindref="compound">ml_comparison_state_t</ref><sp/>*)State;</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Previous-&gt;A<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A<sp/>&amp;&amp;<sp/>Previous-&gt;B<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!A-&gt;Size)<sp/>{</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!B-&gt;Size)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(B);</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!B-&gt;Size)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__compare__state__t" kindref="compound">ml_tuple_compare_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__tuple__compare__state__t" kindref="compound">ml_tuple_compare_state_t</ref>);</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.Type<sp/>=<sp/>MLComparisonStateT;</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.run<sp/>=<sp/>(ml_state_fn)ml_tuple_compare_order_run;</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.A<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A;</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.B<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Result<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Order<sp/>=<sp/>LessMethod;</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Size<sp/>&gt;=<sp/>B-&gt;Size)<sp/>{</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Default<sp/>=<sp/>MLNil;</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>B-&gt;Size;</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Default<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>A-&gt;Size;</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;A<sp/>=<sp/>A-&gt;Values;</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;B<sp/>=<sp/>B-&gt;Values;</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>A-&gt;Values[0];</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>B-&gt;Values[0];</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>LessMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="2519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;&lt;=&quot;</highlight><highlight class="normal">,<sp/>MLTupleT,<sp/>MLTupleT)<sp/>{</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="normal"></highlight><highlight class="comment">//&gt;B<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2525"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`B`<sp/>if<sp/>:mini:`A/i<sp/>=<sp/>B/i`<sp/>for<sp/>each<sp/>:mini:`i<sp/>=<sp/>1<sp/>..<sp/>j-1`<sp/>and<sp/>:mini:`A/j<sp/>&lt;=<sp/>B/j`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2526"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&lt;=((1,<sp/>2,<sp/>3),<sp/>(1,<sp/>2,<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&lt;=((1,<sp/>2,<sp/>3),<sp/>(1,<sp/>2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&lt;=((1,<sp/>2),<sp/>(1,<sp/>2,<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2529"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&lt;=((1,<sp/>2,<sp/>3),<sp/>(1,<sp/>2,<sp/>4))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&lt;=((1,<sp/>3,<sp/>2),<sp/>(1,<sp/>2,<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>Caller;<sp/>State<sp/>&amp;&amp;<sp/>State-&gt;Type<sp/>==<sp/>MLComparisonStateT;<sp/>State<sp/>=<sp/>State-&gt;Caller)<sp/>{</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__comparison__state__t" kindref="compound">ml_comparison_state_t</ref><sp/>*Previous<sp/>=<sp/>(<ref refid="structml__comparison__state__t" kindref="compound">ml_comparison_state_t</ref><sp/>*)State;</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Previous-&gt;A<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A<sp/>&amp;&amp;<sp/>Previous-&gt;B<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B)<sp/>ML_RETURN(B);</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!A-&gt;Size)<sp/>{</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!B-&gt;Size)<sp/>ML_RETURN(B);</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(B);</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!B-&gt;Size)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__compare__state__t" kindref="compound">ml_tuple_compare_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__tuple__compare__state__t" kindref="compound">ml_tuple_compare_state_t</ref>);</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.Type<sp/>=<sp/>MLComparisonStateT;</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.run<sp/>=<sp/>(ml_state_fn)ml_tuple_compare_order_run;</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.A<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A;</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.B<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Result<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Order<sp/>=<sp/>LessMethod;</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Size<sp/>&gt;<sp/>B-&gt;Size)<sp/>{</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Default<sp/>=<sp/>MLNil;</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>B-&gt;Size;</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Default<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>A-&gt;Size;</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;A<sp/>=<sp/>A-&gt;Values;</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;B<sp/>=<sp/>B-&gt;Values;</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>A-&gt;Values[0];</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>B-&gt;Values[0];</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>LessMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="2563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"></highlight></codeline>
<codeline lineno="2565"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLTupleT,<sp/>MLTupleT)<sp/>{</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2568"><highlight class="normal"></highlight><highlight class="comment">//&gt;B<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`B`<sp/>if<sp/>:mini:`A/i<sp/>=<sp/>B/i`<sp/>for<sp/>each<sp/>:mini:`i<sp/>=<sp/>1<sp/>..<sp/>j-1`<sp/>and<sp/>:mini:`A/j<sp/>&gt;<sp/>B/j`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2570"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&gt;((1,<sp/>2,<sp/>3),<sp/>(1,<sp/>2,<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&gt;((1,<sp/>2,<sp/>3),<sp/>(1,<sp/>2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&gt;((1,<sp/>2),<sp/>(1,<sp/>2,<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2573"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&gt;((1,<sp/>2,<sp/>3),<sp/>(1,<sp/>2,<sp/>4))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2574"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&gt;((1,<sp/>3,<sp/>2),<sp/>(1,<sp/>2,<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>Caller;<sp/>State<sp/>&amp;&amp;<sp/>State-&gt;Type<sp/>==<sp/>MLComparisonStateT;<sp/>State<sp/>=<sp/>State-&gt;Caller)<sp/>{</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__comparison__state__t" kindref="compound">ml_comparison_state_t</ref><sp/>*Previous<sp/>=<sp/>(<ref refid="structml__comparison__state__t" kindref="compound">ml_comparison_state_t</ref><sp/>*)State;</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Previous-&gt;A<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A<sp/>&amp;&amp;<sp/>Previous-&gt;B<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!A-&gt;Size)<sp/>{</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!B-&gt;Size)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!B-&gt;Size)<sp/>ML_RETURN(A);</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__compare__state__t" kindref="compound">ml_tuple_compare_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__tuple__compare__state__t" kindref="compound">ml_tuple_compare_state_t</ref>);</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.Type<sp/>=<sp/>MLComparisonStateT;</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.run<sp/>=<sp/>(ml_state_fn)ml_tuple_compare_order_run;</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.A<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A;</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.B<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Result<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Order<sp/>=<sp/>GreaterMethod;</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Size<sp/>&lt;=<sp/>B-&gt;Size)<sp/>{</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Default<sp/>=<sp/>MLNil;</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>A-&gt;Size;</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Default<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>B-&gt;Size;</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;A<sp/>=<sp/>A-&gt;Values;</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;B<sp/>=<sp/>B-&gt;Values;</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>A-&gt;Values[0];</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>B-&gt;Values[0];</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>GreaterMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="2607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"></highlight></codeline>
<codeline lineno="2609"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;&gt;=&quot;</highlight><highlight class="normal">,<sp/>MLTupleT,<sp/>MLTupleT)<sp/>{</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2611"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2612"><highlight class="normal"></highlight><highlight class="comment">//&gt;B<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2613"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`B`<sp/>if<sp/>:mini:`A/i<sp/>=<sp/>B/i`<sp/>for<sp/>each<sp/>:mini:`i<sp/>=<sp/>1<sp/>..<sp/>j-1`<sp/>and<sp/>:mini:`A/j<sp/>&gt;=<sp/>B/j`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&gt;=((1,<sp/>2,<sp/>3),<sp/>(1,<sp/>2,<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&gt;=((1,<sp/>2,<sp/>3),<sp/>(1,<sp/>2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2616"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&gt;=((1,<sp/>2),<sp/>(1,<sp/>2,<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&gt;=((1,<sp/>2,<sp/>3),<sp/>(1,<sp/>2,<sp/>4))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2618"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&gt;=((1,<sp/>3,<sp/>2),<sp/>(1,<sp/>2,<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>Caller;<sp/>State<sp/>&amp;&amp;<sp/>State-&gt;Type<sp/>==<sp/>MLComparisonStateT;<sp/>State<sp/>=<sp/>State-&gt;Caller)<sp/>{</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__comparison__state__t" kindref="compound">ml_comparison_state_t</ref><sp/>*Previous<sp/>=<sp/>(<ref refid="structml__comparison__state__t" kindref="compound">ml_comparison_state_t</ref><sp/>*)State;</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Previous-&gt;A<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A<sp/>&amp;&amp;<sp/>Previous-&gt;B<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B)<sp/>ML_RETURN(B);</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!A-&gt;Size)<sp/>{</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!B-&gt;Size)<sp/>ML_RETURN(B);</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!B-&gt;Size)<sp/>ML_RETURN(B);</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__compare__state__t" kindref="compound">ml_tuple_compare_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__tuple__compare__state__t" kindref="compound">ml_tuple_compare_state_t</ref>);</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.Type<sp/>=<sp/>MLComparisonStateT;</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Base.run<sp/>=<sp/>(ml_state_fn)ml_tuple_compare_order_run;</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.A<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A;</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.B<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Result<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Order<sp/>=<sp/>GreaterMethod;</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Size<sp/>&lt;<sp/>B-&gt;Size)<sp/>{</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Default<sp/>=<sp/>MLNil;</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>A-&gt;Size;</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Default<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>B-&gt;Size;</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;A<sp/>=<sp/>A-&gt;Values;</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;B<sp/>=<sp/>B-&gt;Values;</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>A-&gt;Values[0];</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>B-&gt;Values[0];</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>GreaterMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="2651"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Boolean<sp/>//</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"></highlight></codeline>
<codeline lineno="2656"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ml_boolean_hash(<ref refid="structml__boolean__t" kindref="compound">ml_boolean_t</ref><sp/>*Boolean,<sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Chain)<sp/>{</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)Boolean;</highlight></codeline>
<codeline lineno="2658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="normal">ML_TYPE(MLBooleanT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2662"><highlight class="comment">//<sp/>A<sp/>boolean<sp/>value<sp/>(either<sp/>:mini:`true`<sp/>or<sp/>:mini:`false`).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/>.hash<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_boolean_hash</highlight></codeline>
<codeline lineno="2664"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"></highlight></codeline>
<codeline lineno="2666"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_boolean_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__boolean__t" kindref="compound">ml_boolean_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="2668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"></highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><ref refid="structml__boolean__t" kindref="compound">ml_boolean_t</ref><sp/>MLFalse[1]<sp/>=<sp/>{{MLBooleanT,<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">,<sp/>0}};</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><ref refid="structml__boolean__t" kindref="compound">ml_boolean_t</ref><sp/>MLTrue[1]<sp/>=<sp/>{{MLBooleanT,<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">,<sp/>1}};</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"></highlight></codeline>
<codeline lineno="2673"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*MLBooleans[2]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/>[0]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLFalse,</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/>[1]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLTrue</highlight></codeline>
<codeline lineno="2676"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"></highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_boolean(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Value)<sp/>{</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value<sp/>?<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLTrue<sp/>:<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLFalse;</highlight></codeline>
<codeline lineno="2680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"></highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_value_is_constant,<sp/>MLBooleanT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"></highlight></codeline>
<codeline lineno="2686"><highlight class="normal">ML_METHOD(MLBooleanT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="2688"><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2689"><highlight class="normal"></highlight><highlight class="comment">//&gt;boolean<sp/>|<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2690"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`true`<sp/>if<sp/>:mini:`String`<sp/>equals<sp/>:mini:`&quot;true&quot;`<sp/>(ignoring<sp/>case).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2691"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`false`<sp/>if<sp/>:mini:`String`<sp/>equals<sp/>:mini:`&quot;false&quot;`<sp/>(ignoring<sp/>case).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2692"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Otherwise<sp/>returns<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcasecmp(Name,<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLTrue;</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcasecmp(Name,<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLFalse;</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>boolean:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Name);</highlight></codeline>
<codeline lineno="2697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/>MLBooleanT)<sp/>{</highlight></codeline>
<codeline lineno="2701"><highlight class="comment">//&lt;Bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2702"><highlight class="normal"></highlight><highlight class="comment">//&gt;boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2703"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>logical<sp/>inverse<sp/>of<sp/>:mini:`Bool`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLBooleans[1<sp/>-<sp/>ml_boolean_value(Args[0])];</highlight></codeline>
<codeline lineno="2705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"></highlight></codeline>
<codeline lineno="2707"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;/\\&quot;</highlight><highlight class="normal">,<sp/>MLBooleanT,<sp/>MLBooleanT)<sp/>{</highlight></codeline>
<codeline lineno="2709"><highlight class="comment">//&lt;Bool/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2710"><highlight class="normal"></highlight><highlight class="comment">//&lt;Bool/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2711"><highlight class="normal"></highlight><highlight class="comment">//&gt;boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2712"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>logical<sp/>and<sp/>of<sp/>:mini:`Bool/1`<sp/>and<sp/>:mini:`Bool/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2713"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>true<sp/>/\<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2714"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>true<sp/>/\<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2715"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>false<sp/>/\<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>false<sp/>/\<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Result<sp/>=<sp/>ml_boolean_value(Args[0]);</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>Result<sp/>&amp;=<sp/>ml_boolean_value(Args[I]);</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLBooleans[Result];</highlight></codeline>
<codeline lineno="2720"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"></highlight></codeline>
<codeline lineno="2722"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;\\/&quot;</highlight><highlight class="normal">,<sp/>MLBooleanT,<sp/>MLBooleanT)<sp/>{</highlight></codeline>
<codeline lineno="2724"><highlight class="comment">//&lt;Bool/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2725"><highlight class="normal"></highlight><highlight class="comment">//&lt;Bool/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2726"><highlight class="normal"></highlight><highlight class="comment">//&gt;boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2727"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>logical<sp/>or<sp/>of<sp/>:mini:`Bool/1`<sp/>and<sp/>:mini:`Bool/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2728"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>true<sp/>\/<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2729"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>true<sp/>\/<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2730"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>false<sp/>\/<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2731"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>false<sp/>\/<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Result<sp/>=<sp/>ml_boolean_value(Args[0]);</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>Result<sp/>|=<sp/>ml_boolean_value(Args[I]);</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLBooleans[Result];</highlight></codeline>
<codeline lineno="2735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"></highlight></codeline>
<codeline lineno="2737"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&gt;&lt;&quot;</highlight><highlight class="normal">,<sp/>MLBooleanT,<sp/>MLBooleanT)<sp/>{</highlight></codeline>
<codeline lineno="2739"><highlight class="comment">//&lt;Bool/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"></highlight><highlight class="comment">//&lt;Bool/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"></highlight><highlight class="comment">//&gt;boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2742"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>logical<sp/>xor<sp/>of<sp/>:mini:`Bool/1`<sp/>and<sp/>:mini:`Bool/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2743"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>true<sp/>&gt;&lt;<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2744"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>true<sp/>&gt;&lt;<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2745"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>false<sp/>&gt;&lt;<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2746"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>false<sp/>&gt;&lt;<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Result<sp/>=<sp/>ml_boolean_value(Args[0])<sp/>!=<sp/>ml_boolean_value(Args[1]);</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLBooleans[Result];</highlight></codeline>
<codeline lineno="2749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"></highlight></codeline>
<codeline lineno="2751"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLBooleanT,<sp/>MLBooleanT)<sp/>{</highlight></codeline>
<codeline lineno="2753"><highlight class="comment">//&lt;Bool/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2754"><highlight class="normal"></highlight><highlight class="comment">//&lt;Bool/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2755"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2756"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`-1`,<sp/>:mini:`0`<sp/>or<sp/>:mini:`1`<sp/>depending<sp/>on<sp/>whether<sp/>:mini:`Bool/1`<sp/>is<sp/>less<sp/>than,<sp/>equal<sp/>to<sp/>or<sp/>greater<sp/>than<sp/>:mini:`Bool/2`.<sp/>:mini:`true`<sp/>is<sp/>considered<sp/>greater<sp/>than<sp/>:mini:`false`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__boolean__t" kindref="compound">ml_boolean_t</ref><sp/>*BooleanA<sp/>=<sp/>(<ref refid="structml__boolean__t" kindref="compound">ml_boolean_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__boolean__t" kindref="compound">ml_boolean_t</ref><sp/>*BooleanB<sp/>=<sp/>(<ref refid="structml__boolean__t" kindref="compound">ml_boolean_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(BooleanA-&gt;Value<sp/>-<sp/>BooleanB-&gt;Value);</highlight></codeline>
<codeline lineno="2760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"></highlight></codeline>
<codeline lineno="2762"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_comp_method_boolean_boolean(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="2763"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLBooleanT,<sp/>MLBooleanT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2764"><highlight class="preprocessor"></highlight><highlight class="comment">/*&gt;boolean|nil</highlight></codeline>
<codeline lineno="2765"><highlight class="comment">//<sp/>Returns<sp/>:mini:`Arg/2`<sp/>if<sp/>:mini:`Arg/1<sp/>SYMBOL<sp/>Arg/2`<sp/>and<sp/>:mini:`nil`<sp/>otherwise.</highlight></codeline>
<codeline lineno="2766"><highlight class="comment">//$=<sp/>true<sp/>NAME<sp/>true</highlight></codeline>
<codeline lineno="2767"><highlight class="comment">//$=<sp/>true<sp/>NAME<sp/>false</highlight></codeline>
<codeline lineno="2768"><highlight class="comment">//$=<sp/>false<sp/>NAME<sp/>true</highlight></codeline>
<codeline lineno="2769"><highlight class="comment">//$=<sp/>false<sp/>NAME<sp/>false</highlight></codeline>
<codeline lineno="2770"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2771"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_boolean_t<sp/>*BooleanA<sp/>=<sp/>(ml_boolean_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="2772"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_boolean_t<sp/>*BooleanB<sp/>=<sp/>(ml_boolean_t<sp/>*)Args[1];<sp/>\</highlight></codeline>
<codeline lineno="2773"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>BooleanA-&gt;Value<sp/>SYMBOL<sp/>BooleanB-&gt;Value<sp/>?<sp/>Args[1]<sp/>:<sp/>MLNil;<sp/>\</highlight></codeline>
<codeline lineno="2774"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2775"><highlight class="normal"></highlight></codeline>
<codeline lineno="2776"><highlight class="normal">ml_comp_method_boolean_boolean(=,<sp/>==);</highlight></codeline>
<codeline lineno="2777"><highlight class="normal">ml_comp_method_boolean_boolean(!=,<sp/>!=);</highlight></codeline>
<codeline lineno="2778"><highlight class="normal">ml_comp_method_boolean_boolean(&lt;,<sp/>&lt;);</highlight></codeline>
<codeline lineno="2779"><highlight class="normal">ml_comp_method_boolean_boolean(&gt;,<sp/>&gt;);</highlight></codeline>
<codeline lineno="2780"><highlight class="normal">ml_comp_method_boolean_boolean(&lt;=,<sp/>&lt;=);</highlight></codeline>
<codeline lineno="2781"><highlight class="normal">ml_comp_method_boolean_boolean(&gt;=,<sp/>&gt;=);</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"></highlight></codeline>
<codeline lineno="2783"><highlight class="normal">ML_FUNCTION(RandomBoolean)<sp/>{</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight><highlight class="comment">//@boolean::random</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2785"><highlight class="normal"></highlight><highlight class="comment">//&lt;P?:number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2786"><highlight class="normal"></highlight><highlight class="comment">//&gt;boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2787"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>random<sp/>boolean<sp/>that<sp/>has<sp/>probability<sp/>:mini:`P`<sp/>of<sp/>being<sp/>:mini:`true`.<sp/>If<sp/>omitted,<sp/>:mini:`P`<sp/>defaults<sp/>to<sp/>:mini:`0.5`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Threshold;</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLRealT);</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Threshold<sp/>=<sp/>RAND_MAX<sp/>*<sp/>ml_real_value(Args[0]);</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Threshold<sp/>=<sp/>RAND_MAX<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)(random()<sp/>&gt;<sp/>Threshold<sp/>?<sp/>MLFalse<sp/>:<sp/>MLTrue);</highlight></codeline>
<codeline lineno="2796"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"></highlight></codeline>
<codeline lineno="2798"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modules<sp/>//</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"></highlight></codeline>
<codeline lineno="2801"><highlight class="normal">ML_TYPE(MLModuleT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;module&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"></highlight></codeline>
<codeline lineno="2803"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,<sp/>MLModuleT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"></highlight><highlight class="comment">//&lt;Module</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2805"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2806"><highlight class="normal"></highlight><highlight class="comment">//&gt;MLAnyT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2807"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Imports<sp/>a<sp/>symbol<sp/>from<sp/>a<sp/>module.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__module__t" kindref="compound">ml_module_t</ref><sp/>*Module<sp/>=<sp/>(<ref refid="structml__module__t" kindref="compound">ml_module_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>stringmap_search(Module-&gt;Exports,<sp/>Name);</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Value)<sp/>{</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;ModuleError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Symbol<sp/>%s<sp/>not<sp/>exported<sp/>from<sp/>module<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Name,<sp/>Module-&gt;Path);</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="2815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"></highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_module(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Path,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__module__t" kindref="compound">ml_module_t</ref><sp/>*Module<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__module__t" kindref="compound">ml_module_t</ref>);</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/>Module-&gt;Type<sp/>=<sp/>MLModuleT;</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/>Module-&gt;Path<sp/>=<sp/>Path;</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>Args;</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>Path);</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Export;</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((Export<sp/>=<sp/>va_arg(Args,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)))<sp/>{</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Module-&gt;Exports,<sp/>Export,<sp/>va_arg(Args,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*));</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Module;</highlight></codeline>
<codeline lineno="2829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"></highlight></codeline>
<codeline lineno="2831"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_module_path(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Module)<sp/>{</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__module__t" kindref="compound">ml_module_t</ref><sp/>*)Module)-&gt;Path;</highlight></codeline>
<codeline lineno="2833"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"></highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_module_import(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Module0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)<sp/>{</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__module__t" kindref="compound">ml_module_t</ref><sp/>*Module<sp/>=<sp/>(<ref refid="structml__module__t" kindref="compound">ml_module_t</ref><sp/>*)Module0;</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)stringmap_search(Module-&gt;Exports,<sp/>Name);</highlight></codeline>
<codeline lineno="2838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"></highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_module_export(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Module0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__module__t" kindref="compound">ml_module_t</ref><sp/>*Module<sp/>=<sp/>(<ref refid="structml__module__t" kindref="compound">ml_module_t</ref><sp/>*)Module0;</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Module-&gt;Exports,<sp/>Name,<sp/>Value);</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value;</highlight></codeline>
<codeline lineno="2844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"></highlight></codeline>
<codeline lineno="2846"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLModuleT)<sp/>{</highlight></codeline>
<codeline lineno="2848"><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2849"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2850"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>a<sp/>representation<sp/>of<sp/>:mini:`Value`<sp/>to<sp/>:mini:`Buffer`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__module__t" kindref="compound">ml_module_t</ref><sp/>*Module<sp/>=<sp/>(<ref refid="structml__module__t" kindref="compound">ml_module_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;module(%s)&quot;</highlight><highlight class="normal">,<sp/>Module-&gt;Path);</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="2855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"></highlight></codeline>
<codeline lineno="2857"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_module_exports_fn(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Exports)<sp/>{</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_map_insert(Exports,<sp/>ml_string(Name,<sp/>-1),<sp/>Value);</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"></highlight></codeline>
<codeline lineno="2862"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;path&quot;</highlight><highlight class="normal">,<sp/>MLModuleT)<sp/>{</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__module__t" kindref="compound">ml_module_t</ref><sp/>*Module<sp/>=<sp/>(<ref refid="structml__module__t" kindref="compound">ml_module_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Module-&gt;Path,<sp/>-1);</highlight></codeline>
<codeline lineno="2865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"></highlight></codeline>
<codeline lineno="2867"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;exports&quot;</highlight><highlight class="normal">,<sp/>MLModuleT)<sp/>{</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__module__t" kindref="compound">ml_module_t</ref><sp/>*Module<sp/>=<sp/>(<ref refid="structml__module__t" kindref="compound">ml_module_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Exports<sp/>=<sp/>ml_map();</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_foreach(Module-&gt;Exports,<sp/>Exports,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_module_exports_fn);</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Exports;</highlight></codeline>
<codeline lineno="2872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"></highlight></codeline>
<codeline lineno="2874"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Externals<sp/>//</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"></highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref><sp/>MLExternals[1]<sp/>=<sp/>{{MLExternalSetT,<sp/>NULL,<sp/>{INTHASH_INIT},<sp/>{STRINGMAP_INIT}}};</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"></highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_external(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line)<sp/>{</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__external__t" kindref="compound">ml_external_t</ref><sp/>*External<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__external__t" kindref="compound">ml_external_t</ref>);</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/>External-&gt;Type<sp/>=<sp/>MLExternalT;</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/>External-&gt;Name<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/>External-&gt;Length<sp/>=<sp/>strlen(Name);</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/>External-&gt;Source<sp/>=<sp/>Source;</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/>External-&gt;Line<sp/>=<sp/>Line;</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)External;</highlight></codeline>
<codeline lineno="2887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"></highlight></codeline>
<codeline lineno="2889"><highlight class="normal"></highlight><highlight class="comment">//static<sp/>ml_value_t<sp/>*ml_external_deref(ml_external_t<sp/>*External)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2890"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>return<sp/>stringmap_search(MLExternals-&gt;Names,<sp/>External-&gt;Name)<sp/>?:<sp/>(ml_value_t<sp/>*)External;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2891"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2892"><highlight class="normal"></highlight></codeline>
<codeline lineno="2893"><highlight class="normal">ML_FUNCTION(MLExternal)<sp/>{</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"></highlight><highlight class="comment">//@external</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2895"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2896"><highlight class="normal"></highlight><highlight class="comment">//&gt;external</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(2,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Source<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Line<sp/>=<sp/>ml_integer_value(Args[2]);</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_external(ml_string_value(Args[0]),<sp/>Source,<sp/>Line);</highlight></codeline>
<codeline lineno="2908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"></highlight></codeline>
<codeline lineno="2910"><highlight class="normal">ML_TYPE(MLExternalT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;external&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>placeholder<sp/>value<sp/>that<sp/>can<sp/>be<sp/>encoded<sp/>and<sp/>replaced<sp/>on<sp/>decoding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//.deref<sp/>=<sp/>(void<sp/>*)ml_external_deref,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLExternal</highlight></codeline>
<codeline lineno="2914"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"></highlight></codeline>
<codeline lineno="2916"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,<sp/>MLExternalT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"></highlight><highlight class="comment">//&lt;External</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2918"><highlight class="normal"></highlight><highlight class="comment">//&lt;Import</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2919"><highlight class="normal"></highlight><highlight class="comment">//&gt;external</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__external__t" kindref="compound">ml_external_t</ref><sp/>*External<sp/>=<sp/>(<ref refid="structml__external__t" kindref="compound">ml_external_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)stringmap_slot(External-&gt;Exports,<sp/>Name);</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/>{</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*FullName<sp/>=<sp/>snew(External-&gt;Length<sp/>+<sp/>strlen(Name)<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stpcpy(stpcpy(stpcpy(FullName,<sp/>External-&gt;Name),<sp/></highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">),<sp/>Name);</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>ml_external(FullName,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Slot[0];</highlight></codeline>
<codeline lineno="2929"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"></highlight></codeline>
<codeline lineno="2931"><highlight class="normal">ML_TYPE(MLExternalSetT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;externals&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"></highlight></codeline>
<codeline lineno="2933"><highlight class="normal">ML_METHOD(MLExternalSetT)<sp/>{</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"></highlight><highlight class="comment">//@external::set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2935"><highlight class="normal"></highlight><highlight class="comment">//&gt;external::set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref><sp/>*Externals<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref>);</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/>Externals-&gt;Type<sp/>=<sp/>MLExternalSetT;</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/>Externals-&gt;Next<sp/>=<sp/>MLExternals;</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Externals;</highlight></codeline>
<codeline lineno="2940"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight></codeline>
<codeline lineno="2942"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;add&quot;</highlight><highlight class="normal">,<sp/>MLExternalSetT,<sp/>MLStringT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"></highlight><highlight class="comment">//&lt;Externals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2944"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2945"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref><sp/>*Externals<sp/>=<sp/>(<ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Externals-&gt;Names,<sp/>Name,<sp/>Args[2]);</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/>inthash_insert(Externals-&gt;Values,<sp/>(uintptr_t)Args[2],<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Name);</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2951"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"></highlight></codeline>
<codeline lineno="2953"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_externals_get_name(<ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref><sp/>*Externals,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Externals)<sp/>{</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)inthash_search(Externals-&gt;Values,<sp/><sp/>(uintptr_t)Value);</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Name)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Name;</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Externals<sp/>=<sp/>Externals-&gt;Next;</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"></highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_externals_get_value(<ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref><sp/>*Externals,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)<sp/>{</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Externals)<sp/>{</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>stringmap_search(Externals-&gt;Names,<sp/>Name);</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value;</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Externals<sp/>=<sp/>Externals-&gt;Next;</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2969"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"></highlight></codeline>
<codeline lineno="2971"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_externals_add(<ref refid="structml__externals__t" kindref="compound">ml_externals_t</ref><sp/>*Externals,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Externals-&gt;Names,<sp/>Name,<sp/>Value);</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/>inthash_insert(Externals-&gt;Values,<sp/>(uintptr_t)Value,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Name);</highlight></codeline>
<codeline lineno="2974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"></highlight></codeline>
<codeline lineno="2976"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_externals_default_add(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLExternals-&gt;Names,<sp/>Name,<sp/>Value);</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/>inthash_insert(MLExternals-&gt;Values,<sp/>(uintptr_t)Value,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Name);</highlight></codeline>
<codeline lineno="2979"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"></highlight></codeline>
<codeline lineno="2981"><highlight class="normal">ML_FUNCTION(MLExternalGet)<sp/>{</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"></highlight><highlight class="comment">//@external::get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2983"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2984"><highlight class="normal"></highlight><highlight class="comment">//&gt;any|error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)stringmap_search(MLExternals-&gt;Names,<sp/>Name);</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value;</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;NameError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;External<sp/>%s<sp/>not<sp/>defined&quot;</highlight><highlight class="normal">,<sp/>Name);</highlight></codeline>
<codeline lineno="2991"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"></highlight></codeline>
<codeline lineno="2993"><highlight class="normal">ML_FUNCTION(MLExternalAdd)<sp/>{</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"></highlight><highlight class="comment">//@external::add</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2995"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2996"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLExternals-&gt;Names,<sp/>Name,<sp/>Args[1]);</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/>inthash_insert(MLExternals-&gt;Values,<sp/>(uintptr_t)Args[1],<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Name);</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="3003"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"></highlight></codeline>
<codeline lineno="3005"><highlight class="normal">ML_FUNCTION(MLExternalDefault)<sp/>{</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"></highlight><highlight class="comment">//@external</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3007"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3008"><highlight class="normal"></highlight><highlight class="comment">//&gt;external</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>stringmap_search(MLExternals-&gt;Names,<sp/>Name);</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value;</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(2,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Source<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Line<sp/>=<sp/>ml_integer_value(Args[2]);</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_external(ml_string_value(Args[0]),<sp/>Source,<sp/>Line);</highlight></codeline>
<codeline lineno="3023"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"></highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_serialize(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_serialize)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Value),<sp/>ml_serialize);</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(function)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(Value);</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>method<sp/>to<sp/>serialize<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Value)-&gt;Name);</highlight></codeline>
<codeline lineno="3029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"></highlight></codeline>
<codeline lineno="3031"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>MLDeserializers[1]<sp/>=<sp/>{STRINGMAP_INIT};</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"></highlight></codeline>
<codeline lineno="3033"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_deserializer_define(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Type,<sp/>ml_deserializer_t<sp/>Deserializer)<sp/>{</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLDeserializers,<sp/>Type,<sp/>Deserializer);</highlight></codeline>
<codeline lineno="3035"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"></highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_deserialize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_deserializer_t<sp/>deserializer<sp/>=<sp/>(ml_deserializer_t)stringmap_search(MLDeserializers,<sp/>Type);</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(deserializer)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>deserializer(Type,<sp/>Count,<sp/>Args);</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>method<sp/>to<sp/>deserialize<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Type);</highlight></codeline>
<codeline lineno="3041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"></highlight></codeline>
<codeline lineno="3043"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Symbols<sp/>//</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"></highlight></codeline>
<codeline lineno="3046"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_symbol_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__symbol__t" kindref="compound">ml_symbol_t</ref><sp/>*Symbol,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args2<sp/>=<sp/>ml_alloc_args(2);</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/>Args2[0]<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/>Args2[1]<sp/>=<sp/>ml_string(Symbol-&gt;Name,<sp/>-1);</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>SymbolMethod,<sp/>2,<sp/>Args2);</highlight></codeline>
<codeline lineno="3052"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"></highlight></codeline>
<codeline lineno="3054"><highlight class="normal">ML_TYPE(MLSymbolT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;symbol&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_symbol_call</highlight></codeline>
<codeline lineno="3056"><highlight class="normal">);</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"></highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_symbol(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)<sp/>{</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__symbol__t" kindref="compound">ml_symbol_t</ref><sp/>*Symbol<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__symbol__t" kindref="compound">ml_symbol_t</ref>);</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/>Symbol-&gt;Type<sp/>=<sp/>MLSymbolT;</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/><sp/>Symbol-&gt;Name<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Symbol;</highlight></codeline>
<codeline lineno="3063"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"></highlight></codeline>
<codeline lineno="3065"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_serialize,<sp/>MLSymbolT,<sp/><ref refid="structml__symbol__t" kindref="compound">ml_symbol_t</ref><sp/>*Symbol)<sp/>{</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_put(List,<sp/>ml_cstring(</highlight><highlight class="stringliteral">&quot;symbol&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_put(List,<sp/>ml_string(Symbol-&gt;Name,<sp/>-1));</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>List;</highlight></codeline>
<codeline lineno="3070"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"></highlight></codeline>
<codeline lineno="3072"><highlight class="normal">ML_TYPE(MLSymbolRangeT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;symbol::range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"></highlight></codeline>
<codeline lineno="3074"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;..&quot;</highlight><highlight class="normal">,<sp/>MLSymbolT,<sp/>MLSymbolT)<sp/>{</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__symbol__range__t" kindref="compound">ml_symbol_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__symbol__range__t" kindref="compound">ml_symbol_range_t</ref>);</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLSymbolRangeT;</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;First<sp/>=<sp/>ml_symbol_name(Args[0]);</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Last<sp/>=<sp/>ml_symbol_name(Args[1]);</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="3080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3081" refid="structml__exchange__t" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="3082"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,<sp/>MLSymbolT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_chainedv(2,<sp/>Args[0],<sp/>ml_symbol(ml_string_value(Args[1])));</highlight></codeline>
<codeline lineno="3084"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"></highlight></codeline>
<codeline lineno="3086"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Init<sp/>//</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"></highlight></codeline>
<codeline lineno="3089"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*New;</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[];</highlight></codeline>
<codeline lineno="3094"><highlight class="normal">}<sp/><ref refid="structml__exchange__t" kindref="compound">ml_exchange_t</ref>;</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"></highlight></codeline>
<codeline lineno="3096"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_exchange_run(<ref refid="structml__exchange__t" kindref="compound">ml_exchange_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!State-&gt;Index)<sp/>ML_RETURN(State-&gt;New);</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>--State-&gt;Index;</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*New<sp/>=<sp/>State-&gt;New;</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;New<sp/>=<sp/>ml_deref(State-&gt;Args[I]);</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_assign(State,<sp/>State-&gt;Args[I],<sp/>New);</highlight></codeline>
<codeline lineno="3104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"></highlight></codeline>
<codeline lineno="3106"><highlight class="normal">ML_FUNCTIONZ(MLExchange)<sp/>{</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"></highlight><highlight class="comment">//@exchange</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3108"><highlight class="normal"></highlight><highlight class="comment">//&lt;Var/1...:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3109"><highlight class="normal"></highlight><highlight class="comment">//&lt;Var/n:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assigns<sp/>:mini:`Var/i<sp/>:=<sp/>Var/i/+/1`<sp/>for<sp/>each<sp/>:mini:`1<sp/>&lt;=<sp/>i<sp/>&lt;<sp/>n`<sp/>and<sp/>:mini:`Var/n<sp/>:=<sp/>Var/1`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__exchange__t" kindref="compound">ml_exchange_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__exchange__t" kindref="compound">ml_exchange_t</ref>,<sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_exchange_run;</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(State-&gt;Args,<sp/>Args,<sp/>Count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*));</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;New<sp/>=<sp/>ml_deref(Args[0]);</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_exchange_run(State,<sp/>MLNil);</highlight></codeline>
<codeline lineno="3120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"></highlight></codeline>
<codeline lineno="3122"><highlight class="normal">ML_FUNCTIONZ(MLReplace)<sp/>{</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"></highlight><highlight class="comment">//@replace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3124"><highlight class="normal"></highlight><highlight class="comment">//&lt;Var/1...:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3125"><highlight class="normal"></highlight><highlight class="comment">//&lt;Var/n:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3126"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assigns<sp/>:mini:`Var/i<sp/>:=<sp/>Var/i/+/1`<sp/>for<sp/>each<sp/>:mini:`1<sp/>&lt;=<sp/>i<sp/>&lt;<sp/>n`<sp/>and<sp/>:mini:`Var/n<sp/>:=<sp/>Value`.<sp/>Returns<sp/>the<sp/>old<sp/>value<sp/>of<sp/>:mini:`Var/1`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__exchange__t" kindref="compound">ml_exchange_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__exchange__t" kindref="compound">ml_exchange_t</ref>,<sp/>Count<sp/>-<sp/>1,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_exchange_run;</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(State-&gt;Args,<sp/>Args,<sp/>(Count<sp/>-<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*));</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;New<sp/>=<sp/>ml_deref(Args[Count<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>Count<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_exchange_run(State,<sp/>MLNil);</highlight></codeline>
<codeline lineno="3137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"></highlight></codeline>
<codeline lineno="3139"><highlight class="normal">ML_FUNCTION(MLDeref)<sp/>{</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"></highlight><highlight class="comment">//@deref</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3141"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3142"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>dereferenced<sp/>value<sp/>of<sp/>:mini:`Value`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="3145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"></highlight></codeline>
<codeline lineno="3147"><highlight class="normal">ML_FUNCTIONZ(MLAssign)<sp/>{</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"></highlight><highlight class="comment">//@assign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3149"><highlight class="normal"></highlight><highlight class="comment">//&lt;Var:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3150"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3151"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Functional<sp/>equivalent<sp/>of<sp/>:mini:`Var<sp/>:=<sp/>Value`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_assign(Caller,<sp/>Args[0],<sp/>Args[1]);</highlight></codeline>
<codeline lineno="3155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"></highlight></codeline>
<codeline lineno="3157"><highlight class="normal">ML_FUNCTIONZ(MLCall)<sp/>{</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"></highlight><highlight class="comment">//@call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3159"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3160"><highlight class="normal"></highlight><highlight class="comment">//&lt;Arg/1...:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3161"><highlight class="normal"></highlight><highlight class="comment">//&lt;Arg/n:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3162"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3163"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Fn(Arg/1,<sp/>...,<sp/>Arg/n)`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>Args[0],<sp/>Count<sp/>-<sp/>1,<sp/>Args<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"></highlight></codeline>
<codeline lineno="3168"><highlight class="normal">ML_FUNCTIONZ(MLCompareAndSet)<sp/>{</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"></highlight><highlight class="comment">//@cas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3170"><highlight class="normal"></highlight><highlight class="comment">//&lt;Var:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3171"><highlight class="normal"></highlight><highlight class="comment">//&lt;Old:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3172"><highlight class="normal"></highlight><highlight class="comment">//&lt;New:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3173"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>value<sp/>of<sp/>:mini:`Var`<sp/>is<sp/>*identically*<sp/>equal<sp/>to<sp/>:mini:`Old`,<sp/>then<sp/>sets<sp/>:mini:`Var`<sp/>to<sp/>:mini:`New`<sp/>and<sp/>returns<sp/>:mini:`New`.<sp/>Otherwise<sp/>leaves<sp/>:mini:`Var`<sp/>unchanged<sp/>and<sp/>returns<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3175"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>var<sp/>X<sp/>:=<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3176"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>cas(X,<sp/>10,<sp/>11)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3177"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>cas(X,<sp/>20,<sp/>21)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3179"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(3);</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Var<sp/>=<sp/>ml_deref(Args[0]);</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Old<sp/>=<sp/>ml_deref(Args[1]);</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*New<sp/>=<sp/>ml_deref(Args[2]);</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Var<sp/>!=<sp/>Old)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_assign(Caller,<sp/>Args[0],<sp/>New);</highlight></codeline>
<codeline lineno="3186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"></highlight></codeline>
<codeline lineno="3188"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_mem_trace(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Ptr,<sp/><ref refid="structinthash__t" kindref="compound">inthash_t</ref><sp/>*Cache)<sp/>{</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**Base<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)GC_base(Ptr);</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Base)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Label<sp/>=<sp/>inthash_search(Cache,<sp/>(uintptr_t)Base);</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Label)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Label;</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/><sp/>Label<sp/>=<sp/>ml_string_format(</highlight><highlight class="stringliteral">&quot;V%d&quot;</highlight><highlight class="normal">,<sp/>Cache-&gt;Size<sp/>-<sp/>Cache-&gt;Space);</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/><sp/>inthash_insert(Cache,<sp/>(uintptr_t)Base,<sp/>Label);</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Trace<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>(GC_size(Base)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>-<sp/>1)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_put(Trace,<sp/>Label);</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_put(Trace,<sp/>ml_integer(Size));</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Fields<sp/>=<sp/>ml_map();</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_put(Trace,<sp/>Fields);</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Field<sp/>=<sp/>ml_mem_trace(Base[I],<sp/>Cache);</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Field)<sp/>ml_map_insert(Fields,<sp/>ml_integer(I),<sp/>Field);</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Trace;</highlight></codeline>
<codeline lineno="3206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"></highlight></codeline>
<codeline lineno="3208"><highlight class="normal">ML_FUNCTION(MLMemTrace)<sp/>{</highlight></codeline>
<codeline lineno="3210"><highlight class="comment">//@trace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3211"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3212"><highlight class="normal"></highlight><highlight class="comment">//&gt;list[map]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>information<sp/>about<sp/>the<sp/>blocks<sp/>of<sp/>memory<sp/>referenced<sp/>by<sp/>:mini:`Value`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinthash__t" kindref="compound">inthash_t</ref><sp/>Cache[1]<sp/>=<sp/>{INTHASH_INIT};</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_mem_trace(Value,<sp/>Cache)<sp/>?:<sp/>MLNil;</highlight></codeline>
<codeline lineno="3218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"></highlight></codeline>
<codeline lineno="3220"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ml_mem_size(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Ptr,<sp/><ref refid="structinthash__t" kindref="compound">inthash_t</ref><sp/>*Cache)<sp/>{</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**Base<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)GC_base(Ptr);</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Base)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inthash_search(Cache,<sp/>(uintptr_t)Base))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/>inthash_insert(Cache,<sp/>(uintptr_t)Base,<sp/>Base);</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>GC_size(Base);</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>(Size<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>-<sp/>1)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Count;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>Size<sp/>+=<sp/>ml_mem_size(*Base++,<sp/>Cache);</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Size;</highlight></codeline>
<codeline lineno="3229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"></highlight></codeline>
<codeline lineno="3231"><highlight class="normal">ML_FUNCTION(MLMemSize)<sp/>{</highlight></codeline>
<codeline lineno="3233"><highlight class="comment">//@size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3234"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3235"><highlight class="normal"></highlight><highlight class="comment">//&gt;list[map]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>information<sp/>about<sp/>the<sp/>blocks<sp/>of<sp/>memory<sp/>referenced<sp/>by<sp/>:mini:`Value`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinthash__t" kindref="compound">inthash_t</ref><sp/>Cache[1]<sp/>=<sp/>{INTHASH_INIT};</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(ml_mem_size(Value,<sp/>Cache));</highlight></codeline>
<codeline lineno="3241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"></highlight></codeline>
<codeline lineno="3243" refid="structml__weak__ref__t" refkind="compound"><highlight class="normal">ML_FUNCTION(MLMemCollect)<sp/>{</highlight></codeline>
<codeline lineno="3245"><highlight class="comment">//@collect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Call<sp/>garbage<sp/>collector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_gcollect_and_unmap();</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="3249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"></highlight></codeline>
<codeline lineno="3251"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="3254"><highlight class="normal">}<sp/><ref refid="structml__weak__ref__t" kindref="compound">ml_weak_ref_t</ref>;</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"></highlight></codeline>
<codeline lineno="3256"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLWeakRefT[];</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"></highlight></codeline>
<codeline lineno="3258"><highlight class="normal">ML_FUNCTION(MLWeakRef)<sp/>{</highlight></codeline>
<codeline lineno="3260"><highlight class="comment">//@weakref</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3261"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3262"><highlight class="normal"></highlight><highlight class="comment">//&gt;weakref</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__weak__ref__t" kindref="compound">ml_weak_ref_t</ref><sp/>*Ref<sp/>=<sp/>asnew(<ref refid="structml__weak__ref__t" kindref="compound">ml_weak_ref_t</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/>Ref-&gt;Type<sp/>=<sp/>MLWeakRefT;</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/>Ref-&gt;Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_general_register_disappearing_link((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)&amp;Ref-&gt;Value,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Ref;</highlight></codeline>
<codeline lineno="3269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"></highlight></codeline>
<codeline lineno="3271"><highlight class="normal">ML_TYPE(MLWeakRefT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;weak-ref&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3273"><highlight class="comment">//@weakref</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLWeakRef</highlight></codeline>
<codeline lineno="3275"><highlight class="normal">);</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"></highlight></codeline>
<codeline lineno="3277"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;get&quot;</highlight><highlight class="normal">,<sp/>MLWeakRefT)<sp/>{</highlight></codeline>
<codeline lineno="3279"><highlight class="comment">//&lt;Ref</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3280"><highlight class="normal"></highlight><highlight class="comment">//&gt;any|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__weak__ref__t" kindref="compound">ml_weak_ref_t</ref><sp/>*Ref<sp/>=<sp/>(<ref refid="structml__weak__ref__t" kindref="compound">ml_weak_ref_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Ref-&gt;Value<sp/>?:<sp/>MLNil;</highlight></codeline>
<codeline lineno="3283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"></highlight></codeline>
<codeline lineno="3285"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_init(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Globals)<sp/>{</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_JIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_set_pages_executable(1);</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_INIT();</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_init();</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_types_init.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3292"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_rule(MLTupleT,<sp/>MLSequenceT,<sp/>MLIntegerT,<sp/>MLAnyT,<sp/>NULL);</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_rule(MLTupleT,<sp/>MLFunctionT,<sp/>MLTupleT,<sp/>NULL);</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLTypeT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;switch&quot;</highlight><highlight class="normal">,<sp/>MLTypeSwitch);</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLAnyT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;switch&quot;</highlight><highlight class="normal">,<sp/>MLAnySwitch);</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLCompilerT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">,<sp/>ml_complex(1i));</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLBooleanT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;random&quot;</highlight><highlight class="normal">,<sp/>RandomBoolean);</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>ml_return_nil,<sp/>MLNilT,<sp/>MLAnyT,<sp/>NULL);</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;!=&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>ml_return_nil,<sp/>MLNilT,<sp/>MLAnyT,<sp/>NULL);</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>ml_return_nil,<sp/>MLNilT,<sp/>MLAnyT,<sp/>NULL);</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>ml_return_nil,<sp/>MLNilT,<sp/>MLAnyT,<sp/>NULL);</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;&lt;=&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>ml_return_nil,<sp/>MLNilT,<sp/>MLAnyT,<sp/>NULL);</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;&gt;=&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>ml_return_nil,<sp/>MLNilT,<sp/>MLAnyT,<sp/>NULL);</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>ml_return_nil,<sp/>MLAnyT,<sp/>MLNilT,<sp/>NULL);</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;!=&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>ml_return_nil,<sp/>MLAnyT,<sp/>MLNilT,<sp/>NULL);</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>ml_return_nil,<sp/>MLAnyT,<sp/>MLNilT,<sp/>NULL);</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>ml_return_nil,<sp/>MLAnyT,<sp/>MLNilT,<sp/>NULL);</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;&lt;=&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>ml_return_nil,<sp/>MLAnyT,<sp/>MLNilT,<sp/>NULL);</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;&gt;=&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>ml_return_nil,<sp/>MLAnyT,<sp/>MLNilT,<sp/>NULL);</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_number_init();</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_string_init();</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_init();</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_map_init();</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_set_init();</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_compiler_init();</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_runtime_init();</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_bytecode_init();</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLExternalT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;set&quot;</highlight><highlight class="normal">,<sp/>MLExternalSetT);</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLExternalT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;get&quot;</highlight><highlight class="normal">,<sp/>MLExternalGet);</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLExternalT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;add&quot;</highlight><highlight class="normal">,<sp/>MLExternalAdd);</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLExternalT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">,<sp/>MLExternalDefault);</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLExternalT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;some&quot;</highlight><highlight class="normal">,<sp/>MLSome);</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;any&quot;</highlight><highlight class="normal">,<sp/>MLAnyT);</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">,<sp/>MLTypeT);</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;function&quot;</highlight><highlight class="normal">,<sp/>MLFunctionT);</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;sequence&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,<sp/>MLBooleanT);</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ml_externals_default_add(&quot;true&quot;,<sp/>MLTrue);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ml_externals_default_add(&quot;false&quot;,<sp/>MLFalse);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">,<sp/>MLNumberT);</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;real&quot;</highlight><highlight class="normal">,<sp/>MLRealT);</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;complex&quot;</highlight><highlight class="normal">,<sp/>MLComplexT);</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">,<sp/>ml_complex(1i));</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;method&quot;</highlight><highlight class="normal">,<sp/>MLMethodT);</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;address&quot;</highlight><highlight class="normal">,<sp/>MLAddressT);</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;buffer&quot;</highlight><highlight class="normal">,<sp/>MLBufferT);</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;string::buffer&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT);</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;regex&quot;</highlight><highlight class="normal">,<sp/>MLRegexT);</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;tuple&quot;</highlight><highlight class="normal">,<sp/>MLTupleT);</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;list&quot;</highlight><highlight class="normal">,<sp/>MLListT);</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;map&quot;</highlight><highlight class="normal">,<sp/>MLMapT);</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;set&quot;</highlight><highlight class="normal">,<sp/>MLSetT);</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">,<sp/>MLErrorT);</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;copy&quot;</highlight><highlight class="normal">,<sp/>MLCopy);</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Globals)<sp/>{</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;any&quot;</highlight><highlight class="normal">,<sp/>MLAnyT);</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;some&quot;</highlight><highlight class="normal">,<sp/>MLSome);</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">,<sp/>MLTypeT);</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;function&quot;</highlight><highlight class="normal">,<sp/>MLFunctionT);</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;sequence&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,<sp/>MLBooleanT);</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">,<sp/>MLTrue);</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">,<sp/>MLFalse);</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">,<sp/>MLNumberT);</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;real&quot;</highlight><highlight class="normal">,<sp/>MLRealT);</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">,<sp/>MLDoubleT);</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;complex&quot;</highlight><highlight class="normal">,<sp/>MLComplexT);</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">,<sp/>ml_complex(1i));</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;method&quot;</highlight><highlight class="normal">,<sp/>MLMethodT);</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;address&quot;</highlight><highlight class="normal">,<sp/>MLAddressT);</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;buffer&quot;</highlight><highlight class="normal">,<sp/>MLBufferT);</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;regex&quot;</highlight><highlight class="normal">,<sp/>MLRegexT);</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;tuple&quot;</highlight><highlight class="normal">,<sp/>MLTupleT);</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;list&quot;</highlight><highlight class="normal">,<sp/>MLListT);</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;map&quot;</highlight><highlight class="normal">,<sp/>MLMapT);</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;set&quot;</highlight><highlight class="normal">,<sp/>MLSetT);</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">,<sp/>MLErrorValueT);</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;external&quot;</highlight><highlight class="normal">,<sp/>MLExternalT);</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;module&quot;</highlight><highlight class="normal">,<sp/>MLModuleT);</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;deref&quot;</highlight><highlight class="normal">,<sp/>MLDeref);</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;assign&quot;</highlight><highlight class="normal">,<sp/>MLAssign);</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;call&quot;</highlight><highlight class="normal">,<sp/>MLCall);</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;visit&quot;</highlight><highlight class="normal">,<sp/>MLVisit);</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;copy&quot;</highlight><highlight class="normal">,<sp/>MLCopy);</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;findall&quot;</highlight><highlight class="normal">,<sp/>MLFindAll);</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;isconstant&quot;</highlight><highlight class="normal">,<sp/>MLIsConstant);</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;exchange&quot;</highlight><highlight class="normal">,<sp/>MLExchange);</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;replace&quot;</highlight><highlight class="normal">,<sp/>MLReplace);</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;cas&quot;</highlight><highlight class="normal">,<sp/>MLCompareAndSet);</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;weakref&quot;</highlight><highlight class="normal">,<sp/>MLWeakRefT);</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3394"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ml_types.c"/>
  </compounddef>
</doxygen>
