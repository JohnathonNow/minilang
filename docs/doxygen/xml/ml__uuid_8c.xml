<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__uuid_8c" kind="file" language="C++">
    <compoundname>ml_uuid.c</compoundname>
    <includes refid="ml__uuid_8h" local="yes">ml_uuid.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes local="yes">ml_uuid_init.c</includes>
    <incdepgraph>
      <node id="14">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_uuid.c</label>
        <link refid="ml__uuid_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ml_uuid.h</label>
        <link refid="ml__uuid_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="20">
        <label>gc/gc.h</label>
      </node>
      <node id="17">
        <label>limits.h</label>
      </node>
      <node id="16">
        <label>ml_config.h</label>
      </node>
      <node id="21">
        <label>ml_uuid_init.c</label>
      </node>
      <node id="7">
        <label>setjmp.h</label>
      </node>
      <node id="12">
        <label>stdarg.h</label>
      </node>
      <node id="15">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>stdio.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="11">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>unistd.h</label>
      </node>
      <node id="18">
        <label>uuid/uuid.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__uuid_8c_1aebec330325aff5cbc7d9c9248e2cae4a" prot="public" static="no">
        <name>ML_CATEGORY</name>
        <initializer>&quot;uuid&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_uuid.c" line="5" column="10" bodyfile="src/ml_uuid.c" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__uuid_8c_1a5998f9f2d2badbc048d60bf0934c19b3" prot="public" static="no">
        <name>ml_comp_method_time_time</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>	ML_METHOD(NAME, MLUUIDT, MLUUIDT) { \
		<ref refid="structml__uuid__t" kindref="compound">ml_uuid_t</ref> *UUIDA = (<ref refid="structml__uuid__t" kindref="compound">ml_uuid_t</ref> *)Args[0]; \
		<ref refid="structml__uuid__t" kindref="compound">ml_uuid_t</ref> *UUIDB = (<ref refid="structml__uuid__t" kindref="compound">ml_uuid_t</ref> *)Args[1]; \
		return uuid_compare(UUIDA-&gt;Value, UUIDB-&gt;Value) SYMBOL 0 ? Args[1] : MLNil; \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_uuid.c" line="104" column="9" bodyfile="src/ml_uuid.c" bodystart="104" bodyend="109"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__uuid_8c_1a81ae9d1a56632352c68f46483301c1b5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>static long ml_uuid_hash</definition>
        <argsstring>(ml_uuid_t *UUID, ml_hash_chain_t *Chain)</argsstring>
        <name>ml_uuid_hash</name>
        <param>
          <type><ref refid="structml__uuid__t" kindref="compound">ml_uuid_t</ref> *</type>
          <declname>UUID</declname>
        </param>
        <param>
          <type><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref> *</type>
          <declname>Chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_uuid.c" line="11" column="13" bodyfile="src/ml_uuid.c" bodystart="11" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__uuid_8c_1a25b1635bdd3fde62d07449cca56de5c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLUUIDT,(), &quot;uuid&quot;,.hash=(void *) ml_uuid_hash)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLUUIDT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;uuid&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>hash</declname>
          <defval>(void *) ml_uuid_hash</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_uuid.c" line="15" column="1" declfile="src/ml_uuid.c" declline="15" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__uuid_8c_1a93a020b784bc298280e9d4d4a084fbc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_uuid</definition>
        <argsstring>(const uuid_t Value)</argsstring>
        <name>ml_uuid</name>
        <param>
          <type>const uuid_t</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_uuid.c" line="20" column="12" bodyfile="src/ml_uuid.c" bodystart="20" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="ml__uuid_8c_1ae053f8c4a557d00fb076a54690884c37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_uuid_parse</definition>
        <argsstring>(const char *Value, int Length)</argsstring>
        <name>ml_uuid_parse</name>
        <param>
          <type>const char *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_uuid.c" line="27" column="12" bodyfile="src/ml_uuid.c" bodystart="27" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="ml__uuid_8c_1ab8a27bee11142da738dfdce1233714bb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ML_TYPED_FN</definition>
        <argsstring>(ml_value_is_constant, MLUUIDT, ml_value_t *Value)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_value_is_constant</type>
        </param>
        <param>
          <type>MLUUIDT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_uuid.c" line="36" column="12" bodyfile="src/ml_uuid.c" bodystart="36" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="ml__uuid_8c_1a5c0465c2049282a6ceb6792547967772" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLUUIDT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLUUIDT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_uuid.c" line="40" column="1" bodyfile="src/ml_uuid.c" bodystart="40" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="ml__uuid_8c_1ac17ec6572541d8914fb5d804576984c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLUUIDT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLUUIDT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_uuid.c" line="51" column="1" bodyfile="src/ml_uuid.c" bodystart="51" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="ml__uuid_8c_1a5bcdee8b310876e1e2b4bd6eacdc1a84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLUUIDT, MLAddressT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLUUIDT</type>
        </param>
        <param>
          <type>MLAddressT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_uuid.c" line="61" column="1" bodyfile="src/ml_uuid.c" bodystart="61" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="ml__uuid_8c_1a79f70c01366832fa2419e98516346f52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLAddressT, MLUUIDT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLAddressT</type>
        </param>
        <param>
          <type>MLUUIDT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_uuid.c" line="72" column="1" bodyfile="src/ml_uuid.c" bodystart="72" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="ml__uuid_8c_1a6ae19995f614d41b324f8af7cd1b282c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLUUIDT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLUUIDT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_uuid.c" line="86" column="1" bodyfile="src/ml_uuid.c" bodystart="86" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="ml__uuid_8c_1aebfd4cc91914538b4a37a896bfc67ff3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;&gt;&quot;, MLUUIDT, MLUUIDT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&lt;&gt;&quot;</type>
        </param>
        <param>
          <type>MLUUIDT</type>
        </param>
        <param>
          <type>MLUUIDT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_uuid.c" line="98" column="1" bodyfile="src/ml_uuid.c" bodystart="98" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="ml__uuid_8c_1a90fa0b1c3bf553f7ca76753356d2348e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml_comp_method_time_time</definition>
        <argsstring>(&quot;=&quot;,==)</argsstring>
        <name>ml_comp_method_time_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_uuid.c" line="111" column="1" declfile="src/ml_uuid.c" declline="111" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__uuid_8c_1a23819b9e05830ecd8e9e1d5d4da6315d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml_comp_method_time_time</definition>
        <argsstring>(&quot;&gt;&quot;, &gt;)</argsstring>
        <name>ml_comp_method_time_time</name>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_uuid.c" line="114" column="1" declfile="src/ml_uuid.c" declline="114" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__uuid_8c_1ae591c3687043ad7b9a761d283425c801" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml_comp_method_time_time</definition>
        <argsstring>(&quot;&lt;=&quot;,&lt;=)</argsstring>
        <name>ml_comp_method_time_time</name>
        <param>
          <type>&quot;&lt;=&quot;</type>
        </param>
        <param>
          <type>&lt;=</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_uuid.c" line="115" column="1" declfile="src/ml_uuid.c" declline="115" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__uuid_8c_1a3cd2e11f65fc0de906d8dae98a7c44cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml_comp_method_time_time</definition>
        <argsstring>(&quot;&gt;=&quot;, &gt;=)</argsstring>
        <name>ml_comp_method_time_time</name>
        <param>
          <type>&quot;&gt;=&quot;</type>
        </param>
        <param>
          <type>&gt;=</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_uuid.c" line="116" column="1" declfile="src/ml_uuid.c" declline="116" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__uuid_8c_1ac3c5c43dbe675e82064f202663589826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_uuid_init</definition>
        <argsstring>(stringmap_t *Globals)</argsstring>
        <name>ml_uuid_init</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Globals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_uuid.c" line="136" column="6" bodyfile="src/ml_uuid.c" bodystart="136" bodyend="145"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ml_uuid.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ML_CATEGORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;uuid&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Overview</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>..<sp/>note::</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Depending<sp/>on<sp/>how<sp/>*Minilang*<sp/>is<sp/>built,<sp/>:mini:`uuid`<sp/>might<sp/>need<sp/>to<sp/>be<sp/>imported<sp/>using<sp/>:mini:`import:<sp/>uuid(&quot;util/uuid&quot;)`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ml_uuid_hash(<ref refid="structml__uuid__t" kindref="compound">ml_uuid_t</ref><sp/>*UUID,<sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Chain)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*)UUID-&gt;Value;</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">ML_TYPE(MLUUIDT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;uuid&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>UUID.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>.hash<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_uuid_hash</highlight></codeline>
<codeline lineno="18"><highlight class="normal">);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_uuid(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uuid_t<sp/>Value)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__uuid__t" kindref="compound">ml_uuid_t</ref><sp/>*UUID<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__uuid__t" kindref="compound">ml_uuid_t</ref>);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>UUID-&gt;Type<sp/>=<sp/>MLUUIDT;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>uuid_copy(UUID-&gt;Value,<sp/>Value);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)UUID;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_uuid_parse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__uuid__t" kindref="compound">ml_uuid_t</ref><sp/>*UUID<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__uuid__t" kindref="compound">ml_uuid_t</ref>);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>UUID-&gt;Type<sp/>=<sp/>MLUUIDT;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uuid_parse(Value,<sp/>UUID-&gt;Value))<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;UUIDError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>UUID<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)UUID;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_value_is_constant,<sp/>MLUUIDT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">ML_METHOD(MLUUIDT)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//&gt;uuid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>random<sp/>UUID.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>import:<sp/>uuid(&quot;util/uuid&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>uuid()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__uuid__t" kindref="compound">ml_uuid_t</ref><sp/>*UUID<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__uuid__t" kindref="compound">ml_uuid_t</ref>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>UUID-&gt;Type<sp/>=<sp/>MLUUIDT;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>uuid_generate(UUID-&gt;Value);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)UUID;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">ML_METHOD(MLUUIDT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//&gt;uuid|error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>:mini:`String`<sp/>as<sp/>a<sp/>UUID,<sp/>returning<sp/>an<sp/>error<sp/>if<sp/>:mini:`String`<sp/>does<sp/>not<sp/>have<sp/>the<sp/>correct<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>import:<sp/>uuid(&quot;util/uuid&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>uuid(&quot;5fe1af82-02f9-429a-8787-4a7c16628a02&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>uuid(&quot;test&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_uuid_parse(ml_string_value(Args[0]),<sp/>ml_string_length(Args[0]));</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">ML_METHOD(MLUUIDT,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//&lt;Address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//&gt;uuid|error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>UUID<sp/>with<sp/>the<sp/>bytes<sp/>of<sp/>:mini:`Address`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_address_length(Args[0])<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uuid_t))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;UUIDError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;16<sp/>bytes<sp/>required<sp/>for<sp/>UUID&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__uuid__t" kindref="compound">ml_uuid_t</ref><sp/>*UUID<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__uuid__t" kindref="compound">ml_uuid_t</ref>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>UUID-&gt;Type<sp/>=<sp/>MLUUIDT;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(UUID-&gt;Value,<sp/>ml_address_value(Args[0]),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uuid_t));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)UUID;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">ML_METHOD(MLAddressT,<sp/>MLUUIDT)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//&lt;UUID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//&gt;address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>address<sp/>view<sp/>of<sp/>:mini:`UUID`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>import:<sp/>uuid(&quot;util/uuid&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>address(uuid())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__uuid__t" kindref="compound">ml_uuid_t</ref><sp/>*UUID<sp/>=<sp/>(<ref refid="structml__uuid__t" kindref="compound">ml_uuid_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>Address-&gt;Type<sp/>=<sp/>MLAddressT;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>Address-&gt;Value<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)UUID-&gt;Value;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>Address-&gt;Length<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uuid_t);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Address;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLUUIDT)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//&lt;UUID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>a<sp/>representation<sp/>of<sp/>:mini:`UUID`<sp/>to<sp/>:mini:`Buffer`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__uuid__t" kindref="compound">ml_uuid_t</ref><sp/>*UUID<sp/>=<sp/>(<ref refid="structml__uuid__t" kindref="compound">ml_uuid_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>String[UUID_STR_LEN];</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>uuid_unparse_lower(UUID-&gt;Value,<sp/>String);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>String,<sp/>UUID_STR_LEN<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLUUIDT,<sp/>MLUUIDT)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__uuid__t" kindref="compound">ml_uuid_t</ref><sp/>*UUIDA<sp/>=<sp/>(<ref refid="structml__uuid__t" kindref="compound">ml_uuid_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__uuid__t" kindref="compound">ml_uuid_t</ref><sp/>*UUIDB<sp/>=<sp/>(<ref refid="structml__uuid__t" kindref="compound">ml_uuid_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(uuid_compare(UUIDA-&gt;Value,<sp/>UUIDB-&gt;Value));</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_comp_method_time_time(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ML_METHOD(NAME,<sp/>MLUUIDT,<sp/>MLUUIDT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_uuid_t<sp/>*UUIDA<sp/>=<sp/>(ml_uuid_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_uuid_t<sp/>*UUIDB<sp/>=<sp/>(ml_uuid_t<sp/>*)Args[1];<sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>uuid_compare(UUIDA-&gt;Value,<sp/>UUIDB-&gt;Value)<sp/>SYMBOL<sp/>0<sp/>?<sp/>Args[1]<sp/>:<sp/>MLNil;<sp/>\</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">ml_comp_method_time_time(</highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">,<sp/>==);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">ml_comp_method_time_time(</highlight><highlight class="stringliteral">&quot;!=&quot;</highlight><highlight class="normal">,<sp/>!=);</highlight></codeline>
<codeline lineno="113"><highlight class="normal">ml_comp_method_time_time(</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">,<sp/>&lt;);</highlight></codeline>
<codeline lineno="114"><highlight class="normal">ml_comp_method_time_time(</highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">,<sp/>&gt;);</highlight></codeline>
<codeline lineno="115"><highlight class="normal">ml_comp_method_time_time(</highlight><highlight class="stringliteral">&quot;&lt;=&quot;</highlight><highlight class="normal">,<sp/>&lt;=);</highlight></codeline>
<codeline lineno="116"><highlight class="normal">ml_comp_method_time_time(</highlight><highlight class="stringliteral">&quot;&gt;=&quot;</highlight><highlight class="normal">,<sp/>&gt;=);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_CBOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_cbor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLUUIDT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__uuid__t" kindref="compound">ml_uuid_t</ref><sp/>*UUID)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_write_tag(Writer,<sp/>37);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_write_bytes(Writer,<sp/>16);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_write_raw(Writer,<sp/>UUID-&gt;Value,<sp/>16);</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cbor_read_uuid_fn(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Value,<sp/>MLAddressT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TagError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;UUID<sp/>requires<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_string_length(Value)<sp/>!=<sp/>16)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TagError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;UUID<sp/>requires<sp/>16<sp/>bytes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_uuid((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_string_value(Value));</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_uuid_init(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Globals)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_uuid_init.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(MLUUIDT-&gt;Constructor,<sp/>NULL,<sp/>ml_identity,<sp/>MLUUIDT,<sp/>NULL);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Globals)<sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;uuid&quot;</highlight><highlight class="normal">,<sp/>MLUUIDT);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_string_fn_register(</highlight><highlight class="stringliteral">&quot;U&quot;</highlight><highlight class="normal">,<sp/>ml_uuid_parse);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_CBOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_tag(ML_CBOR_TAG_UUID,<sp/>ml_cbor_read_uuid_fn);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;uuid&quot;</highlight><highlight class="normal">,<sp/>MLUUIDT);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ml_uuid.c"/>
  </compounddef>
</doxygen>
