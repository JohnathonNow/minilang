<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__logging_8c" kind="file" language="C++">
    <compoundname>ml_logging.c</compoundname>
    <includes refid="ml__logging_8h" local="yes">ml_logging.h</includes>
    <includes refid="ml__object_8h" local="yes">ml_object.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes refid="ml__compiler2_8h" local="yes">ml_compiler2.h</includes>
    <includes local="no">sys/time.h</includes>
    <includes local="yes">ml_logging_init.c</includes>
    <incdepgraph>
      <node id="14">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>ml_bytecode.h</label>
        <link refid="ml__bytecode_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>ml_compiler2.h</label>
        <link refid="ml__compiler2_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>ml_expr_types.h</label>
        <link refid="ml__expr__types_8h_source"/>
      </node>
      <node id="1">
        <label>src/ml_logging.c</label>
        <link refid="ml__logging_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ml_logging.h</label>
        <link refid="ml__logging_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ml_object.h</label>
        <link refid="ml__object_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>ml_opcodes.h</label>
        <link refid="ml__opcodes_8h_source"/>
      </node>
      <node id="8">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="20">
        <label>gc/gc.h</label>
      </node>
      <node id="17">
        <label>limits.h</label>
      </node>
      <node id="16">
        <label>ml_config.h</label>
      </node>
      <node id="26">
        <label>ml_logging_init.c</label>
      </node>
      <node id="7">
        <label>setjmp.h</label>
      </node>
      <node id="12">
        <label>stdarg.h</label>
      </node>
      <node id="15">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>stdio.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="11">
        <label>string.h</label>
      </node>
      <node id="25">
        <label>sys/time.h</label>
      </node>
      <node id="5">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structml__log__state__t" prot="public">ml_log_state_t</innerclass>
    <innerclass refid="structml__log__macro__t" prot="public">ml_log_macro_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__logging_8c_1aebec330325aff5cbc7d9c9248e2cae4a" prot="public" static="no">
        <name>ML_CATEGORY</name>
        <initializer>&quot;logging&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="8" column="10" bodyfile="src/ml_logging.c" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__logging_8c_1a5aebd29cd26434971e6d7e6ee99023fb" prot="public" static="no">
        <name>ML_CONFIG_LOG_LEVEL</name>
        <param><defname>NAME</defname></param>
        <param><defname>LEVEL</defname></param>
        <initializer>\
static int ml_config_log_ ## NAME(<ref refid="structml__context__t" kindref="compound">ml_context_t</ref> *Context) { \
	return MLLogLevel &gt;= ML_LOG_LEVEL_ ## LEVEL; \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="93" column="9" bodyfile="src/ml_logging.c" bodystart="93" bodyend="97"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="ml__logging_8c_1a2b3bb11247e989dec09e6a8dd6b8fb24" prot="public" static="no" mutable="no">
        <type>ml_log_level_t</type>
        <definition>ml_log_level_t MLLogLevel</definition>
        <argsstring></argsstring>
        <name>MLLogLevel</name>
        <initializer>= ML_LOG_LEVEL_INFO</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="10" column="16" bodyfile="src/ml_logging.c" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ml__logging_8c_1a179a703c470b0b011de5462183aa0cc9" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* MLLogLevelNames[]</definition>
        <argsstring>[]</argsstring>
        <name>MLLogLevelNames</name>
        <initializer>= {
	[ML_LOG_LEVEL_NONE] = &quot;NONE&quot;,
	[ML_LOG_LEVEL_ERROR] = &quot;\e[31mERROR\e[0m&quot;,
	[ML_LOG_LEVEL_WARN] = &quot;\e[35mWARN\e[0m&quot;,
	[ML_LOG_LEVEL_INFO] = &quot;\e[32mINFO\e[0m&quot;,
	[ML_LOG_LEVEL_DEBUG] = &quot;\e[34mDEBUG\e[0m&quot;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="12" column="19" bodyfile="src/ml_logging.c" bodystart="12" bodyend="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__logging_8c_1ae141b3a092df79ec95c287e3e7fea98b" prot="public" static="no" mutable="no">
        <type>ml_logger_fn</type>
        <definition>ml_logger_fn ml_log</definition>
        <argsstring></argsstring>
        <name>ml_log</name>
        <initializer>= ml_log_default</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="35" column="14" bodyfile="src/ml_logging.c" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ml__logging_8c_1a76d41294d2a7c72086a1543d1ec5f8db" prot="public" static="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t* MLLog</definition>
        <argsstring></argsstring>
        <name>MLLog</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="36" column="19" bodyfile="src/ml_logging.c" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ml__logging_8c_1a98ddc59228390d1a39343725fc115aec" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t* AppendMethod</definition>
        <argsstring></argsstring>
        <name>AppendMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="53" column="19" declfile="src/ml_logging.c" declline="53" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="ml__logging_8c_1a20a713348daf238cdc7b881247c1ab0f" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLLoggerT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLLoggerT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="104" column="18" declfile="src/ml_logging.c" declline="104" declcolumn="18"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__logging_8c_1a98a331f404e7b28eb06f6cbfdf390e11" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_log_default</definition>
        <argsstring>(ml_logger_t *Logger, ml_log_level_t Level, const char *Source, int Line, const char *Format,...)</argsstring>
        <name>ml_log_default</name>
        <param>
          <type><ref refid="structml__logger__t" kindref="compound">ml_logger_t</ref> *</type>
          <declname>Logger</declname>
        </param>
        <param>
          <type>ml_log_level_t</type>
          <declname>Level</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="20" column="13" bodyfile="src/ml_logging.c" bodystart="20" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="ml__logging_8c_1aeafe9a5e6631fca1b02cf6b3bc706da7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_log_buffer_fn</definition>
        <argsstring>(ml_log_state_t *State, const char *Chars, size_t Length)</argsstring>
        <name>ml_log_buffer_fn</name>
        <param>
          <type><ref refid="structml__log__state__t" kindref="compound">ml_log_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Chars</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="48" column="12" bodyfile="src/ml_logging.c" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="ml__logging_8c_1acba68e60251364841d47f73186f4eeff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_log_state_run</definition>
        <argsstring>(ml_log_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_log_state_run</name>
        <param>
          <type><ref refid="structml__log__state__t" kindref="compound">ml_log_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="55" column="13" bodyfile="src/ml_logging.c" bodystart="55" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="ml__logging_8c_1a38db8f8d8d5795a402f91739dd7c2a33" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_log_fn</definition>
        <argsstring>(ml_state_t *Caller, ml_logger_t *Logger, int Count, ml_value_t **Args)</argsstring>
        <name>ml_log_fn</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__logger__t" kindref="compound">ml_logger_t</ref> *</type>
          <declname>Logger</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="68" column="13" bodyfile="src/ml_logging.c" bodystart="68" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="ml__logging_8c_1a90826e41f28e8c7cc0caa40c3a9d6989" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CONFIG_LOG_LEVEL</definition>
        <argsstring>(error, ERROR)</argsstring>
        <name>ML_CONFIG_LOG_LEVEL</name>
        <param>
          <type>error</type>
        </param>
        <param>
          <type>ERROR</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="99" column="1" declfile="src/ml_logging.c" declline="99" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__logging_8c_1aa9bbe04e63005afa5a9c23e7f417ed38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CONFIG_LOG_LEVEL</definition>
        <argsstring>(warn, WARN)</argsstring>
        <name>ML_CONFIG_LOG_LEVEL</name>
        <param>
          <type>warn</type>
        </param>
        <param>
          <type>WARN</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="100" column="1" declfile="src/ml_logging.c" declline="100" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__logging_8c_1a3755005fd60cdd903bc08e3f0ac0afb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CONFIG_LOG_LEVEL</definition>
        <argsstring>(info, INFO)</argsstring>
        <name>ML_CONFIG_LOG_LEVEL</name>
        <param>
          <type>info</type>
        </param>
        <param>
          <type>INFO</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="101" column="1" declfile="src/ml_logging.c" declline="101" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__logging_8c_1a201994cae1a005427f81c89bec5ceda1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CONFIG_LOG_LEVEL</definition>
        <argsstring>(debug, DEBUG)</argsstring>
        <name>ML_CONFIG_LOG_LEVEL</name>
        <param>
          <type>debug</type>
        </param>
        <param>
          <type>DEBUG</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="102" column="1" declfile="src/ml_logging.c" declline="102" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__logging_8c_1afeadc56358c3f9c6a1b3d32f6c3618d7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_log_macro_call</definition>
        <argsstring>(ml_state_t *Caller, ml_log_macro_t *Macro, int Count, ml_value_t **Args)</argsstring>
        <name>ml_log_macro_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__log__macro__t" kindref="compound">ml_log_macro_t</ref> *</type>
          <declname>Macro</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="111" column="13" bodyfile="src/ml_logging.c" bodystart="111" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="ml__logging_8c_1aabf74988077480b17132742a92d6bdad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLLogMacroT,(MLFunctionT), &quot;log::macro&quot;,.call=(void *) ml_log_macro_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLLogMacroT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;log::macro&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_log_macro_call</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="119" column="1" declfile="src/ml_logging.c" declline="119" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__logging_8c_1a1f2e3a6125e70f0dc2a8adc256b1b3bb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_log_macro_special</definition>
        <argsstring>(void *LogFn)</argsstring>
        <name>ml_log_macro_special</name>
        <param>
          <type>void *</type>
          <declname>LogFn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="123" column="19" bodyfile="src/ml_logging.c" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="ml__logging_8c_1ab81339940444720046c0b1707dcef44d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_log_macro</definition>
        <argsstring>(ml_logger_t *Logger, ml_value_t *LogFn, const char *Input)</argsstring>
        <name>ml_log_macro</name>
        <param>
          <type><ref refid="structml__logger__t" kindref="compound">ml_logger_t</ref> *</type>
          <declname>Logger</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>LogFn</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="127" column="19" bodyfile="src/ml_logging.c" bodystart="127" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="ml__logging_8c_1afc06ed7a4d0303720910ea170a754c87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLLogger)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLLogger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="138" column="1" bodyfile="src/ml_logging.c" bodystart="138" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="ml__logging_8c_1aee76395f69f3ff700dbcdc8c9d31713c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLLoggerT,(), &quot;logger&quot;,.Constructor=(ml_value_t *) MLLogger)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLLoggerT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;logger&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLLogger</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="156" column="1" declfile="src/ml_logging.c" declline="156" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__logging_8c_1a29a990259ea559564a2e5884b92c8f6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;::&quot;, MLLoggerT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;::&quot;</type>
        </param>
        <param>
          <type>MLLoggerT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="161" column="1" bodyfile="src/ml_logging.c" bodystart="161" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="ml__logging_8c_1acf9b32ef118e827a8352753c60a954d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLLoggerLevel)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLLoggerLevel</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="174" column="1" bodyfile="src/ml_logging.c" bodystart="174" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="ml__logging_8c_1a59673295603f23e896e0c1ec708b33f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_logging_init</definition>
        <argsstring>(stringmap_t *Globals)</argsstring>
        <name>ml_logging_init</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Globals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_logging.c" line="198" column="6" bodyfile="src/ml_logging.c" bodystart="198" bodyend="208"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ml_logging.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_object.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_compiler2.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ML_CATEGORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;logging&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">ml_log_level_t<sp/>MLLogLevel<sp/>=<sp/>ML_LOG_LEVEL_INFO;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*MLLogLevelNames[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_LOG_LEVEL_NONE]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;NONE&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_LOG_LEVEL_ERROR]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\e[31mERROR\e[0m&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_LOG_LEVEL_WARN]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\e[35mWARN\e[0m&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_LOG_LEVEL_INFO]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\e[32mINFO\e[0m&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_LOG_LEVEL_DEBUG]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\e[34mDEBUG\e[0m&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">};</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_log_default(<ref refid="structml__logger__t" kindref="compound">ml_logger_t</ref><sp/>*Logger,<sp/>ml_log_level_t<sp/>Level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Format,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>Time;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>clock_gettime(CLOCK_REALTIME,<sp/>&amp;Time);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm<sp/>BrokenTime;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>gmtime_r(&amp;Time.tv_sec,<sp/>&amp;BrokenTime);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>TimeString[20];</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>strftime(TimeString,<sp/>20,<sp/></highlight><highlight class="stringliteral">&quot;%F<sp/>%T&quot;</highlight><highlight class="normal">,<sp/>&amp;BrokenTime);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;[%s]<sp/>%s<sp/>%s<sp/>%s:%d<sp/>&quot;</highlight><highlight class="normal">,<sp/>MLLogLevelNames[Level],<sp/>TimeString,<sp/>Logger-&gt;Name,<sp/>Source,<sp/>Line);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>Args;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>Format);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>vfprintf(stderr,<sp/>Format,<sp/>Args);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">ml_logger_fn<sp/>ml_log<sp/>=<sp/>ml_log_default;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*MLLog<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="structml__log__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__logger__t" kindref="compound">ml_logger_t</ref><sp/>*Logger;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1];</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_log_level_t<sp/>Level;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line,<sp/>Index;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[];</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}<sp/><ref refid="structml__log__state__t" kindref="compound">ml_log_state_t</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_log_buffer_fn(<ref refid="structml__log__state__t" kindref="compound">ml_log_state_t</ref><sp/>*State,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Chars,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_log(State-&gt;Logger,<sp/>State-&gt;Level,<sp/>State-&gt;Source,<sp/>State-&gt;Line,<sp/></highlight><highlight class="stringliteral">&quot;%.*s&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)Length,<sp/>Chars);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*AppendMethod;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_log_state_run(<ref refid="structml__log__state__t" kindref="compound">ml_log_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Check<sp/>for<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg<sp/>=<sp/>State-&gt;Args[State-&gt;Index];</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Arg)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_put(State-&gt;Buffer,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++State-&gt;Index;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>Arg;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>AppendMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_drain(State-&gt;Buffer,<sp/>State,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_log_buffer_fn);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>MLNil);</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_log_fn(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__logger__t" kindref="compound">ml_logger_t</ref><sp/>*Logger,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_log_level_t<sp/>Level<sp/>=<sp/>ml_integer_value(Args[0]);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Level<sp/>&lt;=<sp/>ML_LOG_LEVEL_NONE<sp/>||<sp/>Level<sp/>&gt;<sp/>MLLogLevel<sp/>||<sp/>Logger-&gt;Ignored[Level])<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MLLog)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Call<sp/>MLLog</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__log__state__t" kindref="compound">ml_log_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__log__state__t" kindref="compound">ml_log_state_t</ref>,<sp/>Count<sp/>+<sp/>1,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_log_state_run;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Logger<sp/>=<sp/>Logger;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Buffer[0]<sp/>=<sp/>ML_STRINGBUFFER_INIT;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>Source<sp/>=<sp/>ml_debugger_source(Caller);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Source<sp/>=<sp/>Source.Name;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Line<sp/>=<sp/>Source.Line;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Level<sp/>=<sp/>Level;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>State-&gt;Args[I]<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_log_state_run(State,<sp/>MLNil);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)State-&gt;Buffer;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>AppendMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CONFIG_LOG_LEVEL(NAME,<sp/>LEVEL)<sp/>\</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor">static<sp/>int<sp/>ml_config_log_<sp/>##<sp/>NAME(ml_context_t<sp/>*Context)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>MLLogLevel<sp/>&gt;=<sp/>ML_LOG_LEVEL_<sp/>##<sp/>LEVEL;<sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">ML_CONFIG_LOG_LEVEL(error,<sp/>ERROR);</highlight></codeline>
<codeline lineno="100"><highlight class="normal">ML_CONFIG_LOG_LEVEL(warn,<sp/>WARN);</highlight></codeline>
<codeline lineno="101"><highlight class="normal">ML_CONFIG_LOG_LEVEL(info,<sp/>INFO);</highlight></codeline>
<codeline lineno="102"><highlight class="normal">ML_CONFIG_LOG_LEVEL(debug,<sp/>DEBUG);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLLoggerT[];</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="structml__log__macro__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}<sp/><ref refid="structml__log__macro__t" kindref="compound">ml_log_macro_t</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_log_macro_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__log__macro__t" kindref="compound">ml_log_macro_t</ref><sp/>*Macro,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ml_list_put(List,<sp/>Args[I]);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Names[1]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;Args&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Exprs[1]<sp/>=<sp/>{List};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_macro_subst(Macro-&gt;Expr,<sp/>1,<sp/>Names,<sp/>Exprs));</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">ML_TYPE(MLLogMacroT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;log::macro&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_log_macro_call</highlight></codeline>
<codeline lineno="121"><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_log_macro_special(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*LogFn)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)LogFn;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_log_macro(<ref refid="structml__logger__t" kindref="compound">ml_logger_t</ref><sp/>*Logger,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*LogFn,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Input)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__log__macro__t" kindref="compound">ml_log_macro_t</ref><sp/>*Macro<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__log__macro__t" kindref="compound">ml_log_macro_t</ref>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>Macro-&gt;Type<sp/>=<sp/>MLLogMacroT;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser<sp/>=<sp/><ref refid="group__compiler_1gab31c0e27d21db6f748c137bf13bd7e28" kindref="member">ml_parser</ref>(NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__compiler_1ga21c894dfe870f9461194a9168b4dd2fc" kindref="member">ml_parser_input</ref>(Parser,<sp/>Input);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_parser_special(Parser,<sp/>ml_log_macro_special,<sp/>LogFn);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>Macro-&gt;Expr<sp/>=<sp/>ml_parse_expr(Parser);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Macro-&gt;Expr)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_parser_value(Parser);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_macro((<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Macro);</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">ML_FUNCTION(MLLogger)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//@logger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//&lt;Category</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//&gt;logger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>logger<sp/>with<sp/>levels<sp/>:mini:`::error`,<sp/>:mini:`::warn`,<sp/>:mini:`::info`<sp/>and<sp/>:mini:`::debug`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__logger__t" kindref="compound">ml_logger_t</ref><sp/>*Logger<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__logger__t" kindref="compound">ml_logger_t</ref>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>Logger-&gt;Type<sp/>=<sp/>MLLoggerT;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>Logger-&gt;Name<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*LogFn<sp/>=<sp/>ml_cfunctionx(Logger,<sp/>(ml_callbackx_t)ml_log_fn);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>Logger-&gt;Loggers[ML_LOG_LEVEL_ERROR]<sp/>=<sp/>ml_log_macro(Logger,<sp/>LogFn,<sp/></highlight><highlight class="stringliteral">&quot;ifConfig<sp/>\&quot;LOG&gt;=ERROR\&quot;<sp/>\uFFFC(1,<sp/>:$Args)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>Logger-&gt;Loggers[ML_LOG_LEVEL_WARN]<sp/>=<sp/>ml_log_macro(Logger,<sp/>LogFn,<sp/></highlight><highlight class="stringliteral">&quot;ifConfig<sp/>\&quot;LOG&gt;=WARN\&quot;<sp/>\uFFFC(2,<sp/>:$Args)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>Logger-&gt;Loggers[ML_LOG_LEVEL_INFO]<sp/>=<sp/>ml_log_macro(Logger,<sp/>LogFn,<sp/></highlight><highlight class="stringliteral">&quot;ifConfig<sp/>\&quot;LOG&gt;=INFO\&quot;<sp/>\uFFFC(3,<sp/>:$Args)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>Logger-&gt;Loggers[ML_LOG_LEVEL_DEBUG]<sp/>=<sp/>ml_log_macro(Logger,<sp/>LogFn,<sp/></highlight><highlight class="stringliteral">&quot;ifConfig<sp/>\&quot;LOG&gt;=DEBUG\&quot;<sp/>\uFFFC(4,<sp/>:$Args)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Logger;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">ML_TYPE(MLLoggerT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;logger&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>logger.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLLogger</highlight></codeline>
<codeline lineno="159"><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,<sp/>MLLoggerT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//&lt;Logger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//&lt;Level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//&gt;logger::fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__logger__t" kindref="compound">ml_logger_t</ref><sp/>*Logger<sp/>=<sp/>(<ref refid="structml__logger__t" kindref="compound">ml_logger_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Level<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcasecmp(Level,<sp/></highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Logger-&gt;Loggers[ML_LOG_LEVEL_ERROR];</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcasecmp(Level,<sp/></highlight><highlight class="stringliteral">&quot;warn&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Logger-&gt;Loggers[ML_LOG_LEVEL_WARN];</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcasecmp(Level,<sp/></highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Logger-&gt;Loggers[ML_LOG_LEVEL_INFO];</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcasecmp(Level,<sp/></highlight><highlight class="stringliteral">&quot;debug&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Logger-&gt;Loggers[ML_LOG_LEVEL_DEBUG];</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;NameError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>log<sp/>level<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Level);</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">ML_FUNCTION(MLLoggerLevel)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//@logger::level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//&lt;Level?:string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>or<sp/>sets<sp/>the<sp/>logging<sp/>level<sp/>for<sp/>default<sp/>logging.<sp/>Returns<sp/>the<sp/>log<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Level<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcasecmp(Level,<sp/></highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">))<sp/>MLLogLevel<sp/>=<sp/>ML_LOG_LEVEL_ERROR;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcasecmp(Level,<sp/></highlight><highlight class="stringliteral">&quot;warn&quot;</highlight><highlight class="normal">))<sp/>MLLogLevel<sp/>=<sp/>ML_LOG_LEVEL_WARN;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcasecmp(Level,<sp/></highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">))<sp/>MLLogLevel<sp/>=<sp/>ML_LOG_LEVEL_INFO;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcasecmp(Level,<sp/></highlight><highlight class="stringliteral">&quot;debug&quot;</highlight><highlight class="normal">))<sp/>MLLogLevel<sp/>=<sp/>ML_LOG_LEVEL_DEBUG;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcasecmp(Level,<sp/></highlight><highlight class="stringliteral">&quot;all&quot;</highlight><highlight class="normal">))<sp/>MLLogLevel<sp/>=<sp/>ML_LOG_LEVEL_ALL;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(MLLogLevel)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_LOG_LEVEL_ERROR:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_cstring(</highlight><highlight class="stringliteral">&quot;Error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_LOG_LEVEL_WARN:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_cstring(</highlight><highlight class="stringliteral">&quot;Warn&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_LOG_LEVEL_INFO:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_cstring(</highlight><highlight class="stringliteral">&quot;Info&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_LOG_LEVEL_DEBUG:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_cstring(</highlight><highlight class="stringliteral">&quot;Debug&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_LOG_LEVEL_ALL:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_cstring(</highlight><highlight class="stringliteral">&quot;All&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_logging_init(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Globals)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_logging_init.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_config_register(</highlight><highlight class="stringliteral">&quot;LOG&gt;=ERROR&quot;</highlight><highlight class="normal">,<sp/>ml_config_log_error);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_config_register(</highlight><highlight class="stringliteral">&quot;LOG&gt;=WARN&quot;</highlight><highlight class="normal">,<sp/>ml_config_log_warn);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_config_register(</highlight><highlight class="stringliteral">&quot;LOG&gt;=INFO&quot;</highlight><highlight class="normal">,<sp/>ml_config_log_info);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_config_register(</highlight><highlight class="stringliteral">&quot;LOG&gt;=DEBUG&quot;</highlight><highlight class="normal">,<sp/>ml_config_log_debug);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLLoggerT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;level&quot;</highlight><highlight class="normal">,<sp/>MLLoggerLevel);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Globals)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;logger&quot;</highlight><highlight class="normal">,<sp/>MLLoggerT);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ml_logging.c"/>
  </compounddef>
</doxygen>
