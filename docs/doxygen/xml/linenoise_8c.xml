<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="linenoise_8c" kind="file" language="C++">
    <compoundname>linenoise.c</compoundname>
    <includes local="no">ctype.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">termios.h</includes>
    <includes local="no">sys/ioctl.h</includes>
    <includes local="no">poll.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">signal.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes refid="linenoise_8h" local="yes">linenoise.h</includes>
    <incdepgraph>
      <node id="1">
        <label>src/linenoise.c</label>
        <link refid="linenoise_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>linenoise.h</label>
        <link refid="linenoise_8h_source"/>
      </node>
      <node id="6">
        <label>assert.h</label>
      </node>
      <node id="2">
        <label>ctype.h</label>
      </node>
      <node id="12">
        <label>errno.h</label>
      </node>
      <node id="9">
        <label>poll.h</label>
      </node>
      <node id="13">
        <label>signal.h</label>
      </node>
      <node id="11">
        <label>stdarg.h</label>
      </node>
      <node id="5">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
      <node id="8">
        <label>sys/ioctl.h</label>
      </node>
      <node id="14">
        <label>sys/types.h</label>
      </node>
      <node id="7">
        <label>termios.h</label>
      </node>
      <node id="10">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structstringbuf" prot="public">stringbuf</innerclass>
    <innerclass refid="structcurrent" prot="public">current</innerclass>
    <innerclass refid="structesc__parser" prot="public">esc_parser</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="linenoise_8c_1a968057b2368c3a8e8b917d1634bd5967" prot="public" static="no">
        <name>UTF8_UTIL_H</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="2" column="9" bodyfile="src/linenoise.c" bodystart="2" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="linenoise_8c_1a40cfcd1332f8b9b9664efcf667b1bab6" prot="public" static="no">
        <name>MAX_UTF8_LEN</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>UTF-8 utility functions</para>
<para>(c) 2010-2019 Steve Bennett <ulink url="mailto:steveb@workware.net.au">steveb@workware.net.au</ulink></para>
<para>See utf8.c for licence details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="19" column="9" bodyfile="src/linenoise.c" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="linenoise_8c_1a5527a901abff4a6ec627bede6bd4ff87" prot="public" static="no">
        <name>utf8_strlen</name>
        <param><defname>S</defname></param>
        <param><defname>B</defname></param>
        <initializer>((B) &lt; 0 ? (int)strlen(S) : (B))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="22" column="9" bodyfile="src/linenoise.c" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="linenoise_8c_1af8a3b9d0aaa7959183d0b14b04359d24" prot="public" static="no">
        <name>utf8_strwidth</name>
        <param><defname>S</defname></param>
        <param><defname>B</defname></param>
        <initializer>utf8_strlen((S), (B))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="23" column="9" bodyfile="src/linenoise.c" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="linenoise_8c_1a6e220f61f15dae8999af352902c47889" prot="public" static="no">
        <name>utf8_tounicode</name>
        <param><defname>S</defname></param>
        <param><defname>CP</defname></param>
        <initializer>(*(CP) = (unsigned char)*(S), 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="24" column="9" bodyfile="src/linenoise.c" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="linenoise_8c_1a8b9f26938d197fd630506367718c8f8d" prot="public" static="no">
        <name>utf8_index</name>
        <param><defname>C</defname></param>
        <param><defname>I</defname></param>
        <initializer>(I)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="25" column="9" bodyfile="src/linenoise.c" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="linenoise_8c_1a5f1b837144a2b5142285c69352281325" prot="public" static="no">
        <name>utf8_charlen</name>
        <param><defname>C</defname></param>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="26" column="9" bodyfile="src/linenoise.c" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="linenoise_8c_1a7bd89a59c70ebe8323fe1d10ca9cca0a" prot="public" static="no">
        <name>utf8_width</name>
        <param><defname>C</defname></param>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="27" column="10" bodyfile="src/linenoise.c" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="linenoise_8c_1a2bc0f928821aa377ccec64616820ccb1" prot="public" static="no">
        <name>STRINGBUF_H</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>UTF-8 utility functions</para>
<para>(c) 2010-2019 Steve Bennett <ulink url="mailto:steveb@workware.net.au">steveb@workware.net.au</ulink></para>
<para>All rights reserved.</para>
<para>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</para>
<para><itemizedlist>
<listitem><para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para>
</listitem><listitem><para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para>
</listitem></itemizedlist>
</para>
<para>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="384" column="9" bodyfile="src/linenoise.c" bodystart="384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="linenoise_8c_1a2be9d3af0a35e0ac8edddb6a2c4ca949" prot="public" static="no">
        <name>SB_INCREMENT</name>
        <initializer>200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>resizable string buffer</para>
<para>(c) 2017-2020 Steve Bennett <ulink url="mailto:steveb@workware.net.au">steveb@workware.net.au</ulink></para>
<para>See utf8.c for licence details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="542" column="9" bodyfile="src/linenoise.c" bodystart="542" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="linenoise_8c_1a1f13363249ddaaac0534b43d7378731d" prot="public" static="no">
        <name>USE_TERMIOS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="819" column="13" bodyfile="src/linenoise.c" bodystart="819" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="linenoise_8c_1a219b06937831d0da94d801ab13987639" prot="public" static="no">
        <name>HAVE_UNISTD_H</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="820" column="9" bodyfile="src/linenoise.c" bodystart="820" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="linenoise_8c_1a366c77abc06b106f49ff210eaf67e11b" prot="public" static="no">
        <name>LINENOISE_DEFAULT_HISTORY_MAX_LEN</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="844" column="9" bodyfile="src/linenoise.c" bodystart="844" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="linenoise_8c_1aa083619c8e1488f8193a592aeb59dd1c" prot="public" static="no">
        <name>ctrl</name>
        <param><defname>C</defname></param>
        <initializer>((C) - &apos;@&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="846" column="9" bodyfile="src/linenoise.c" bodystart="846" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="linenoise_8c_1a1b0f87bc573848cb68105c581fbf2323" prot="public" static="no">
        <name>DRL</name>
        <param><defname>...</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1041" column="10" bodyfile="src/linenoise.c" bodystart="1041" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="linenoise_8c_1a918e6efe67d071bf1199c6a11706d72a" prot="public" static="no">
        <name>DRL_CHAR</name>
        <param><defname>ch</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1042" column="9" bodyfile="src/linenoise.c" bodystart="1042" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="linenoise_8c_1a4b90176c12adcf00939bd14dc93587ff" prot="public" static="no">
        <name>DRL_STR</name>
        <param><defname>str</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1043" column="9" bodyfile="src/linenoise.c" bodystart="1043" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="linenoise_8c_1a217d6c3c0088a81dce63a5f13d67c6f8" prot="public" static="no">
        <name>IGNORE_RC</name>
        <param><defname>EXPR</defname></param>
        <initializer>if (EXPR) {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1131" column="9" bodyfile="src/linenoise.c" bodystart="1131" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="linenoise_8c_1a06fc87d81c62e9abb8790b6e5713c55b" prot="public" static="no" strong="no">
        <type></type>
        <name></name>
        <enumvalue id="linenoise_8c_1a06fc87d81c62e9abb8790b6e5713c55ba07ce95867255145ea770f368652c65c2" prot="public">
          <name>SPECIAL_NONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="linenoise_8c_1a06fc87d81c62e9abb8790b6e5713c55ba4c61e6306a9b959fb5d40f3404cacf8b" prot="public">
          <name>SPECIAL_UP</name>
          <initializer>= -20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="linenoise_8c_1a06fc87d81c62e9abb8790b6e5713c55bab51b913f3806f49e9c94bfaa7100ab3a" prot="public">
          <name>SPECIAL_DOWN</name>
          <initializer>= -21</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="linenoise_8c_1a06fc87d81c62e9abb8790b6e5713c55bae0e48fb855d9dc73039278714706c7a0" prot="public">
          <name>SPECIAL_LEFT</name>
          <initializer>= -22</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="linenoise_8c_1a06fc87d81c62e9abb8790b6e5713c55bafa8bf9fb141d382e81ae40d52a056ec2" prot="public">
          <name>SPECIAL_RIGHT</name>
          <initializer>= -23</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="linenoise_8c_1a06fc87d81c62e9abb8790b6e5713c55bad8393781b748d0dfa26efccfd0073ea1" prot="public">
          <name>SPECIAL_DELETE</name>
          <initializer>= -24</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="linenoise_8c_1a06fc87d81c62e9abb8790b6e5713c55bafbd63b799ddcfcf47e7a78e1ccad83e9" prot="public">
          <name>SPECIAL_HOME</name>
          <initializer>= -25</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="linenoise_8c_1a06fc87d81c62e9abb8790b6e5713c55baf796f62463f5b238bda5e7bd7dade2df" prot="public">
          <name>SPECIAL_END</name>
          <initializer>= -26</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="linenoise_8c_1a06fc87d81c62e9abb8790b6e5713c55ba30b0c40f57ea4915f82ccc25e0f0b2a9" prot="public">
          <name>SPECIAL_INSERT</name>
          <initializer>= -27</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="linenoise_8c_1a06fc87d81c62e9abb8790b6e5713c55bae8cf231e8f227c5ca3a2eb5a9f0aa21e" prot="public">
          <name>SPECIAL_PAGE_UP</name>
          <initializer>= -28</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="linenoise_8c_1a06fc87d81c62e9abb8790b6e5713c55ba6bb36bb6b011107de59f481ade6779a5" prot="public">
          <name>SPECIAL_PAGE_DOWN</name>
          <initializer>= -29</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="linenoise_8c_1a06fc87d81c62e9abb8790b6e5713c55bafa58b1def189446c9e52f8165ea2cad2" prot="public">
          <name>CHAR_ESCAPE</name>
          <initializer>= 27</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="linenoise_8c_1a06fc87d81c62e9abb8790b6e5713c55ba472a609106c5a58fa06796003ca547e1" prot="public">
          <name>CHAR_DELETE</name>
          <initializer>= 127</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="849" column="1" bodyfile="src/linenoise.c" bodystart="849" bodyend="866"/>
      </memberdef>
      <memberdef kind="enum" id="linenoise_8c_1ab9bd3f6f48b0c17124d270488f60b90e" prot="public" static="no" strong="no">
        <type></type>
        <name>ep_state_t</name>
        <enumvalue id="linenoise_8c_1ab9bd3f6f48b0c17124d270488f60b90ea2072c816b826041403a8feae9c61cea1" prot="public">
          <name>EP_START</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="linenoise_8c_1ab9bd3f6f48b0c17124d270488f60b90eab544d86772d455c68ccbb302a9f26d69" prot="public">
          <name>EP_ESC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="linenoise_8c_1ab9bd3f6f48b0c17124d270488f60b90eab6321ef9a6f759e75b65dfed2ac88e98" prot="public">
          <name>EP_DIGITS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="linenoise_8c_1ab9bd3f6f48b0c17124d270488f60b90ea6e2c22a38d107acfe464f9a3304ec2d6" prot="public">
          <name>EP_PROPS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="linenoise_8c_1ab9bd3f6f48b0c17124d270488f60b90ea01cabed893992a8cd86fe9e68f00de40" prot="public">
          <name>EP_END</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="linenoise_8c_1ab9bd3f6f48b0c17124d270488f60b90ea90f76e9343674b399a5363ac029a2ebf" prot="public">
          <name>EP_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="924" column="1" bodyfile="src/linenoise.c" bodystart="924" bodyend="931"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="linenoise_8c_1a672ecc5d530e05194396a0ab99313821" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int history_max_len</definition>
        <argsstring></argsstring>
        <name>history_max_len</name>
        <initializer>= LINENOISE_DEFAULT_HISTORY_MAX_LEN</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="868" column="12" bodyfile="src/linenoise.c" bodystart="868" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="linenoise_8c_1ac4e3ac76ad034d20159490126e4f010d" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int history_len</definition>
        <argsstring></argsstring>
        <name>history_len</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="869" column="12" bodyfile="src/linenoise.c" bodystart="869" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="linenoise_8c_1a5f9f02d4391a83cb01df97fe1ea2b6c5" prot="public" static="yes" mutable="no">
        <type>char **</type>
        <definition>char** history</definition>
        <argsstring></argsstring>
        <name>history</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="870" column="13" bodyfile="src/linenoise.c" bodystart="870" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="linenoise_8c_1a1705dee0e4e822859804bec377506fb5" prot="public" static="yes" mutable="no">
        <type>struct termios</type>
        <definition>struct termios orig_termios</definition>
        <argsstring></argsstring>
        <name>orig_termios</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1052" column="21" bodyfile="src/linenoise.c" bodystart="1052" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="linenoise_8c_1a09a46d3636dc1d18db7ecc0c99f3030a" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int rawmode</definition>
        <argsstring></argsstring>
        <name>rawmode</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1053" column="12" bodyfile="src/linenoise.c" bodystart="1053" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="linenoise_8c_1aa6e7549c682adc3f0f0cd413324458ad" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int atexit_registered</definition>
        <argsstring></argsstring>
        <name>atexit_registered</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1054" column="12" bodyfile="src/linenoise.c" bodystart="1054" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="linenoise_8c_1a41a059b293e1bfa5189376f27832f669" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* unsupported_term[]</definition>
        <argsstring>[]</argsstring>
        <name>unsupported_term</name>
        <initializer>= {&quot;dumb&quot;,&quot;cons25&quot;,&quot;emacs&quot;,NULL}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1056" column="19" bodyfile="src/linenoise.c" bodystart="1056" bodyend="1056"/>
      </memberdef>
      <memberdef kind="variable" id="linenoise_8c_1a647f2b6851795cd63665cf90aa7a6374" prot="public" static="yes" mutable="no">
        <type>linenoiseCompletionCallback *</type>
        <definition>linenoiseCompletionCallback* completionCallback</definition>
        <argsstring></argsstring>
        <name>completionCallback</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1483" column="36" bodyfile="src/linenoise.c" bodystart="1483" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="linenoise_8c_1a7aa84a956416cab1b5b3247211f26986" prot="public" static="yes" mutable="no">
        <type>void *</type>
        <definition>void* completionUserdata</definition>
        <argsstring></argsstring>
        <name>completionUserdata</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1484" column="13" bodyfile="src/linenoise.c" bodystart="1484" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="linenoise_8c_1a7bda9c8d7680de38c398b403f1d3d27b" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int showhints</definition>
        <argsstring></argsstring>
        <name>showhints</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1485" column="12" bodyfile="src/linenoise.c" bodystart="1485" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="linenoise_8c_1aa068c5a1eb827443ec79da7d938f2bac" prot="public" static="yes" mutable="no">
        <type>linenoiseHintsCallback *</type>
        <definition>linenoiseHintsCallback* hintsCallback</definition>
        <argsstring></argsstring>
        <name>hintsCallback</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1486" column="31" bodyfile="src/linenoise.c" bodystart="1486" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="linenoise_8c_1afac1cc7c690a284fa7a37c5b324e6b1c" prot="public" static="yes" mutable="no">
        <type>linenoiseFreeHintsCallback *</type>
        <definition>linenoiseFreeHintsCallback* freeHintsCallback</definition>
        <argsstring></argsstring>
        <name>freeHintsCallback</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1487" column="35" bodyfile="src/linenoise.c" bodystart="1487" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="linenoise_8c_1aca2db2fadf8e2dc579a7e561bb607acd" prot="public" static="yes" mutable="no">
        <type>void *</type>
        <definition>void* hintsUserdata</definition>
        <argsstring></argsstring>
        <name>hintsUserdata</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1488" column="13" bodyfile="src/linenoise.c" bodystart="1488" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="linenoise_8c_1aacd6f69e82c17a81342819fb4fb87c45" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int mlmode</definition>
        <argsstring></argsstring>
        <name>mlmode</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1641" column="12" bodyfile="src/linenoise.c" bodystart="1641" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="linenoise_8c_1a46a97d1a46679476bbcdcf4afb5bf2d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstringbuf" kindref="compound">stringbuf</ref> *</type>
        <definition>stringbuf * sb_alloc</definition>
        <argsstring>(void)</argsstring>
        <name>sb_alloc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocates and returns a new stringbuf with no elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="544" column="11" bodyfile="src/linenoise.c" bodystart="544" bodyend="555" declfile="src/linenoise.c" declline="423" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1ae71d9c5a8225af3785f625841502ce0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sb_free</definition>
        <argsstring>(stringbuf *sb)</argsstring>
        <name>sb_free</name>
        <param>
          <type><ref refid="structstringbuf" kindref="compound">stringbuf</ref> *</type>
          <declname>sb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Frees a stringbuf. It is OK to call this with NULL. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="557" column="6" bodyfile="src/linenoise.c" bodystart="557" bodyend="563" declfile="src/linenoise.c" declline="429" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a011518a4d85e87d925393c58e65c44dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstringbuf" kindref="compound">stringbuf</ref> *</type>
        <definition>stringbuf * sb_copy</definition>
        <argsstring>(stringbuf *sb)</argsstring>
        <name>sb_copy</name>
        <param>
          <type><ref refid="structstringbuf" kindref="compound">stringbuf</ref> *</type>
          <declname>sb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an allocated copy of the stringbuf </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="434" column="11" declfile="src/linenoise.c" declline="434" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a24ec048fdeb997a2e574b82eccc4ce1c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int sb_len</definition>
        <argsstring>(stringbuf *sb)</argsstring>
        <name>sb_len</name>
        <param>
          <type><ref refid="structstringbuf" kindref="compound">stringbuf</ref> *</type>
          <declname>sb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the byte length of the buffer.</para>
<para>Returns 0 for both a NULL buffer and an empty buffer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="441" column="19" bodyfile="src/linenoise.c" bodystart="441" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a45173beb5e5c5e7d1df4da5730e77331" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int sb_chars</definition>
        <argsstring>(stringbuf *sb)</argsstring>
        <name>sb_chars</name>
        <param>
          <type><ref refid="structstringbuf" kindref="compound">stringbuf</ref> *</type>
          <declname>sb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the utf8 character length of the buffer.</para>
<para>Returns 0 for both a NULL buffer and an empty buffer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="450" column="19" bodyfile="src/linenoise.c" bodystart="450" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a42d422cb3f5e64312ffde205b5856c0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sb_append</definition>
        <argsstring>(stringbuf *sb, const char *str)</argsstring>
        <name>sb_append</name>
        <param>
          <type><ref refid="structstringbuf" kindref="compound">stringbuf</ref> *</type>
          <declname>sb</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends a null terminated string to the stringbuf </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="571" column="6" bodyfile="src/linenoise.c" bodystart="571" bodyend="574" declfile="src/linenoise.c" declline="461" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a86885cf96de98b77feda35d2a615fdf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sb_append_len</definition>
        <argsstring>(stringbuf *sb, const char *str, int len)</argsstring>
        <name>sb_append_len</name>
        <param>
          <type><ref refid="structstringbuf" kindref="compound">stringbuf</ref> *</type>
          <declname>sb</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Like <ref refid="linenoise_8c_1a42d422cb3f5e64312ffde205b5856c0f" kindref="member">sb_append()</ref> except does not require a null terminated string. The length of &apos;str&apos; is given as &apos;len&apos;</para>
<para>Note that in utf8 mode, characters will <emphasis>not</emphasis> be counted correctly if a partial utf8 sequence is added with <ref refid="linenoise_8c_1a86885cf96de98b77feda35d2a615fdf7" kindref="member">sb_append_len()</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="576" column="6" bodyfile="src/linenoise.c" bodystart="576" bodyend="589" declfile="src/linenoise.c" declline="470" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a724a3761c4dbd8a239808d1cf8e3aa0c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>char *</type>
        <definition>static char * sb_str</definition>
        <argsstring>(const stringbuf *sb)</argsstring>
        <name>sb_str</name>
        <param>
          <type>const <ref refid="structstringbuf" kindref="compound">stringbuf</ref> *</type>
          <declname>sb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to the null terminated string in the buffer.</para>
<para>Note this pointer only remains valid until the next modification to the string buffer.</para>
<para>The returned pointer can be used to update the buffer in-place as long as care is taken to not overwrite the end of the buffer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="481" column="20" bodyfile="src/linenoise.c" bodystart="481" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1ae9d46c196f3f163774aa18e51c9440bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sb_insert</definition>
        <argsstring>(stringbuf *sb, int index, const char *str)</argsstring>
        <name>sb_insert</name>
        <param>
          <type><ref refid="structstringbuf" kindref="compound">stringbuf</ref> *</type>
          <declname>sb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inserts the given string <emphasis>before</emphasis> (zero-based) byte &apos;index&apos; in the stringbuf. If index is past the end of the buffer, the string is appended, just like <ref refid="linenoise_8c_1a42d422cb3f5e64312ffde205b5856c0f" kindref="member">sb_append()</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="649" column="6" bodyfile="src/linenoise.c" bodystart="649" bodyend="664" declfile="src/linenoise.c" declline="491" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a441f9fc6e2417824c9a88223a9c26d2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sb_delete</definition>
        <argsstring>(stringbuf *sb, int index, int len)</argsstring>
        <name>sb_delete</name>
        <param>
          <type><ref refid="structstringbuf" kindref="compound">stringbuf</ref> *</type>
          <declname>sb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete &apos;len&apos; bytes in the string at the given index.</para>
<para>Any bytes past the end of the buffer are ignored. The buffer remains null terminated.</para>
<para>If len is -1, deletes to the end of the buffer.</para>
<para>Delete the bytes at index &apos;index&apos; for length &apos;len&apos; Has no effect if the index is past the end of the list. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="670" column="6" bodyfile="src/linenoise.c" bodystart="670" bodyend="680" declfile="src/linenoise.c" declline="501" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a8f98b097347c9d6fc63ce8f2cb94065b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sb_clear</definition>
        <argsstring>(stringbuf *sb)</argsstring>
        <name>sb_clear</name>
        <param>
          <type><ref refid="structstringbuf" kindref="compound">stringbuf</ref> *</type>
          <declname>sb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear to an empty buffer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="682" column="6" bodyfile="src/linenoise.c" bodystart="682" bodyend="692" declfile="src/linenoise.c" declline="506" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a4239e765a7933b7df6f244da0abe4d94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * sb_to_string</definition>
        <argsstring>(stringbuf *sb)</argsstring>
        <name>sb_to_string</name>
        <param>
          <type><ref refid="structstringbuf" kindref="compound">stringbuf</ref> *</type>
          <declname>sb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return an allocated copy of buffer and frees &apos;sb&apos;.</para>
<para>If &apos;sb&apos; is empty, returns an allocated copy of &quot;&quot;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="591" column="6" bodyfile="src/linenoise.c" bodystart="591" bodyend="603" declfile="src/linenoise.c" declline="513" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a312bcf4ad634376fd772acdc37ef92ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sb_realloc</definition>
        <argsstring>(stringbuf *sb, int newlen)</argsstring>
        <name>sb_realloc</name>
        <param>
          <type><ref refid="structstringbuf" kindref="compound">stringbuf</ref> *</type>
          <declname>sb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>newlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="565" column="6" bodyfile="src/linenoise.c" bodystart="565" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a6a038b82740f8dc8c373aa31482e326c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sb_insert_space</definition>
        <argsstring>(stringbuf *sb, int pos, int len)</argsstring>
        <name>sb_insert_space</name>
        <param>
          <type><ref refid="structstringbuf" kindref="compound">stringbuf</ref> *</type>
          <declname>sb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="612" column="13" bodyfile="src/linenoise.c" bodystart="612" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1ab50d98dee97576f4144bfffae343a00a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sb_delete_space</definition>
        <argsstring>(stringbuf *sb, int pos, int len)</argsstring>
        <name>sb_delete_space</name>
        <param>
          <type><ref refid="structstringbuf" kindref="compound">stringbuf</ref> *</type>
          <declname>sb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move down all the data from pos + len, effectively deleting the data at position &apos;pos&apos; of length &apos;len&apos; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="632" column="13" bodyfile="src/linenoise.c" bodystart="632" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a9eeeecd08c9642e30580e17d539dab02" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int fd_read</definition>
        <argsstring>(struct current *current)</argsstring>
        <name>fd_read</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads a complete utf-8 character and returns the unicode value, or -1 on error. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1242" column="12" bodyfile="src/linenoise.c" bodystart="1242" bodyend="1268" declfile="src/linenoise.c" declline="901" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a9692163cb1969219ced1023b13f96826" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int getWindowSize</definition>
        <argsstring>(struct current *current)</argsstring>
        <name>getWindowSize</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Updates current-&gt;cols with the current window size (width) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1310" column="12" bodyfile="src/linenoise.c" bodystart="1310" bodyend="1359" declfile="src/linenoise.c" declline="902" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a361c32f0bb505c917c8291069b6a25ef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void cursorDown</definition>
        <argsstring>(struct current *current, int n)</argsstring>
        <name>cursorDown</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1201" column="13" bodyfile="src/linenoise.c" bodystart="1201" bodyend="1206" declfile="src/linenoise.c" declline="903" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1ab37641e1e5cf23f3bdccaf6fb66456e0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void cursorUp</definition>
        <argsstring>(struct current *current, int n)</argsstring>
        <name>cursorUp</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1194" column="13" bodyfile="src/linenoise.c" bodystart="1194" bodyend="1199" declfile="src/linenoise.c" declline="904" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a72f18aea11484aac73458e7e9d8f9fa7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void eraseEol</definition>
        <argsstring>(struct current *current)</argsstring>
        <name>eraseEol</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1179" column="13" bodyfile="src/linenoise.c" bodystart="1179" bodyend="1182" declfile="src/linenoise.c" declline="905" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a6d6c85fd569d8f9b5d641b29f7fffda6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void refreshLine</definition>
        <argsstring>(struct current *current)</argsstring>
        <name>refreshLine</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1956" column="13" bodyfile="src/linenoise.c" bodystart="1956" bodyend="1959" declfile="src/linenoise.c" declline="906" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a7d3c3f8cea8a255acd15fedafbd7b65b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void refreshLineAlt</definition>
        <argsstring>(struct current *current, const char *prompt, const char *buf, int cursor_pos)</argsstring>
        <name>refreshLineAlt</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prompt</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cursor_pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1730" column="13" bodyfile="src/linenoise.c" bodystart="1730" bodyend="1954" declfile="src/linenoise.c" declline="907" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a980da36e714e671e3ba15b73ebb6a379" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void setCursorPos</definition>
        <argsstring>(struct current *current, int x)</argsstring>
        <name>setCursorPos</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1184" column="13" bodyfile="src/linenoise.c" bodystart="1184" bodyend="1192" declfile="src/linenoise.c" declline="908" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a0d3bdca66414673d1ce209ac97b88ed7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void setOutputHighlight</definition>
        <argsstring>(struct current *current, const int *props, int nprops)</argsstring>
        <name>setOutputHighlight</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>props</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nprops</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1170" column="13" bodyfile="src/linenoise.c" bodystart="1170" bodyend="1177" declfile="src/linenoise.c" declline="909" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a2cfabfa85ca7d3d51a580424e752c5a7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void set_current</definition>
        <argsstring>(struct current *current, const char *str)</argsstring>
        <name>set_current</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1961" column="13" bodyfile="src/linenoise.c" bodystart="1961" bodyend="1966" declfile="src/linenoise.c" declline="910" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a3a342f0ed63f170c5855c9b81f79a3f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void linenoiseHistoryFree</definition>
        <argsstring>(void)</argsstring>
        <name>linenoiseHistoryFree</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="912" column="6" bodyfile="src/linenoise.c" bodystart="912" bodyend="922"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a58e14f54d6a6f042c6f902cc14f0a1d1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void initParseEscapeSeq</definition>
        <argsstring>(struct esc_parser *parser, int termchar)</argsstring>
        <name>initParseEscapeSeq</name>
        <param>
          <type>struct <ref refid="structesc__parser" kindref="compound">esc_parser</ref> *</type>
          <declname>parser</declname>
        </param>
        <param>
          <type>int</type>
          <declname>termchar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialise the escape sequence parser at *parser.</para>
<para>If termchar is 0 any alpha char terminates ok. Otherwise only the given char terminates successfully. Run the parser state machine with calls to parseEscapeSequence() for each char. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="949" column="13" bodyfile="src/linenoise.c" bodystart="949" bodyend="956"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a30cf6b6d38dc22d97fd021475f4e0b80" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int parseEscapeSequence</definition>
        <argsstring>(struct esc_parser *parser, int ch)</argsstring>
        <name>parseEscapeSequence</name>
        <param>
          <type>struct <ref refid="structesc__parser" kindref="compound">esc_parser</ref> *</type>
          <declname>parser</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pass character &apos;ch&apos; into the state machine to parse: &apos;ESC&apos; &apos;[&apos; &lt;digits&gt; (&apos;;&apos; &lt;digits&gt;)* &lt;termchar&gt;</para>
<para>The first character must be ESC. Returns the current state. The state machine is done when it returns either EP_END or EP_ERROR.</para>
<para>On EP_END, the &quot;property/attribute&quot; values can be read from parser-&gt;props[] of length parser-&gt;numprops. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="969" column="12" bodyfile="src/linenoise.c" bodystart="969" bodyend="1011"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a75eed6dd55d6b8a45e596c6ddf6091cf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void linenoiseAtExit</definition>
        <argsstring>(void)</argsstring>
        <name>linenoiseAtExit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1120" column="13" bodyfile="src/linenoise.c" bodystart="1120" bodyend="1125" declfile="src/linenoise.c" declline="1051" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a00afdc72f7be40417fea4488f4158fda" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int isUnsupportedTerm</definition>
        <argsstring>(void)</argsstring>
        <name>isUnsupportedTerm</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1058" column="12" bodyfile="src/linenoise.c" bodystart="1058" bodyend="1070"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1ab37e30aa58033a16c16a5931a889ba45" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int enableRawMode</definition>
        <argsstring>(struct current *current)</argsstring>
        <name>enableRawMode</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1072" column="12" bodyfile="src/linenoise.c" bodystart="1072" bodyend="1111"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a20afac5c74d15be08cdf79b66029fd00" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void disableRawMode</definition>
        <argsstring>(struct current *current)</argsstring>
        <name>disableRawMode</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1113" column="13" bodyfile="src/linenoise.c" bodystart="1113" bodyend="1117"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1ad421ca9191f9ed7f921686ef8899cf75" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void outputChars</definition>
        <argsstring>(struct current *current, const char *buf, int len)</argsstring>
        <name>outputChars</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output bytes directly, or accumulate output (if current-&gt;output is set) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1136" column="13" bodyfile="src/linenoise.c" bodystart="1136" bodyend="1147"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a131fe818aab086228f8c64c21e185b8f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void outputFormatted</definition>
        <argsstring>(struct current *current, const char *format,...)</argsstring>
        <name>outputFormatted</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1151" column="13" bodyfile="src/linenoise.c" bodystart="1151" bodyend="1163"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a1b505c478e14531f02ca7218508e39ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void cursorToLeft</definition>
        <argsstring>(struct current *current)</argsstring>
        <name>cursorToLeft</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1165" column="13" bodyfile="src/linenoise.c" bodystart="1165" bodyend="1168"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a8a2931c798c8a6db5193f343c7eb33c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void linenoiseClearScreen</definition>
        <argsstring>(void)</argsstring>
        <name>linenoiseClearScreen</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear the screen. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1208" column="6" bodyfile="src/linenoise.c" bodystart="1208" bodyend="1211"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1aa134f98ddc9a02cb869a8aac5cbf13d7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int fd_read_char</definition>
        <argsstring>(int fd, int timeout)</argsstring>
        <name>fd_read_char</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads a char from &apos;fd&apos;, waiting at most &apos;timeout&apos; milliseconds.</para>
<para>A timeout of -1 means to wait forever.</para>
<para>Returns -1 if no char is received within the time or an error occurs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1220" column="12" bodyfile="src/linenoise.c" bodystart="1220" bodyend="1236"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1af00269ed958fde2ec2a58d861f36738a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int queryCursor</definition>
        <argsstring>(struct current *current, int *cols)</argsstring>
        <name>queryCursor</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stores the current cursor column in &apos;*cols&apos;. Returns 1 if OK, or 0 if failed to determine cursor pos. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1275" column="12" bodyfile="src/linenoise.c" bodystart="1275" bodyend="1305"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1aed2298556b0fe0a48818aa4a12f0a6cd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int check_special</definition>
        <argsstring>(int fd)</argsstring>
        <name>check_special</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If CHAR_ESCAPE was received, reads subsequent chars to determine if this is a known special key.</para>
<para>Returns SPECIAL_NONE if unrecognised, or -1 if EOF.</para>
<para>If no additional char is received within a short time, CHAR_ESCAPE is returned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1370" column="12" bodyfile="src/linenoise.c" bodystart="1370" bodyend="1426"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1aa3cf5d10803f5e9e2d02a8fefebc9398" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void clearOutputHighlight</definition>
        <argsstring>(struct current *current)</argsstring>
        <name>clearOutputHighlight</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1429" column="13" bodyfile="src/linenoise.c" bodystart="1429" bodyend="1433"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1abecd652d392970ebd729d5126862d437" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void outputControlChar</definition>
        <argsstring>(struct current *current, char ch)</argsstring>
        <name>outputControlChar</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1435" column="13" bodyfile="src/linenoise.c" bodystart="1435" bodyend="1442"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a2e684287d4cbd7a4ad40a59ce31c812d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int utf8_getchars</definition>
        <argsstring>(char *buf, int c)</argsstring>
        <name>utf8_getchars</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1445" column="12" bodyfile="src/linenoise.c" bodystart="1445" bodyend="1453"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1adc6b1ec3e1b9179b389fe69b01a3ce18" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int get_char</definition>
        <argsstring>(struct current *current, int pos)</argsstring>
        <name>get_char</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the unicode character at the given offset, or -1 if none. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1460" column="12" bodyfile="src/linenoise.c" bodystart="1460" bodyend="1469"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a3606fc41b109e1e28617f5edcb78b4b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int char_display_width</definition>
        <argsstring>(int ch)</argsstring>
        <name>char_display_width</name>
        <param>
          <type>int</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1471" column="12" bodyfile="src/linenoise.c" bodystart="1471" bodyend="1480"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1af10122b559db3ba795d6cebd031b4c23" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void beep</definition>
        <argsstring>()</argsstring>
        <name>beep</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1490" column="13" bodyfile="src/linenoise.c" bodystart="1490" bodyend="1495"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a7d0904e0496ef4982962262cda9ef4ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void freeCompletions</definition>
        <argsstring>(linenoiseCompletions *lc)</argsstring>
        <name>freeCompletions</name>
        <param>
          <type><ref refid="structlinenoiseCompletions" kindref="compound">linenoiseCompletions</ref> *</type>
          <declname>lc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1497" column="13" bodyfile="src/linenoise.c" bodystart="1497" bodyend="1502"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1ad157fde1f7505c79317b741d4f1b3137" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int completeLine</definition>
        <argsstring>(struct current *current)</argsstring>
        <name>completeLine</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1504" column="12" bodyfile="src/linenoise.c" bodystart="1504" bodyend="1553"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a5ee282c3b20adaf6f8060c8fa8d79e61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>linenoiseCompletionCallback *</type>
        <definition>linenoiseCompletionCallback * linenoiseSetCompletionCallback</definition>
        <argsstring>(linenoiseCompletionCallback *fn, void *userdata)</argsstring>
        <name>linenoiseSetCompletionCallback</name>
        <param>
          <type>linenoiseCompletionCallback *</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>userdata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1558" column="30" bodyfile="src/linenoise.c" bodystart="1558" bodyend="1563"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a7fb77550da1a7373c3bf96e9aca758bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void linenoiseAddCompletion</definition>
        <argsstring>(linenoiseCompletions *lc, const char *str)</argsstring>
        <name>linenoiseAddCompletion</name>
        <param>
          <type><ref refid="structlinenoiseCompletions" kindref="compound">linenoiseCompletions</ref> *</type>
          <declname>lc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1565" column="6" bodyfile="src/linenoise.c" bodystart="1565" bodyend="1568"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1aedbf81d8f8c65f6984b55d7b4b048b02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void linenoiseSetHintsCallback</definition>
        <argsstring>(linenoiseHintsCallback *callback, void *userdata)</argsstring>
        <name>linenoiseSetHintsCallback</name>
        <param>
          <type>linenoiseHintsCallback *</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>userdata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1570" column="6" bodyfile="src/linenoise.c" bodystart="1570" bodyend="1574"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a8d00c12f56b48149e88ed5419b0368c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void linenoiseSetFreeHintsCallback</definition>
        <argsstring>(linenoiseFreeHintsCallback *callback)</argsstring>
        <name>linenoiseSetFreeHintsCallback</name>
        <param>
          <type>linenoiseFreeHintsCallback *</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1576" column="6" bodyfile="src/linenoise.c" bodystart="1576" bodyend="1579"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a59fb4cf88d27b920c51275bac2f80b33" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * reduceSingleBuf</definition>
        <argsstring>(const char *buf, int availcols, int *cursor_pos)</argsstring>
        <name>reduceSingleBuf</name>
        <param>
          <type>const char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>availcols</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>cursor_pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1584" column="19" bodyfile="src/linenoise.c" bodystart="1584" bodyend="1639"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a63a5cb6aff2c705e71389d196878aec4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void linenoiseSetMultiLine</definition>
        <argsstring>(int enableml)</argsstring>
        <name>linenoiseSetMultiLine</name>
        <param>
          <type>int</type>
          <declname>enableml</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable or disable multiline mode (disabled by default) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1643" column="6" bodyfile="src/linenoise.c" bodystart="1643" bodyend="1646"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1ab766059439b4a6b29a92911394e3126c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int refreshShowHints</definition>
        <argsstring>(struct current *current, const char *buf, int availcols, int display)</argsstring>
        <name>refreshShowHints</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>availcols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>display</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1653" column="12" bodyfile="src/linenoise.c" bodystart="1653" bodyend="1695"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1ad329707afa98727f56af3ce8852e4da6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void refreshStart</definition>
        <argsstring>(struct current *current)</argsstring>
        <name>refreshStart</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1698" column="13" bodyfile="src/linenoise.c" bodystart="1698" bodyend="1703"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1ae73ec70e12a3b2d3cdbe1f955b1348ff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void refreshEnd</definition>
        <argsstring>(struct current *current)</argsstring>
        <name>refreshEnd</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1705" column="13" bodyfile="src/linenoise.c" bodystart="1705" bodyend="1711"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a6c2101e8121c18057dbb5879d80c2b97" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void refreshStartChars</definition>
        <argsstring>(struct current *current)</argsstring>
        <name>refreshStartChars</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1713" column="13" bodyfile="src/linenoise.c" bodystart="1713" bodyend="1716"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a8f6956de27500941708ebfd46b162030" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void refreshNewline</definition>
        <argsstring>(struct current *current)</argsstring>
        <name>refreshNewline</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1718" column="13" bodyfile="src/linenoise.c" bodystart="1718" bodyend="1722"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1aa6e8d472a2656e3bceed16ff7113a01f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void refreshEndChars</definition>
        <argsstring>(struct current *current)</argsstring>
        <name>refreshEndChars</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1724" column="13" bodyfile="src/linenoise.c" bodystart="1724" bodyend="1727"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a56bcaea2c245b08abd58b6d9dd65234e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int remove_char</definition>
        <argsstring>(struct current *current, int pos)</argsstring>
        <name>remove_char</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the char at &apos;pos&apos;.</para>
<para>Returns 1 if the line needs to be refreshed, 2 if not and 0 if nothing was removed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="1974" column="12" bodyfile="src/linenoise.c" bodystart="1974" bodyend="2024"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a9ae4e89236e29b6675a307f6e40ffdf4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int insert_char</definition>
        <argsstring>(struct current *current, int pos, int ch)</argsstring>
        <name>insert_char</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert &apos;ch&apos; at position &apos;pos&apos;</para>
<para>Returns 1 if the line needs to be refreshed, 2 if not and 0 if nothing was inserted (no room) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="2032" column="12" bodyfile="src/linenoise.c" bodystart="2032" bodyend="2075"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1adfccbf364340ca474b17af42a39a1868" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void capture_chars</definition>
        <argsstring>(struct current *current, int pos, int nchars)</argsstring>
        <name>capture_chars</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nchars</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Captures up to &apos;n&apos; characters starting at &apos;pos&apos; for the cut buffer.</para>
<para>This replaces any existing characters in the cut buffer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="2082" column="13" bodyfile="src/linenoise.c" bodystart="2082" bodyend="2098"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1aae0320840300513a321b0b5e19bde01a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int remove_chars</definition>
        <argsstring>(struct current *current, int pos, int n)</argsstring>
        <name>remove_chars</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes up to &apos;n&apos; characters at cursor position &apos;pos&apos;.</para>
<para>Returns 0 if no chars were removed or non-zero otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="2105" column="12" bodyfile="src/linenoise.c" bodystart="2105" bodyend="2116"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a43dc8d698e7a95d0fb9e74eba4b0bdd1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int insert_chars</definition>
        <argsstring>(struct current *current, int pos, const char *chars)</argsstring>
        <name>insert_chars</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>chars</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inserts the characters (string) &apos;chars&apos; at the cursor position &apos;pos&apos;.</para>
<para>Returns 0 if no chars were inserted or non-zero otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="2122" column="12" bodyfile="src/linenoise.c" bodystart="2122" bodyend="2137"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1abf90249f8335d78fb9e19bb6979afc4c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int reverseIncrementalSearch</definition>
        <argsstring>(struct current *current)</argsstring>
        <name>reverseIncrementalSearch</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the keycode to process, or 0 if none. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="2142" column="12" bodyfile="src/linenoise.c" bodystart="2142" bodyend="2244"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1aba47773cb8d0a7165a72f1b4e98807ff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int linenoiseEdit</definition>
        <argsstring>(struct current *current)</argsstring>
        <name>linenoiseEdit</name>
        <param>
          <type>struct <ref refid="structcurrent" kindref="compound">current</ref> *</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="2246" column="12" bodyfile="src/linenoise.c" bodystart="2246" bodyend="2467"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1adb2c859bb1b09d109bd6f66605cec8e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int linenoiseColumns</definition>
        <argsstring>(void)</argsstring>
        <name>linenoiseColumns</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="2469" column="5" bodyfile="src/linenoise.c" bodystart="2469" bodyend="2477"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a791399a9df88e65a20f9a09d46514e9f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstringbuf" kindref="compound">stringbuf</ref> *</type>
        <definition>static stringbuf * sb_getline</definition>
        <argsstring>(FILE *fh)</argsstring>
        <name>sb_getline</name>
        <param>
          <type>FILE *</type>
          <declname>fh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads a line from the file handle (without the trailing NL or CRNL) and returns it in a stringbuf. Returns NULL if no characters are read before EOF or error.</para>
<para>Note that the character count will <emphasis>not</emphasis> be correct for lines containing utf8 sequences. Do not rely on the character count. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="2487" column="18" bodyfile="src/linenoise.c" bodystart="2487" bodyend="2512"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a2c28429b3e025fd370160c1489651e3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * linenoise</definition>
        <argsstring>(const char *prompt)</argsstring>
        <name>linenoise</name>
        <param>
          <type>const char *</type>
          <declname>prompt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="2514" column="6" bodyfile="src/linenoise.c" bodystart="2514" bodyend="2546"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a4b0a18243a99cdc327eb7b2c6a2d2ded" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int linenoiseHistoryAddAllocated</definition>
        <argsstring>(char *line)</argsstring>
        <name>linenoiseHistoryAddAllocated</name>
        <param>
          <type>char *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="2549" column="5" bodyfile="src/linenoise.c" bodystart="2549" bodyend="2573"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a21ea9805fd7a20b554aa41d1c3bac9ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int linenoiseHistoryAdd</definition>
        <argsstring>(const char *line)</argsstring>
        <name>linenoiseHistoryAdd</name>
        <param>
          <type>const char *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="2575" column="5" bodyfile="src/linenoise.c" bodystart="2575" bodyend="2577"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a64cffe07b4a3cc4b2de115df1cbe6eac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int linenoiseHistoryGetMaxLen</definition>
        <argsstring>(void)</argsstring>
        <name>linenoiseHistoryGetMaxLen</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="2579" column="5" bodyfile="src/linenoise.c" bodystart="2579" bodyend="2581"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1ac34da7161471aaaf132d3041f95abf40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int linenoiseHistorySetMaxLen</definition>
        <argsstring>(int len)</argsstring>
        <name>linenoiseHistorySetMaxLen</name>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="2583" column="5" bodyfile="src/linenoise.c" bodystart="2583" bodyend="2607"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a971464006a6bdf1cbf0a30a3554179a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int linenoiseHistorySave</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>linenoiseHistorySave</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="2611" column="5" bodyfile="src/linenoise.c" bodystart="2611" bodyend="2639"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a10c078eea5725c7bcabe5676cb019f9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int linenoiseHistoryLoad</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>linenoiseHistoryLoad</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="2647" column="5" bodyfile="src/linenoise.c" bodystart="2647" bodyend="2681"/>
      </memberdef>
      <memberdef kind="function" id="linenoise_8c_1a5ab95d6cbddafd5ebc06c35ddb6fa22f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char **</type>
        <definition>char ** linenoiseHistory</definition>
        <argsstring>(int *len)</argsstring>
        <name>linenoiseHistory</name>
        <param>
          <type>int *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/linenoise.c" line="2687" column="6" bodyfile="src/linenoise.c" bodystart="2687" bodyend="2692"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>resizable string buffer</para>
<para>(c) 2017-2020 Steve Bennett <ulink url="mailto:steveb@workware.net.au">steveb@workware.net.au</ulink></para>
<para>See utf8.c for licence details.</para>
<para>A stringbuf is a resizing, null terminated string buffer.</para>
<para>The buffer is reallocated as necessary.</para>
<para>In general it is <emphasis>not</emphasis> OK to call these functions with a NULL pointer unless stated otherwise.</para>
<para>If USE_UTF8 is defined, supports utf8. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>UTF8_UTIL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UTF8_UTIL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_UTF8_LEN<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>No<sp/>utf-8<sp/>support.<sp/>1<sp/>byte<sp/>=<sp/>1<sp/>char<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>utf8_strlen(S,<sp/>B)<sp/>((B)<sp/>&lt;<sp/>0<sp/>?<sp/>(int)strlen(S)<sp/>:<sp/>(B))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>utf8_strwidth(S,<sp/>B)<sp/>utf8_strlen((S),<sp/>(B))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>utf8_tounicode(S,<sp/>CP)<sp/>(*(CP)<sp/>=<sp/>(unsigned<sp/>char)*(S),<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>utf8_index(C,<sp/>I)<sp/>(I)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>utf8_charlen(C)<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#define<sp/>utf8_width(C)<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_UTF8_LEN<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>utf8_fromunicode(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>uc);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>utf8_charlen(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>utf8_strlen(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytelen);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>utf8_strwidth(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>charlen);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>utf8_index(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>charindex);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>utf8_tounicode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*uc);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>utf8_width(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>UTF8_UTIL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utf8.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>utf8_fromunicode(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>uc)</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uc<sp/>&lt;=<sp/>0x7f)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>uc;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uc<sp/>&lt;=<sp/>0x7ff)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>0xc0<sp/>|<sp/>((uc<sp/>&amp;<sp/>0x7c0)<sp/>&gt;&gt;<sp/>6);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>0x80<sp/>|<sp/>(uc<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uc<sp/>&lt;=<sp/>0xffff)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>0xe0<sp/>|<sp/>((uc<sp/>&amp;<sp/>0xf000)<sp/>&gt;&gt;<sp/>12);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>0x80<sp/>|<sp/>((uc<sp/>&amp;<sp/>0xfc0)<sp/>&gt;&gt;<sp/>6);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>0x80<sp/>|<sp/>(uc<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note:<sp/>We<sp/>silently<sp/>truncate<sp/>to<sp/>21<sp/>bits<sp/>here:<sp/>0x1fffff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>0xf0<sp/>|<sp/>((uc<sp/>&amp;<sp/>0x1c0000)<sp/>&gt;&gt;<sp/>18);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>0x80<sp/>|<sp/>((uc<sp/>&amp;<sp/>0x3f000)<sp/>&gt;&gt;<sp/>12);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>0x80<sp/>|<sp/>((uc<sp/>&amp;<sp/>0xfc0)<sp/>&gt;&gt;<sp/>6);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>0x80<sp/>|<sp/>(uc<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>utf8_charlen(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c)</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>&amp;<sp/>0x80)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>&amp;<sp/>0xe0)<sp/>==<sp/>0xc0)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>&amp;<sp/>0xf0)<sp/>==<sp/>0xe0)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>&amp;<sp/>0xf8)<sp/>==<sp/>0xf0)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Invalid<sp/>sequence<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>utf8_strlen(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytelen)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>charlen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytelen<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytelen<sp/>=<sp/>strlen(str);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bytelen<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>utf8_tounicode(str,<sp/>&amp;c);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>charlen++;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>+=<sp/>l;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytelen<sp/>-=<sp/>l;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>charlen;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>utf8_strwidth(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>charlen)</highlight></codeline>
<codeline lineno="208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(charlen)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>utf8_tounicode(str,<sp/>&amp;c);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>+=<sp/>utf8_width(c);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>+=<sp/>l;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>charlen--;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>width;</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>utf8_index(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(index--)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>utf8_tounicode(s,<sp/>&amp;c);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s<sp/>-<sp/>str;</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>utf8_tounicode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*uc)</highlight></codeline>
<codeline lineno="231"><highlight class="normal">{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)str;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[0]<sp/>&lt;<sp/>0xc0)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*uc<sp/>=<sp/>s[0];</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[0]<sp/>&lt;<sp/>0xe0)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s[1]<sp/>&amp;<sp/>0xc0)<sp/>==<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*uc<sp/>=<sp/>((s[0]<sp/>&amp;<sp/>~0xc0)<sp/>&lt;&lt;<sp/>6)<sp/>|<sp/>(s[1]<sp/>&amp;<sp/>~0x80);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*uc<sp/>&gt;=<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Otherwise<sp/>this<sp/>is<sp/>an<sp/>invalid<sp/>sequence<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[0]<sp/>&lt;<sp/>0xf0)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((str[1]<sp/>&amp;<sp/>0xc0)<sp/>==<sp/>0x80)<sp/>&amp;&amp;<sp/>((str[2]<sp/>&amp;<sp/>0xc0)<sp/>==<sp/>0x80))<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*uc<sp/>=<sp/>((s[0]<sp/>&amp;<sp/>~0xe0)<sp/>&lt;&lt;<sp/>12)<sp/>|<sp/>((s[1]<sp/>&amp;<sp/>~0x80)<sp/>&lt;&lt;<sp/>6)<sp/>|<sp/>(s[2]<sp/>&amp;<sp/>~0x80);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*uc<sp/>&gt;=<sp/>0x800)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Otherwise<sp/>this<sp/>is<sp/>an<sp/>invalid<sp/>sequence<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[0]<sp/>&lt;<sp/>0xf8)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((str[1]<sp/>&amp;<sp/>0xc0)<sp/>==<sp/>0x80)<sp/>&amp;&amp;<sp/>((str[2]<sp/>&amp;<sp/>0xc0)<sp/>==<sp/>0x80)<sp/>&amp;&amp;<sp/>((str[3]<sp/>&amp;<sp/>0xc0)<sp/>==<sp/>0x80))<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*uc<sp/>=<sp/>((s[0]<sp/>&amp;<sp/>~0xf0)<sp/>&lt;&lt;<sp/>18)<sp/>|<sp/>((s[1]<sp/>&amp;<sp/>~0x80)<sp/>&lt;&lt;<sp/>12)<sp/>|<sp/>((s[2]<sp/>&amp;<sp/>~0x80)<sp/>&lt;&lt;<sp/>6)<sp/>|<sp/>(s[3]<sp/>&amp;<sp/>~0x80);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*uc<sp/>&gt;=<sp/>0x10000)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Otherwise<sp/>this<sp/>is<sp/>an<sp/>invalid<sp/>sequence<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Invalid<sp/>sequence,<sp/>so<sp/>just<sp/>return<sp/>the<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>*uc<sp/>=<sp/>*s;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">utf8range<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lower;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>lower<sp/>inclusive<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>upper;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>upper<sp/>exclusive<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">};</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>From<sp/>http://unicode.org/Public/UNIDATA/UnicodeData.txt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">utf8range<sp/>unicode_range_combining[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x0300,<sp/>0x0370<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0483,<sp/>0x048a<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0591,<sp/>0x05d0<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0610,<sp/>0x061b<sp/>},</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x064b,<sp/>0x0660<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0670,<sp/>0x0671<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x06d6,<sp/>0x06dd<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x06df,<sp/>0x06e5<sp/>},</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x06e7,<sp/>0x06ee<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0711,<sp/>0x0712<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0730,<sp/>0x074d<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x07a6,<sp/>0x07b1<sp/>},</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x07eb,<sp/>0x07f4<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0816,<sp/>0x0830<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0859,<sp/>0x085e<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x08d4,<sp/>0x0904<sp/>},</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x093a,<sp/>0x0958<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0962,<sp/>0x0964<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0981,<sp/>0x0985<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x09bc,<sp/>0x09ce<sp/>},</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x09d7,<sp/>0x09dc<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x09e2,<sp/>0x09e6<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0a01,<sp/>0x0a05<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0a3c,<sp/>0x0a59<sp/>},</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x0a70,<sp/>0x0a72<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0a75,<sp/>0x0a85<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0abc,<sp/>0x0ad0<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0ae2,<sp/>0x0ae6<sp/>},</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x0afa,<sp/>0x0b05<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0b3c,<sp/>0x0b5c<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0b62,<sp/>0x0b66<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0b82,<sp/>0x0b83<sp/>},</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x0bbe,<sp/>0x0bd0<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0bd7,<sp/>0x0be6<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0c00,<sp/>0x0c05<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0c3e,<sp/>0x0c58<sp/>},</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x0c62,<sp/>0x0c66<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0c81,<sp/>0x0c85<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0cbc,<sp/>0x0cde<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0ce2,<sp/>0x0ce6<sp/>},</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x0d00,<sp/>0x0d05<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0d3b,<sp/>0x0d4e<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0d57,<sp/>0x0d58<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0d62,<sp/>0x0d66<sp/>},</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x0d82,<sp/>0x0d85<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0dca,<sp/>0x0de6<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0df2,<sp/>0x0df4<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0e31,<sp/>0x0e32<sp/>},</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x0e34,<sp/>0x0e3f<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0e47,<sp/>0x0e4f<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0eb1,<sp/>0x0eb2<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0eb4,<sp/>0x0ebd<sp/>},</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x0ec8,<sp/>0x0ed0<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0f18,<sp/>0x0f1a<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0f35,<sp/>0x0f3a<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0f3e,<sp/>0x0f40<sp/>},</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x0f71,<sp/>0x0f88<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0f8d,<sp/>0x0fbe<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x0fc6,<sp/>0x0fc7<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x102b,<sp/>0x103f<sp/>},</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x1056,<sp/>0x105a<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x105e,<sp/>0x1065<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x1067,<sp/>0x106e<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x1071,<sp/>0x1075<sp/>},</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x1082,<sp/>0x1090<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x109a,<sp/>0x109e<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x135d,<sp/>0x1360<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x1712,<sp/>0x1720<sp/>},</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x1732,<sp/>0x1735<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x1752,<sp/>0x1760<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x1772,<sp/>0x1780<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x17b4,<sp/>0x17d4<sp/>},</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x17dd,<sp/>0x17e0<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x180b,<sp/>0x180e<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x1885,<sp/>0x1887<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x18a9,<sp/>0x18aa<sp/>},</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x1920,<sp/>0x1940<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x1a17,<sp/>0x1a1e<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x1a55,<sp/>0x1a80<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x1ab0,<sp/>0x1b05<sp/>},</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x1b34,<sp/>0x1b45<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x1b6b,<sp/>0x1b74<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x1b80,<sp/>0x1b83<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x1ba1,<sp/>0x1bae<sp/>},</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x1be6,<sp/>0x1bfc<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x1c24,<sp/>0x1c3b<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x1cd0,<sp/>0x1ce9<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x1ced,<sp/>0x1cee<sp/>},</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x1cf2,<sp/>0x1cf5<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x1cf7,<sp/>0x1d00<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x1dc0,<sp/>0x1e00<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x20d0,<sp/>0x2100<sp/>},</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x2cef,<sp/>0x2cf2<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x2d7f,<sp/>0x2d80<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x2de0,<sp/>0x2e00<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x302a,<sp/>0x3030<sp/>},</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x3099,<sp/>0x309b<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xa66f,<sp/>0xa67e<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xa69e,<sp/>0xa6a0<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xa6f0,<sp/>0xa6f2<sp/>},</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0xa802,<sp/>0xa803<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xa806,<sp/>0xa807<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xa80b,<sp/>0xa80c<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xa823,<sp/>0xa828<sp/>},</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0xa880,<sp/>0xa882<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xa8b4,<sp/>0xa8ce<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xa8e0,<sp/>0xa8f2<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xa926,<sp/>0xa92e<sp/>},</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0xa947,<sp/>0xa95f<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xa980,<sp/>0xa984<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xa9b3,<sp/>0xa9c1<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xa9e5,<sp/>0xa9e6<sp/>},</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0xaa29,<sp/>0xaa40<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xaa43,<sp/>0xaa44<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xaa4c,<sp/>0xaa50<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xaa7b,<sp/>0xaa7e<sp/>},</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0xaab0,<sp/>0xaab5<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xaab7,<sp/>0xaab9<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xaabe,<sp/>0xaac2<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xaaeb,<sp/>0xaaf0<sp/>},</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0xaaf5,<sp/>0xab01<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xabe3,<sp/>0xabf0<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xfb1e,<sp/>0xfb1f<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xfe00,<sp/>0xfe10<sp/>},</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0xfe20,<sp/>0xfe30<sp/>},</highlight></codeline>
<codeline lineno="310"><highlight class="normal">};</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>From<sp/>http://unicode.org/Public/UNIDATA/EastAsianWidth.txt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">utf8range<sp/>unicode_range_wide[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x1100,<sp/>0x115f<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x231a,<sp/>0x231b<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x2329,<sp/>0x232a<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x23e9,<sp/>0x23ec<sp/>},</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x23f0,<sp/>0x23f0<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x23f3,<sp/>0x23f3<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x25fd,<sp/>0x25fe<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x2614,<sp/>0x2615<sp/>},</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x2648,<sp/>0x2653<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x267f,<sp/>0x267f<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x2693,<sp/>0x2693<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x26a1,<sp/>0x26a1<sp/>},</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x26aa,<sp/>0x26ab<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x26bd,<sp/>0x26be<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x26c4,<sp/>0x26c5<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x26ce,<sp/>0x26ce<sp/>},</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x26d4,<sp/>0x26d4<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x26ea,<sp/>0x26ea<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x26f2,<sp/>0x26f3<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x26f5,<sp/>0x26f5<sp/>},</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x26fa,<sp/>0x26fa<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x26fd,<sp/>0x26fd<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x2705,<sp/>0x2705<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x270a,<sp/>0x270b<sp/>},</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x2728,<sp/>0x2728<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x274c,<sp/>0x274c<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x274e,<sp/>0x274e<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x2753,<sp/>0x2755<sp/>},</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x2757,<sp/>0x2757<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x2795,<sp/>0x2797<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x27b0,<sp/>0x27b0<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x27bf,<sp/>0x27bf<sp/>},</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x2b1b,<sp/>0x2b1c<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x2b50,<sp/>0x2b50<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x2b55,<sp/>0x2b55<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x2e80,<sp/>0x2e99<sp/>},</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x2e9b,<sp/>0x2ef3<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x2f00,<sp/>0x2fd5<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x2ff0,<sp/>0x2ffb<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x3001,<sp/>0x303e<sp/>},</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x3041,<sp/>0x3096<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x3099,<sp/>0x30ff<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x3105,<sp/>0x312e<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x3131,<sp/>0x318e<sp/>},</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x3190,<sp/>0x31ba<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x31c0,<sp/>0x31e3<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x31f0,<sp/>0x321e<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x3220,<sp/>0x3247<sp/>},</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x3250,<sp/>0x32fe<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x3300,<sp/>0x4dbf<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x4e00,<sp/>0xa48c<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xa490,<sp/>0xa4c6<sp/>},</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0xa960,<sp/>0xa97c<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xac00,<sp/>0xd7a3<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xf900,<sp/>0xfaff<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xfe10,<sp/>0xfe19<sp/>},</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0xfe30,<sp/>0xfe52<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xfe54,<sp/>0xfe66<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0xfe68,<sp/>0xfe6b<sp/>},<sp/><sp/><sp/><sp/><sp/>{<sp/>0x16fe0,<sp/>0x16fe1<sp/>},</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x17000,<sp/>0x187ec<sp/>},<sp/><sp/><sp/>{<sp/>0x18800,<sp/>0x18af2<sp/>},<sp/><sp/><sp/>{<sp/>0x1b000,<sp/>0x1b11e<sp/>},<sp/><sp/><sp/>{<sp/>0x1b170,<sp/>0x1b2fb<sp/>},</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x1f004,<sp/>0x1f004<sp/>},<sp/><sp/><sp/>{<sp/>0x1f0cf,<sp/>0x1f0cf<sp/>},<sp/><sp/><sp/>{<sp/>0x1f18e,<sp/>0x1f18e<sp/>},<sp/><sp/><sp/>{<sp/>0x1f191,<sp/>0x1f19a<sp/>},</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x1f200,<sp/>0x1f202<sp/>},<sp/><sp/><sp/>{<sp/>0x1f210,<sp/>0x1f23b<sp/>},<sp/><sp/><sp/>{<sp/>0x1f240,<sp/>0x1f248<sp/>},<sp/><sp/><sp/>{<sp/>0x1f250,<sp/>0x1f251<sp/>},</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x1f260,<sp/>0x1f265<sp/>},<sp/><sp/><sp/>{<sp/>0x1f300,<sp/>0x1f320<sp/>},<sp/><sp/><sp/>{<sp/>0x1f32d,<sp/>0x1f335<sp/>},<sp/><sp/><sp/>{<sp/>0x1f337,<sp/>0x1f37c<sp/>},</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x1f37e,<sp/>0x1f393<sp/>},<sp/><sp/><sp/>{<sp/>0x1f3a0,<sp/>0x1f3ca<sp/>},<sp/><sp/><sp/>{<sp/>0x1f3cf,<sp/>0x1f3d3<sp/>},<sp/><sp/><sp/>{<sp/>0x1f3e0,<sp/>0x1f3f0<sp/>},</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x1f3f4,<sp/>0x1f3f4<sp/>},<sp/><sp/><sp/>{<sp/>0x1f3f8,<sp/>0x1f43e<sp/>},<sp/><sp/><sp/>{<sp/>0x1f440,<sp/>0x1f440<sp/>},<sp/><sp/><sp/>{<sp/>0x1f442,<sp/>0x1f4fc<sp/>},</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x1f4ff,<sp/>0x1f53d<sp/>},<sp/><sp/><sp/>{<sp/>0x1f54b,<sp/>0x1f54e<sp/>},<sp/><sp/><sp/>{<sp/>0x1f550,<sp/>0x1f567<sp/>},<sp/><sp/><sp/>{<sp/>0x1f57a,<sp/>0x1f57a<sp/>},</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x1f595,<sp/>0x1f596<sp/>},<sp/><sp/><sp/>{<sp/>0x1f5a4,<sp/>0x1f5a4<sp/>},<sp/><sp/><sp/>{<sp/>0x1f5fb,<sp/>0x1f64f<sp/>},<sp/><sp/><sp/>{<sp/>0x1f680,<sp/>0x1f6c5<sp/>},</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x1f6cc,<sp/>0x1f6cc<sp/>},<sp/><sp/><sp/>{<sp/>0x1f6d0,<sp/>0x1f6d2<sp/>},<sp/><sp/><sp/>{<sp/>0x1f6eb,<sp/>0x1f6ec<sp/>},<sp/><sp/><sp/>{<sp/>0x1f6f4,<sp/>0x1f6f8<sp/>},</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x1f910,<sp/>0x1f93e<sp/>},<sp/><sp/><sp/>{<sp/>0x1f940,<sp/>0x1f94c<sp/>},<sp/><sp/><sp/>{<sp/>0x1f950,<sp/>0x1f96b<sp/>},<sp/><sp/><sp/>{<sp/>0x1f980,<sp/>0x1f997<sp/>},</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x1f9c0,<sp/>0x1f9c0<sp/>},<sp/><sp/><sp/>{<sp/>0x1f9d0,<sp/>0x1f9e6<sp/>},<sp/><sp/><sp/>{<sp/>0x20000,<sp/>0x2fffd<sp/>},<sp/><sp/><sp/>{<sp/>0x30000,<sp/>0x3fffd<sp/>},</highlight></codeline>
<codeline lineno="340"><highlight class="normal">};</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARRAYSIZE(A)<sp/>sizeof(A)<sp/>/<sp/>sizeof(*(A))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp_range(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cm)</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">utf8range<sp/>*range<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">utf8range<sp/>*)cm;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)key;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>&lt;<sp/>range-&gt;lower)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>&gt;=<sp/>range-&gt;upper)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>utf8_in_range(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>utf8range<sp/>*range,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch)</highlight></codeline>
<codeline lineno="358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">utf8range<sp/>*r<sp/>=</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bsearch(&amp;ch,<sp/>range,<sp/>num,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*range),<sp/>cmp_range);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>utf8_width(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch)</highlight></codeline>
<codeline lineno="369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>short<sp/>circuit<sp/>for<sp/>common<sp/>case<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isascii(ch))<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(utf8_in_range(unicode_range_combining,<sp/>ARRAYSIZE(unicode_range_combining),<sp/>ch))<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(utf8_in_range(unicode_range_wide,<sp/>ARRAYSIZE(unicode_range_wide),<sp/>ch))<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STRINGBUF_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STRINGBUF_H</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="411" refid="structstringbuf" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remaining;<sp/><sp/></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chars;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="418"><highlight class="normal">}<sp/><ref refid="structstringbuf" kindref="compound">stringbuf</ref>;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*<ref refid="linenoise_8c_1a46a97d1a46679476bbcdcf4afb5bf2d3" kindref="member">sb_alloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="linenoise_8c_1ae71d9c5a8225af3785f625841502ce0d" kindref="member">sb_free</ref>(<ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*<ref refid="linenoise_8c_1a011518a4d85e87d925393c58e65c44dc" kindref="member">sb_copy</ref>(<ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sb_len(<ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sb-&gt;<ref refid="structstringbuf_1a8e09406f618ff60560f8c5df97d5be87" kindref="member">last</ref>;</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sb_chars(<ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sb-&gt;chars;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sb-&gt;<ref refid="structstringbuf_1a8e09406f618ff60560f8c5df97d5be87" kindref="member">last</ref>;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="linenoise_8c_1a42d422cb3f5e64312ffde205b5856c0f" kindref="member">sb_append</ref>(<ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="linenoise_8c_1a86885cf96de98b77feda35d2a615fdf7" kindref="member">sb_append_len</ref>(<ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sb_str(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb)</highlight></codeline>
<codeline lineno="482"><highlight class="normal">{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sb-&gt;<ref refid="structstringbuf_1a12dbedf2dfa7511d23cf67cf94677094" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="linenoise_8c_1ae9d46c196f3f163774aa18e51c9440bd" kindref="member">sb_insert</ref>(<ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="linenoise_8c_1a441f9fc6e2417824c9a88223a9c26d2f" kindref="member">sb_delete</ref>(<ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="linenoise_8c_1a8f98b097347c9d6fc63ce8f2cb94065b" kindref="member">sb_clear</ref>(<ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="linenoise_8c_1a4239e765a7933b7df6f244da0abe4d94" kindref="member">sb_to_string</ref>(<ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STRINGBUF_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stringbuf.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>UTF8_UTIL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utf8.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SB_INCREMENT<sp/>200</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*<ref refid="linenoise_8c_1a46a97d1a46679476bbcdcf4afb5bf2d3" kindref="member">sb_alloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="545"><highlight class="normal">{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb<sp/>=<sp/>(<ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*sb));</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structstringbuf_1a497e8420704509d654c37aaadb63211b" kindref="member">remaining</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structstringbuf_1a8e09406f618ff60560f8c5df97d5be87" kindref="member">last</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;chars<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structstringbuf_1a12dbedf2dfa7511d23cf67cf94677094" kindref="member">data</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(sb);</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="linenoise_8c_1ae71d9c5a8225af3785f625841502ce0d" kindref="member">sb_free</ref>(<ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb)</highlight></codeline>
<codeline lineno="558"><highlight class="normal">{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(sb-&gt;<ref refid="structstringbuf_1a12dbedf2dfa7511d23cf67cf94677094" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>free(sb);</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sb_realloc(<ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newlen)</highlight></codeline>
<codeline lineno="566"><highlight class="normal">{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structstringbuf_1a12dbedf2dfa7511d23cf67cf94677094" kindref="member">data</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)realloc(sb-&gt;<ref refid="structstringbuf_1a12dbedf2dfa7511d23cf67cf94677094" kindref="member">data</ref>,<sp/>newlen);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structstringbuf_1a497e8420704509d654c37aaadb63211b" kindref="member">remaining</ref><sp/>=<sp/>newlen<sp/>-<sp/>sb-&gt;<ref refid="structstringbuf_1a8e09406f618ff60560f8c5df97d5be87" kindref="member">last</ref>;</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="linenoise_8c_1a42d422cb3f5e64312ffde205b5856c0f" kindref="member">sb_append</ref>(<ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="572"><highlight class="normal">{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="linenoise_8c_1a86885cf96de98b77feda35d2a615fdf7" kindref="member">sb_append_len</ref>(sb,<sp/>str,<sp/>strlen(str));</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="linenoise_8c_1a86885cf96de98b77feda35d2a615fdf7" kindref="member">sb_append_len</ref>(<ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb-&gt;<ref refid="structstringbuf_1a497e8420704509d654c37aaadb63211b" kindref="member">remaining</ref><sp/>&lt;<sp/>len<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_realloc(sb,<sp/>sb-&gt;<ref refid="structstringbuf_1a8e09406f618ff60560f8c5df97d5be87" kindref="member">last</ref><sp/>+<sp/>len<sp/>+<sp/>1<sp/>+<sp/><ref refid="linenoise_8c_1a2be9d3af0a35e0ac8edddb6a2c4ca949" kindref="member">SB_INCREMENT</ref>);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(sb-&gt;<ref refid="structstringbuf_1a12dbedf2dfa7511d23cf67cf94677094" kindref="member">data</ref><sp/>+<sp/>sb-&gt;<ref refid="structstringbuf_1a8e09406f618ff60560f8c5df97d5be87" kindref="member">last</ref>,<sp/>str,<sp/>len);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structstringbuf_1a12dbedf2dfa7511d23cf67cf94677094" kindref="member">data</ref>[sb-&gt;<ref refid="structstringbuf_1a8e09406f618ff60560f8c5df97d5be87" kindref="member">last</ref><sp/>+<sp/>len]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structstringbuf_1a8e09406f618ff60560f8c5df97d5be87" kindref="member">last</ref><sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structstringbuf_1a497e8420704509d654c37aaadb63211b" kindref="member">remaining</ref><sp/>-=<sp/>len;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;chars<sp/>+=<sp/>utf8_strlen(str,<sp/>len);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="linenoise_8c_1a4239e765a7933b7df6f244da0abe4d94" kindref="member">sb_to_string</ref>(<ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb)</highlight></codeline>
<codeline lineno="592"><highlight class="normal">{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb-&gt;<ref refid="structstringbuf_1a12dbedf2dfa7511d23cf67cf94677094" kindref="member">data</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>an<sp/>allocated<sp/>empty<sp/>string,<sp/>not<sp/>null<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strdup(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Just<sp/>return<sp/>the<sp/>data<sp/>and<sp/>free<sp/>the<sp/>stringbuf<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pt<sp/>=<sp/>sb-&gt;<ref refid="structstringbuf_1a12dbedf2dfa7511d23cf67cf94677094" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(sb);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pt;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Insert<sp/>and<sp/>delete<sp/>operations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Moves<sp/>up<sp/>all<sp/>the<sp/>data<sp/>at<sp/>position<sp/>&apos;pos&apos;<sp/>and<sp/>beyond<sp/>by<sp/>&apos;len&apos;<sp/>bytes</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/>*<sp/>to<sp/>make<sp/>room<sp/>for<sp/>new<sp/>data</highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/>*<sp/>Note:<sp/>Does<sp/>*not*<sp/>update<sp/>sb-&gt;chars</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sb_insert_space(<ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="613"><highlight class="normal">{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(pos<sp/>&lt;=<sp/>sb-&gt;last);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>there<sp/>is<sp/>enough<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb-&gt;<ref refid="structstringbuf_1a497e8420704509d654c37aaadb63211b" kindref="member">remaining</ref><sp/>&lt;<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_realloc(sb,<sp/>sb-&gt;<ref refid="structstringbuf_1a8e09406f618ff60560f8c5df97d5be87" kindref="member">last</ref><sp/>+<sp/>len<sp/>+<sp/><ref refid="linenoise_8c_1a2be9d3af0a35e0ac8edddb6a2c4ca949" kindref="member">SB_INCREMENT</ref>);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>move<sp/>it<sp/>up<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(sb-&gt;<ref refid="structstringbuf_1a12dbedf2dfa7511d23cf67cf94677094" kindref="member">data</ref><sp/>+<sp/>pos<sp/>+<sp/>len,<sp/>sb-&gt;<ref refid="structstringbuf_1a12dbedf2dfa7511d23cf67cf94677094" kindref="member">data</ref><sp/>+<sp/>pos,<sp/>sb-&gt;<ref refid="structstringbuf_1a8e09406f618ff60560f8c5df97d5be87" kindref="member">last</ref><sp/>-<sp/>pos);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structstringbuf_1a8e09406f618ff60560f8c5df97d5be87" kindref="member">last</ref><sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structstringbuf_1a497e8420704509d654c37aaadb63211b" kindref="member">remaining</ref><sp/>-=<sp/>len;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>And<sp/>null<sp/>terminate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structstringbuf_1a12dbedf2dfa7511d23cf67cf94677094" kindref="member">data</ref>[sb-&gt;<ref refid="structstringbuf_1a8e09406f618ff60560f8c5df97d5be87" kindref="member">last</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sb_delete_space(<ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(pos<sp/>&lt;<sp/>sb-&gt;last);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(pos<sp/>+<sp/>len<sp/>&lt;=<sp/>sb-&gt;last);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;chars<sp/>-=<sp/>utf8_strlen(sb-&gt;<ref refid="structstringbuf_1a12dbedf2dfa7511d23cf67cf94677094" kindref="member">data</ref><sp/>+<sp/>pos,<sp/>len);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>move<sp/>it<sp/>up<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(sb-&gt;<ref refid="structstringbuf_1a12dbedf2dfa7511d23cf67cf94677094" kindref="member">data</ref><sp/>+<sp/>pos,<sp/>sb-&gt;<ref refid="structstringbuf_1a12dbedf2dfa7511d23cf67cf94677094" kindref="member">data</ref><sp/>+<sp/>pos<sp/>+<sp/>len,<sp/>sb-&gt;<ref refid="structstringbuf_1a8e09406f618ff60560f8c5df97d5be87" kindref="member">last</ref><sp/>-<sp/>pos<sp/>-<sp/>len);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structstringbuf_1a8e09406f618ff60560f8c5df97d5be87" kindref="member">last</ref><sp/>-=<sp/>len;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structstringbuf_1a497e8420704509d654c37aaadb63211b" kindref="member">remaining</ref><sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>And<sp/>null<sp/>terminate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structstringbuf_1a12dbedf2dfa7511d23cf67cf94677094" kindref="member">data</ref>[sb-&gt;<ref refid="structstringbuf_1a8e09406f618ff60560f8c5df97d5be87" kindref="member">last</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="linenoise_8c_1ae9d46c196f3f163774aa18e51c9440bd" kindref="member">sb_insert</ref>(<ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="650"><highlight class="normal">{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>sb-&gt;<ref refid="structstringbuf_1a8e09406f618ff60560f8c5df97d5be87" kindref="member">last</ref>)<sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Inserting<sp/>after<sp/>the<sp/>end<sp/>of<sp/>the<sp/>list<sp/>appends.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="linenoise_8c_1a42d422cb3f5e64312ffde205b5856c0f" kindref="member">sb_append</ref>(sb,<sp/>str);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>strlen(str);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_insert_space(sb,<sp/>index,<sp/>len);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(sb-&gt;<ref refid="structstringbuf_1a12dbedf2dfa7511d23cf67cf94677094" kindref="member">data</ref><sp/>+<sp/>index,<sp/>str,<sp/>len);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb-&gt;chars<sp/>+=<sp/>utf8_strlen(str,<sp/>len);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="linenoise_8c_1a441f9fc6e2417824c9a88223a9c26d2f" kindref="member">sb_delete</ref>(<ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="671"><highlight class="normal">{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>sb-&gt;last)<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pos<sp/>=<sp/>sb-&gt;<ref refid="structstringbuf_1a12dbedf2dfa7511d23cf67cf94677094" kindref="member">data</ref><sp/>+<sp/>index;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>sb-&gt;<ref refid="structstringbuf_1a8e09406f618ff60560f8c5df97d5be87" kindref="member">last</ref>;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb_delete_space(sb,<sp/>pos<sp/>-<sp/>sb-&gt;<ref refid="structstringbuf_1a12dbedf2dfa7511d23cf67cf94677094" kindref="member">data</ref>,<sp/>len);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="linenoise_8c_1a8f98b097347c9d6fc63ce8f2cb94065b" kindref="member">sb_clear</ref>(<ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb)</highlight></codeline>
<codeline lineno="683"><highlight class="normal">{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb-&gt;<ref refid="structstringbuf_1a12dbedf2dfa7511d23cf67cf94677094" kindref="member">data</ref>)<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Null<sp/>terminate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structstringbuf_1a12dbedf2dfa7511d23cf67cf94677094" kindref="member">data</ref>[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb-&gt;<ref refid="structstringbuf_1a8e09406f618ff60560f8c5df97d5be87" kindref="member">last</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb-&gt;chars<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>linenoise.c<sp/>--<sp/>guerrilla<sp/>line<sp/>editing<sp/>library<sp/>against<sp/>the<sp/>idea<sp/>that<sp/>a</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/>*<sp/>line<sp/>editing<sp/>lib<sp/>needs<sp/>to<sp/>be<sp/>20,000<sp/>lines<sp/>of<sp/>C<sp/>code.</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/>*<sp/>You<sp/>can<sp/>find<sp/>the<sp/>latest<sp/>source<sp/>code<sp/>at:</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/>*<sp/><sp/><sp/>http://github.com/msteveb/linenoise</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(forked<sp/>from<sp/>http://github.com/antirez/linenoise)</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/>*<sp/>Does<sp/>a<sp/>number<sp/>of<sp/>crazy<sp/>assumptions<sp/>that<sp/>happen<sp/>to<sp/>be<sp/>true<sp/>in<sp/>99.9999%<sp/>of</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/>*<sp/>the<sp/>2010<sp/>UNIX<sp/>computers<sp/>around.</highlight></codeline>
<codeline lineno="703"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2010,<sp/>Salvatore<sp/>Sanfilippo<sp/>&lt;antirez<sp/>at<sp/>gmail<sp/>dot<sp/>com&gt;</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2010,<sp/>Pieter<sp/>Noordhuis<sp/>&lt;pcnoordhuis<sp/>at<sp/>gmail<sp/>dot<sp/>com&gt;</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2011,<sp/>Steve<sp/>Bennett<sp/>&lt;steveb<sp/>at<sp/>workware<sp/>dot<sp/>net<sp/>dot<sp/>au&gt;</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight></codeline>
<codeline lineno="714"><highlight class="comment"><sp/>*<sp/>met:</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/>*<sp/><sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/>*<sp/><sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="723"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight></codeline>
<codeline lineno="724"><highlight class="comment"><sp/>*<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="725"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight></codeline>
<codeline lineno="726"><highlight class="comment"><sp/>*<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/>*<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/>*<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/>*<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight></codeline>
<codeline lineno="731"><highlight class="comment"><sp/>*<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="732"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/>*<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/>*<sp/>References:</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/>*<sp/>-<sp/>http://invisible-island.net/xterm/ctlseqs/ctlseqs.html</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/>*<sp/>-<sp/>http://www.3waylabs.com/nw/WWW/products/wizcon/vt220.html</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/>*<sp/>Bloat:</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/>*<sp/>-<sp/>Completion?</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/>*<sp/>Unix/termios</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/>*<sp/>------------</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/>*<sp/>List<sp/>of<sp/>escape<sp/>sequences<sp/>used<sp/>by<sp/>this<sp/>program,<sp/>we<sp/>do<sp/>everything<sp/>just</highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/>*<sp/>a<sp/>few<sp/>sequences.<sp/>In<sp/>order<sp/>to<sp/>be<sp/>so<sp/>cheap<sp/>we<sp/>may<sp/>have<sp/>some</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/>*<sp/>flickering<sp/>effect<sp/>with<sp/>some<sp/>slow<sp/>terminal,<sp/>but<sp/>the<sp/>lesser<sp/>sequences</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/>*<sp/>the<sp/>more<sp/>compatible.</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/>*<sp/>EL<sp/>(Erase<sp/>Line)</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Sequence:<sp/>ESC<sp/>[<sp/>0<sp/>K</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Effect:<sp/>clear<sp/>from<sp/>cursor<sp/>to<sp/>end<sp/>of<sp/>line</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/>*<sp/>CUF<sp/>(CUrsor<sp/>Forward)</highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Sequence:<sp/>ESC<sp/>[<sp/>n<sp/>C</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Effect:<sp/>moves<sp/>cursor<sp/>forward<sp/>n<sp/>chars</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/>*<sp/>CR<sp/>(Carriage<sp/>Return)</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Sequence:<sp/>\r</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Effect:<sp/>moves<sp/>cursor<sp/>to<sp/>column<sp/>1</highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="763"><highlight class="comment"><sp/>*<sp/>The<sp/>following<sp/>are<sp/>used<sp/>to<sp/>clear<sp/>the<sp/>screen:<sp/>ESC<sp/>[<sp/>H<sp/>ESC<sp/>[<sp/>2<sp/>J</highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>actually<sp/>composed<sp/>of<sp/>two<sp/>sequences:</highlight></codeline>
<codeline lineno="765"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/>*<sp/>cursorhome</highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Sequence:<sp/>ESC<sp/>[<sp/>H</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Effect:<sp/>moves<sp/>the<sp/>cursor<sp/>to<sp/>upper<sp/>left<sp/>corner</highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/>*<sp/>ED2<sp/>(Clear<sp/>entire<sp/>screen)</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Sequence:<sp/>ESC<sp/>[<sp/>2<sp/>J</highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Effect:<sp/>clear<sp/>the<sp/>whole<sp/>screen</highlight></codeline>
<codeline lineno="773"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="774"><highlight class="comment"><sp/>*<sp/>==<sp/>For<sp/>highlighting<sp/>control<sp/>characters,<sp/>we<sp/>also<sp/>use<sp/>the<sp/>following<sp/>two<sp/>==</highlight></codeline>
<codeline lineno="775"><highlight class="comment"><sp/>*<sp/>SO<sp/>(enter<sp/>StandOut)</highlight></codeline>
<codeline lineno="776"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Sequence:<sp/>ESC<sp/>[<sp/>7<sp/>m</highlight></codeline>
<codeline lineno="777"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Effect:<sp/>Uses<sp/>some<sp/>standout<sp/>mode<sp/>such<sp/>as<sp/>reverse<sp/>video</highlight></codeline>
<codeline lineno="778"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/>*<sp/>SE<sp/>(Standout<sp/>End)</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Sequence:<sp/>ESC<sp/>[<sp/>0<sp/>m</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Effect:<sp/>Exit<sp/>standout<sp/>mode</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/>*<sp/>==<sp/>Only<sp/>used<sp/>if<sp/>TIOCGWINSZ<sp/>fails<sp/>==</highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/>*<sp/>DSR/CPR<sp/>(Report<sp/>cursor<sp/>position)</highlight></codeline>
<codeline lineno="785"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Sequence:<sp/>ESC<sp/>[<sp/>6<sp/>n</highlight></codeline>
<codeline lineno="786"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Effect:<sp/>reports<sp/>current<sp/>cursor<sp/>position<sp/>as<sp/>ESC<sp/>[<sp/>NNN<sp/>;<sp/>MMM<sp/>R</highlight></codeline>
<codeline lineno="787"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="788"><highlight class="comment"><sp/>*<sp/>==<sp/>Only<sp/>used<sp/>in<sp/>multiline<sp/>mode<sp/>==</highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/>*<sp/>CUU<sp/>(Cursor<sp/>Up)</highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Sequence:<sp/>ESC<sp/>[<sp/>n<sp/>A</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Effect:<sp/>moves<sp/>cursor<sp/>up<sp/>n<sp/>chars.</highlight></codeline>
<codeline lineno="792"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/>*<sp/>CUD<sp/>(Cursor<sp/>Down)</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Sequence:<sp/>ESC<sp/>[<sp/>n<sp/>B</highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Effect:<sp/>moves<sp/>cursor<sp/>down<sp/>n<sp/>chars.</highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="797"><highlight class="comment"><sp/>*<sp/>win32/console</highlight></codeline>
<codeline lineno="798"><highlight class="comment"><sp/>*<sp/>-------------</highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/>*<sp/>If<sp/>__MINGW32__<sp/>is<sp/>defined,<sp/>the<sp/>win32<sp/>console<sp/>API<sp/>is<sp/>used.</highlight></codeline>
<codeline lineno="800"><highlight class="comment"><sp/>*<sp/>This<sp/>could<sp/>probably<sp/>be<sp/>made<sp/>to<sp/>work<sp/>for<sp/>the<sp/>msvc<sp/>compiler<sp/>too.</highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/>*<sp/>This<sp/>support<sp/>based<sp/>in<sp/>part<sp/>on<sp/>work<sp/>by<sp/>Jon<sp/>Griffiths.</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32<sp/></highlight><highlight class="comment">/*<sp/>Windows<sp/>platform,<sp/>either<sp/>MinGW<sp/>or<sp/>Visual<sp/>Studio<sp/>(MSVC)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USE_WINCONSOLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__MINGW32__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HAVE_UNISTD_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Microsoft<sp/>headers<sp/>don&apos;t<sp/>like<sp/>old<sp/>POSIX<sp/>names<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>strdup<sp/>_strdup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>snprintf<sp/>_snprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;termios.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/ioctl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;poll.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USE_TERMIOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HAVE_UNISTD_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_UNISTD_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;linenoise.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STRINGBUF_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stringbuf.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>UTF8_UTIL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utf8.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LINENOISE_DEFAULT_HISTORY_MAX_LEN<sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ctrl(C)<sp/>((C)<sp/>-<sp/>&apos;@&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Use<sp/>-ve<sp/>numbers<sp/>here<sp/>to<sp/>co-exist<sp/>with<sp/>normal<sp/>unicode<sp/>chars<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>SPECIAL_NONE,</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>don&apos;t<sp/>use<sp/>-1<sp/>here<sp/>since<sp/>that<sp/>indicates<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>SPECIAL_UP<sp/>=<sp/>-20,</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>SPECIAL_DOWN<sp/>=<sp/>-21,</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>SPECIAL_LEFT<sp/>=<sp/>-22,</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>SPECIAL_RIGHT<sp/>=<sp/>-23,</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>SPECIAL_DELETE<sp/>=<sp/>-24,</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>SPECIAL_HOME<sp/>=<sp/>-25,</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>SPECIAL_END<sp/>=<sp/>-26,</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>SPECIAL_INSERT<sp/>=<sp/>-27,</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>SPECIAL_PAGE_UP<sp/>=<sp/>-28,</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>SPECIAL_PAGE_DOWN<sp/>=<sp/>-29,</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Some<sp/>handy<sp/>names<sp/>for<sp/>other<sp/>special<sp/>keycodes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>CHAR_ESCAPE<sp/>=<sp/>27,</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>CHAR_DELETE<sp/>=<sp/>127,</highlight></codeline>
<codeline lineno="866"><highlight class="normal">};</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>history_max_len<sp/>=<sp/>LINENOISE_DEFAULT_HISTORY_MAX_LEN;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>history_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**history<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Structure<sp/>to<sp/>contain<sp/>the<sp/>status<sp/>of<sp/>the<sp/>current<sp/>(being<sp/>edited)<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873" refid="structcurrent" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcurrent" kindref="compound">current</ref><sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*buf;<sp/></highlight><highlight class="comment">/*<sp/>Current<sp/>buffer.<sp/>Always<sp/>null<sp/>terminated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cursor<sp/>position,<sp/>measured<sp/>in<sp/>chars<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cols;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Size<sp/>of<sp/>the<sp/>window,<sp/>in<sp/>chars<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nrows;<sp/><sp/></highlight><highlight class="comment">/*<sp/>How<sp/>many<sp/>rows<sp/>are<sp/>being<sp/>used<sp/>in<sp/>multiline<sp/>mode<sp/>(&gt;=<sp/>1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rpos;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>current<sp/>row<sp/>containing<sp/>the<sp/>cursor<sp/>-<sp/>multiline<sp/>mode<sp/>only<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colsright;<sp/></highlight><highlight class="comment">/*<sp/>refreshLine()<sp/>cached<sp/>cols<sp/>for<sp/>insert_char()<sp/>optimisation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colsleft;<sp/><sp/></highlight><highlight class="comment">/*<sp/>refreshLine()<sp/>cached<sp/>cols<sp/>for<sp/>remove_char()<sp/>optimisation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prompt;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*capture;<sp/></highlight><highlight class="comment">/*<sp/>capture<sp/>buffer,<sp/>or<sp/>NULL<sp/>for<sp/>none.<sp/>Always<sp/>null<sp/>terminated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*output;<sp/><sp/></highlight><highlight class="comment">/*<sp/>used<sp/>only<sp/>during<sp/>refreshLine()<sp/>-<sp/>output<sp/>accumulator<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(USE_TERMIOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Terminal<sp/>fd<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(USE_WINCONSOLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE<sp/>outh;<sp/></highlight><highlight class="comment">/*<sp/>Console<sp/>output<sp/>handle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE<sp/>inh;<sp/></highlight><highlight class="comment">/*<sp/>Console<sp/>input<sp/>handle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rows;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Screen<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Current<sp/>column<sp/>during<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Current<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>UBUF_MAX_CHARS<sp/>132</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>WORD<sp/>ubuf[UBUF_MAX_CHARS<sp/>+<sp/>1];<sp/><sp/></highlight><highlight class="comment">/*<sp/>Accumulates<sp/>utf16<sp/>output<sp/>-<sp/>one<sp/>extra<sp/>for<sp/>final<sp/>surrogate<sp/>pairs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ubuflen;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>length<sp/>used<sp/>in<sp/>ubuf<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ubufcols;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>how<sp/>many<sp/>columns<sp/>are<sp/>represented<sp/>by<sp/>the<sp/>chars<sp/>in<sp/>ubuf?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal">};</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd_read(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getWindowSize(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cursorDown(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cursorUp(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>eraseEol(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>refreshLine(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>refreshLineAlt(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prompt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cursor_pos);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setCursorPos(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setOutputHighlight(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*props,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nprops);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_current(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>linenoiseHistoryFree(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(history)<sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>history_len;<sp/>j++)</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(history[j]);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(history);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>history<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>history_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>EP_START,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>looking<sp/>for<sp/>ESC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>EP_ESC,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>looking<sp/>for<sp/>[<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>EP_DIGITS,<sp/><sp/></highlight><highlight class="comment">/*<sp/>parsing<sp/>digits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>EP_PROPS,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>parsing<sp/>digits<sp/>or<sp/>semicolons<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>EP_END,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ok<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>EP_ERROR,<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal">}<sp/>ep_state_t;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933" refid="structesc__parser" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structesc__parser" kindref="compound">esc_parser</ref><sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>ep_state_t<sp/>state;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>props[5];<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>properties<sp/>are<sp/>stored<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxprops;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>size<sp/>of<sp/>the<sp/>props[]<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numprops;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>properties<sp/>found<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>termchar;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>terminator<sp/>char,<sp/>or<sp/>0<sp/>for<sp/>any<sp/>alpha<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>current<sp/>(partial)<sp/>property<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal">};</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initParseEscapeSeq(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structesc__parser" kindref="compound">esc_parser</ref><sp/>*parser,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>termchar)</highlight></codeline>
<codeline lineno="950"><highlight class="normal">{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>parser-&gt;state<sp/>=<sp/>EP_START;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>parser-&gt;maxprops<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(parser-&gt;props)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*parser-&gt;props);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>parser-&gt;numprops<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>parser-&gt;current<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>parser-&gt;termchar<sp/>=<sp/>termchar;</highlight></codeline>
<codeline lineno="956"><highlight class="normal">}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parseEscapeSequence(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structesc__parser" kindref="compound">esc_parser</ref><sp/>*parser,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch)</highlight></codeline>
<codeline lineno="970"><highlight class="normal">{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(parser-&gt;state)<sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EP_START:</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser-&gt;state<sp/>=<sp/>(ch<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;\x1b&apos;</highlight><highlight class="normal">)<sp/>?<sp/>EP_ESC<sp/>:<sp/>EP_ERROR;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EP_ESC:</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser-&gt;state<sp/>=<sp/>(ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">)<sp/>?<sp/>EP_DIGITS<sp/>:<sp/>EP_ERROR;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EP_PROPS:</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser-&gt;state<sp/>=<sp/>EP_DIGITS;</highlight></codeline>
<codeline lineno="981"><highlight class="normal">donedigits:</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parser-&gt;numprops<sp/>+<sp/>1<sp/>&lt;<sp/>parser-&gt;maxprops)<sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser-&gt;props[parser-&gt;numprops++]<sp/>=<sp/>parser-&gt;current;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser-&gt;current<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fall<sp/>through<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EP_DIGITS:</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>ch<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser-&gt;current<sp/>=<sp/>parser-&gt;current<sp/>*<sp/>10<sp/>+<sp/>(ch<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser-&gt;state<sp/>=<sp/>EP_PROPS;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>must<sp/>be<sp/>terminator<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parser-&gt;termchar<sp/>!=<sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parser-&gt;termchar<sp/>!=<sp/>0<sp/>||<sp/>!((ch<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>ch<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(ch<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>ch<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser-&gt;state<sp/>=<sp/>EP_ERROR;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser-&gt;state<sp/>=<sp/>EP_END;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>donedigits;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EP_END:</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser-&gt;state<sp/>=<sp/>EP_ERROR;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EP_ERROR:</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parser-&gt;state;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="comment">/*#define<sp/>DEBUG_REFRESHLINE*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG_REFRESHLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DRL(ARGS...)<sp/>fprintf(dfh,<sp/>ARGS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FILE<sp/>*dfh;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DRL_CHAR(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch)</highlight></codeline>
<codeline lineno="1020"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;^%c&quot;</highlight><highlight class="normal">,<sp/>ch<sp/>+<sp/></highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>&gt;<sp/>127)<sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;\\u%04x&quot;</highlight><highlight class="normal">,<sp/>ch);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/>ch);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DRL_STR(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="1032"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*str)<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>utf8_tounicode(str,<sp/>&amp;ch);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DRL_CHAR(ch);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DRL(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DRL_CHAR(ch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DRL_STR(str)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(USE_WINCONSOLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;linenoise-win32.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(USE_TERMIOS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>linenoiseAtExit(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">termios<sp/>orig_termios;<sp/></highlight><highlight class="comment">/*<sp/>in<sp/>order<sp/>to<sp/>restore<sp/>at<sp/>exit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rawmode<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>for<sp/>atexit()<sp/>function<sp/>to<sp/>check<sp/>if<sp/>restore<sp/>is<sp/>needed*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>atexit_registered<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>register<sp/>atexit<sp/>just<sp/>1<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*unsupported_term[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;dumb&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;cons25&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;emacs&quot;</highlight><highlight class="normal">,NULL};</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isUnsupportedTerm(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*term<sp/>=<sp/>getenv(</highlight><highlight class="stringliteral">&quot;TERM&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(term)<sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>unsupported_term[j];<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(term,<sp/>unsupported_term[j])<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>enableRawMode(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">termios<sp/>raw;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;fd<sp/>=<sp/>STDIN_FILENO;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;cols<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isatty(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;fd)<sp/>||<sp/>isUnsupportedTerm()<sp/>||</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tcgetattr(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;fd,<sp/>&amp;orig_termios)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal">fatal:</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>ENOTTY;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!atexit_registered)<sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atexit(linenoiseAtExit);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atexit_registered<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>raw<sp/>=<sp/>orig_termios;<sp/><sp/></highlight><highlight class="comment">/*<sp/>modify<sp/>the<sp/>original<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>input<sp/>modes:<sp/>no<sp/>break,<sp/>no<sp/>CR<sp/>to<sp/>NL,<sp/>no<sp/>parity<sp/>check,<sp/>no<sp/>strip<sp/>char,</highlight></codeline>
<codeline lineno="1092"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>no<sp/>start/stop<sp/>output<sp/>control.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>raw.c_iflag<sp/>&amp;=<sp/>~(BRKINT<sp/>|<sp/>ICRNL<sp/>|<sp/>INPCK<sp/>|<sp/>ISTRIP<sp/>|<sp/>IXON);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>output<sp/>modes<sp/>-<sp/>actually,<sp/>no<sp/>need<sp/>to<sp/>disable<sp/>post<sp/>processing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*raw.c_oflag<sp/>&amp;=<sp/>~(OPOST);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>control<sp/>modes<sp/>-<sp/>set<sp/>8<sp/>bit<sp/>chars<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>raw.c_cflag<sp/>|=<sp/>(CS8);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>local<sp/>modes<sp/>-<sp/>choing<sp/>off,<sp/>canonical<sp/>off,<sp/>no<sp/>extended<sp/>functions,</highlight></codeline>
<codeline lineno="1099"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>no<sp/>signal<sp/>chars<sp/>(^Z,^C)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>raw.c_lflag<sp/>&amp;=<sp/>~(ECHO<sp/>|<sp/>ICANON<sp/>|<sp/>IEXTEN<sp/>|<sp/>ISIG);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>control<sp/>chars<sp/>-<sp/>set<sp/>return<sp/>condition:<sp/>min<sp/>number<sp/>of<sp/>bytes<sp/>and<sp/>timer.</highlight></codeline>
<codeline lineno="1102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>We<sp/>want<sp/>read<sp/>to<sp/>return<sp/>every<sp/>single<sp/>byte,<sp/>without<sp/>timeout.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>raw.c_cc[VMIN]<sp/>=<sp/>1;<sp/>raw.c_cc[VTIME]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>1<sp/>byte,<sp/>no<sp/>timer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>put<sp/>terminal<sp/>in<sp/>raw<sp/>mode<sp/>after<sp/>flushing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tcsetattr(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;fd,TCSADRAIN,&amp;raw)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fatal;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>rawmode<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>disableRawMode(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Don&apos;t<sp/>even<sp/>check<sp/>the<sp/>return<sp/>value<sp/>as<sp/>it&apos;s<sp/>too<sp/>late.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rawmode<sp/>&amp;&amp;<sp/>tcsetattr(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;fd,TCSADRAIN,&amp;orig_termios)<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rawmode<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>At<sp/>exit<sp/>we&apos;ll<sp/>try<sp/>to<sp/>fix<sp/>the<sp/>terminal<sp/>to<sp/>the<sp/>initial<sp/>conditions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>linenoiseAtExit(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rawmode)<sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tcsetattr(STDIN_FILENO,<sp/>TCSADRAIN,<sp/>&amp;orig_termios);</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/>linenoiseHistoryFree();</highlight></codeline>
<codeline lineno="1125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>gcc/glibc<sp/>insists<sp/>that<sp/>we<sp/>care<sp/>about<sp/>the<sp/>return<sp/>code<sp/>of<sp/>write!</highlight></codeline>
<codeline lineno="1128"><highlight class="comment"><sp/>*<sp/>Clarification:<sp/>This<sp/>means<sp/>that<sp/>a<sp/>void-cast<sp/>like<sp/>&quot;(void)<sp/>(EXPR)&quot;</highlight></codeline>
<codeline lineno="1129"><highlight class="comment"><sp/>*<sp/>does<sp/>not<sp/>work.</highlight></codeline>
<codeline lineno="1130"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IGNORE_RC(EXPR)<sp/>if<sp/>(EXPR)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>outputChars(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="1137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>strlen(buf);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;output)<sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="linenoise_8c_1a86885cf96de98b77feda35d2a615fdf7" kindref="member">sb_append_len</ref>(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;output,<sp/>buf,<sp/>len);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IGNORE_RC(write(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;fd,<sp/>buf,<sp/>len));</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Like<sp/>outputChars,<sp/>but<sp/>using<sp/>printf-style<sp/>formatting</highlight></codeline>
<codeline lineno="1150"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>outputFormatted(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...)</highlight></codeline>
<codeline lineno="1152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[64];</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(args,<sp/>format);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>vsnprintf(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf),<sp/>format,<sp/>args);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>will<sp/>never<sp/>happen<sp/>because<sp/>we<sp/>are<sp/>sure<sp/>to<sp/>use<sp/>outputFormatted()<sp/>only<sp/>for<sp/>short<sp/>sequences<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(n<sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf));</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>outputChars(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>buf,<sp/>n);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cursorToLeft(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>)</highlight></codeline>
<codeline lineno="1166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>outputChars(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\r&quot;</highlight><highlight class="normal">,<sp/>-1);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setOutputHighlight(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*props,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nprops)</highlight></codeline>
<codeline lineno="1171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>outputChars(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\x1b[&quot;</highlight><highlight class="normal">,<sp/>-1);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nprops--)<sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputFormatted(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%d%c&quot;</highlight><highlight class="normal">,<sp/>*props,<sp/>(nprops<sp/>==<sp/>0)<sp/>?<sp/></highlight><highlight class="charliteral">&apos;m&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&apos;;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>props++;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>eraseEol(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>)</highlight></codeline>
<codeline lineno="1180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>outputChars(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\x1b[0K&quot;</highlight><highlight class="normal">,<sp/>-1);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setCursorPos(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="1185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cursorToLeft(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputFormatted(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\r\x1b[%dC&quot;</highlight><highlight class="normal">,<sp/>x);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cursorUp(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n)<sp/>{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputFormatted(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\x1b[%dA&quot;</highlight><highlight class="normal">,<sp/>n);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cursorDown(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n)<sp/>{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputFormatted(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\x1b[%dB&quot;</highlight><highlight class="normal">,<sp/>n);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="linenoise_8c_1a8a2931c798c8a6db5193f343c7eb33c0" kindref="member">linenoiseClearScreen</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>IGNORE_RC(write(STDOUT_FILENO,<sp/></highlight><highlight class="stringliteral">&quot;\x1b[H\x1b[2J&quot;</highlight><highlight class="normal">,<sp/>7));</highlight></codeline>
<codeline lineno="1211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd_read_char(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeout)</highlight></codeline>
<codeline lineno="1221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">pollfd<sp/>p;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>p.fd<sp/>=<sp/>fd;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>p.events<sp/>=<sp/>POLLIN;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(poll(&amp;p,<sp/>1,<sp/>timeout)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>timeout<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read(fd,<sp/>&amp;c,<sp/>1)<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd_read(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>)</highlight></codeline>
<codeline lineno="1243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[<ref refid="linenoise_8c_1a40cfcd1332f8b9b9664efcf667b1bab6" kindref="member">MAX_UTF8_LEN</ref>];</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;fd,<sp/>&amp;buf[0],<sp/>1)<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>utf8_charlen(buf[0]);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;fd,<sp/>&amp;buf[i],<sp/>1)<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>decode<sp/>and<sp/>return<sp/>the<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>utf8_tounicode(buf,<sp/>&amp;c);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fd_read_char(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;fd,<sp/>-1);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>queryCursor(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>cols)</highlight></codeline>
<codeline lineno="1276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structesc__parser" kindref="compound">esc_parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>not<sp/>be<sp/>buffering<sp/>this<sp/>output,<sp/>it<sp/>needs<sp/>to<sp/>go<sp/>immediately<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;output<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>control<sp/>sequence<sp/>-<sp/>report<sp/>cursor<sp/>location<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>outputChars(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\x1b[6n&quot;</highlight><highlight class="normal">,<sp/>-1);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Parse<sp/>the<sp/>response:<sp/>ESC<sp/>[<sp/>rows<sp/>;<sp/>cols<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>initParseEscapeSeq(&amp;parser,<sp/></highlight><highlight class="charliteral">&apos;R&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((ch<sp/>=<sp/>fd_read_char(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;fd,<sp/>100))<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(parseEscapeSequence(&amp;parser,<sp/>ch))<sp/>{</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EP_END:</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parser.numprops<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>parser.props[1]<sp/>&lt;<sp/>1000)<sp/>{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*cols<sp/>=<sp/>parser.props[1];</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EP_ERROR:</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>failed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getWindowSize(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>)</highlight></codeline>
<codeline lineno="1311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">winsize<sp/>ws;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ioctl(STDOUT_FILENO,<sp/>TIOCGWINSZ,<sp/>&amp;ws)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>ws.ws_col<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;cols<sp/>=<sp/>ws.ws_col;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Failed<sp/>to<sp/>query<sp/>the<sp/>window<sp/>size.<sp/>Perhaps<sp/>we<sp/>are<sp/>on<sp/>a<sp/>serial<sp/>terminal.</highlight></codeline>
<codeline lineno="1320"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Try<sp/>to<sp/>query<sp/>the<sp/>width<sp/>by<sp/>sending<sp/>the<sp/>cursor<sp/>as<sp/>far<sp/>to<sp/>the<sp/>right</highlight></codeline>
<codeline lineno="1321"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>reading<sp/>back<sp/>the<sp/>cursor<sp/>position.</highlight></codeline>
<codeline lineno="1322"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>is<sp/>only<sp/>done<sp/>once<sp/>per<sp/>call<sp/>to<sp/>linenoise<sp/>rather<sp/>than</highlight></codeline>
<codeline lineno="1323"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>every<sp/>time<sp/>the<sp/>line<sp/>is<sp/>refreshed<sp/>for<sp/>efficiency<sp/>reasons.</highlight></codeline>
<codeline lineno="1324"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="1325"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>In<sp/>more<sp/>detail,<sp/>we:</highlight></codeline>
<codeline lineno="1326"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(a)<sp/>request<sp/>current<sp/>cursor<sp/>position,</highlight></codeline>
<codeline lineno="1327"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(b)<sp/>move<sp/>cursor<sp/>far<sp/>right,</highlight></codeline>
<codeline lineno="1328"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(c)<sp/>request<sp/>cursor<sp/>position<sp/>again,</highlight></codeline>
<codeline lineno="1329"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(d)<sp/>at<sp/>last<sp/>move<sp/>back<sp/>to<sp/>the<sp/>old<sp/>position.</highlight></codeline>
<codeline lineno="1330"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>gives<sp/>us<sp/>the<sp/>width<sp/>without<sp/>messing<sp/>with<sp/>the<sp/>externally</highlight></codeline>
<codeline lineno="1331"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>visible<sp/>cursor<sp/>position.</highlight></codeline>
<codeline lineno="1332"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;cols<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>here;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>anything<sp/>fails<sp/>=&gt;<sp/>default<sp/>80<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;cols<sp/>=<sp/>80;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(a)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(queryCursor<sp/>(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>&amp;here))<sp/>{</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(b)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setCursorPos(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>999);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(c).<sp/>Note:<sp/>If<sp/>(a)<sp/>succeeded,<sp/>then<sp/>(c)<sp/>should<sp/>as<sp/>well.</highlight></codeline>
<codeline lineno="1346"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>For<sp/>paranoia<sp/>we<sp/>still<sp/>check<sp/>and<sp/>have<sp/>a<sp/>fallback<sp/>action</highlight></codeline>
<codeline lineno="1347"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>for<sp/>(d)<sp/>in<sp/>case<sp/>of<sp/>failure..</highlight></codeline>
<codeline lineno="1348"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(queryCursor<sp/>(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>&amp;<ref refid="structcurrent" kindref="compound">current</ref>-&gt;cols))<sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(d)<sp/>Reset<sp/>the<sp/>cursor<sp/>back<sp/>to<sp/>the<sp/>original<sp/>location.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;cols<sp/>&gt;<sp/>here)<sp/>{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setCursorPos(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>here);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>check_special(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)</highlight></codeline>
<codeline lineno="1371"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>fd_read_char(fd,<sp/>50);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c2;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CHAR_ESCAPE;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/>c2<sp/>=<sp/>fd_read_char(fd,<sp/>50);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c2<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c2;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;O&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Potential<sp/>arrow<sp/>key<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c2)<sp/>{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPECIAL_UP;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPECIAL_DOWN;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;C&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPECIAL_RIGHT;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPECIAL_LEFT;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPECIAL_END;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;H&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPECIAL_HOME;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c2<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c2<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>extended<sp/>escape<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>fd_read_char(fd,<sp/>50);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c2)<sp/>{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPECIAL_INSERT;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPECIAL_DELETE;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPECIAL_PAGE_UP;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPECIAL_PAGE_DOWN;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPECIAL_HOME;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPECIAL_END;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>.e.g<sp/>\e[12~<sp/>or<sp/>&apos;\e[11;2~<sp/><sp/><sp/>discard<sp/>the<sp/>complete<sp/>sequence<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>fd_read_char(fd,<sp/>50);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SPECIAL_NONE;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clearOutputHighlight(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>)</highlight></codeline>
<codeline lineno="1430"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nohighlight<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>setOutputHighlight(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>&amp;nohighlight,<sp/>1);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>outputControlChar(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)</highlight></codeline>
<codeline lineno="1436"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reverse<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>setOutputHighlight(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>&amp;reverse,<sp/>1);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>outputChars(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="stringliteral">&quot;^&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/>outputChars(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>&amp;ch,<sp/>1);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>clearOutputHighlight(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>utf8_getchars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>utf8_getchars(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c)</highlight></codeline>
<codeline lineno="1446"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>utf8_fromunicode(buf,<sp/>c);</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/>*buf<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_char(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="1461"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>pos<sp/>&lt;<sp/>sb_chars(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf))<sp/>{</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>utf8_index(sb_str(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf),<sp/>pos);</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)utf8_tounicode(sb_str(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf)<sp/>+<sp/>i,<sp/>&amp;c);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>char_display_width(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch)</highlight></codeline>
<codeline lineno="1472"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>control<sp/>chars<sp/>take<sp/>two<sp/>positions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>utf8_width(ch);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_COMPLETION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>linenoiseCompletionCallback<sp/>*completionCallback<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*completionUserdata<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>showhints<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>linenoiseHintsCallback<sp/>*hintsCallback<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>linenoiseFreeHintsCallback<sp/>*freeHintsCallback<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*hintsUserdata<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>beep()<sp/>{</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_TERMIOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;\x7&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stderr);</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeCompletions(<ref refid="structlinenoiseCompletions" kindref="compound">linenoiseCompletions</ref><sp/>*lc)<sp/>{</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lc-&gt;len;<sp/>i++)</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(lc-&gt;cvec[i]);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/>free(lc-&gt;cvec);</highlight></codeline>
<codeline lineno="1502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>completeLine(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlinenoiseCompletions" kindref="compound">linenoiseCompletions</ref><sp/>lc<sp/>=<sp/>{<sp/>0,<sp/>NULL<sp/>};</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>completionCallback(sb_str(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf),&amp;lc,completionUserdata);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lc.len<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beep();</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stop<sp/>=<sp/>0,<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!stop)<sp/>{</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Show<sp/>completion<sp/>or<sp/>original<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>lc.len)<sp/>{</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chars<sp/>=<sp/>utf8_strlen(lc.cvec[i],<sp/>-1);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshLineAlt(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;prompt,<sp/>lc.cvec[i],<sp/>chars);</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshLine(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>fd_read(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(c)<sp/>{</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">/*<sp/>tab<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>(i+1)<sp/>%<sp/>(lc.len+1);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>lc.len)<sp/>beep();</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CHAR_ESCAPE:<sp/></highlight><highlight class="comment">/*<sp/>escape<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Re-show<sp/>original<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>lc.len)<sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshLine(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>buffer<sp/>and<sp/>return<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>lc.len)<sp/>{</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_current(<ref refid="structcurrent" kindref="compound">current</ref>,lc.cvec[i]);</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/>freeCompletions(&amp;lc);</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;<sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>last<sp/>read<sp/>character<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Register<sp/>a<sp/>callback<sp/>function<sp/>to<sp/>be<sp/>called<sp/>for<sp/>tab-completion.</highlight></codeline>
<codeline lineno="1556"><highlight class="comment"><sp/><sp/><sp/>Returns<sp/>the<sp/>prior<sp/>callback<sp/>so<sp/>that<sp/>the<sp/>caller<sp/>may<sp/>(if<sp/>needed)</highlight></codeline>
<codeline lineno="1557"><highlight class="comment"><sp/><sp/><sp/>restore<sp/>it<sp/>when<sp/>done.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal">linenoiseCompletionCallback<sp/>*<sp/>linenoiseSetCompletionCallback(linenoiseCompletionCallback<sp/>*fn,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*userdata)<sp/>{</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>linenoiseCompletionCallback<sp/>*<sp/>old<sp/>=<sp/>completionCallback;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/>completionCallback<sp/>=<sp/>fn;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/>completionUserdata<sp/>=<sp/>userdata;</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>old;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>linenoiseAddCompletion(<ref refid="structlinenoiseCompletions" kindref="compound">linenoiseCompletions</ref><sp/>*lc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)<sp/>{</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/>lc-&gt;cvec<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)realloc(lc-&gt;cvec,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)*(lc-&gt;len+1));</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/>lc-&gt;cvec[lc-&gt;len++]<sp/>=<sp/>strdup(str);</highlight></codeline>
<codeline lineno="1568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>linenoiseSetHintsCallback(linenoiseHintsCallback<sp/>*callback,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*userdata)</highlight></codeline>
<codeline lineno="1571"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/>hintsCallback<sp/>=<sp/>callback;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/>hintsUserdata<sp/>=<sp/>userdata;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>linenoiseSetFreeHintsCallback(linenoiseFreeHintsCallback<sp/>*callback)</highlight></codeline>
<codeline lineno="1577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>freeHintsCallback<sp/>=<sp/>callback;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*reduceSingleBuf(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>availcols,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*cursor_pos)</highlight></codeline>
<codeline lineno="1585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>have<sp/>availcols<sp/>columns<sp/>available.</highlight></codeline>
<codeline lineno="1587"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>necessary,<sp/>strip<sp/>chars<sp/>off<sp/>the<sp/>front<sp/>of<sp/>buf<sp/>until<sp/>*cursor_pos</highlight></codeline>
<codeline lineno="1588"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>fits<sp/>within<sp/>availcols</highlight></codeline>
<codeline lineno="1589"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>needcols<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_cursor_pos<sp/>=<sp/>*cursor_pos;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pt<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;reduceSingleBuf:<sp/>availcols=%d,<sp/>cursor_pos=%d\n&quot;</highlight><highlight class="normal">,<sp/>availcols,<sp/>*cursor_pos);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*pt)<sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>utf8_tounicode(pt,<sp/>&amp;ch);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pt<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needcols<sp/>+=<sp/>char_display_width(ch);</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we<sp/>need<sp/>too<sp/>many<sp/>cols,<sp/>strip</highlight></codeline>
<codeline lineno="1605"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>chars<sp/>off<sp/>the<sp/>front<sp/>of<sp/>buf<sp/>to<sp/>make<sp/>it<sp/>fit.</highlight></codeline>
<codeline lineno="1606"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>We<sp/>keep<sp/>3<sp/>extra<sp/>cols<sp/>to<sp/>the<sp/>right<sp/>of<sp/>the<sp/>cursor.</highlight></codeline>
<codeline lineno="1607"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>2<sp/>for<sp/>possible<sp/>wide<sp/>chars,<sp/>1<sp/>for<sp/>the<sp/>last<sp/>column<sp/>that</highlight></codeline>
<codeline lineno="1608"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>can&apos;t<sp/>be<sp/>used.</highlight></codeline>
<codeline lineno="1609"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(needcols<sp/>&gt;=<sp/>availcols<sp/>-<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>utf8_tounicode(buf,<sp/>&amp;ch);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needcols<sp/>-=<sp/>char_display_width(ch);</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DRL_CHAR(ch);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>and<sp/>adjust<sp/>the<sp/>apparent<sp/>cursor<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_cursor_pos--;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf<sp/>==<sp/>pt)<sp/>{</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>can&apos;t<sp/>remove<sp/>more<sp/>than<sp/>this<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos++<sp/>==<sp/>*cursor_pos)<sp/>{</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;&lt;snip&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/>DRL_STR(buf);</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;\nafter<sp/>reduce,<sp/>needcols=%d,<sp/>new_cursor_pos=%d\n&quot;</highlight><highlight class="normal">,<sp/>needcols,<sp/>new_cursor_pos);</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Done,<sp/>now<sp/>new_cursor_pos<sp/>contains<sp/>the<sp/>adjusted<sp/>cursor<sp/>position</highlight></codeline>
<codeline lineno="1635"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>buf<sp/>points<sp/>to<sp/>he<sp/>adjusted<sp/>start</highlight></codeline>
<codeline lineno="1636"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/>*cursor_pos<sp/>=<sp/>new_cursor_pos;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mlmode<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="linenoise_8c_1a63a5cb6aff2c705e71389d196878aec4" kindref="member">linenoiseSetMultiLine</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>enableml)</highlight></codeline>
<codeline lineno="1644"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/>mlmode<sp/>=<sp/>enableml;</highlight></codeline>
<codeline lineno="1646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Helper<sp/>of<sp/>refreshSingleLine()<sp/>and<sp/>refreshMultiLine()<sp/>to<sp/>show<sp/>hints</highlight></codeline>
<codeline lineno="1649"><highlight class="comment"><sp/>*<sp/>to<sp/>the<sp/>right<sp/>of<sp/>the<sp/>prompt.</highlight></codeline>
<codeline lineno="1650"><highlight class="comment"><sp/>*<sp/>Returns<sp/>1<sp/>if<sp/>a<sp/>hint<sp/>was<sp/>shown,<sp/>or<sp/>0<sp/>if<sp/>not</highlight></codeline>
<codeline lineno="1651"><highlight class="comment"><sp/>*<sp/>If<sp/>&apos;display&apos;<sp/>is<sp/>0,<sp/>does<sp/>no<sp/>output.<sp/>Just<sp/>returns<sp/>the<sp/>appropriate<sp/>return<sp/>code.</highlight></codeline>
<codeline lineno="1652"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>refreshShowHints(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>availcols,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>display)</highlight></codeline>
<codeline lineno="1654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(showhints<sp/>&amp;&amp;<sp/>hintsCallback<sp/>&amp;&amp;<sp/>availcols<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bold<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>color<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hint<sp/>=<sp/>hintsCallback(buf,<sp/>&amp;color,<sp/>&amp;bold,<sp/>hintsUserdata);</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hint)<sp/>{</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(display)<sp/>{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pt;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bold<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>color<sp/>==<sp/>-1)<sp/>color<sp/>=<sp/>37;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bold<sp/>||<sp/>color<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>props[3]<sp/>=<sp/>{<sp/>bold,<sp/>color,<sp/>49<sp/>};<sp/></highlight><highlight class="comment">/*<sp/>bold,<sp/>color,<sp/>fgnormal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setOutputHighlight(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>props,<sp/>3);</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;&lt;hint<sp/>bold=%d,color=%d&gt;&quot;</highlight><highlight class="normal">,<sp/>bold,<sp/>color);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pt<sp/>=<sp/>hint;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*pt)<sp/>{</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch;</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>utf8_tounicode(pt,<sp/>&amp;ch);</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>char_display_width(ch);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>&gt;=<sp/>availcols)<sp/>{</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;&lt;hinteol&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DRL_CHAR(ch);</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>availcols<sp/>-=<sp/>width;</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputChars(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>pt,<sp/>n);</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pt<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bold<sp/>||<sp/>color<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clearOutputHighlight(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>the<sp/>function<sp/>to<sp/>free<sp/>the<sp/>hint<sp/>returned.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(freeHintsCallback)<sp/>freeHintsCallback(hint,<sp/>hintsUserdata);</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="1695"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_TERMIOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>refreshStart(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>)</highlight></codeline>
<codeline lineno="1699"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>accumulate<sp/>all<sp/>output<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;output<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;output<sp/>=<sp/><ref refid="linenoise_8c_1a46a97d1a46679476bbcdcf4afb5bf2d3" kindref="member">sb_alloc</ref>();</highlight></codeline>
<codeline lineno="1703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>refreshEnd(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>)</highlight></codeline>
<codeline lineno="1706"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Output<sp/>everything<sp/>at<sp/>once<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/>IGNORE_RC(write(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;fd,<sp/>sb_str(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;output),<sp/>sb_len(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;output)));</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="linenoise_8c_1ae71d9c5a8225af3785f625841502ce0d" kindref="member">sb_free</ref>(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;output);</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;output<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>refreshStartChars(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>)</highlight></codeline>
<codeline lineno="1714"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<ref refid="structcurrent" kindref="compound">current</ref>;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>refreshNewline(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>)</highlight></codeline>
<codeline lineno="1719"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;&lt;nl&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/>outputChars(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>refreshEndChars(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>)</highlight></codeline>
<codeline lineno="1725"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<ref refid="structcurrent" kindref="compound">current</ref>;</highlight></codeline>
<codeline lineno="1727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>refreshLineAlt(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prompt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cursor_pos)</highlight></codeline>
<codeline lineno="1731"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pt;</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>displaycol;</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>displayrow;</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>visible;</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentpos;</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>notecursor;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cursorcol<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cursorrow<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hint;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structesc__parser" kindref="compound">esc_parser</ref><sp/>parser;</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG_REFRESHLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/>dfh<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;linenoise.debuglog&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>intercept<sp/>SIGWINCH.<sp/>For<sp/>now,<sp/>just<sp/>get<sp/>the<sp/>size<sp/>every<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/>getWindowSize(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/>refreshStart(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;wincols=%d,<sp/>cursor_pos=%d,<sp/>nrows=%d,<sp/>rpos=%d\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;cols,<sp/>cursor_pos,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;nrows,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;rpos);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Here<sp/>is<sp/>the<sp/>plan:</highlight></codeline>
<codeline lineno="1756"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(a)<sp/>move<sp/>the<sp/>the<sp/>bottom<sp/>row,<sp/>going<sp/>down<sp/>the<sp/>appropriate<sp/>number<sp/>of<sp/>lines</highlight></codeline>
<codeline lineno="1757"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(b)<sp/>move<sp/>to<sp/>beginning<sp/>of<sp/>line<sp/>and<sp/>erase<sp/>the<sp/>current<sp/>line</highlight></codeline>
<codeline lineno="1758"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(c)<sp/>go<sp/>up<sp/>one<sp/>line<sp/>and<sp/>do<sp/>the<sp/>same,<sp/>until<sp/>we<sp/>have<sp/>erased<sp/>up<sp/>to<sp/>the<sp/>first<sp/>row</highlight></codeline>
<codeline lineno="1759"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(d)<sp/>output<sp/>the<sp/>prompt,<sp/>counting<sp/>cols<sp/>and<sp/>rows,<sp/>taking<sp/>into<sp/>account<sp/>escape<sp/>sequences</highlight></codeline>
<codeline lineno="1760"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(e)<sp/>output<sp/>the<sp/>buffer,<sp/>counting<sp/>cols<sp/>and<sp/>rows</highlight></codeline>
<codeline lineno="1761"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>(e&apos;)<sp/>when<sp/>we<sp/>hit<sp/>the<sp/>current<sp/>pos,<sp/>save<sp/>the<sp/>cursor<sp/>position</highlight></codeline>
<codeline lineno="1762"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(f)<sp/>move<sp/>the<sp/>cursor<sp/>to<sp/>the<sp/>saved<sp/>cursor<sp/>position</highlight></codeline>
<codeline lineno="1763"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(g)<sp/>save<sp/>the<sp/>current<sp/>cursor<sp/>row<sp/>and<sp/>number<sp/>of<sp/>rows</highlight></codeline>
<codeline lineno="1764"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(a)<sp/>-<sp/>The<sp/>cursor<sp/>is<sp/>currently<sp/>at<sp/>row<sp/>rpos<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/>cursorDown(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;nrows<sp/>-<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;rpos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;&lt;cud=%d&gt;&quot;</highlight><highlight class="normal">,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;nrows<sp/>-<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;rpos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(b),<sp/>(c)<sp/>-<sp/>Erase<sp/>lines<sp/>upwards<sp/>until<sp/>we<sp/>get<sp/>to<sp/>the<sp/>first<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;nrows;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i)<sp/>{</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;&lt;cup&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cursorUp(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;&lt;clearline&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cursorToLeft(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eraseEol(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(d)<sp/>First<sp/>output<sp/>the<sp/>prompt.<sp/>control<sp/>sequences<sp/>don&apos;t<sp/>take<sp/>up<sp/>display<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/>pt<sp/>=<sp/>prompt;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/>displaycol<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>current<sp/>display<sp/>column<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/>displayrow<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>current<sp/>display<sp/>row<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/>visible<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/>refreshStartChars(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*pt)<sp/>{</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width;</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch;</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>utf8_tounicode(pt,<sp/>&amp;ch);</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(visible<sp/>&amp;&amp;<sp/>ch<sp/>==<sp/>CHAR_ESCAPE)<sp/>{</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>start<sp/>of<sp/>an<sp/>escape<sp/>sequence,<sp/>so<sp/>not<sp/>visible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visible<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initParseEscapeSeq(&amp;parser,<sp/></highlight><highlight class="charliteral">&apos;m&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;&lt;esc-seq-start&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>||<sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>treat<sp/>both<sp/>CR<sp/>and<sp/>NL<sp/>the<sp/>same<sp/>and<sp/>force<sp/>wrap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshNewline(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>displaycol<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>displayrow++;</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>=<sp/>visible<sp/>*<sp/>utf8_width(ch);</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>displaycol<sp/>+=<sp/>width;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(displaycol<sp/>&gt;=<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;cols)<sp/>{</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>need<sp/>to<sp/>wrap<sp/>to<sp/>the<sp/>next<sp/>line<sp/>because<sp/>of<sp/>newline<sp/>or<sp/>if<sp/>it<sp/>doesn&apos;t<sp/>fit</highlight></codeline>
<codeline lineno="1814"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>XXX<sp/>this<sp/>is<sp/>a<sp/>problem<sp/>in<sp/>single<sp/>line<sp/>mode</highlight></codeline>
<codeline lineno="1815"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshNewline(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>displaycol<sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>displayrow++;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DRL_CHAR(ch);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_WINCONSOLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(visible)<sp/>{</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputChars(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>pt,<sp/>n);</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputChars(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>pt,<sp/>n);</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pt<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!visible)<sp/>{</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(parseEscapeSequence(&amp;parser,<sp/>ch))<sp/>{</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EP_END:</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visible<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setOutputHighlight(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>parser.props,<sp/>parser.numprops);</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;&lt;esc-seq-end,numprops=%d&gt;&quot;</highlight><highlight class="normal">,<sp/>parser.numprops);</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EP_ERROR:</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;&lt;esc-seq-err&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visible<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>we<sp/>are<sp/>at<sp/>the<sp/>first<sp/>line<sp/>with<sp/>all<sp/>lines<sp/>erased<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;\nafter<sp/>prompt:<sp/>displaycol=%d,<sp/>displayrow=%d\n&quot;</highlight><highlight class="normal">,<sp/>displaycol,<sp/>displayrow);</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(e)<sp/>output<sp/>the<sp/>buffer,<sp/>counting<sp/>cols<sp/>and<sp/>rows<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mlmode<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>this<sp/>mode<sp/>we<sp/>may<sp/>need<sp/>to<sp/>trim<sp/>chars<sp/>from<sp/>the<sp/>start<sp/>of<sp/>the<sp/>buffer<sp/>until<sp/>the</highlight></codeline>
<codeline lineno="1854"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>cursor<sp/>fits<sp/>in<sp/>the<sp/>window.</highlight></codeline>
<codeline lineno="1855"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pt<sp/>=<sp/>reduceSingleBuf(buf,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;cols<sp/>-<sp/>displaycol,<sp/>&amp;cursor_pos);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pt<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/>currentpos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/>notecursor<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*pt)<sp/>{</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>utf8_tounicode(pt,<sp/>&amp;ch);</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>char_display_width(ch);</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentpos<sp/>==<sp/>cursor_pos)<sp/>{</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(e&apos;)<sp/>wherever<sp/>we<sp/>output<sp/>this<sp/>character<sp/>is<sp/>where<sp/>we<sp/>want<sp/>the<sp/>cursor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notecursor<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(displaycol<sp/>+<sp/>width<sp/>&gt;=<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;cols)<sp/>{</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mlmode<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>single<sp/>line<sp/>mode<sp/>stop<sp/>once<sp/>we<sp/>print<sp/>as<sp/>much<sp/>as<sp/>we<sp/>can<sp/>on<sp/>one<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;&lt;slmode&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>need<sp/>to<sp/>wrap<sp/>to<sp/>the<sp/>next<sp/>line<sp/>since<sp/>it<sp/>doesn&apos;t<sp/>fit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshNewline(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>displaycol<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>displayrow++;</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(notecursor<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(e&apos;)<sp/>Save<sp/>this<sp/>position<sp/>as<sp/>the<sp/>current<sp/>cursor<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cursorcol<sp/>=<sp/>displaycol;</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cursorrow<sp/>=<sp/>displayrow;</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notecursor<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;&lt;cursor&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>displaycol<sp/>+=<sp/>width;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputControlChar(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>ch<sp/>+<sp/></highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputChars(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>pt,<sp/>n);</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DRL_CHAR(ch);</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;&lt;w=%d&gt;&quot;</highlight><highlight class="normal">,<sp/>width);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pt<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentpos++;</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we<sp/>didn&apos;t<sp/>see<sp/>the<sp/>cursor,<sp/>it<sp/>is<sp/>at<sp/>the<sp/>current<sp/>location<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(notecursor)<sp/>{</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;&lt;cursor&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cursorcol<sp/>=<sp/>displaycol;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cursorrow<sp/>=<sp/>displayrow;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;\nafter<sp/>buf:<sp/>displaycol=%d,<sp/>displayrow=%d,<sp/>cursorcol=%d,<sp/>cursorrow=%d\n&quot;</highlight><highlight class="normal">,<sp/>displaycol,<sp/>displayrow,<sp/>cursorcol,<sp/>cursorrow);</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(f)<sp/>show<sp/>hints<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/>hint<sp/>=<sp/>refreshShowHints(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>buf,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;cols<sp/>-<sp/>displaycol,<sp/>1);</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remember<sp/>how<sp/>many<sp/>many<sp/>cols<sp/>are<sp/>available<sp/>for<sp/>insert<sp/>optimisation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prompt<sp/>==<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;prompt<sp/>&amp;&amp;<sp/>hint<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;colsright<sp/>=<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;cols<sp/>-<sp/>displaycol;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;colsleft<sp/>=<sp/>displaycol;</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Can&apos;t<sp/>optimise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;colsright<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;colsleft<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/>DRL(</highlight><highlight class="stringliteral">&quot;\nafter<sp/>hints:<sp/>colsleft=%d,<sp/>colsright=%d\n\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;colsleft,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;colsright);</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/>refreshEndChars(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(g)<sp/>move<sp/>the<sp/>cursor<sp/>to<sp/>the<sp/>correct<sp/>place<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/>cursorUp(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>displayrow<sp/>-<sp/>cursorrow);</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/>setCursorPos(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>cursorcol);</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(h)<sp/>Update<sp/>the<sp/>number<sp/>of<sp/>rows<sp/>if<sp/>larger,<sp/>but<sp/>never<sp/>reduce<sp/>this<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(displayrow<sp/>&gt;=<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;nrows)<sp/>{</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;nrows<sp/>=<sp/>displayrow<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>And<sp/>remember<sp/>the<sp/>row<sp/>that<sp/>the<sp/>cursor<sp/>is<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;rpos<sp/>=<sp/>cursorrow;</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/>refreshEnd(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG_REFRESHLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(dfh);</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>refreshLine(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>)</highlight></codeline>
<codeline lineno="1957"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>refreshLineAlt(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;prompt,<sp/>sb_str(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf),<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos);</highlight></codeline>
<codeline lineno="1959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_current(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="1962"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="linenoise_8c_1a8f98b097347c9d6fc63ce8f2cb94065b" kindref="member">sb_clear</ref>(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf);</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="linenoise_8c_1a42d422cb3f5e64312ffde205b5856c0f" kindref="member">sb_append</ref>(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf,<sp/>str);</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos<sp/>=<sp/>sb_chars(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf);</highlight></codeline>
<codeline lineno="1966"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remove_char(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="1975"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>pos<sp/>&lt;<sp/>sb_chars(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf))<sp/>{</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>utf8_index(sb_str(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf),<sp/>pos);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbytes<sp/>=<sp/>utf8_index(sb_str(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf)<sp/>+<sp/>offset,<sp/>1);</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>we<sp/>try<sp/>to<sp/>optimise<sp/>in<sp/>the<sp/>simple<sp/>but<sp/>very<sp/>common<sp/>case<sp/>that:</highlight></codeline>
<codeline lineno="1982"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>outputChars()<sp/>can<sp/>be<sp/>used<sp/>directly<sp/>(not<sp/>win32)</highlight></codeline>
<codeline lineno="1983"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>we<sp/>are<sp/>removing<sp/>the<sp/>char<sp/>at<sp/>EOL</highlight></codeline>
<codeline lineno="1984"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>the<sp/>buffer<sp/>is<sp/>not<sp/>empty</highlight></codeline>
<codeline lineno="1985"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>there<sp/>are<sp/>columns<sp/>available<sp/>to<sp/>the<sp/>left</highlight></codeline>
<codeline lineno="1986"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>the<sp/>char<sp/>being<sp/>deleted<sp/>is<sp/>not<sp/>a<sp/>wide<sp/>or<sp/>utf-8<sp/>character</highlight></codeline>
<codeline lineno="1987"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>no<sp/>hints<sp/>are<sp/>being<sp/>shown</highlight></codeline>
<codeline lineno="1988"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;output<sp/>&amp;&amp;<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos<sp/>==<sp/>pos<sp/>+<sp/>1<sp/>&amp;&amp;<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos<sp/>==<sp/>sb_chars(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf)<sp/>&amp;&amp;<sp/>pos<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Could<sp/>implement<sp/>utf8_prev_len()<sp/>but<sp/>simplest<sp/>just<sp/>to<sp/>not<sp/>optimise<sp/>this<sp/>case<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>last<sp/>=<sp/>sb_str(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf)[offset];</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>last<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;colsleft<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(last<sp/>&amp;<sp/>0x80)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Have<sp/>cols<sp/>on<sp/>the<sp/>left<sp/>and<sp/>not<sp/>a<sp/>UTF-8<sp/>char<sp/>or<sp/>continuation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Yes,<sp/>can<sp/>optimise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;colsleft--;</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;colsright++;</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="linenoise_8c_1a441f9fc6e2417824c9a88223a9c26d2f" kindref="member">sb_delete</ref>(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf,<sp/>offset,<sp/>nbytes);</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos<sp/>&gt;<sp/>pos)<sp/>{</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos--;</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(refreshShowHints(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>sb_str(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf),<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;colsright,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>hint<sp/>needs<sp/>to<sp/>be<sp/>shown,<sp/>so<sp/>can&apos;t<sp/>optimise<sp/>after<sp/>all<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>optimised<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputChars(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\b<sp/>\b&quot;</highlight><highlight class="normal">,<sp/>3);</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2024"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>insert_char(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch)</highlight></codeline>
<codeline lineno="2033"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>pos<sp/>&lt;=<sp/>sb_chars(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf))<sp/>{</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[<ref refid="linenoise_8c_1a40cfcd1332f8b9b9664efcf667b1bab6" kindref="member">MAX_UTF8_LEN</ref><sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>utf8_index(sb_str(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf),<sp/>pos);</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>utf8_getchars(buf,<sp/>ch);</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>null<sp/>terminate<sp/>since<sp/>sb_insert()<sp/>requires<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[n]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>we<sp/>try<sp/>to<sp/>optimise<sp/>in<sp/>the<sp/>simple<sp/>but<sp/>very<sp/>common<sp/>case<sp/>that:</highlight></codeline>
<codeline lineno="2044"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>outputChars()<sp/>can<sp/>be<sp/>used<sp/>directly<sp/>(not<sp/>win32)</highlight></codeline>
<codeline lineno="2045"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>we<sp/>are<sp/>inserting<sp/>at<sp/>EOL</highlight></codeline>
<codeline lineno="2046"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>there<sp/>are<sp/>enough<sp/>columns<sp/>available</highlight></codeline>
<codeline lineno="2047"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>no<sp/>hints<sp/>are<sp/>being<sp/>shown</highlight></codeline>
<codeline lineno="2048"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;output<sp/>&amp;&amp;<sp/>pos<sp/>==<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos<sp/>&amp;&amp;<sp/>pos<sp/>==<sp/>sb_chars(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf))<sp/>{</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>char_display_width(ch);</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;colsright<sp/>&gt;<sp/>width)<sp/>{</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Yes,<sp/>can<sp/>optimise<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;colsright<sp/>-=<sp/>width;</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;colsleft<sp/>-=<sp/>width;</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="linenoise_8c_1ae9d46c196f3f163774aa18e51c9440bd" kindref="member">sb_insert</ref>(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf,<sp/>offset,<sp/>buf);</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos<sp/>&gt;=<sp/>pos)<sp/>{</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos++;</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(refreshShowHints(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>sb_str(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf),<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;colsright,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>hint<sp/>needs<sp/>to<sp/>be<sp/>shown,<sp/>so<sp/>can&apos;t<sp/>optimise<sp/>after<sp/>all<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>optimised<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outputChars(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>buf,<sp/>n);</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2075"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>capture_chars(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nchars)</highlight></codeline>
<codeline lineno="2083"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>(pos<sp/>+<sp/>nchars<sp/>-<sp/>1)<sp/>&lt;<sp/>sb_chars(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf))<sp/>{</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>utf8_index(sb_str(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf),<sp/>pos);</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbytes<sp/>=<sp/>utf8_index(sb_str(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf)<sp/>+<sp/>offset,<sp/>nchars);</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbytes<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;capture)<sp/>{</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="linenoise_8c_1a8f98b097347c9d6fc63ce8f2cb94065b" kindref="member">sb_clear</ref>(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;capture);</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;capture<sp/>=<sp/><ref refid="linenoise_8c_1a46a97d1a46679476bbcdcf4afb5bf2d3" kindref="member">sb_alloc</ref>();</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="linenoise_8c_1a86885cf96de98b77feda35d2a615fdf7" kindref="member">sb_append_len</ref>(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;capture,<sp/>sb_str(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf)<sp/>+<sp/>offset,<sp/>nbytes);</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2098"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remove_chars(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="2106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>removed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>First<sp/>save<sp/>any<sp/>chars<sp/>which<sp/>will<sp/>be<sp/>removed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/>capture_chars(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>pos,<sp/>n);</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n--<sp/>&amp;&amp;<sp/>remove_char(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>pos))<sp/>{</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removed++;</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>removed;</highlight></codeline>
<codeline lineno="2116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>insert_chars(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*chars)</highlight></codeline>
<codeline lineno="2123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inserted<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*chars)<sp/>{</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch;</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>utf8_tounicode(chars,<sp/>&amp;ch);</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(insert_char(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>pos,<sp/>ch)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inserted++;</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chars<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inserted;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reverseIncrementalSearch(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>)</highlight></codeline>
<codeline lineno="2143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Display<sp/>the<sp/>reverse-i-search<sp/>prompt<sp/>and<sp/>process<sp/>chars<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>rbuf[50];</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>rprompt[80];</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rchars<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rlen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>searchpos<sp/>=<sp/>history_len<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/>rbuf[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skipsame<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>searchdir<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(rprompt,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rprompt),<sp/></highlight><highlight class="stringliteral">&quot;(reverse-i-search)&apos;%s&apos;:<sp/>&quot;</highlight><highlight class="normal">,<sp/>rbuf);</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshLineAlt(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>rprompt,<sp/>sb_str(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf),<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos);</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>fd_read(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>ctrl(</highlight><highlight class="charliteral">&apos;H&apos;</highlight><highlight class="normal">)<sp/>||<sp/>c<sp/>==<sp/>CHAR_DELETE)<sp/>{</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rchars)<sp/>{</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p_ind<sp/>=<sp/>utf8_index(rbuf,<sp/>--rchars);</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rbuf[p_ind]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>strlen(rbuf);</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_TERMIOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>CHAR_ESCAPE)<sp/>{</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>check_special(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;fd);</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>ctrl(</highlight><highlight class="charliteral">&apos;P&apos;</highlight><highlight class="normal">)<sp/>||<sp/>c<sp/>==<sp/>SPECIAL_UP)<sp/>{</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Search<sp/>for<sp/>the<sp/>previous<sp/>(earlier)<sp/>match<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(searchpos<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>searchpos--;</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skipsame<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>ctrl(</highlight><highlight class="charliteral">&apos;N&apos;</highlight><highlight class="normal">)<sp/>||<sp/>c<sp/>==<sp/>SPECIAL_DOWN)<sp/>{</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Search<sp/>for<sp/>the<sp/>next<sp/>(later)<sp/>match<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(searchpos<sp/>&lt;<sp/>history_len)<sp/>{</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>searchpos++;</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>searchdir<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skipsame<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&gt;=<sp/>here<sp/>to<sp/>allow<sp/>for<sp/>null<sp/>terminator<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rlen<sp/>&gt;=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rbuf)<sp/>-<sp/><ref refid="linenoise_8c_1a40cfcd1332f8b9b9664efcf667b1bab6" kindref="member">MAX_UTF8_LEN</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>utf8_getchars(rbuf<sp/>+<sp/>rlen,<sp/>c);</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rchars++;</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rbuf[rlen]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Adding<sp/>a<sp/>new<sp/>char<sp/>resets<sp/>the<sp/>search<sp/>location<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>searchpos<sp/>=<sp/>history_len<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Exit<sp/>from<sp/>incremental<sp/>search<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>search<sp/>through<sp/>the<sp/>history<sp/>for<sp/>a<sp/>match<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>searchpos<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>searchpos<sp/>&lt;<sp/>history_len;<sp/>searchpos<sp/>+=<sp/>searchdir)<sp/>{</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>strstr(history[searchpos],<sp/>rbuf);</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/>{</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Found<sp/>a<sp/>match<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(skipsame<sp/>&amp;&amp;<sp/>strcmp(history[searchpos],<sp/>sb_str(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf))<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>But<sp/>it<sp/>is<sp/>identical,<sp/>so<sp/>skip<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>the<sp/>matching<sp/>line<sp/>and<sp/>set<sp/>the<sp/>cursor<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_current(<ref refid="structcurrent" kindref="compound">current</ref>,history[searchpos]);</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos<sp/>=<sp/>utf8_strlen(history[searchpos],<sp/>p<sp/>-<sp/>history[searchpos]);</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p<sp/>&amp;&amp;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>No<sp/>match,<sp/>so<sp/>don&apos;t<sp/>add<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rchars--;</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rbuf[rlen]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>ctrl(</highlight><highlight class="charliteral">&apos;G&apos;</highlight><highlight class="normal">)<sp/>||<sp/>c<sp/>==<sp/>ctrl(</highlight><highlight class="charliteral">&apos;C&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ctrl-g<sp/>terminates<sp/>the<sp/>search<sp/>with<sp/>no<sp/>effect<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_current(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>ctrl(</highlight><highlight class="charliteral">&apos;J&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ctrl-j<sp/>terminates<sp/>the<sp/>search<sp/>leaving<sp/>the<sp/>buffer<sp/>in<sp/>place<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"></highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Go<sp/>process<sp/>the<sp/>char<sp/>normally<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/>refreshLine(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="2244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linenoiseEdit(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref><sp/>*<ref refid="structcurrent" kindref="compound">current</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>history_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>latest<sp/>history<sp/>entry<sp/>is<sp/>always<sp/>our<sp/>current<sp/>buffer,<sp/>that</highlight></codeline>
<codeline lineno="2250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>initially<sp/>is<sp/>just<sp/>an<sp/>empty<sp/>string.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/>linenoiseHistoryAdd(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/>set_current(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/>refreshLine(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)<sp/>{</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dir<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>fd_read(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_COMPLETION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>autocomplete<sp/>when<sp/>the<sp/>callback<sp/>is<sp/>set.<sp/>It<sp/>returns<sp/>&lt;<sp/>0<sp/>when</highlight></codeline>
<codeline lineno="2262"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>there<sp/>was<sp/>an<sp/>error<sp/>reading<sp/>from<sp/>fd.<sp/>Otherwise<sp/>it<sp/>will<sp/>return<sp/>the</highlight></codeline>
<codeline lineno="2263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>character<sp/>that<sp/>should<sp/>be<sp/>handled<sp/>next.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos<sp/>==<sp/>sb_chars(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf)<sp/>&amp;&amp;<sp/>completionCallback<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>completeLine(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>ctrl(</highlight><highlight class="charliteral">&apos;R&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>reverse<sp/>incremental<sp/>search<sp/>will<sp/>provide<sp/>an<sp/>alternative<sp/>keycode<sp/>or<sp/>0<sp/>for<sp/>none<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>reverseIncrementalSearch(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>go<sp/>on<sp/>to<sp/>process<sp/>the<sp/>returned<sp/>char<sp/>normally<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_TERMIOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>CHAR_ESCAPE)<sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>escape<sp/>sequence<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>check_special(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;fd);</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>on<sp/>errors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sb_len(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf);</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(c)<sp/>{</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SPECIAL_NONE:</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>enter/CR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>LF<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>history_len--;</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(history[history_len]);</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos<sp/>=<sp/>sb_chars(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf);</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mlmode<sp/>||<sp/>hintsCallback)<sp/>{</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>showhints<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshLine(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>showhints<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sb_len(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf);</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ctrl(</highlight><highlight class="charliteral">&apos;C&apos;</highlight><highlight class="normal">):<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ctrl-c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EAGAIN;</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ctrl(</highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">):<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ctrl-z<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal">#ifdef<sp/>SIGTSTP</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>send<sp/>ourselves<sp/>SIGSUSP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disableRawMode(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raise(SIGTSTP);</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>and<sp/>resume<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enableRawMode(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshLine(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CHAR_DELETE:<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>backspace<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ctrl(</highlight><highlight class="charliteral">&apos;H&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(remove_char(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos<sp/>-<sp/>1)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshLine(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ctrl(</highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">):<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ctrl-d<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(sb_len(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Empty<sp/>line,<sp/>so<sp/>EOF<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>history_len--;</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(history[history_len]);</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Otherwise<sp/>fall<sp/>through<sp/>to<sp/>delete<sp/>char<sp/>to<sp/>right<sp/>of<sp/>cursor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SPECIAL_DELETE:</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remove_char(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshLine(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SPECIAL_INSERT:</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Ignore.<sp/>Expansion<sp/>Hook.</highlight></codeline>
<codeline lineno="2332"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Future<sp/>possibility:<sp/>Toggle<sp/>Insert/Overwrite<sp/>Modes</highlight></codeline>
<codeline lineno="2333"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ctrl(</highlight><highlight class="charliteral">&apos;W&apos;</highlight><highlight class="normal">):<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ctrl-w,<sp/>delete<sp/>word<sp/>at<sp/>left.<sp/>save<sp/>deleted<sp/>chars<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>eat<sp/>any<sp/>spaces<sp/>on<sp/>the<sp/>left<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos;</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>get_char(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>pos<sp/>-<sp/>1)<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos--;</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"></highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>now<sp/>eat<sp/>any<sp/>non-spaces<sp/>on<sp/>the<sp/>left<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>get_char(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>pos<sp/>-<sp/>1)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos--;</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"></highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remove_chars(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>pos,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos<sp/>-<sp/>pos))<sp/>{</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshLine(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ctrl(</highlight><highlight class="charliteral">&apos;T&apos;</highlight><highlight class="normal">):<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ctrl-t<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos<sp/>&lt;=<sp/>sb_chars(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf))<sp/>{</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>cursor<sp/>is<sp/>at<sp/>end,<sp/>transpose<sp/>the<sp/>previous<sp/>two<sp/>chars<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fixer<sp/>=<sp/>(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos<sp/>==<sp/>sb_chars(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf));</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>get_char(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos<sp/>-<sp/>fixer);</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remove_char(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos<sp/>-<sp/>fixer);</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_char(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos<sp/>-<sp/>1,<sp/>c);</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshLine(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ctrl(</highlight><highlight class="charliteral">&apos;V&apos;</highlight><highlight class="normal">):<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ctrl-v<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Insert<sp/>the<sp/>^V<sp/>first<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(insert_char(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos,<sp/>c))<sp/>{</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshLine(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>wait<sp/>for<sp/>the<sp/>next<sp/>char.<sp/>Can<sp/>insert<sp/>anything<sp/>except<sp/>\0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>fd_read(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remove<sp/>the<sp/>^V<sp/>first<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remove_char(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Insert<sp/>the<sp/>actual<sp/>char,<sp/>can&apos;t<sp/>be<sp/>error<sp/>or<sp/>null<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_char(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos,<sp/>c);</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshLine(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ctrl(</highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>SPECIAL_LEFT:</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos--;</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshLine(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ctrl(</highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>SPECIAL_RIGHT:</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos<sp/>&lt;<sp/>sb_chars(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf))<sp/>{</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos++;</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshLine(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SPECIAL_PAGE_UP:</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>history_len<sp/>-<sp/>history_index<sp/>-<sp/>1;<sp/></highlight><highlight class="comment">/*<sp/>move<sp/>to<sp/>start<sp/>of<sp/>history<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>history_navigation;</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SPECIAL_PAGE_DOWN:</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>-history_index;<sp/></highlight><highlight class="comment">/*<sp/>move<sp/>to<sp/>0<sp/>==<sp/>end<sp/>of<sp/>history,<sp/>i.e.<sp/>current<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>history_navigation;</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ctrl(</highlight><highlight class="charliteral">&apos;P&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>SPECIAL_UP:</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>history_navigation;</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ctrl(</highlight><highlight class="charliteral">&apos;N&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>SPECIAL_DOWN:</highlight></codeline>
<codeline lineno="2405"><highlight class="normal">history_navigation:</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(history_len<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>current<sp/>history<sp/>entry<sp/>before<sp/>to</highlight></codeline>
<codeline lineno="2408"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>overwrite<sp/>it<sp/>with<sp/>tne<sp/>next<sp/>one.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(history[history_len<sp/>-<sp/>1<sp/>-<sp/>history_index]);</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>history[history_len<sp/>-<sp/>1<sp/>-<sp/>history_index]<sp/>=<sp/>strdup(sb_str(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf));</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Show<sp/>the<sp/>new<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>history_index<sp/>+=<sp/>dir;</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(history_index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>history_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(history_index<sp/>&gt;=<sp/>history_len)<sp/>{</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>history_index<sp/>=<sp/>history_len<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_current(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>history[history_len<sp/>-<sp/>1<sp/>-<sp/>history_index]);</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshLine(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ctrl(</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">):<sp/></highlight><highlight class="comment">/*<sp/>Ctrl+a,<sp/>go<sp/>to<sp/>the<sp/>start<sp/>of<sp/>the<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>SPECIAL_HOME:</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshLine(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ctrl(</highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">):<sp/></highlight><highlight class="comment">/*<sp/>ctrl+e,<sp/>go<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>SPECIAL_END:</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos<sp/>=<sp/>sb_chars(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf);</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshLine(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ctrl(</highlight><highlight class="charliteral">&apos;U&apos;</highlight><highlight class="normal">):<sp/></highlight><highlight class="comment">/*<sp/>Ctrl+u,<sp/>delete<sp/>to<sp/>beginning<sp/>of<sp/>line,<sp/>save<sp/>deleted<sp/>chars.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(remove_chars(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>0,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos))<sp/>{</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshLine(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ctrl(</highlight><highlight class="charliteral">&apos;K&apos;</highlight><highlight class="normal">):<sp/></highlight><highlight class="comment">/*<sp/>Ctrl+k,<sp/>delete<sp/>from<sp/>current<sp/>to<sp/>end<sp/>of<sp/>line,<sp/>save<sp/>deleted<sp/>chars.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(remove_chars(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos,<sp/>sb_chars(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf)<sp/>-<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos))<sp/>{</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshLine(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ctrl(</highlight><highlight class="charliteral">&apos;Y&apos;</highlight><highlight class="normal">):<sp/></highlight><highlight class="comment">/*<sp/>Ctrl+y,<sp/>insert<sp/>saved<sp/>chars<sp/>at<sp/>current<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;capture<sp/>&amp;&amp;<sp/>insert_chars(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos,<sp/>sb_str(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;capture)))<sp/>{</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshLine(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ctrl(</highlight><highlight class="charliteral">&apos;L&apos;</highlight><highlight class="normal">):<sp/></highlight><highlight class="comment">/*<sp/>Ctrl+L,<sp/>clear<sp/>screen<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="linenoise_8c_1a8a2931c798c8a6db5193f343c7eb33c0" kindref="member">linenoiseClearScreen</ref>();</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Force<sp/>recalc<sp/>of<sp/>window<sp/>size<sp/>for<sp/>serial<sp/>terminals<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;cols<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;rpos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshLine(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>tab<sp/>is<sp/>allowed<sp/>without<sp/>^V<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(insert_char(<ref refid="structcurrent" kindref="compound">current</ref>,<sp/><ref refid="structcurrent" kindref="compound">current</ref>-&gt;pos,<sp/>c)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshLine(<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sb_len(<ref refid="structcurrent" kindref="compound">current</ref>-&gt;buf);</highlight></codeline>
<codeline lineno="2467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linenoiseColumns(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2470"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcurrent" kindref="compound">current</ref><sp/><ref refid="structcurrent" kindref="compound">current</ref>;</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>.output<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/>enableRawMode<sp/>(&amp;<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/>getWindowSize<sp/>(&amp;<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/>disableRawMode<sp/>(&amp;<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structcurrent" kindref="compound">current</ref>.cols;</highlight></codeline>
<codeline lineno="2477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb_getline(FILE<sp/>*fh)</highlight></codeline>
<codeline lineno="2488"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb<sp/>=<sp/><ref refid="linenoise_8c_1a46a97d1a46679476bbcdcf4afb5bf2d3" kindref="member">sb_alloc</ref>();</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>getc(fh))<sp/>!=<sp/>EOF)<sp/>{</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch;</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n++;</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CRLF<sp/>-&gt;<sp/>LF<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ignore<sp/>the<sp/>effect<sp/>of<sp/>character<sp/>count<sp/>for<sp/>partial<sp/>utf8<sp/>sequences<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="linenoise_8c_1a86885cf96de98b77feda35d2a615fdf7" kindref="member">sb_append_len</ref>(sb,<sp/>&amp;ch,<sp/>1);</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="linenoise_8c_1ae71d9c5a8225af3785f625841502ce0d" kindref="member">sb_free</ref>(sb);</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sb;</highlight></codeline>
<codeline lineno="2512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*linenoise(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prompt)</highlight></codeline>
<codeline lineno="2515"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcurrent" kindref="compound">current</ref><sp/><ref refid="structcurrent" kindref="compound">current</ref>;</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb;</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;<ref refid="structcurrent" kindref="compound">current</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structcurrent" kindref="compound">current</ref>));</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enableRawMode(&amp;<ref refid="structcurrent" kindref="compound">current</ref>)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>prompt);</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb<sp/>=<sp/>sb_getline(stdin);</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>.buf<sp/>=<sp/><ref refid="linenoise_8c_1a46a97d1a46679476bbcdcf4afb5bf2d3" kindref="member">sb_alloc</ref>();</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>.pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>.nrows<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcurrent" kindref="compound">current</ref>.prompt<sp/>=<sp/>prompt;</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>linenoiseEdit(&amp;<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disableRawMode(&amp;<ref refid="structcurrent" kindref="compound">current</ref>);</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="linenoise_8c_1ae71d9c5a8225af3785f625841502ce0d" kindref="member">sb_free</ref>(<ref refid="structcurrent" kindref="compound">current</ref>.capture);</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="linenoise_8c_1ae71d9c5a8225af3785f625841502ce0d" kindref="member">sb_free</ref>(<ref refid="structcurrent" kindref="compound">current</ref>.buf);</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb<sp/>=<sp/><ref refid="structcurrent" kindref="compound">current</ref>.buf;</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sb<sp/>?<sp/><ref refid="linenoise_8c_1a4239e765a7933b7df6f244da0abe4d94" kindref="member">sb_to_string</ref>(sb)<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="2546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"></highlight></codeline>
<codeline lineno="2548"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Using<sp/>a<sp/>circular<sp/>buffer<sp/>is<sp/>smarter,<sp/>but<sp/>a<sp/>bit<sp/>more<sp/>complex<sp/>to<sp/>handle.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2549"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linenoiseHistoryAddAllocated(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line)<sp/>{</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"></highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(history_max_len<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2552"><highlight class="normal">notinserted:</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(line);</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(history<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>history<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)calloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*),<sp/>history_max_len);</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"></highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>do<sp/>not<sp/>insert<sp/>duplicate<sp/>lines<sp/>into<sp/>history<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(history_len<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>strcmp(line,<sp/>history[history_len<sp/>-<sp/>1])<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>notinserted;</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"></highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(history_len<sp/>==<sp/>history_max_len)<sp/>{</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(history[0]);</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(history,history+1,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)*(history_max_len-1));</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>history_len--;</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/>history[history_len]<sp/>=<sp/>line;</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/>history_len++;</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linenoiseHistoryAdd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line)<sp/>{</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>linenoiseHistoryAddAllocated(strdup(line));</highlight></codeline>
<codeline lineno="2577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linenoiseHistoryGetMaxLen(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>history_max_len;</highlight></codeline>
<codeline lineno="2581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linenoiseHistorySetMaxLen(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**newHistory;</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"></highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(history)<sp/>{</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tocopy<sp/>=<sp/>history_len;</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newHistory<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)calloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*),<sp/>len);</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we<sp/>can&apos;t<sp/>copy<sp/>everything,<sp/>free<sp/>the<sp/>elements<sp/>we&apos;ll<sp/>not<sp/>use.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;<sp/>tocopy)<sp/>{</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>tocopy-len;<sp/>j++)<sp/>free(history[j]);</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tocopy<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(newHistory,history+(history_len-tocopy),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)*tocopy);</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(history);</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>history<sp/>=<sp/>newHistory;</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/>history_max_len<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(history_len<sp/>&gt;<sp/>history_max_len)</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>history_len<sp/>=<sp/>history_max_len;</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"></highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Save<sp/>the<sp/>history<sp/>in<sp/>the<sp/>specified<sp/>file.<sp/>On<sp/>success<sp/>0<sp/>is<sp/>returned</highlight></codeline>
<codeline lineno="2610"><highlight class="comment"><sp/>*<sp/>otherwise<sp/>-1<sp/>is<sp/>returned.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2611"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linenoiseHistorySave(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename)<sp/>{</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp<sp/>=<sp/>fopen(filename,</highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>history_len;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str<sp/>=<sp/>history[j];</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Need<sp/>to<sp/>encode<sp/>backslash,<sp/>nl<sp/>and<sp/>cr<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*str)<sp/>{</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*str<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fputs(</highlight><highlight class="stringliteral">&quot;\\\\&quot;</highlight><highlight class="normal">,<sp/>fp);</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*str<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fputs(</highlight><highlight class="stringliteral">&quot;\\n&quot;</highlight><highlight class="normal">,<sp/>fp);</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*str<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fputs(</highlight><highlight class="stringliteral">&quot;\\r&quot;</highlight><highlight class="normal">,<sp/>fp);</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fputc(*str,<sp/>fp);</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str++;</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fputc(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">,<sp/>fp);</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"></highlight></codeline>
<codeline lineno="2641"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Load<sp/>the<sp/>history<sp/>from<sp/>the<sp/>specified<sp/>file.</highlight></codeline>
<codeline lineno="2642"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2643"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>file<sp/>does<sp/>not<sp/>exist<sp/>or<sp/>can&apos;t<sp/>be<sp/>opened,<sp/>no<sp/>operation<sp/>is<sp/>performed</highlight></codeline>
<codeline lineno="2644"><highlight class="comment"><sp/>*<sp/>and<sp/>-1<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="2645"><highlight class="comment"><sp/>*<sp/>Otherwise<sp/>0<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="2646"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2647"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linenoiseHistoryLoad(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename)<sp/>{</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fp<sp/>=<sp/>fopen(filename,</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstringbuf" kindref="compound">stringbuf</ref><sp/>*sb;</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"></highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((sb<sp/>=<sp/>sb_getline(fp))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Take<sp/>the<sp/>stringbuf<sp/>and<sp/>decode<sp/>backslash<sp/>escaped<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf<sp/>=<sp/><ref refid="linenoise_8c_1a4239e765a7933b7df6f244da0abe4d94" kindref="member">sb_to_string</ref>(sb);</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src;</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"></highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(src<sp/>=<sp/>buf;<sp/>*src;<sp/>src++)<sp/>{</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>*src;</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"></highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src++;</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*src<sp/>==<sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*src<sp/>==<sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch<sp/>=<sp/>*src;</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest++<sp/>=<sp/>ch;</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"></highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linenoiseHistoryAddAllocated(buf);</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight></codeline>
<codeline lineno="2683"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Provide<sp/>access<sp/>to<sp/>the<sp/>history<sp/>buffer.</highlight></codeline>
<codeline lineno="2684"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2685"><highlight class="comment"><sp/>*<sp/>If<sp/>&apos;len&apos;<sp/>is<sp/>not<sp/>NULL,<sp/>the<sp/>length<sp/>is<sp/>stored<sp/>in<sp/>*len.</highlight></codeline>
<codeline lineno="2686"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2687"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**linenoiseHistory(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*len)<sp/>{</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len)<sp/>{</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*len<sp/>=<sp/>history_len;</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>history;</highlight></codeline>
<codeline lineno="2692"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/linenoise.c"/>
  </compounddef>
</doxygen>
