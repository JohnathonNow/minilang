<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__array_8c" kind="file" language="C++">
    <compoundname>ml_array.c</compoundname>
    <includes refid="ml__array_8h" local="yes">ml_array.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes refid="ml__math_8h" local="yes">ml_math.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">float.h</includes>
    <includes local="yes">ml_array_init.c</includes>
    <incdepgraph>
      <node id="14">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_array.c</label>
        <link refid="ml__array_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ml_array.h</label>
        <link refid="ml__array_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>ml_math.h</label>
        <link refid="ml__math_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="22">
        <label>float.h</label>
      </node>
      <node id="19">
        <label>gc/gc.h</label>
      </node>
      <node id="17">
        <label>limits.h</label>
      </node>
      <node id="21">
        <label>math.h</label>
      </node>
      <node id="23">
        <label>ml_array_init.c</label>
      </node>
      <node id="16">
        <label>ml_config.h</label>
      </node>
      <node id="7">
        <label>setjmp.h</label>
      </node>
      <node id="12">
        <label>stdarg.h</label>
      </node>
      <node id="15">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>stdio.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="11">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structml__array__init__state__t" prot="public">ml_array_init_state_t</innerclass>
    <innerclass refid="structml__array__ref__t" prot="public">ml_array_ref_t</innerclass>
    <innerclass refid="structml__array__indexer__t" prot="public">ml_array_indexer_t</innerclass>
    <innerclass refid="structml__array__iter__ref__t" prot="public">ml_array_iter_ref_t</innerclass>
    <innerclass refid="structml__array__iter__dim__t" prot="public">ml_array_iter_dim_t</innerclass>
    <innerclass refid="structml__array__iterator__t" prot="public">ml_array_iterator_t</innerclass>
    <innerclass refid="structml__array__apply__state__t" prot="public">ml_array_apply_state_t</innerclass>
    <innerclass refid="structml__array__update__state__t" prot="public">ml_array_update_state_t</innerclass>
    <innerclass refid="structml__array__where__state__t" prot="public">ml_array_where_state_t</innerclass>
    <innerclass refid="structml__array__where__nonzero__t" prot="public">ml_array_where_nonzero_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__array_8c_1aebec330325aff5cbc7d9c9248e2cae4a" prot="public" static="no">
        <name>ML_CATEGORY</name>
        <initializer>&quot;array&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="16" column="10" bodyfile="src/ml_array.c" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1acafd6e6d062e1986410fa1e1fc2cd13a" prot="public" static="no">
        <name>ML_ARRAY_TYPES</name>
        <param><defname>NAME</defname></param>
        <initializer>static <ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *ML ## NAME ## Types[] = { \
	[ML_ARRAY_FORMAT_NONE] = ML ## NAME ## T, \
	[ML_ARRAY_FORMAT_U8] = ML ## NAME ## UInt8T, \
	[ML_ARRAY_FORMAT_I8] = ML ## NAME ## Int8T, \
	[ML_ARRAY_FORMAT_U16] = ML ## NAME ## UInt16T, \
	[ML_ARRAY_FORMAT_I16] = ML ## NAME ## Int16T, \
	[ML_ARRAY_FORMAT_U32] = ML ## NAME ## UInt32T, \
	[ML_ARRAY_FORMAT_I32] = ML ## NAME ## Int32T, \
	[ML_ARRAY_FORMAT_U64] = ML ## NAME ## UInt64T, \
	[ML_ARRAY_FORMAT_I64] = ML ## NAME ## Int64T, \
	[ML_ARRAY_FORMAT_F32] = ML ## NAME ## Float32T, \
	[ML_ARRAY_FORMAT_F64] = ML ## NAME ## Float64T, \
	[ML_ARRAY_FORMAT_ANY] = ML ## NAME ## AnyT \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="258" column="9" bodyfile="src/ml_array.c" bodystart="258" bodyend="272"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1aaf7d3221f88747518d03f554cb742948" prot="public" static="no">
        <name>ARRAY_OFFSETS_NONZERO</name>
        <param><defname>CTYPE</defname></param>
        <param><defname>ZERO</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1071" column="9" bodyfile="src/ml_array.c" bodystart="1071" bodyend="1134"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1aa568e01ec448a4e35f6225e8381523be" prot="public" static="no">
        <name>ML_ARRAY_ITER_FN</name>
        <param><defname>SUFFIX</defname></param>
        <param><defname>CTYPE</defname></param>
        <param><defname>TO_VAL</defname></param>
        <param><defname>FROM_VAL</defname></param>
        <initializer>\
static <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *ml_array_iter_ref_deref_ ## CTYPE(<ref refid="structml__array__iter__ref__t" kindref="compound">ml_array_iter_ref_t</ref> *Ref) { \
	return TO_VAL(*(CTYPE *)Ref-&gt;Address); \
} \
\
static <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *ml_array_iter_deref_ ## CTYPE(char *Address) { \
	return TO_VAL(*(CTYPE *)Address); \
} \
\
static void ml_array_iter_ref_assign_ ## CTYPE(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *Caller, <ref refid="structml__array__iter__ref__t" kindref="compound">ml_array_iter_ref_t</ref> *Ref, <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *Value) { \
	*(CTYPE *)Ref-&gt;Address = FROM_VAL(Value); \
	ML_RETURN(Value); \
} \
\
ML_TYPE(MLRef ## SUFFIX, (), &quot;ref::&quot; #CTYPE, \
	.deref = (void *)ml_array_iter_ref_deref_ ## CTYPE, \
	.assign = (void *)ml_array_iter_ref_assign_ ## CTYPE \
)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1475" column="9" bodyfile="src/ml_array.c" bodystart="1475" bodyend="1493"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a814e77c45c2797ebd69520570e2f72d4" prot="public" static="no">
        <name>UPDATE_FNS</name>
        <param><defname>TITLE</defname></param>
        <initializer>extern update_row_fn_t Update ## TITLE ## RowFns[];</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1698" column="9" bodyfile="src/ml_array.c" bodystart="1698" bodyend="1699"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1aaa6a70cc5dc9a64e498b8db0712e5aee" prot="public" static="no">
        <name>UPDATE_METHOD</name>
        <param><defname>TITLE</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>ATYPE</defname></param>
        <param><defname>CTYPE</defname></param>
        <param><defname>FROM_VAL</defname></param>
        <param><defname>FORMAT</defname></param>
        <initializer>\
 ML_METHOD(#NAME, ATYPE, MLNumberT) { \
	<ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *Array = (<ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *)Args[0]; \
	CTYPE Value = FROM_VAL(Args[1]); \
	update_row_fn_t Update = Update ## TITLE ## RowFns[Array-&gt;Format * MAX_FORMATS + FORMAT]; \
	if (!Update) return ml_error(&quot;ArrayError&quot;, &quot;Unsupported array format pair (%s, %s)&quot;, ml_typeof(Args[0])-&gt;Name, ml_typeof(Args[1])-&gt;Name); \
	if (Array-&gt;Degree == 0) { \
		<ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> ValueDimension[1] = {{1, 0, NULL}}; \
		Update(ValueDimension, Array-&gt;Base.Value, ValueDimension, (char *)&amp;Value); \
	} else { \
		update_prefix(Update, Array-&gt;Degree - 1, Array-&gt;Dimensions, Array-&gt;Base.Value, 0, NULL, (char *)&amp;Value); \
	} \
	return Args[0]; \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1889" column="9" bodyfile="src/ml_array.c" bodystart="1889" bodyend="1903"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1affc16e764b1299d2155040d9aef8e4a2" prot="public" static="no">
        <name>UPDATE_METHODS</name>
        <param><defname>ATYPE</defname></param>
        <param><defname>CTYPE</defname></param>
        <param><defname>FROM_VAL</defname></param>
        <param><defname>FORMAT</defname></param>
        <initializer>UPDATE_METHOD(Set, set, ATYPE, CTYPE, FROM_VAL, FORMAT); \
UPDATE_METHOD(Add, add, ATYPE, CTYPE, FROM_VAL, FORMAT); \
UPDATE_METHOD(Sub, sub, ATYPE, CTYPE, FROM_VAL, FORMAT); \
UPDATE_METHOD(Mul, mul, ATYPE, CTYPE, FROM_VAL, FORMAT); \
UPDATE_METHOD(Div, div, ATYPE, CTYPE, FROM_VAL, FORMAT);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1905" column="9" bodyfile="src/ml_array.c" bodystart="1905" bodyend="1910"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1afeb0612d19702ade5833c5294abfe16c" prot="public" static="no">
        <name>COMPARE_FNS</name>
        <param><defname>TITLE</defname></param>
        <initializer>extern compare_row_fn_t Compare ## TITLE ## RowFns[];</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1914" column="9" bodyfile="src/ml_array.c" bodystart="1914" bodyend="1915"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a01d20c3c27ec37aa8dc9668f4acf8254" prot="public" static="no">
        <name>COMPARE_METHOD</name>
        <param><defname>OP</defname></param>
        <initializer>/*
ML_METHOD(#OP, MLArrayT, MLArrayT) {
//&lt;A
//&lt;B
//&gt;array
// Returns :mini:`A OP B` (element-wise). The shapes of :mini:`A` and :mini:`B` must be compatible, i.e. either
//
// * :mini:`A:shape = B:shape` or
// * :mini:`B:shape` is a prefix of :mini:`A:shape`.
//
// When the shapes are not the same, remaining dimensions are repeated (broadcast) to the required size.
//$= let A := array([[1, 8, 3], [4, 5, 12]])
//$= let B := array([[7, 2, 9], [4, 11, 6]])
//$= let C := array([1, 5, 10])
//$= A OP B
//$= A OP C
}
*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2037" column="9" bodyfile="src/ml_array.c" bodystart="2020" bodyend="2021"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a23cbc982cc25e0e7479839ba443379a5" prot="public" static="no">
        <name>BUFFER_APPEND</name>
        <param><defname>BUFFER</defname></param>
        <param><defname>PRINTF</defname></param>
        <param><defname>VALUE</defname></param>
        <initializer>ml_stringbuffer_simple_append(BUFFER, VALUE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2064" column="9" bodyfile="src/ml_array.c" bodystart="2047" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a116f8bcc70c0cd8dc78240edf1ac0a41" prot="public" static="no">
        <name>ml_number</name>
        <param><defname>X</defname></param>
        <initializer>_Generic(X, <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *: ml_nop, double: ml_real, default: ml_integer)(X)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2079" column="9" bodyfile="src/ml_array.c" bodystart="2062" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1affed3d1259f250cc278700534ded0540" prot="public" static="no">
        <name>ml_number_value</name>
        <param><defname>T</defname></param>
        <param><defname>X</defname></param>
        <initializer>_Generic(T, double: ml_real_value, default: ml_integer_value)(X)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2081" column="9" bodyfile="src/ml_array.c" bodystart="2064" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a44407091cc5c8cfe614bb311b2528a2e" prot="public" static="no">
        <name>ml_array_get0_complex</name>
        <param><defname>FROM_NUM</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2095" column="9" bodyfile="src/ml_array.c" bodystart="2078" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a803a6b4e33ea5e41ee46a2f6e7857d3d" prot="public" static="no">
        <name>ml_array_set_complex</name>
        <param><defname>TO_NUM</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2096" column="9" bodyfile="src/ml_array.c" bodystart="2079" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1ae500a273f84a56410e0e32ab78d0ebf3" prot="public" static="no">
        <name>ARRAY_DECL</name>
        <param><defname>PARENT</defname></param>
        <param><defname>PREFIX</defname></param>
        <param><defname>SUFFIX</defname></param>
        <param><defname>CTYPE</defname></param>
        <param><defname>APPEND</defname></param>
        <param><defname>PRINTF</defname></param>
        <param><defname>FROM_VAL</defname></param>
        <param><defname>TO_VAL</defname></param>
        <param><defname>FROM_NUM</defname></param>
        <param><defname>TO_NUM</defname></param>
        <param><defname>FORMAT</defname></param>
        <param><defname>HASH</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2118" column="9" bodyfile="src/ml_array.c" bodystart="2083" bodyend="2330"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1af7b7748ba7d046d6db66945fc955147c" prot="public" static="no">
        <name>NOP_VAL</name>
        <param><defname>T</defname></param>
        <param><defname>X</defname></param>
        <initializer>X</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2367" column="9" bodyfile="src/ml_array.c" bodystart="2332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a057e8f7c15c6d6b21af636882c9d85aa" prot="public" static="no">
        <name>PARTIAL_FUNCTIONS</name>
        <param><defname>CTYPE</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2431" column="9" bodyfile="src/ml_array.c" bodystart="2396" bodyend="2461"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a8851d1ad37c1b8df19c890bf92bc5f4f" prot="public" static="no">
        <name>COMPLETE_FUNCTIONS</name>
        <param><defname>CTYPE1</defname></param>
        <param><defname>CTYPE2</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2497" column="9" bodyfile="src/ml_array.c" bodystart="2462" bodyend="2570"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a7c8c7219d1cc943975db4105a5acc286" prot="public" static="no">
        <name>MINMAX_FUNCTIONS</name>
        <param><defname>CTYPE</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2607" column="9" bodyfile="src/ml_array.c" bodystart="2572" bodyend="2804"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a9784f2599dbad42f451015c829febae6" prot="public" static="no">
        <name>NORM_FUNCTION</name>
        <param><defname>CTYPE1</defname></param>
        <param><defname>CTYPE2</defname></param>
        <param><defname>NORM</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2891" column="9" bodyfile="src/ml_array.c" bodystart="2856" bodyend="2920"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1ad2f3678bf5eae3684fc497130b946eae" prot="public" static="no">
        <name>MIN</name>
        <param><defname>X</defname></param>
        <param><defname>Y</defname></param>
        <initializer>((X &lt; Y) ? X : Y)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4113" column="9" bodyfile="src/ml_array.c" bodystart="4078" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1aff9931d7524c88e07743af6535b20761" prot="public" static="no">
        <name>MAX</name>
        <param><defname>X</defname></param>
        <param><defname>Y</defname></param>
        <initializer>((X &gt; Y) ? X : Y)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4114" column="9" bodyfile="src/ml_array.c" bodystart="4079" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a3e65d54134bba4dcc9a6aea2ee1f7afb" prot="public" static="no">
        <name>INFIX_METHOD</name>
        <param><defname>OP</defname></param>
        <initializer>/*
ML_METHOD(#OP, MLArrayT, MLArrayT) {
//&lt;A
//&lt;B
//&gt;array
// Returns :mini:`A OP B` (element-wise). The shapes of :mini:`A` and :mini:`B` must be compatible, i.e. either
//
// * :mini:`A:shape = B:shape` or
// * :mini:`A:shape` is a prefix of :mini:`B:shape` or
// * :mini:`B:shape` is a prefix of :mini:`A:shape`.
//
// When the shapes are not the same, remaining dimensions are repeated (broadcast) to the required size.
//$= let A := array([[1, 2, 3], [4, 5, 6]])
//$= let B := array([[7, 8, 9], [10, 11, 12]])
//$= let C := array([5, 10, 15])
//$= A OP B
//$= B OP A
//$= A OP C
//$= C OP A
//$= B OP C
//$= C OP B
}
*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4170" column="9" bodyfile="src/ml_array.c" bodystart="4113" bodyend="4114"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1aa22d6a9c2dabd66bc8eba3b73fb68a2e" prot="public" static="no">
        <name>op_complex_array_left</name>
        <param><defname>NAME</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4211" column="9" bodyfile="src/ml_array.c" bodystart="4154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a078238f4425a29c58ad0399194da03fa" prot="public" static="no">
        <name>op_complex_array_right</name>
        <param><defname>NAME</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4212" column="9" bodyfile="src/ml_array.c" bodystart="4155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a3f56b13d7fbce5f067db58858b5c9500" prot="public" static="no">
        <name>ML_ARITH_METHOD_BASE</name>
        <param><defname>NAME</defname></param>
        <param><defname>MIN_FORMAT</defname></param>
        <param><defname>METHOD</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4252" column="9" bodyfile="src/ml_array.c" bodystart="4159" bodyend="4307"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1aece096dc7b2c866ded9f7836d005c652" prot="public" static="no">
        <name>ML_ARITH_METHOD</name>
        <param><defname>NAME</defname></param>
        <param><defname>MIN_FORMAT</defname></param>
        <param><defname>METHOD</defname></param>
        <initializer>ML_ARITH_METHOD_BASE(NAME, MIN_FORMAT, METHOD)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4447" column="9" bodyfile="src/ml_array.c" bodystart="4354" bodyend="4355"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1af1535259d38d15130fd978630246f198" prot="public" static="no">
        <name>ML_ARITH_METHOD_BITWISE</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <param><defname>OP</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4469" column="9" bodyfile="src/ml_array.c" bodystart="4364" bodyend="4392"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1ad126a7d370739b6092449adcf5ae6237" prot="public" static="no">
        <name>ML_ARITH_METHOD_MINMAX</name>
        <param><defname>NAME</defname></param>
        <param><defname>FN</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4527" column="9" bodyfile="src/ml_array.c" bodystart="4398" bodyend="4454"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1af67a0a8dfe9198446f3a612a106bfb15" prot="public" static="no">
        <name>ML_COMPARE_METHOD_BASE</name>
        <param><defname>TITLE</defname></param>
        <param><defname>TITLE2</defname></param>
        <param><defname>OP</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4642" column="9" bodyfile="src/ml_array.c" bodystart="4489" bodyend="4609"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a03a706c9014cbeb25cf90c1e1de45182" prot="public" static="no">
        <name>ML_COMPARE_METHOD</name>
        <param><defname>BASE</defname></param>
        <param><defname>BASE2</defname></param>
        <param><defname>OP</defname></param>
        <initializer>ML_COMPARE_METHOD_BASE(BASE, BASE2, OP)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4821" column="9" bodyfile="src/ml_array.c" bodystart="4668" bodyend="4669"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1ae6aba9138ef2b47ef9dd6b81be28f058" prot="public" static="no">
        <name>ARRAY_APPLY</name>
        <param><defname>NAME</defname></param>
        <param><defname>CTYPE</defname></param>
        <param><defname>TO_VAL</defname></param>
        <param><defname>TO_NUM</defname></param>
        <initializer>static void ml_array_apply_ ## CTYPE(<ref refid="structml__array__apply__state__t" kindref="compound">ml_array_apply_state_t</ref> *State, <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *Value) { \
	if (ml_is_error(Value)) ML_CONTINUE(State-&gt;Base.Caller, Value); \
	*State-&gt;NAME++ = TO_NUM(Value); \
	if (--State-&gt;Remaining) { \
		State-&gt;Args[0] = TO_VAL(*State-&gt;NAME); \
		return ml_call(State, State-&gt;Function, 1, State-&gt;Args); \
	} else { \
		ML_CONTINUE(State-&gt;Base.Caller, State-&gt;Array); \
	} \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5386" column="9" bodyfile="src/ml_array.c" bodystart="5233" bodyend="5243"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a6de81338b8be77ad88ddab63b0851756" prot="public" static="no">
        <name>ARRAY_UPDATE</name>
        <param><defname>CTYPE</defname></param>
        <param><defname>TO_VAL</defname></param>
        <param><defname>TO_NUM</defname></param>
        <initializer>static void ml_array_update_ ## CTYPE(<ref refid="structml__array__update__state__t" kindref="compound">ml_array_update_state_t</ref> *State, <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *Value) { \
	if (ml_is_error(Value)) ML_CONTINUE(State-&gt;Base.Caller, Value); \
	*(CTYPE *)State-&gt;Address = TO_NUM(Value); \
	int *Indices = State-&gt;Indices; \
	for (int I = State-&gt;Degree; --I &gt;= 0;) { \
		<ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *Dimension = State-&gt;Array-&gt;Dimensions + I; \
		int Index = Indices[I]; \
		if (Index + 1 &lt; Dimension-&gt;Size) { \
			if (Dimension-&gt;Indices) { \
				State-&gt;Address += (Dimension-&gt;Indices[Index + 1] - Dimension-&gt;Indices[Index]) * Dimension-&gt;Stride; \
			} else { \
				State-&gt;Address += Dimension-&gt;Stride; \
			} \
			State-&gt;Indices[I] = Index + 1; \
			State-&gt;Args[0] = TO_VAL(*(CTYPE *)State-&gt;Address); \
			return ml_call(State, State-&gt;Function, 1, State-&gt;Args); \
		} else { \
			if (Dimension-&gt;Indices) { \
				State-&gt;Address -= (Dimension-&gt;Indices[Index] - Dimension-&gt;Indices[0]) * Dimension-&gt;Stride; \
			} else { \
				State-&gt;Address -= Index * Dimension-&gt;Stride; \
			} \
			State-&gt;Indices[I] = 0; \
		} \
	} \
	ML_CONTINUE(State-&gt;Base.Caller, State-&gt;Array); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5519" column="9" bodyfile="src/ml_array.c" bodystart="5366" bodyend="5393"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1aaab170cc80ec9af75b6168d2d6501f8a" prot="public" static="no">
        <name>ARRAY_WHERE</name>
        <param><defname>CTYPE</defname></param>
        <param><defname>TO_VAL</defname></param>
        <param><defname>TO_NUM</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5674" column="9" bodyfile="src/ml_array.c" bodystart="5521" bodyend="5560"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a9521d5676ec7a531aa1f85dd74cc0747" prot="public" static="no">
        <name>ARRAY_WHERE_NONZERO</name>
        <param><defname>CTYPE</defname></param>
        <param><defname>ZERO</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5837" column="9" bodyfile="src/ml_array.c" bodystart="5684" bodyend="5748"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1ad99e7a7ccef0925a2c90e9316faebdfe" prot="public" static="no">
        <name>ML_ARRAY_GETTER_IMPL</name>
        <param><defname>CTYPE</defname></param>
        <param><defname>ATYPE</defname></param>
        <initializer>static CTYPE ml_array_getter_ ## CTYPE ## _ ## ATYPE(void *Data) { \
	return (CTYPE)(*(ATYPE *)Data); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6056" column="9" bodyfile="src/ml_array.c" bodystart="5903" bodyend="5906"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a809d7f7957c99da232266a90eb35c2f0" prot="public" static="no">
        <name>ML_ARRAY_GETTERS_IMPL_BASE</name>
        <param><defname>CTYPE</defname></param>
        <param><defname>FROM_VAL</defname></param>
        <initializer>\
typedef CTYPE (*ml_array_getter_ ## CTYPE)(void *Data); \
\
ML_ARRAY_GETTER_IMPL(CTYPE, uint8_t) \
ML_ARRAY_GETTER_IMPL(CTYPE, int8_t) \
ML_ARRAY_GETTER_IMPL(CTYPE, uint16_t) \
ML_ARRAY_GETTER_IMPL(CTYPE, int16_t) \
ML_ARRAY_GETTER_IMPL(CTYPE, uint32_t) \
ML_ARRAY_GETTER_IMPL(CTYPE, int32_t) \
ML_ARRAY_GETTER_IMPL(CTYPE, uint64_t) \
ML_ARRAY_GETTER_IMPL(CTYPE, int64_t) \
ML_ARRAY_GETTER_IMPL(CTYPE, float) \
ML_ARRAY_GETTER_IMPL(CTYPE, double) \
\
static CTYPE ml_array_getter_ ## CTYPE ## _ ## <ref refid="structml__value__t" kindref="compound">any</ref>(void *Data) { \
	return FROM_VAL(*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **)Data); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6061" column="9" bodyfile="src/ml_array.c" bodystart="5908" bodyend="5925"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a0186e61bc5ff1978668f703e37fd48fd" prot="public" static="no">
        <name>ML_ARRAY_GETTERS_IMPL</name>
        <param><defname>CTYPE</defname></param>
        <param><defname>FROM_VAL</defname></param>
        <initializer>ML_ARRAY_GETTERS_IMPL_BASE(CTYPE, FROM_VAL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6089" column="9" bodyfile="src/ml_array.c" bodystart="5936" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a633d42a82fccaed8ef09fc3c7de920be" prot="public" static="no">
        <name>ML_ARRAY_GETTER_ANY_IMPL</name>
        <param><defname>TO_VAL</defname></param>
        <param><defname>ATYPE</defname></param>
        <initializer>static <ref refid="structml__value__t" kindref="compound">any</ref> ml_array_getter_any_ ## ATYPE(void *Data) { \
	return TO_VAL(*(ATYPE *)Data); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6111" column="9" bodyfile="src/ml_array.c" bodystart="5958" bodyend="5961"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a066bb6d17cbb4d0d40783b2b815e85b4" prot="public" static="no">
        <name>ML_ARRAY_GETTER_DECLS</name>
        <param><defname>NAME</defname></param>
        <param><defname>CTYPE</defname></param>
        <initializer>static ml_array_getter_ ## CTYPE MLArrayGetters ## NAME[] = { \
	[ML_ARRAY_FORMAT_I8] = ml_array_getter_ ## CTYPE ## _int8_t, \
	[ML_ARRAY_FORMAT_U8] = ml_array_getter_ ## CTYPE ## _uint8_t, \
	[ML_ARRAY_FORMAT_I16] = ml_array_getter_ ## CTYPE ## _int16_t, \
	[ML_ARRAY_FORMAT_U16] = ml_array_getter_ ## CTYPE ## _uint16_t, \
	[ML_ARRAY_FORMAT_I32] = ml_array_getter_ ## CTYPE ## _int32_t, \
	[ML_ARRAY_FORMAT_U32] = ml_array_getter_ ## CTYPE ## _uint32_t, \
	[ML_ARRAY_FORMAT_I64] = ml_array_getter_ ## CTYPE ## _int64_t, \
	[ML_ARRAY_FORMAT_U64] = ml_array_getter_ ## CTYPE ## _uint64_t, \
	[ML_ARRAY_FORMAT_F32] = ml_array_getter_ ## CTYPE ## _float, \
	[ML_ARRAY_FORMAT_F64] = ml_array_getter_ ## CTYPE ## _double, \
	[ML_ARRAY_FORMAT_ANY] = ml_array_getter_ ## CTYPE ## _any, \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6161" column="9" bodyfile="src/ml_array.c" bodystart="6008" bodyend="6021"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1aeb2f48222fed1e89bf7fa918d71729fd" prot="public" static="no">
        <name>ML_ARRAY_DOT</name>
        <param><defname>CTYPE</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6216" column="9" bodyfile="src/ml_array.c" bodystart="6063" bodyend="6110"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a66bb4952e7cf641caad222bc9d3c9498" prot="public" static="no">
        <name>ML_ARRAY_INFIX_SETTER</name>
        <param><defname>NAME</defname></param>
        <param><defname>OP</defname></param>
        <param><defname>CTYPE</defname></param>
        <initializer>static void ml_array_infix_set_ ## NAME ## _ ## CTYPE(void *DataA, ml_array_getter_ ## CTYPE GetterA, void *DataB, ml_array_getter_ ## CTYPE GetterB, void *DataC) { \
	*(CTYPE *)DataC = GetterA(DataA) OP GetterB(DataB); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6411" column="9" bodyfile="src/ml_array.c" bodystart="6258" bodyend="6261"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a800045c8bebc469d81753f343c1150a5" prot="public" static="no">
        <name>ML_ARRAY_INFIX_SETTERS_BASE</name>
        <param><defname>NAME</defname></param>
        <param><defname>OP</defname></param>
        <param><defname>METHOD</defname></param>
        <initializer>ML_ARRAY_INFIX_SETTER(NAME, OP, uint8_t) \
ML_ARRAY_INFIX_SETTER(NAME, OP, int8_t) \
ML_ARRAY_INFIX_SETTER(NAME, OP, uint16_t) \
ML_ARRAY_INFIX_SETTER(NAME, OP, int16_t) \
ML_ARRAY_INFIX_SETTER(NAME, OP, uint32_t) \
ML_ARRAY_INFIX_SETTER(NAME, OP, int32_t) \
ML_ARRAY_INFIX_SETTER(NAME, OP, uint64_t) \
ML_ARRAY_INFIX_SETTER(NAME, OP, int64_t) \
ML_ARRAY_INFIX_SETTER(NAME, OP, float) \
ML_ARRAY_INFIX_SETTER(NAME, OP, double) \
\
static void ml_array_infix_set_ ## NAME ## _any(void *DataA, ml_array_getter_any GetterA, void *DataB, ml_array_getter_any GetterB, void *DataC) { \
	<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *Args[2] = {GetterA(DataA), GetterB(DataB)}; \
	*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **)DataC = ml_simple_call(METHOD, 2, Args); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6416" column="9" bodyfile="src/ml_array.c" bodystart="6263" bodyend="6278"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a84656df0d3d0b5db1c6c4cc6cb75fea6" prot="public" static="no">
        <name>ML_ARRAY_INFIX_SETTERS</name>
        <param><defname>NAME</defname></param>
        <param><defname>OP</defname></param>
        <param><defname>METHOD</defname></param>
        <initializer>ML_ARRAY_INFIX_SETTERS_BASE(NAME, OP, METHOD)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6442" column="9" bodyfile="src/ml_array.c" bodystart="6289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1ae63cfc8b4deefbb36a01354910fb0211" prot="public" static="no">
        <name>ML_ARRAY_INFIX_FNS</name>
        <param><defname>NAME</defname></param>
        <param><defname>KIND</defname></param>
        <initializer>static ml_array_infix_set_fn MLArrayInfix ## NAME ## Fns[] = { \
	[ML_ARRAY_FORMAT_I8] = (ml_array_infix_set_fn)ml_array_infix_set_ ## KIND ## _int8_t, \
	[ML_ARRAY_FORMAT_U8] = (ml_array_infix_set_fn)ml_array_infix_set_ ## KIND ## _uint8_t, \
	[ML_ARRAY_FORMAT_I16] = (ml_array_infix_set_fn)ml_array_infix_set_ ## KIND ## _int16_t, \
	[ML_ARRAY_FORMAT_U16] = (ml_array_infix_set_fn)ml_array_infix_set_ ## KIND ## _uint16_t, \
	[ML_ARRAY_FORMAT_I32] = (ml_array_infix_set_fn)ml_array_infix_set_ ## KIND ## _int32_t, \
	[ML_ARRAY_FORMAT_U32] = (ml_array_infix_set_fn)ml_array_infix_set_ ## KIND ## _uint32_t, \
	[ML_ARRAY_FORMAT_I64] = (ml_array_infix_set_fn)ml_array_infix_set_ ## KIND ## _int64_t, \
	[ML_ARRAY_FORMAT_U64] = (ml_array_infix_set_fn)ml_array_infix_set_ ## KIND ## _uint64_t,\
	[ML_ARRAY_FORMAT_F32] = (ml_array_infix_set_fn)ml_array_infix_set_ ## KIND ## _float, \
	[ML_ARRAY_FORMAT_F64] = (ml_array_infix_set_fn)ml_array_infix_set_ ## KIND ## _double, \
	[ML_ARRAY_FORMAT_ANY] = (ml_array_infix_set_fn)ml_array_infix_set_ ## KIND ## _any \
};</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6532" column="9" bodyfile="src/ml_array.c" bodystart="6379" bodyend="6392"/>
      </memberdef>
      <memberdef kind="define" id="ml__array_8c_1a62a70ed14c3552eabecf80f72706856e" prot="public" static="no">
        <name>ML_ARRAY_PAIRWISE</name>
        <param><defname>NAME</defname></param>
        <param><defname>OP</defname></param>
        <initializer>/*
ML_METHOD(NAME, MLArrayT, MLArrayT) {
//&lt;A
//&lt;B
//&gt;array
// Returns an array with :mini:`A/i OP B/j` for each pair of elements of :mini:`A` and :mini:`B`. The result will have shape :mini:`A:shape + B:shape`.
//
//$= let A := array([1, 8, 3])
//$= let B := array([[7, 2], [4, 11]])
//$= A:shape
//$= B:shape
//$= let C := A OPOP B
//$= C:shape
}
*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6849" column="9" bodyfile="src/ml_array.c" bodystart="6682" bodyend="6683"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ml__array_8c_1a47bc6d6abc8aa7ef6bd0cc83b3101636" prot="public" static="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>typedef ml_value_t* any</definition>
        <argsstring></argsstring>
        <name>any</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="18" column="20" bodyfile="src/ml_array.c" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__array_8c_1a8b4c03da71c540d088b8bef3e3cc27c3" prot="public" static="no">
        <type>struct ml_array_init_state_t</type>
        <definition>typedef struct ml_array_init_state_t ml_array_init_state_t</definition>
        <argsstring></argsstring>
        <name>ml_array_init_state_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="346" column="23"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__array_8c_1a8c986b9724d777d87cb2634609acbe48" prot="public" static="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *(*</type>
        <definition>typedef ml_value_t *(* ml_array_iter_deref_t) (char *)</definition>
        <argsstring>)(char *)</argsstring>
        <name>ml_array_iter_deref_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1472" column="9" bodyfile="src/ml_array.c" bodystart="1472" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__array_8c_1a1bb8955ae7e218064f015e2a624582e2" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ml_array_iter_assign_t) (char *, ml_value_t *)</definition>
        <argsstring>)(char *, ml_value_t *)</argsstring>
        <name>ml_array_iter_assign_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1473" column="9" bodyfile="src/ml_array.c" bodystart="1473" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__array_8c_1afff5df2795a83cd6de48f8ad0a1dfe80" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* update_row_fn_t) (ml_array_dimension_t *TargetDimension, char *TargetData, ml_array_dimension_t *SourceDimension, char *SourceData)</definition>
        <argsstring>)(ml_array_dimension_t *TargetDimension, char *TargetData, ml_array_dimension_t *SourceDimension, char *SourceData)</argsstring>
        <name>update_row_fn_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1696" column="9" bodyfile="src/ml_array.c" bodystart="1696" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__array_8c_1a81dab8f537f607478701161410e9d9e4" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* compare_row_fn_t) (char *Target, ml_array_dimension_t *LeftDimension, char *LeftData, ml_array_dimension_t *RightDimension, char *RightData)</definition>
        <argsstring>)(char *Target, ml_array_dimension_t *LeftDimension, char *LeftData, ml_array_dimension_t *RightDimension, char *RightData)</argsstring>
        <name>compare_row_fn_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1912" column="9" bodyfile="src/ml_array.c" bodystart="1912" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__array_8c_1a0e4e5a64464e0d3284470fda91d9f8ab" prot="public" static="no">
        <type><ref refid="structml__value__t" kindref="compound">any</ref>(*</type>
        <definition>typedef any(* ml_array_getter_any) (void *Data)</definition>
        <argsstring>)(void *Data)</argsstring>
        <name>ml_array_getter_any</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5963" column="9" bodyfile="src/ml_array.c" bodystart="5963" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__array_8c_1a4c3f0d5f1cfc85a1585435eb4ea271be" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ml_array_dot_fn) (void *DataA, ml_array_dimension_t *DimA, void *GetterA, void *DataB, ml_array_dimension_t *DimB, void *GetterB, void *DataC)</definition>
        <argsstring>)(void *DataA, ml_array_dimension_t *DimA, void *GetterA, void *DataB, ml_array_dimension_t *DimB, void *GetterB, void *DataC)</argsstring>
        <name>ml_array_dot_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6194" column="9" bodyfile="src/ml_array.c" bodystart="6194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__array_8c_1a7eafa465152c7a32ad170e51c44a2845" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ml_array_infix_set_fn) (void *DataA, void *GetterA, void *DataB, void *GetterB, void *DataC)</definition>
        <argsstring>)(void *DataA, void *GetterA, void *DataB, void *GetterB, void *DataC)</argsstring>
        <name>ml_array_infix_set_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6298" column="9" bodyfile="src/ml_array.c" bodystart="6298" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="ml__array_8c_1ad004c69720d18e20f6079d1de571391f" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLArrayUInt8T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayUInt8T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="130" column="18" declfile="src/ml_array.c" declline="130" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1adff426d45ebb8153e15a92a1c15ba3a5" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLArrayInt8T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayInt8T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="131" column="18" declfile="src/ml_array.c" declline="131" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1af011f1c1c0cb2d7296beca4f4c552a07" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLArrayUInt16T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayUInt16T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="132" column="18" declfile="src/ml_array.c" declline="132" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a4398ab020f8bed3df0d8f62b93a694df" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLArrayInt16T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayInt16T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="133" column="18" declfile="src/ml_array.c" declline="133" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1ab7a4ca4945f65f5c0a250da434ba096b" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLArrayUInt32T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayUInt32T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="134" column="18" declfile="src/ml_array.c" declline="134" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1abeb8ca2f07b14226aebc1f836428368f" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLArrayInt32T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayInt32T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="135" column="18" declfile="src/ml_array.c" declline="135" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a2fe3aa1428f63545744b186678d1f9b3" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLArrayUInt64T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayUInt64T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="136" column="18" declfile="src/ml_array.c" declline="136" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a141ad2989bb083f072dce71bf1dcc39c" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLArrayInt64T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayInt64T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="137" column="18" declfile="src/ml_array.c" declline="137" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a414c877c5147b7c91315e24a308a510b" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLArrayFloat32T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayFloat32T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="138" column="18" declfile="src/ml_array.c" declline="138" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1ac1f9bc7ce66a0aab0a7dc45c694db940" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLArrayFloat64T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayFloat64T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="139" column="18" declfile="src/ml_array.c" declline="139" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a80541499cba19192b4025f350f6eba60" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLArrayMutableUInt8T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayMutableUInt8T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="144" column="18" declfile="src/ml_array.c" declline="144" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1aedc6db074746fc4af9c7a0f224bb7b08" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLArrayMutableInt8T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayMutableInt8T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="145" column="18" declfile="src/ml_array.c" declline="145" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a7a027036ff6175ec83628bf1509d67d4" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLArrayMutableUInt16T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayMutableUInt16T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="146" column="18" declfile="src/ml_array.c" declline="146" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1ac5b0d781d0f71da90de6433e2f0a03b2" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLArrayMutableInt16T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayMutableInt16T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="147" column="18" declfile="src/ml_array.c" declline="147" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a6f644fd6c75c6d402896c3e4dca86879" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLArrayMutableUInt32T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayMutableUInt32T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="148" column="18" declfile="src/ml_array.c" declline="148" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1ad83b402c1547877d51f327566ac1b685" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLArrayMutableInt32T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayMutableInt32T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="149" column="18" declfile="src/ml_array.c" declline="149" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1ad5c978d4d3f35627efdd214a29793b97" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLArrayMutableUInt64T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayMutableUInt64T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="150" column="18" declfile="src/ml_array.c" declline="150" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a3828547d9d4264251481fd19cca19505" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLArrayMutableInt64T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayMutableInt64T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="151" column="18" declfile="src/ml_array.c" declline="151" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1abb28de0ac980ba51f1c9b4c2da8b5cf8" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLArrayMutableFloat32T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayMutableFloat32T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="152" column="18" declfile="src/ml_array.c" declline="152" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1aa14771bce5f4d9cf1eb871bc59430c60" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLArrayMutableFloat64T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayMutableFloat64T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="153" column="18" declfile="src/ml_array.c" declline="153" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a95c4913cfd556a96e2defcda7cc4cc94" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLVectorUInt8T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLVectorUInt8T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="157" column="18" declfile="src/ml_array.c" declline="157" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1ad5b4135685501d7f5c0c02da6b4a787e" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLVectorInt8T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLVectorInt8T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="158" column="18" declfile="src/ml_array.c" declline="158" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a51142cc8595719996d70cc10793dd075" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLVectorUInt16T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLVectorUInt16T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="159" column="18" declfile="src/ml_array.c" declline="159" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1ae8d0dc5d06ae279280666220b241a939" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLVectorInt16T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLVectorInt16T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="160" column="18" declfile="src/ml_array.c" declline="160" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1aac114f300f08236b19664df929aa686c" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLVectorUInt32T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLVectorUInt32T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="161" column="18" declfile="src/ml_array.c" declline="161" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a6c232aaface096a010c5cf559c8b500a" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLVectorInt32T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLVectorInt32T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="162" column="18" declfile="src/ml_array.c" declline="162" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a06d0d0fd6f4702b8612adeb82951e6a4" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLVectorUInt64T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLVectorUInt64T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="163" column="18" declfile="src/ml_array.c" declline="163" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a0b64c77ee90fe2bb7631a70623ec46de" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLVectorInt64T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLVectorInt64T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="164" column="18" declfile="src/ml_array.c" declline="164" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1ac9a29918a187b2436da31b2f5cd4f7c8" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLVectorFloat32T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLVectorFloat32T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="165" column="18" declfile="src/ml_array.c" declline="165" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a1894f3c7f43b008367dac71f2f14dfc0" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLVectorFloat64T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLVectorFloat64T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="166" column="18" declfile="src/ml_array.c" declline="166" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a169e7c168bae66ccb7e66e2f8a72f2ea" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLVectorMutableUInt8T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLVectorMutableUInt8T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="171" column="18" declfile="src/ml_array.c" declline="171" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a97175b9fa5a9d9fbc97518e0bfacd0e9" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLVectorMutableInt8T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLVectorMutableInt8T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="172" column="18" declfile="src/ml_array.c" declline="172" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a8a018c91a87fdc005a1a6ff1ea71dd87" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLVectorMutableUInt16T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLVectorMutableUInt16T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="173" column="18" declfile="src/ml_array.c" declline="173" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a2019d226e51ddff3145eb029ceb33272" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLVectorMutableInt16T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLVectorMutableInt16T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="174" column="18" declfile="src/ml_array.c" declline="174" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1af25bb705b5f480b0ae304738ab64ee8e" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLVectorMutableUInt32T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLVectorMutableUInt32T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="175" column="18" declfile="src/ml_array.c" declline="175" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a0df80a9b23cc93f3e569cd3580e6d5d2" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLVectorMutableInt32T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLVectorMutableInt32T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="176" column="18" declfile="src/ml_array.c" declline="176" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a1046a1e1904ae694c0ca5e3b0582a126" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLVectorMutableUInt64T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLVectorMutableUInt64T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="177" column="18" declfile="src/ml_array.c" declline="177" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a9aebbf3511457c7d05562486429e66ff" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLVectorMutableInt64T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLVectorMutableInt64T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="178" column="18" declfile="src/ml_array.c" declline="178" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a9bdee19da3dc098a0f57fc931fa50009" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLVectorMutableFloat32T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLVectorMutableFloat32T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="179" column="18" declfile="src/ml_array.c" declline="179" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a8db9bdbb1825660edfbf3d359b166ec2" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLVectorMutableFloat64T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLVectorMutableFloat64T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="180" column="18" declfile="src/ml_array.c" declline="180" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1af0cb1e9626200e2e198e8c8c544d5b71" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLMatrixUInt8T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLMatrixUInt8T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="184" column="18" declfile="src/ml_array.c" declline="184" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a5264d888feebf9f124ea697b034ff047" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLMatrixInt8T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLMatrixInt8T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="185" column="18" declfile="src/ml_array.c" declline="185" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a4f8cc3e5d76af78f01b6809ec1999be6" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLMatrixUInt16T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLMatrixUInt16T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="186" column="18" declfile="src/ml_array.c" declline="186" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a6da5714f1a799d8cd5eb0d5a5afd66a8" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLMatrixInt16T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLMatrixInt16T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="187" column="18" declfile="src/ml_array.c" declline="187" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a03d834cf0aae9aa2e335be8c0581911c" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLMatrixUInt32T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLMatrixUInt32T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="188" column="18" declfile="src/ml_array.c" declline="188" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1adfa9a901812d17d0918659a3885ebcc7" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLMatrixInt32T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLMatrixInt32T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="189" column="18" declfile="src/ml_array.c" declline="189" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1aa5b7ce60173687862d35fafe02a5ddd6" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLMatrixUInt64T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLMatrixUInt64T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="190" column="18" declfile="src/ml_array.c" declline="190" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a728762ad038634edbcc57ce6184323df" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLMatrixInt64T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLMatrixInt64T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="191" column="18" declfile="src/ml_array.c" declline="191" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a023fabab7285bcde0304ea9c61ce7c2a" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLMatrixFloat32T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLMatrixFloat32T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="192" column="18" declfile="src/ml_array.c" declline="192" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a4f18854f3e58472f68176cec56fe9e81" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLMatrixFloat64T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLMatrixFloat64T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="193" column="18" declfile="src/ml_array.c" declline="193" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a68a6eb99220fc7db45e5ecd870cdeb88" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLMatrixMutableUInt8T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLMatrixMutableUInt8T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="198" column="18" declfile="src/ml_array.c" declline="198" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a1d15d726dc4d7374f1d185309e147d71" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLMatrixMutableInt8T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLMatrixMutableInt8T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="199" column="18" declfile="src/ml_array.c" declline="199" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a2bbfd7296ba64dac36f6b0b9ad17c462" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLMatrixMutableUInt16T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLMatrixMutableUInt16T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="200" column="18" declfile="src/ml_array.c" declline="200" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1ac304004fdceb61a2f5fbe777497cc6a7" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLMatrixMutableInt16T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLMatrixMutableInt16T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="201" column="18" declfile="src/ml_array.c" declline="201" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a726089c0ea7a075699c2a072d224cde2" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLMatrixMutableUInt32T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLMatrixMutableUInt32T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="202" column="18" declfile="src/ml_array.c" declline="202" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a6333b44128096ef14abc4ac4896d5723" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLMatrixMutableInt32T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLMatrixMutableInt32T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="203" column="18" declfile="src/ml_array.c" declline="203" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1ad07602289c630c282252d543c84e4bd3" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLMatrixMutableUInt64T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLMatrixMutableUInt64T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="204" column="18" declfile="src/ml_array.c" declline="204" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a9430e58d6b235988759ad398692516e5" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLMatrixMutableInt64T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLMatrixMutableInt64T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="205" column="18" declfile="src/ml_array.c" declline="205" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1af46b18d9b3526baf1c441983b73c7214" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLMatrixMutableFloat32T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLMatrixMutableFloat32T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="206" column="18" declfile="src/ml_array.c" declline="206" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a8e4b4397de1f708cb023d138b69641d3" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLMatrixMutableFloat64T[]</definition>
        <argsstring>[]</argsstring>
        <name>MLMatrixMutableFloat64T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="207" column="18" declfile="src/ml_array.c" declline="207" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1afd2789bad7f395de92a89cd7e744f053" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLArrayAnyT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayAnyT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="209" column="18" declfile="src/ml_array.c" declline="209" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a6c1481e603e7eff9f2e3af59d02b3165" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLVectorAnyT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLVectorAnyT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="210" column="18" declfile="src/ml_array.c" declline="210" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1af0f033580058fcd90d65945ce90f4f1a" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLMatrixAnyT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLMatrixAnyT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="211" column="18" declfile="src/ml_array.c" declline="211" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a2aba4fb6d853fee6603d6a2ed331a1b6" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLArrayMutableAnyT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayMutableAnyT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="213" column="18" declfile="src/ml_array.c" declline="213" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a62201a55a19ff85b9ed1c6374d468ea9" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLVectorMutableAnyT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLVectorMutableAnyT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="214" column="18" declfile="src/ml_array.c" declline="214" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1acb2ac9edecfadce15ff76ca9ed4a6e48" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLMatrixMutableAnyT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLMatrixMutableAnyT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="215" column="18" declfile="src/ml_array.c" declline="215" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a52cca795aefbeae57b03bb83d7d2c924" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t MLArraySizes[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArraySizes</name>
        <initializer>= {
	[ML_ARRAY_FORMAT_NONE] = sizeof(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *),
	[ML_ARRAY_FORMAT_U8] = sizeof(uint8_t),
	[ML_ARRAY_FORMAT_I8] = sizeof(int8_t),
	[ML_ARRAY_FORMAT_U16] = sizeof(uint16_t),
	[ML_ARRAY_FORMAT_I16] = sizeof(int16_t),
	[ML_ARRAY_FORMAT_U32] = sizeof(uint32_t),
	[ML_ARRAY_FORMAT_I32] = sizeof(int32_t),
	[ML_ARRAY_FORMAT_U64] = sizeof(uint64_t),
	[ML_ARRAY_FORMAT_I64] = sizeof(int64_t),
	[ML_ARRAY_FORMAT_F32] = sizeof(float),
	[ML_ARRAY_FORMAT_F64] = sizeof(double),




	[ML_ARRAY_FORMAT_ANY] = sizeof(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *)
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="217" column="8" bodyfile="src/ml_array.c" bodystart="217" bodyend="234"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a1c804cbb60f1a5f344f7b5758a77e89d" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t* RangeMethod</definition>
        <argsstring></argsstring>
        <name>RangeMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="878" column="19" declfile="src/ml_array.c" declline="878" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a4317966664cd9f428f74bae5f641974b" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t* MulMethod</definition>
        <argsstring></argsstring>
        <name>MulMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="879" column="19" declfile="src/ml_array.c" declline="879" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a9710848706b25b0786cc8252fc5008b5" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t* AddMethod</definition>
        <argsstring></argsstring>
        <name>AddMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="880" column="19" declfile="src/ml_array.c" declline="880" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1ad7cbc68adf3499595bc1c1309e5bd270" prot="public" static="yes" mutable="no">
        <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref></type>
        <definition>ml_array_t MLArrayNil[1]</definition>
        <argsstring>[1]</argsstring>
        <name>MLArrayNil</name>
        <initializer>= {{
	{MLArrayNilT, NULL, 0}, -1, ML_ARRAY_FORMAT_NONE
}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="951" column="19" bodyfile="src/ml_array.c" bodystart="951" bodyend="953"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a1f7d240bb02684ec9aa25003bff90647" prot="public" static="no" mutable="no">
        <type>ML_ARITH_METHOD *</type>
        <definition>ML_ARITH_METHOD* ML_ARRAY_FORMAT_I64</definition>
        <argsstring></argsstring>
        <name>ML_ARRAY_FORMAT_I64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4360" column="1" bodyfile="src/ml_array.c" bodystart="4360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1ad516264a4646ecdac800ba40974242cd" prot="public" static="yes" mutable="no">
        <type>void **</type>
        <definition>void** MLArrayGetters[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayGetters</name>
        <initializer>= {
	[ML_ARRAY_FORMAT_U8] = (void *)MLArrayGettersUInt8,
	[ML_ARRAY_FORMAT_I8] = (void *)MLArrayGettersInt8,
	[ML_ARRAY_FORMAT_U16] = (void *)MLArrayGettersUInt16,
	[ML_ARRAY_FORMAT_I16] = (void *)MLArrayGettersInt16,
	[ML_ARRAY_FORMAT_U32] = (void *)MLArrayGettersUInt32,
	[ML_ARRAY_FORMAT_I32] = (void *)MLArrayGettersInt32,
	[ML_ARRAY_FORMAT_U64] = (void *)MLArrayGettersUInt64,
	[ML_ARRAY_FORMAT_I64] = (void *)MLArrayGettersInt64,
	[ML_ARRAY_FORMAT_F32] = (void *)MLArrayGettersFloat32,
	[ML_ARRAY_FORMAT_F64] = (void *)MLArrayGettersFloat64,




	[ML_ARRAY_FORMAT_ANY] = (void *)MLArrayGettersAny
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6045" column="13" bodyfile="src/ml_array.c" bodystart="6045" bodyend="6061"/>
      </memberdef>
      <memberdef kind="variable" id="ml__array_8c_1a333584ed888652ba1fd59b904a82d585" prot="public" static="yes" mutable="no">
        <type>ml_array_dot_fn</type>
        <definition>ml_array_dot_fn MLArrayDotFns[]</definition>
        <argsstring>[]</argsstring>
        <name>MLArrayDotFns</name>
        <initializer>= {
	[ML_ARRAY_FORMAT_U8] = (ml_array_dot_fn)ml_array_dot_uint8_t,
	[ML_ARRAY_FORMAT_I8] = (ml_array_dot_fn)ml_array_dot_int8_t,
	[ML_ARRAY_FORMAT_U16] = (ml_array_dot_fn)ml_array_dot_uint16_t,
	[ML_ARRAY_FORMAT_I16] = (ml_array_dot_fn)ml_array_dot_int16_t,
	[ML_ARRAY_FORMAT_U32] = (ml_array_dot_fn)ml_array_dot_uint32_t,
	[ML_ARRAY_FORMAT_I32] = (ml_array_dot_fn)ml_array_dot_int32_t,
	[ML_ARRAY_FORMAT_U64] = (ml_array_dot_fn)ml_array_dot_uint64_t,
	[ML_ARRAY_FORMAT_I64] = (ml_array_dot_fn)ml_array_dot_int64_t,
	[ML_ARRAY_FORMAT_F32] = (ml_array_dot_fn)ml_array_dot_float,
	[ML_ARRAY_FORMAT_F64] = (ml_array_dot_fn)ml_array_dot_double,




	[ML_ARRAY_FORMAT_ANY] = (ml_array_dot_fn)ml_array_dot_any
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6401" column="24" bodyfile="src/ml_array.c" bodystart="6401" bodyend="6417"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__array_8c_1a74663b46d47aa3935bc6e0510ac88d1d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_array_of_fn</definition>
        <argsstring>(void *Data, int Count, ml_value_t **Args)</argsstring>
        <name>ml_array_of_fn</name>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5111" column="19" bodyfile="src/ml_array.c" bodystart="5111" bodyend="5132" declfile="src/ml_array.c" declline="20" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a810a4c224e21d2acb70dfed8e45cb4fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CFUNCTION</definition>
        <argsstring>(MLArray, NULL, ml_array_of_fn)</argsstring>
        <name>ML_CFUNCTION</name>
        <param>
          <type>MLArray</type>
        </param>
        <param>
          <type>NULL</type>
        </param>
        <param>
          <type>ml_array_of_fn</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="22" column="1" declfile="src/ml_array.c" declline="22" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a69440e144ba7c4032871896868cd6099" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLArrayT,(MLAddressT, MLSequenceT), &quot;array&quot;,.Constructor=(ml_value_t *) MLArray)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>(MLAddressT, MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;array&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLArray</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="29" column="1" declfile="src/ml_array.c" declline="29" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a70662d62ecb5ab1afbdf1f9a7dd7c1e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLArrayMutableT,(MLArrayT, MLBufferT), &quot;array::mutable&quot;,.Constructor=(ml_value_t *) MLArray)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLArrayMutableT</type>
        </param>
        <param>
          <type>(MLArrayT, MLBufferT)</type>
        </param>
        <param>
          <type>&quot;array::mutable&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLArray</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="34" column="1" declfile="src/ml_array.c" declline="34" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a7163e2cf4e49764553007298a7435796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLVectorT,(MLArrayT), &quot;vector&quot;,.Constructor=(ml_value_t *) MLArray)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLVectorT</type>
        </param>
        <param>
          <type>(MLArrayT)</type>
        </param>
        <param>
          <type>&quot;vector&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLArray</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="38" column="1" declfile="src/ml_array.c" declline="38" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aa5688ffdf09cda6fd8b21cb68bd2826d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLVectorMutableT,(MLVectorT, MLArrayMutableT), &quot;vector::mutable&quot;,.Constructor=(ml_value_t *) MLArray)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLVectorMutableT</type>
        </param>
        <param>
          <type>(MLVectorT, MLArrayMutableT)</type>
        </param>
        <param>
          <type>&quot;vector::mutable&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLArray</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="43" column="1" declfile="src/ml_array.c" declline="43" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a10884f6fe237d6c04d2380988af53893" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLMatrixT,(MLArrayT), &quot;matrix&quot;,.Constructor=(ml_value_t *) MLArray)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLMatrixT</type>
        </param>
        <param>
          <type>(MLArrayT)</type>
        </param>
        <param>
          <type>&quot;matrix&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLArray</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="47" column="1" declfile="src/ml_array.c" declline="47" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a8d46a579a9009d349941d8e7cfe5c3ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLMatrixMutableT,(MLMatrixT, MLArrayMutableT), &quot;matrix::mutable&quot;,.Constructor=(ml_value_t *) MLArray)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLMatrixMutableT</type>
        </param>
        <param>
          <type>(MLMatrixT, MLArrayMutableT)</type>
        </param>
        <param>
          <type>&quot;matrix::mutable&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLArray</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="52" column="1" declfile="src/ml_array.c" declline="52" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1afc8688ef7f1ef29045e293d512fb0e52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLArrayRealT,(MLArrayT), &quot;array::mutable::real&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLArrayRealT</type>
        </param>
        <param>
          <type>(MLArrayT)</type>
        </param>
        <param>
          <type>&quot;array::mutable::real&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="108" column="1" declfile="src/ml_array.c" declline="108" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ac982d7c3c84eb6f363bf26f10fed8f0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLArrayMutableRealT,(MLArrayRealT, MLArrayMutableT), &quot;array::mutable::real&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLArrayMutableRealT</type>
        </param>
        <param>
          <type>(MLArrayRealT, MLArrayMutableT)</type>
        </param>
        <param>
          <type>&quot;array::mutable::real&quot;</type>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="111" column="1" declfile="src/ml_array.c" declline="111" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a98c38efac3957eb88c6b7c9c5cedc1a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLVectorRealT,(MLArrayRealT, MLVectorT), &quot;vector::real&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLVectorRealT</type>
        </param>
        <param>
          <type>(MLArrayRealT, MLVectorT)</type>
        </param>
        <param>
          <type>&quot;vector::real&quot;</type>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="114" column="1" declfile="src/ml_array.c" declline="114" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ac3c1ed3c074e04d1e8cc10fbd554c884" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLVectorMutableRealT,(MLVectorRealT, MLArrayMutableRealT, MLVectorMutableT), &quot;vector::mutable::real&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLVectorMutableRealT</type>
        </param>
        <param>
          <type>(MLVectorRealT, MLArrayMutableRealT, MLVectorMutableT)</type>
        </param>
        <param>
          <type>&quot;vector::mutable::real&quot;</type>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="117" column="1" declfile="src/ml_array.c" declline="117" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a14434e6d9f3def069fdce2cd30c1bada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLMatrixRealT,(MLArrayRealT, MLMatrixT), &quot;matrix::real&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLMatrixRealT</type>
        </param>
        <param>
          <type>(MLArrayRealT, MLMatrixT)</type>
        </param>
        <param>
          <type>&quot;matrix::real&quot;</type>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="120" column="1" declfile="src/ml_array.c" declline="120" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ae360fc7d3df24153de7de629e46d7280" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLMatrixMutableRealT,(MLMatrixRealT, MLArrayMutableRealT, MLMatrixMutableT), &quot;matrix::mutable::real&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLMatrixMutableRealT</type>
        </param>
        <param>
          <type>(MLMatrixRealT, MLArrayMutableRealT, MLMatrixMutableT)</type>
        </param>
        <param>
          <type>&quot;matrix::mutable::real&quot;</type>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="123" column="1" declfile="src/ml_array.c" declline="123" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a69ab7c3e0fa1bb740f6c870913eaa39b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLArrayIntegerT,(MLArrayRealT), &quot;array::integer&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLArrayIntegerT</type>
        </param>
        <param>
          <type>(MLArrayRealT)</type>
        </param>
        <param>
          <type>&quot;array::integer&quot;</type>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="128" column="1" declfile="src/ml_array.c" declline="128" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a4233b358237c14e8a1e491606351f1f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLArrayMutableIntegerT,(MLArrayIntegerT, MLArrayMutableRealT), &quot;array::mutable::integer&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLArrayMutableIntegerT</type>
        </param>
        <param>
          <type>(MLArrayIntegerT, MLArrayMutableRealT)</type>
        </param>
        <param>
          <type>&quot;array::mutable::integer&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="141" column="1" declfile="src/ml_array.c" declline="141" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a524d19e09694264d78ebb1bfbf70fd07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLVectorIntegerT,(MLVectorRealT), &quot;vector::integer&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLVectorIntegerT</type>
        </param>
        <param>
          <type>(MLVectorRealT)</type>
        </param>
        <param>
          <type>&quot;vector::integer&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="155" column="1" declfile="src/ml_array.c" declline="155" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a1b0e171a44588831397dcc675799fb1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLVectorMutableIntegerT,(MLVectorIntegerT, MLVectorMutableRealT), &quot;vector::mutable::integer&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLVectorMutableIntegerT</type>
        </param>
        <param>
          <type>(MLVectorIntegerT, MLVectorMutableRealT)</type>
        </param>
        <param>
          <type>&quot;vector::mutable::integer&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="168" column="1" declfile="src/ml_array.c" declline="168" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a815a973558ced90ab52976244168cb28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLMatrixIntegerT,(MLMatrixRealT), &quot;matrix::integer&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLMatrixIntegerT</type>
        </param>
        <param>
          <type>(MLMatrixRealT)</type>
        </param>
        <param>
          <type>&quot;matrix::integer&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="182" column="1" declfile="src/ml_array.c" declline="182" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1acb76f7b7ae690e52f0477d96639edc16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLMatrixMutableIntegerT,(MLMatrixIntegerT, MLMatrixMutableRealT), &quot;matrix::mutable::integer&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLMatrixMutableIntegerT</type>
        </param>
        <param>
          <type>(MLMatrixIntegerT, MLMatrixMutableRealT)</type>
        </param>
        <param>
          <type>&quot;matrix::mutable::integer&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="195" column="1" declfile="src/ml_array.c" declline="195" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a4224afcc9d75b4e84daddbfa6eb44176" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_TYPES</definition>
        <argsstring>(Array)</argsstring>
        <name>ML_ARRAY_TYPES</name>
        <param>
          <type>Array</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="276" column="1" declfile="src/ml_array.c" declline="276" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ae861042016c3ab245873607074594b25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_TYPES</definition>
        <argsstring>(ArrayMutable)</argsstring>
        <name>ML_ARRAY_TYPES</name>
        <param>
          <type>ArrayMutable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="277" column="1" declfile="src/ml_array.c" declline="277" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ac2bb4fe870f9e20f533c34e9e3fc5ba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_TYPES</definition>
        <argsstring>(Vector)</argsstring>
        <name>ML_ARRAY_TYPES</name>
        <param>
          <type>Vector</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="278" column="1" declfile="src/ml_array.c" declline="278" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a097d3c1f164dadffae76f7fcdbc990f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_TYPES</definition>
        <argsstring>(VectorMutable)</argsstring>
        <name>ML_ARRAY_TYPES</name>
        <param>
          <type>VectorMutable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="279" column="1" declfile="src/ml_array.c" declline="279" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a76722539de85a4fccfd20e585fc7849d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_TYPES</definition>
        <argsstring>(Matrix)</argsstring>
        <name>ML_ARRAY_TYPES</name>
        <param>
          <type>Matrix</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="280" column="1" declfile="src/ml_array.c" declline="280" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ab358eea31053ee85281cfc5c7034cddd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_TYPES</definition>
        <argsstring>(MatrixMutable)</argsstring>
        <name>ML_ARRAY_TYPES</name>
        <param>
          <type>MatrixMutable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="281" column="1" declfile="src/ml_array.c" declline="281" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1adebb419d2516d1c080dc72f61501892d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ml_array_format_t</type>
        <definition>static ml_array_format_t ml_array_format</definition>
        <argsstring>(ml_type_t *Type)</argsstring>
        <name>ml_array_format</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="283" column="26" bodyfile="src/ml_array.c" bodystart="283" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1af51cede71f829e3926b6acf5ccfb7e05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
        <definition>ml_array_t * ml_array_alloc</definition>
        <argsstring>(ml_array_format_t Format, int Degree)</argsstring>
        <name>ml_array_alloc</name>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Degree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="295" column="12" bodyfile="src/ml_array.c" bodystart="295" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a0ddc245f162901424627ab8fb4a8567f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void * array_alloc</definition>
        <argsstring>(ml_array_format_t Format, size_t Size)</argsstring>
        <name>array_alloc</name>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="309" column="13" bodyfile="src/ml_array.c" bodystart="309" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ae9e4e1f9d8c3d1da1402071aaf0fdfa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
        <definition>ml_array_t * ml_array</definition>
        <argsstring>(ml_array_format_t Format, int Degree,...)</argsstring>
        <name>ml_array</name>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Degree</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="314" column="12" bodyfile="src/ml_array.c" bodystart="314" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a944939c5455093f0173b7ed6d8720d4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ml_array_degree</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_array_degree</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="330" column="5" bodyfile="src/ml_array.c" bodystart="330" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a68ad7fb36820e07e44695b8adc760a31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ml_array_size</definition>
        <argsstring>(ml_value_t *Value, int Dim)</argsstring>
        <name>ml_array_size</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="334" column="5" bodyfile="src/ml_array.c" bodystart="334" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a6bbef3c4c04e71579a9996349cc67bd6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_array_init_run</definition>
        <argsstring>(ml_array_init_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_array_init_run</name>
        <param>
          <type><ref refid="structml__array__init__state__t" kindref="compound">ml_array_init_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="348" column="13" bodyfile="src/ml_array.c" bodystart="348" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a1eb45e693fc93f857e5613842a5e254a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int array_copy</definition>
        <argsstring>(ml_array_t *Target, ml_array_t *Source)</argsstring>
        <name>array_copy</name>
        <param>
          <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
          <declname>Target</declname>
        </param>
        <param>
          <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
          <declname>Source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="3052" column="12" bodyfile="src/ml_array.c" bodystart="3052" bodyend="3069" declfile="src/ml_array.c" declline="422" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1af5aea1781da5b3eb7970df3b0fb0f16e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_array_typed_new_fnx</definition>
        <argsstring>(ml_state_t *Caller, void *Data, int Count, ml_value_t **Args)</argsstring>
        <name>ml_array_typed_new_fnx</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="424" column="13" bodyfile="src/ml_array.c" bodystart="424" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aec71b461d6a4e1d08912690785de2d24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(MLArrayNew)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>MLArrayNew</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="512" column="1" bodyfile="src/ml_array.c" bodystart="512" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a7caf2f2c33a077e29e0783d6e00d971e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLArrayWrap)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLArrayWrap</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="522" column="1" bodyfile="src/ml_array.c" bodystart="522" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ac1dc745a70ef2a9bda77f71422e8e70e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;degree&quot;, MLArrayT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;degree&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="571" column="1" bodyfile="src/ml_array.c" bodystart="571" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a4a19e493b925c05d3ebe3a5db43544ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;shape&quot;, MLArrayT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;shape&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="581" column="1" bodyfile="src/ml_array.c" bodystart="581" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1afc6c4a2929f16d98ee9f096109cc9878" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;count&quot;, MLArrayT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;count&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="595" column="1" bodyfile="src/ml_array.c" bodystart="595" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aa3cbc794058c96f9dbe0572e76847e32" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
        <definition>static ml_array_t * ml_array_transpose</definition>
        <argsstring>(ml_array_t *Source)</argsstring>
        <name>ml_array_transpose</name>
        <param>
          <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
          <declname>Source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="607" column="19" bodyfile="src/ml_array.c" bodystart="607" bodyend="615"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a8efcdc24c297423b2802662fb07736fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;^&quot;, MLArrayT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;^&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="617" column="1" bodyfile="src/ml_array.c" bodystart="617" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a60be4b675f9fe7d2e4ad73dd96d7ff47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;permute&quot;, MLArrayT, MLListT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;permute&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>MLListT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="626" column="1" bodyfile="src/ml_array.c" bodystart="626" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a9d787b3b0761a7e05e9e79c6ff5c02a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(&quot;permute&quot;, MLArrayT, MLIntegerT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>&quot;permute&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="658" column="1" bodyfile="src/ml_array.c" bodystart="658" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aecd2145c3991e45af18afba55b4e1548" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;swap&quot;, MLArrayT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;swap&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="689" column="1" bodyfile="src/ml_array.c" bodystart="689" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a38b3ec0263ddb362e3486b42b7ced696" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;swap&quot;, MLArrayT, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;swap&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="698" column="1" bodyfile="src/ml_array.c" bodystart="698" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a2771cd08a7ce6f26fc74f7c28b074cf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;reverse&quot;, MLArrayT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;reverse&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="720" column="1" bodyfile="src/ml_array.c" bodystart="720" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a7168a2d9f76a99b0cfbfb7ae85ab2b18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;expand&quot;, MLArrayT, MLListT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;expand&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>MLListT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="745" column="1" bodyfile="src/ml_array.c" bodystart="745" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ac0b8227a7e0b1b7f76f9fbafe117dbca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;split&quot;, MLArrayT, MLIntegerT, MLListT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;split&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLListT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="780" column="1" bodyfile="src/ml_array.c" bodystart="780" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aea5d5040efad3fd781fdb602a5f6be6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;join&quot;, MLArrayT, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;join&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="817" column="1" bodyfile="src/ml_array.c" bodystart="817" bodyend="849"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a5f2231950e32c9eb4a47a67ec400ba73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;strides&quot;, MLArrayT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;strides&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="851" column="1" bodyfile="src/ml_array.c" bodystart="851" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a1413ab4fbbcc442ad2df6969b7f3bd77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(SubMethod, &quot;-&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>SubMethod</type>
        </param>
        <param>
          <type>&quot;-&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="881" column="1" declfile="src/ml_array.c" declline="881" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1afb0ae2172c88ddc13dcd23c82bb5ac1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(DivMethod, &quot;/&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>DivMethod</type>
        </param>
        <param>
          <type>&quot;/&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="882" column="1" declfile="src/ml_array.c" declline="882" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1af7bb2020cc5ab93d44ab41a7c5659279" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_array_value</definition>
        <argsstring>(ml_array_t *Array, char *Address)</argsstring>
        <name>ml_array_value</name>
        <param>
          <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
          <declname>Array</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>Address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="884" column="19" bodyfile="src/ml_array.c" bodystart="884" bodyend="887"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a4a1f3d8a184518874a8327406cfb0ffe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_array_ref_deref</definition>
        <argsstring>(ml_array_ref_t *Ref)</argsstring>
        <name>ml_array_ref_deref</name>
        <param>
          <type><ref refid="structml__array__ref__t" kindref="compound">ml_array_ref_t</ref> *</type>
          <declname>Ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2354" column="19" bodyfile="src/ml_array.c" bodystart="2354" bodyend="2373" declfile="src/ml_array.c" declline="894" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1af5c703a617c8e14aad5c6ef6e7b8ea0e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_array_ref_assign</definition>
        <argsstring>(ml_state_t *Caller, ml_array_ref_t *Ref, ml_value_t *Value)</argsstring>
        <name>ml_array_ref_assign</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__array__ref__t" kindref="compound">ml_array_ref_t</ref> *</type>
          <declname>Ref</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2375" column="13" bodyfile="src/ml_array.c" bodystart="2375" bodyend="2394" declfile="src/ml_array.c" declline="896" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a830e8213994dbd2541f5b0b5b9d6d0d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLArrayRefT,(), &quot;array::ref&quot;,.deref=(void *) ml_array_ref_deref,.assign=(void *) ml_array_ref_assign)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLArrayRefT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;array::ref&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>deref</declname>
          <defval>(void *) ml_array_ref_deref</defval>
          <briefdescription><para>internal </para>
</briefdescription>
        </param>
        <param>
          <type>.</type>
          <declname>assign</declname>
          <defval>(void *) ml_array_ref_assign</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="898" column="1" declfile="src/ml_array.c" declline="898" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a8eab20bf9d4dd26fdc0b1dac0e6a7330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__array__ref__t" kindref="compound">ml_array_ref_t</ref> *</type>
        <definition>ml_array_ref_t * ml_array_ref_alloc</definition>
        <argsstring>(ml_array_format_t Format, int Degree)</argsstring>
        <name>ml_array_ref_alloc</name>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Degree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="904" column="16" bodyfile="src/ml_array.c" bodystart="904" bodyend="917"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aaf4e60e73555e6e73d93d1e07045c7f8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_array_index_get</definition>
        <argsstring>(ml_value_t *Index, ml_array_indexer_t *Indexer)</argsstring>
        <name>ml_array_index_get</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Index</declname>
        </param>
        <param>
          <type><ref refid="structml__array__indexer__t" kindref="compound">ml_array_indexer_t</ref> *</type>
          <declname>Indexer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="924" column="19" bodyfile="src/ml_array.c" bodystart="924" bodyend="928"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a4c5a7c94cbe40943bcb592c6262c912d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_array_index_get, MLNilT, ml_value_t *Index, ml_array_indexer_t *Indexer)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_index_get</type>
        </param>
        <param>
          <type>MLNilT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Index</declname>
        </param>
        <param>
          <type><ref refid="structml__array__indexer__t" kindref="compound">ml_array_indexer_t</ref> *</type>
          <declname>Indexer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="930" column="19" bodyfile="src/ml_array.c" bodystart="930" bodyend="935"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ab44c7cc64e7a6682589d096c9f7dc864" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_array_nil_deref</definition>
        <argsstring>(ml_value_t *Array)</argsstring>
        <name>ml_array_nil_deref</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="937" column="19" bodyfile="src/ml_array.c" bodystart="937" bodyend="939"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a81adf0fdfa3e5b334d7f1d93845a56ec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_array_nil_assign</definition>
        <argsstring>(ml_state_t *Caller, ml_value_t *Array, ml_value_t *Value)</argsstring>
        <name>ml_array_nil_assign</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Array</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="941" column="13" bodyfile="src/ml_array.c" bodystart="941" bodyend="943"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a7ef1a40a85f2f81af865623ede9a3cba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLArrayNilT,(MLArrayT), &quot;array::nil&quot;,.deref=(void *) ml_array_nil_deref,.assign=(void *) ml_array_nil_assign)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLArrayNilT</type>
        </param>
        <param>
          <type>(MLArrayT)</type>
        </param>
        <param>
          <type>&quot;array::nil&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>deref</declname>
          <defval>(void *) ml_array_nil_deref</defval>
          <briefdescription><para>internal </para>
</briefdescription>
        </param>
        <param>
          <type>.</type>
          <declname>assign</declname>
          <defval>(void *) ml_array_nil_assign</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="945" column="1" declfile="src/ml_array.c" declline="945" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a5ee8adbf27e8675ff47b562253ac7cc7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_array_index_get, MLIntegerT, ml_value_t *Index, ml_array_indexer_t *Indexer)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_index_get</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Index</declname>
        </param>
        <param>
          <type><ref refid="structml__array__indexer__t" kindref="compound">ml_array_indexer_t</ref> *</type>
          <declname>Indexer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="955" column="19" bodyfile="src/ml_array.c" bodystart="955" bodyend="964"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aebfa795ab1bbb42b1c62abfae591d419" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_array_index_get, MLListT, ml_value_t *Index, ml_array_indexer_t *Indexer)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_index_get</type>
        </param>
        <param>
          <type>MLListT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Index</declname>
        </param>
        <param>
          <type><ref refid="structml__array__indexer__t" kindref="compound">ml_array_indexer_t</ref> *</type>
          <declname>Indexer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="966" column="19" bodyfile="src/ml_array.c" bodystart="966" bodyend="1022"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a57cfd3ad2d36bb2ba7f0619123dc43a5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_array_index_get, MLIntegerRangeT, ml_integer_range_t *Range, ml_array_indexer_t *Indexer)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_index_get</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <param>
          <type><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref> *</type>
          <declname>Range</declname>
        </param>
        <param>
          <type><ref refid="structml__array__indexer__t" kindref="compound">ml_array_indexer_t</ref> *</type>
          <declname>Indexer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1024" column="19" bodyfile="src/ml_array.c" bodystart="1024" bodyend="1052"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a4b5733bbe0466cf5cf45b82274ca165b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_array_index_get, MLTupleT, ml_tuple_t *Tuple, ml_array_indexer_t *Indexer)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_index_get</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <param>
          <type><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref> *</type>
          <declname>Tuple</declname>
        </param>
        <param>
          <type><ref refid="structml__array__indexer__t" kindref="compound">ml_array_indexer_t</ref> *</type>
          <declname>Indexer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1054" column="19" bodyfile="src/ml_array.c" bodystart="1054" bodyend="1069"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aa40c00508361dee8875beb15a60f5721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_OFFSETS_NONZERO</definition>
        <argsstring>(uint8_t, 0)</argsstring>
        <name>ARRAY_OFFSETS_NONZERO</name>
        <param>
          <type>uint8_t</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1136" column="1" declfile="src/ml_array.c" declline="1136" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aa961c767c06a73f49c2c4e0485a1d15a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_OFFSETS_NONZERO</definition>
        <argsstring>(int8_t, 0)</argsstring>
        <name>ARRAY_OFFSETS_NONZERO</name>
        <param>
          <type>int8_t</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1137" column="1" declfile="src/ml_array.c" declline="1137" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a9b03ae31328548caac6f802122b0c5fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_OFFSETS_NONZERO</definition>
        <argsstring>(uint16_t, 0)</argsstring>
        <name>ARRAY_OFFSETS_NONZERO</name>
        <param>
          <type>uint16_t</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1138" column="1" declfile="src/ml_array.c" declline="1138" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a4d7b07891e75d7cc1249b70d1e22ad98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_OFFSETS_NONZERO</definition>
        <argsstring>(int16_t, 0)</argsstring>
        <name>ARRAY_OFFSETS_NONZERO</name>
        <param>
          <type>int16_t</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1139" column="1" declfile="src/ml_array.c" declline="1139" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a04c80016297dfb0b1abc763363bf4ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_OFFSETS_NONZERO</definition>
        <argsstring>(uint32_t, 0)</argsstring>
        <name>ARRAY_OFFSETS_NONZERO</name>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1140" column="1" declfile="src/ml_array.c" declline="1140" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a83f4178df4d3f5a02525b9cf53504818" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_OFFSETS_NONZERO</definition>
        <argsstring>(int32_t, 0)</argsstring>
        <name>ARRAY_OFFSETS_NONZERO</name>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1141" column="1" declfile="src/ml_array.c" declline="1141" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1afb466e8948caa90243924a914789d5d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_OFFSETS_NONZERO</definition>
        <argsstring>(uint64_t, 0)</argsstring>
        <name>ARRAY_OFFSETS_NONZERO</name>
        <param>
          <type>uint64_t</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1142" column="1" declfile="src/ml_array.c" declline="1142" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ae875ce447432bfe5fbe8b27cbea648ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_OFFSETS_NONZERO</definition>
        <argsstring>(int64_t, 0)</argsstring>
        <name>ARRAY_OFFSETS_NONZERO</name>
        <param>
          <type>int64_t</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1143" column="1" declfile="src/ml_array.c" declline="1143" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a4c8f5884927da7952e4d0c315d6c3cd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_OFFSETS_NONZERO</definition>
        <argsstring>(float, 0)</argsstring>
        <name>ARRAY_OFFSETS_NONZERO</name>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1144" column="1" declfile="src/ml_array.c" declline="1144" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a557c1c2bb99324732d52714ecfd2e936" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_OFFSETS_NONZERO</definition>
        <argsstring>(double, 0)</argsstring>
        <name>ARRAY_OFFSETS_NONZERO</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1145" column="1" declfile="src/ml_array.c" declline="1145" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a21e2d43e361fc837f23e3c69bc50d365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_OFFSETS_NONZERO</definition>
        <argsstring>(any, MLNil)</argsstring>
        <name>ARRAY_OFFSETS_NONZERO</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">any</ref></type>
        </param>
        <param>
          <type>MLNil</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1154" column="1" declfile="src/ml_array.c" declline="1154" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a1adf05fa0932f8b68b9e5160e632923f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_array_count_nonzero</definition>
        <argsstring>(ml_array_t *A)</argsstring>
        <name>ml_array_count_nonzero</name>
        <param>
          <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1156" column="12" bodyfile="src/ml_array.c" bodystart="1156" bodyend="1189"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aeef84a9067b5974adaf5a11a76ba329e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>static int * ml_array_offsets_nonzero</definition>
        <argsstring>(ml_array_t *A, int *Offsets, ml_array_dimension_t *Source)</argsstring>
        <name>ml_array_offsets_nonzero</name>
        <param>
          <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>Offsets</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>Source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1191" column="12" bodyfile="src/ml_array.c" bodystart="1191" bodyend="1224"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a05bef42444c6eb20e389a8ed786db7ff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_array_index_get, MLArrayMutableInt8T, ml_array_t *Array, ml_array_indexer_t *Indexer)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_index_get</type>
        </param>
        <param>
          <type>MLArrayMutableInt8T</type>
        </param>
        <param>
          <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
          <declname>Array</declname>
        </param>
        <param>
          <type><ref refid="structml__array__indexer__t" kindref="compound">ml_array_indexer_t</ref> *</type>
          <declname>Indexer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1226" column="19" bodyfile="src/ml_array.c" bodystart="1226" bodyend="1245"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1af69023fe5382494a8804218104333df0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>static int * ml_array_to_indices</definition>
        <argsstring>(int *Indices, int Degree, ml_array_dimension_t *TargetDimension, int Offset, ml_array_dimension_t *IndexDimension, void *IndexData)</argsstring>
        <name>ml_array_to_indices</name>
        <param>
          <type>int *</type>
          <declname>Indices</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Degree</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>TargetDimension</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Offset</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>IndexDimension</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>IndexData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1247" column="12" bodyfile="src/ml_array.c" bodystart="1247" bodyend="1315"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a04a49cf8a7957db9e8dc8f5f4b0c7220" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_array_index_get, MLArrayMutableInt32T, ml_array_t *Array, ml_array_indexer_t *Indexer)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_index_get</type>
        </param>
        <param>
          <type>MLArrayMutableInt32T</type>
        </param>
        <param>
          <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
          <declname>Array</declname>
        </param>
        <param>
          <type><ref refid="structml__array__indexer__t" kindref="compound">ml_array_indexer_t</ref> *</type>
          <declname>Indexer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1317" column="19" bodyfile="src/ml_array.c" bodystart="1317" bodyend="1340"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ae9468ad377e7cabf0cecc26c51f5b6dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_array_index</definition>
        <argsstring>(ml_array_t *Source, int Count, ml_value_t **Indices)</argsstring>
        <name>ml_array_index</name>
        <param>
          <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
          <declname>Source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1342" column="12" bodyfile="src/ml_array.c" bodystart="1342" bodyend="1386"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aaeb61d748df30b54a6a0032ad99a617d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(&quot;[]&quot;, MLArrayT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>&quot;&quot;</type>
          <array>[]</array>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1388" column="1" bodyfile="src/ml_array.c" bodystart="1388" bodyend="1430"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a90c3534ee4d9b866cc72c184e7640690" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;[]&quot;, MLArrayT, MLMapT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&quot;</type>
          <array>[]</array>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>MLMapT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1432" column="1" bodyfile="src/ml_array.c" bodystart="1432" bodyend="1449"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1afa5d65af9ace5da8bfacd0eadfa73382" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char * ml_array_indexv</definition>
        <argsstring>(ml_array_t *Array, va_list Indices)</argsstring>
        <name>ml_array_indexv</name>
        <param>
          <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
          <declname>Array</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>Indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1451" column="13" bodyfile="src/ml_array.c" bodystart="1451" bodyend="1465"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a99d5517cdc3ba290f6868b5f8989f87e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_ITER_FN</definition>
        <argsstring>(UInt8T, uint8_t, ml_integer, ml_integer_value)</argsstring>
        <name>ML_ARRAY_ITER_FN</name>
        <param>
          <type>UInt8T</type>
        </param>
        <param>
          <type>uint8_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1495" column="1" declfile="src/ml_array.c" declline="1495" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a3f056f36666a47bbad02d08fdd5a0837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_ITER_FN</definition>
        <argsstring>(Int8T, int8_t, ml_integer, ml_integer_value)</argsstring>
        <name>ML_ARRAY_ITER_FN</name>
        <param>
          <type>Int8T</type>
        </param>
        <param>
          <type>int8_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1496" column="1" declfile="src/ml_array.c" declline="1496" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a67cbe64cc9ee6e79e08aa3eab3142caa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_ITER_FN</definition>
        <argsstring>(UInt16T, uint16_t, ml_integer, ml_integer_value)</argsstring>
        <name>ML_ARRAY_ITER_FN</name>
        <param>
          <type>UInt16T</type>
        </param>
        <param>
          <type>uint16_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1497" column="1" declfile="src/ml_array.c" declline="1497" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a6d2c35d58fd4cdb4726dfe51d0d2d845" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_ITER_FN</definition>
        <argsstring>(Int16T, int16_t, ml_integer, ml_integer_value)</argsstring>
        <name>ML_ARRAY_ITER_FN</name>
        <param>
          <type>Int16T</type>
        </param>
        <param>
          <type>int16_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1498" column="1" declfile="src/ml_array.c" declline="1498" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a8e449186736f950ebf6da32fd296c962" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_ITER_FN</definition>
        <argsstring>(UInt32T, uint32_t, ml_integer, ml_integer_value)</argsstring>
        <name>ML_ARRAY_ITER_FN</name>
        <param>
          <type>UInt32T</type>
        </param>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1499" column="1" declfile="src/ml_array.c" declline="1499" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a3efc74cba5bf5b9416c5f4c923ad321b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_ITER_FN</definition>
        <argsstring>(Int32T, int32_t, ml_integer, ml_integer_value)</argsstring>
        <name>ML_ARRAY_ITER_FN</name>
        <param>
          <type>Int32T</type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1500" column="1" declfile="src/ml_array.c" declline="1500" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a13d211211e281396df20307b57f61216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_ITER_FN</definition>
        <argsstring>(UInt64T, uint64_t, ml_integer, ml_integer_value)</argsstring>
        <name>ML_ARRAY_ITER_FN</name>
        <param>
          <type>UInt64T</type>
        </param>
        <param>
          <type>uint64_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1501" column="1" declfile="src/ml_array.c" declline="1501" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a92a929cf696c36a046035c3db90ab78b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_ITER_FN</definition>
        <argsstring>(Int64T, int64_t, ml_integer, ml_integer_value)</argsstring>
        <name>ML_ARRAY_ITER_FN</name>
        <param>
          <type>Int64T</type>
        </param>
        <param>
          <type>int64_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1502" column="1" declfile="src/ml_array.c" declline="1502" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a828b95ed472666c8661991a543763290" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_ITER_FN</definition>
        <argsstring>(Float32T, float, ml_real, ml_real_value)</argsstring>
        <name>ML_ARRAY_ITER_FN</name>
        <param>
          <type>Float32T</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>ml_real</type>
        </param>
        <param>
          <type>ml_real_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1503" column="1" declfile="src/ml_array.c" declline="1503" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a22af09f94fb9048a1b4a1604f1268af3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_ITER_FN</definition>
        <argsstring>(Float64T, double, ml_real, ml_real_value)</argsstring>
        <name>ML_ARRAY_ITER_FN</name>
        <param>
          <type>Float64T</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>ml_real</type>
        </param>
        <param>
          <type>ml_real_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1504" column="1" declfile="src/ml_array.c" declline="1504" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a8db219a8c85c5bdb43ccb4201ef3f23a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_ITER_FN</definition>
        <argsstring>(AnyT, any,,)</argsstring>
        <name>ML_ARRAY_ITER_FN</name>
        <param>
          <type>AnyT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">any</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1511" column="1" declfile="src/ml_array.c" declline="1511" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a9282bbd580ad9ed96c17547fac5deee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLArrayIteratorT,(), &quot;array::iterator&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLArrayIteratorT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;array::iterator&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1530" column="1" declfile="src/ml_array.c" declline="1530" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a98db275fff94da76c4c9e515821e074e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLArrayIteratorT, ml_state_t *Caller, ml_array_iterator_t *Iterator)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLArrayIteratorT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__array__iterator__t" kindref="compound">ml_array_iterator_t</ref> *</type>
          <declname>Iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1532" column="13" bodyfile="src/ml_array.c" bodystart="1532" bodyend="1552"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a18540a700b5d75b9e22b9400ca772702" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLArrayIteratorT, ml_state_t *Caller, ml_array_iterator_t *Iterator)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLArrayIteratorT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__array__iterator__t" kindref="compound">ml_array_iterator_t</ref> *</type>
          <declname>Iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1554" column="13" bodyfile="src/ml_array.c" bodystart="1554" bodyend="1561"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a6bbea55ee7169b6e72cb164cc5aed558" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLArrayIteratorT, ml_state_t *Caller, ml_array_iterator_t *Iterator)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLArrayIteratorT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__array__iterator__t" kindref="compound">ml_array_iterator_t</ref> *</type>
          <declname>Iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1563" column="13" bodyfile="src/ml_array.c" bodystart="1563" bodyend="1565"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a93629cb30275af5602b9c906948e85dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLArrayMutableIteratorT,(MLArrayIteratorT), &quot;array::mutable::iterator&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLArrayMutableIteratorT</type>
        </param>
        <param>
          <type>(MLArrayIteratorT)</type>
        </param>
        <param>
          <type>&quot;array::mutable::iterator&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1567" column="1" declfile="src/ml_array.c" declline="1567" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a551cd885363b6b2c3b2ccad00832a4af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLArrayMutableIteratorT, ml_state_t *Caller, ml_array_iterator_t *Iterator)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLArrayMutableIteratorT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__array__iterator__t" kindref="compound">ml_array_iterator_t</ref> *</type>
          <declname>Iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1569" column="13" bodyfile="src/ml_array.c" bodystart="1569" bodyend="1574"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aceeef29584925202a50afb5060f629a1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLArrayT, ml_state_t *Caller, ml_array_t *Array)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
          <declname>Array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1576" column="13" bodyfile="src/ml_array.c" bodystart="1576" bodyend="1634"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aae3b2e72bb045cbb720c0db184428767" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLArrayMutableT, ml_state_t *Caller, ml_array_t *Array)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLArrayMutableT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
          <declname>Array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1636" column="13" bodyfile="src/ml_array.c" bodystart="1636" bodyend="1694"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a90d009fad18f04da227bb835e32f0ba2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UPDATE_FNS</definition>
        <argsstring>(Set)</argsstring>
        <name>UPDATE_FNS</name>
        <param>
          <type>Set</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1701" column="1" declfile="src/ml_array.c" declline="1701" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a61ae486e2ccf72c8882eae386ec12767" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UPDATE_FNS</definition>
        <argsstring>(Add)</argsstring>
        <name>UPDATE_FNS</name>
        <param>
          <type>Add</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1702" column="1" declfile="src/ml_array.c" declline="1702" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1afa86d25ef938e8d9641955a21e805d86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UPDATE_FNS</definition>
        <argsstring>(Mul)</argsstring>
        <name>UPDATE_FNS</name>
        <param>
          <type>Mul</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1703" column="1" declfile="src/ml_array.c" declline="1703" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a1c97532fa85b231f8b99a6a9b659b42c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UPDATE_FNS</definition>
        <argsstring>(Sub)</argsstring>
        <name>UPDATE_FNS</name>
        <param>
          <type>Sub</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1704" column="1" declfile="src/ml_array.c" declline="1704" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a35f64dc61677342cc424ae8cf45d9cdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UPDATE_FNS</definition>
        <argsstring>(RSub)</argsstring>
        <name>UPDATE_FNS</name>
        <param>
          <type>RSub</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1705" column="1" declfile="src/ml_array.c" declline="1705" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ac30a5b04bd125eb9b78c2cbe0c1250b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UPDATE_FNS</definition>
        <argsstring>(Div)</argsstring>
        <name>UPDATE_FNS</name>
        <param>
          <type>Div</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1706" column="1" declfile="src/ml_array.c" declline="1706" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a5cd6bb74b7ca8efbd6d976e0c97b84f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UPDATE_FNS</definition>
        <argsstring>(RDiv)</argsstring>
        <name>UPDATE_FNS</name>
        <param>
          <type>RDiv</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1707" column="1" declfile="src/ml_array.c" declline="1707" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ae3c34dcac2ab3518cd57093bb06ff012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UPDATE_FNS</definition>
        <argsstring>(And)</argsstring>
        <name>UPDATE_FNS</name>
        <param>
          <type>And</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1708" column="1" declfile="src/ml_array.c" declline="1708" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a70ee184436c879eb882b73fb7ef10726" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UPDATE_FNS</definition>
        <argsstring>(Or)</argsstring>
        <name>UPDATE_FNS</name>
        <param>
          <type>Or</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1709" column="1" declfile="src/ml_array.c" declline="1709" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a3edddcae5aa728fbc0b7f737776b1156" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UPDATE_FNS</definition>
        <argsstring>(Xor)</argsstring>
        <name>UPDATE_FNS</name>
        <param>
          <type>Xor</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1710" column="1" declfile="src/ml_array.c" declline="1710" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a46cf2ce8e3b6de5635535201d1999e32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UPDATE_FNS</definition>
        <argsstring>(Min)</argsstring>
        <name>UPDATE_FNS</name>
        <param>
          <type>Min</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1711" column="1" declfile="src/ml_array.c" declline="1711" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a60c4337ce0023d8d7e8a5aec65009442" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>UPDATE_FNS</definition>
        <argsstring>(Max)</argsstring>
        <name>UPDATE_FNS</name>
        <param>
          <type>Max</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1712" column="1" declfile="src/ml_array.c" declline="1712" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a3058b75836664a1a3e70f9a61a8f5369" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void update_array</definition>
        <argsstring>(update_row_fn_t Update, ml_array_dimension_t *TargetDimension, char *TargetData, int SourceDegree, ml_array_dimension_t *SourceDimension, char *SourceData)</argsstring>
        <name>update_array</name>
        <param>
          <type>update_row_fn_t</type>
          <declname>Update</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>TargetDimension</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>TargetData</declname>
        </param>
        <param>
          <type>int</type>
          <declname>SourceDegree</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>SourceDimension</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>SourceData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1714" column="13" bodyfile="src/ml_array.c" bodystart="1714" bodyend="1754"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a6f0d4cdf4212d95feeeead509db10390" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void update_prefix</definition>
        <argsstring>(update_row_fn_t Update, int PrefixDegree, ml_array_dimension_t *TargetDimension, char *TargetData, int SourceDegree, ml_array_dimension_t *SourceDimension, char *SourceData)</argsstring>
        <name>update_prefix</name>
        <param>
          <type>update_row_fn_t</type>
          <declname>Update</declname>
        </param>
        <param>
          <type>int</type>
          <declname>PrefixDegree</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>TargetDimension</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>TargetData</declname>
        </param>
        <param>
          <type>int</type>
          <declname>SourceDegree</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>SourceDimension</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>SourceData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1756" column="13" bodyfile="src/ml_array.c" bodystart="1756" bodyend="1771"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a9cc3ece771a49639d0f239d7d0bcae51" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * update_array_fn</definition>
        <argsstring>(void *Data, int Count, ml_value_t **Args)</argsstring>
        <name>update_array_fn</name>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1773" column="19" bodyfile="src/ml_array.c" bodystart="1773" bodyend="1793"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ac316f13dde723f6e4b629122db95ce83" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_array_cat</definition>
        <argsstring>(int Axis, int Count, ml_value_t **Args)</argsstring>
        <name>ml_array_cat</name>
        <param>
          <type>int</type>
          <declname>Axis</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1795" column="19" bodyfile="src/ml_array.c" bodystart="1795" bodyend="1842"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a2aea591900c920bfbade7fc72c53231e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLArrayCat)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLArrayCat</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1844" column="1" bodyfile="src/ml_array.c" bodystart="1844" bodyend="1860"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a8c4fd9ac61b8ab2c06b2e464c4813a7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLArrayHCat)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLArrayHCat</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1862" column="1" bodyfile="src/ml_array.c" bodystart="1862" bodyend="1874"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a1fe26787dc956d584bf7730ab7997449" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLArrayVCat)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLArrayVCat</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1876" column="1" bodyfile="src/ml_array.c" bodystart="1876" bodyend="1887"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ae723653022f3fc96fd17feff71e6a545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>COMPARE_FNS</definition>
        <argsstring>(Eq)</argsstring>
        <name>COMPARE_FNS</name>
        <param>
          <type>Eq</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1917" column="1" declfile="src/ml_array.c" declline="1917" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a847b99ad51ca90dbde5627d67dfefea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>COMPARE_FNS</definition>
        <argsstring>(Ne)</argsstring>
        <name>COMPARE_FNS</name>
        <param>
          <type>Ne</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1918" column="1" declfile="src/ml_array.c" declline="1918" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a4557f81011eaf1f151e9a50af1680df6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>COMPARE_FNS</definition>
        <argsstring>(Lt)</argsstring>
        <name>COMPARE_FNS</name>
        <param>
          <type>Lt</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1919" column="1" declfile="src/ml_array.c" declline="1919" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aee7bb2103b77116eb9b53ba9be89796c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>COMPARE_FNS</definition>
        <argsstring>(Gt)</argsstring>
        <name>COMPARE_FNS</name>
        <param>
          <type>Gt</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1920" column="1" declfile="src/ml_array.c" declline="1920" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a9ca8ddba8dda3a2ddc7d8b97ea7232b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>COMPARE_FNS</definition>
        <argsstring>(Le)</argsstring>
        <name>COMPARE_FNS</name>
        <param>
          <type>Le</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1921" column="1" declfile="src/ml_array.c" declline="1921" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a1a3bf3cb748fcc1bae517ca9f8518f95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>COMPARE_FNS</definition>
        <argsstring>(Ge)</argsstring>
        <name>COMPARE_FNS</name>
        <param>
          <type>Ge</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1922" column="1" declfile="src/ml_array.c" declline="1922" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a8aab55d6e01ed2bcebca278ba07cfce4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void compare_array</definition>
        <argsstring>(compare_row_fn_t Compare, ml_array_dimension_t *TargetDimension, char *TargetData, ml_array_dimension_t *LeftDimension, char *LeftData, int RightDegree, ml_array_dimension_t *RightDimension, char *RightData)</argsstring>
        <name>compare_array</name>
        <param>
          <type>compare_row_fn_t</type>
          <declname>Compare</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>TargetDimension</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>TargetData</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>LeftDimension</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>LeftData</declname>
        </param>
        <param>
          <type>int</type>
          <declname>RightDegree</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>RightDimension</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>RightData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1924" column="13" bodyfile="src/ml_array.c" bodystart="1924" bodyend="1969"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ae4ee9fbc40da0268ad27420d648239fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void compare_prefix</definition>
        <argsstring>(compare_row_fn_t Compare, ml_array_dimension_t *TargetDimension, char *TargetData, int PrefixDegree, ml_array_dimension_t *LeftDimension, char *LeftData, int RightDegree, ml_array_dimension_t *RightDimension, char *RightData)</argsstring>
        <name>compare_prefix</name>
        <param>
          <type>compare_row_fn_t</type>
          <declname>Compare</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>TargetDimension</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>TargetData</declname>
        </param>
        <param>
          <type>int</type>
          <declname>PrefixDegree</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>LeftDimension</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>LeftData</declname>
        </param>
        <param>
          <type>int</type>
          <declname>RightDegree</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>RightDimension</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>RightData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1971" column="13" bodyfile="src/ml_array.c" bodystart="1971" bodyend="1989"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1abaca379ecbe539ce14219377bcb6e8e9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * compare_array_fn</definition>
        <argsstring>(void *Data, int Count, ml_value_t **Args)</argsstring>
        <name>compare_array_fn</name>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="1991" column="19" bodyfile="src/ml_array.c" bodystart="1991" bodyend="2018"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1abca704847ce42d22693f5dcf3a8621e6" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ml_array_compare</definition>
        <argsstring>(ml_array_t *A, ml_array_t *B)</argsstring>
        <name>ml_array_compare</name>
        <param>
          <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2030" column="12" declfile="src/ml_array.c" declline="2030" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a111343bf7ee189b196ac274b844dabde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;&gt;&quot;, MLArrayT, MLArrayT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&lt;&gt;&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2032" column="1" bodyfile="src/ml_array.c" bodystart="2032" bodyend="2040"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1afa224cca5446002c3266503f6ab80a92" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>static long srotl</definition>
        <argsstring>(long X, unsigned int N)</argsstring>
        <name>srotl</name>
        <param>
          <type>long</type>
          <declname>X</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2042" column="13" bodyfile="src/ml_array.c" bodystart="2042" bodyend="2045"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1af3f7c6168acf60ecea2d41bb8cd8941b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_DECL</definition>
        <argsstring>(IntegerT, uint8, UInt8T, uint8_t, ml_stringbuffer_printf, &quot;%u&quot;, ml_integer_value, ml_integer,, NOP_VAL, ML_ARRAY_FORMAT_U8,(long))</argsstring>
        <name>ARRAY_DECL</name>
        <param>
          <type>IntegerT</type>
        </param>
        <param>
          <type>uint8</type>
        </param>
        <param>
          <type>UInt8T</type>
        </param>
        <param>
          <type>uint8_t</type>
        </param>
        <param>
          <type>ml_stringbuffer_printf</type>
        </param>
        <param>
          <type>&quot;%u&quot;</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>NOP_VAL</type>
        </param>
        <param>
          <type>ML_ARRAY_FORMAT_U8</type>
        </param>
        <param>
          <type>(long)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2334" column="1" declfile="src/ml_array.c" declline="2334" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ac448b251c944afa8b3b8190daf6c6281" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_DECL</definition>
        <argsstring>(IntegerT, int8, Int8T, int8_t, ml_stringbuffer_printf, &quot;%d&quot;, ml_integer_value, ml_integer,, NOP_VAL, ML_ARRAY_FORMAT_I8,(long))</argsstring>
        <name>ARRAY_DECL</name>
        <param>
          <type>IntegerT</type>
        </param>
        <param>
          <type>int8</type>
        </param>
        <param>
          <type>Int8T</type>
        </param>
        <param>
          <type>int8_t</type>
        </param>
        <param>
          <type>ml_stringbuffer_printf</type>
        </param>
        <param>
          <type>&quot;%d&quot;</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>NOP_VAL</type>
        </param>
        <param>
          <type>ML_ARRAY_FORMAT_I8</type>
        </param>
        <param>
          <type>(long)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2335" column="1" declfile="src/ml_array.c" declline="2335" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aaa008e3aeec875ef076f00af15eb1dee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_DECL</definition>
        <argsstring>(IntegerT, uint16, UInt16T, uint16_t, ml_stringbuffer_printf, &quot;%u&quot;, ml_integer_value, ml_integer,, NOP_VAL, ML_ARRAY_FORMAT_U16,(long))</argsstring>
        <name>ARRAY_DECL</name>
        <param>
          <type>IntegerT</type>
        </param>
        <param>
          <type>uint16</type>
        </param>
        <param>
          <type>UInt16T</type>
        </param>
        <param>
          <type>uint16_t</type>
        </param>
        <param>
          <type>ml_stringbuffer_printf</type>
        </param>
        <param>
          <type>&quot;%u&quot;</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>NOP_VAL</type>
        </param>
        <param>
          <type>ML_ARRAY_FORMAT_U16</type>
        </param>
        <param>
          <type>(long)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2336" column="1" declfile="src/ml_array.c" declline="2336" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a575a2ccf1bc2d2d7ab8198d4380c4327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_DECL</definition>
        <argsstring>(IntegerT, int16, Int16T, int16_t, ml_stringbuffer_printf, &quot;%d&quot;, ml_integer_value, ml_integer,, NOP_VAL, ML_ARRAY_FORMAT_I16,(long))</argsstring>
        <name>ARRAY_DECL</name>
        <param>
          <type>IntegerT</type>
        </param>
        <param>
          <type>int16</type>
        </param>
        <param>
          <type>Int16T</type>
        </param>
        <param>
          <type>int16_t</type>
        </param>
        <param>
          <type>ml_stringbuffer_printf</type>
        </param>
        <param>
          <type>&quot;%d&quot;</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>NOP_VAL</type>
        </param>
        <param>
          <type>ML_ARRAY_FORMAT_I16</type>
        </param>
        <param>
          <type>(long)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2337" column="1" declfile="src/ml_array.c" declline="2337" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aca5b480d2782cc52c23196bf9350adf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_DECL</definition>
        <argsstring>(IntegerT, uint32, UInt32T, uint32_t, ml_stringbuffer_printf, &quot;%u&quot;, ml_integer_value, ml_integer,, NOP_VAL, ML_ARRAY_FORMAT_U32,(long))</argsstring>
        <name>ARRAY_DECL</name>
        <param>
          <type>IntegerT</type>
        </param>
        <param>
          <type>uint32</type>
        </param>
        <param>
          <type>UInt32T</type>
        </param>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>ml_stringbuffer_printf</type>
        </param>
        <param>
          <type>&quot;%u&quot;</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>NOP_VAL</type>
        </param>
        <param>
          <type>ML_ARRAY_FORMAT_U32</type>
        </param>
        <param>
          <type>(long)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2338" column="1" declfile="src/ml_array.c" declline="2338" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a2e711d595e5e94beea1fa733b6c13b5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_DECL</definition>
        <argsstring>(IntegerT, int32, Int32T, int32_t, ml_stringbuffer_printf, &quot;%d&quot;, ml_integer_value, ml_integer,, NOP_VAL, ML_ARRAY_FORMAT_I32,(long))</argsstring>
        <name>ARRAY_DECL</name>
        <param>
          <type>IntegerT</type>
        </param>
        <param>
          <type>int32</type>
        </param>
        <param>
          <type>Int32T</type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>ml_stringbuffer_printf</type>
        </param>
        <param>
          <type>&quot;%d&quot;</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>NOP_VAL</type>
        </param>
        <param>
          <type>ML_ARRAY_FORMAT_I32</type>
        </param>
        <param>
          <type>(long)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2339" column="1" declfile="src/ml_array.c" declline="2339" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a07abd2f1267a33d23255beecaf965d37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_DECL</definition>
        <argsstring>(IntegerT, uint64, UInt64T, uint64_t, ml_stringbuffer_printf, &quot;%lu&quot;, ml_integer_value, ml_integer,, NOP_VAL, ML_ARRAY_FORMAT_U64,(long))</argsstring>
        <name>ARRAY_DECL</name>
        <param>
          <type>IntegerT</type>
        </param>
        <param>
          <type>uint64</type>
        </param>
        <param>
          <type>UInt64T</type>
        </param>
        <param>
          <type>uint64_t</type>
        </param>
        <param>
          <type>ml_stringbuffer_printf</type>
        </param>
        <param>
          <type>&quot;%lu&quot;</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>NOP_VAL</type>
        </param>
        <param>
          <type>ML_ARRAY_FORMAT_U64</type>
        </param>
        <param>
          <type>(long)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2340" column="1" declfile="src/ml_array.c" declline="2340" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1af28cea93fce9a4a57d92a57aaaafcb61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_DECL</definition>
        <argsstring>(IntegerT, int64, Int64T, int64_t, ml_stringbuffer_printf, &quot;%ld&quot;, ml_integer_value, ml_integer,, NOP_VAL, ML_ARRAY_FORMAT_I64,(long))</argsstring>
        <name>ARRAY_DECL</name>
        <param>
          <type>IntegerT</type>
        </param>
        <param>
          <type>int64</type>
        </param>
        <param>
          <type>Int64T</type>
        </param>
        <param>
          <type>int64_t</type>
        </param>
        <param>
          <type>ml_stringbuffer_printf</type>
        </param>
        <param>
          <type>&quot;%ld&quot;</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>NOP_VAL</type>
        </param>
        <param>
          <type>ML_ARRAY_FORMAT_I64</type>
        </param>
        <param>
          <type>(long)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2341" column="1" declfile="src/ml_array.c" declline="2341" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a2985016f62a6e6c3d7705fce9bb18d13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_DECL</definition>
        <argsstring>(RealT, float32, Float32T, float, ml_stringbuffer_printf, &quot;%g&quot;, ml_real_value, ml_real,, NOP_VAL, ML_ARRAY_FORMAT_F32,(long))</argsstring>
        <name>ARRAY_DECL</name>
        <param>
          <type>RealT</type>
        </param>
        <param>
          <type>float32</type>
        </param>
        <param>
          <type>Float32T</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>ml_stringbuffer_printf</type>
        </param>
        <param>
          <type>&quot;%g&quot;</type>
        </param>
        <param>
          <type>ml_real_value</type>
        </param>
        <param>
          <type>ml_real</type>
        </param>
        <param>
          <type>NOP_VAL</type>
        </param>
        <param>
          <type>ML_ARRAY_FORMAT_F32</type>
        </param>
        <param>
          <type>(long)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2342" column="1" declfile="src/ml_array.c" declline="2342" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a0533e985360abaccde2431e503498718" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_DECL</definition>
        <argsstring>(RealT, float64, Float64T, double, ml_stringbuffer_printf, &quot;%g&quot;, ml_real_value, ml_real,, NOP_VAL, ML_ARRAY_FORMAT_F64,(long))</argsstring>
        <name>ARRAY_DECL</name>
        <param>
          <type>RealT</type>
        </param>
        <param>
          <type>float64</type>
        </param>
        <param>
          <type>Float64T</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>ml_stringbuffer_printf</type>
        </param>
        <param>
          <type>&quot;%g&quot;</type>
        </param>
        <param>
          <type>ml_real_value</type>
        </param>
        <param>
          <type>ml_real</type>
        </param>
        <param>
          <type>NOP_VAL</type>
        </param>
        <param>
          <type>ML_ARRAY_FORMAT_F64</type>
        </param>
        <param>
          <type>(long)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2343" column="1" declfile="src/ml_array.c" declline="2343" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aa556bdb174afba39ef6d74004294c3f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_DECL</definition>
        <argsstring>(T, any, AnyT, any, BUFFER_APPEND, &quot;?&quot;, ml_nop, ml_nop, ml_number, ml_number_value, ML_ARRAY_FORMAT_ANY, ml_hash)</argsstring>
        <name>ARRAY_DECL</name>
        <param>
          <type>T</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">any</ref></type>
        </param>
        <param>
          <type>AnyT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">any</ref></type>
        </param>
        <param>
          <type>BUFFER_APPEND</type>
        </param>
        <param>
          <type>&quot;?&quot;</type>
        </param>
        <param>
          <type>ml_nop</type>
        </param>
        <param>
          <type>ml_nop</type>
        </param>
        <param>
          <type>ml_number</type>
        </param>
        <param>
          <type>ml_number_value</type>
        </param>
        <param>
          <type>ML_ARRAY_FORMAT_ANY</type>
        </param>
        <param>
          <type>ml_hash</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2352" column="1" declfile="src/ml_array.c" declline="2352" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a0f0396403cf9890928f0be8f0fa19dd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PARTIAL_FUNCTIONS</definition>
        <argsstring>(uint64_t)</argsstring>
        <name>PARTIAL_FUNCTIONS</name>
        <param>
          <type>uint64_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2806" column="1" declfile="src/ml_array.c" declline="2806" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aaeda213ace1351ab3cee5c49efc4c3d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PARTIAL_FUNCTIONS</definition>
        <argsstring>(int64_t)</argsstring>
        <name>PARTIAL_FUNCTIONS</name>
        <param>
          <type>int64_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2807" column="1" declfile="src/ml_array.c" declline="2807" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aef95749068e8d7d34e3935dda676f512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PARTIAL_FUNCTIONS</definition>
        <argsstring>(double)</argsstring>
        <name>PARTIAL_FUNCTIONS</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2808" column="1" declfile="src/ml_array.c" declline="2808" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aa24d5607d66a7b513fd81a770141ea44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>COMPLETE_FUNCTIONS</definition>
        <argsstring>(uint64_t, uint8_t)</argsstring>
        <name>COMPLETE_FUNCTIONS</name>
        <param>
          <type>uint64_t</type>
        </param>
        <param>
          <type>uint8_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2810" column="1" declfile="src/ml_array.c" declline="2810" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ae75c3137cfa5ffc415a3924c2d21ed0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>COMPLETE_FUNCTIONS</definition>
        <argsstring>(int64_t, int8_t)</argsstring>
        <name>COMPLETE_FUNCTIONS</name>
        <param>
          <type>int64_t</type>
        </param>
        <param>
          <type>int8_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2811" column="1" declfile="src/ml_array.c" declline="2811" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ad0945ff8fd6a9365059160adae6368f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>COMPLETE_FUNCTIONS</definition>
        <argsstring>(uint64_t, uint16_t)</argsstring>
        <name>COMPLETE_FUNCTIONS</name>
        <param>
          <type>uint64_t</type>
        </param>
        <param>
          <type>uint16_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2812" column="1" declfile="src/ml_array.c" declline="2812" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a3d9de8c516ebcf878f8f1cf856d87160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>COMPLETE_FUNCTIONS</definition>
        <argsstring>(int64_t, int16_t)</argsstring>
        <name>COMPLETE_FUNCTIONS</name>
        <param>
          <type>int64_t</type>
        </param>
        <param>
          <type>int16_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2813" column="1" declfile="src/ml_array.c" declline="2813" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a27545c4021d295e9ff73fe1dc9f07a37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>COMPLETE_FUNCTIONS</definition>
        <argsstring>(uint64_t, uint32_t)</argsstring>
        <name>COMPLETE_FUNCTIONS</name>
        <param>
          <type>uint64_t</type>
        </param>
        <param>
          <type>uint32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2814" column="1" declfile="src/ml_array.c" declline="2814" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a3641f919a6e2a19c43193b2be1774e7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>COMPLETE_FUNCTIONS</definition>
        <argsstring>(int64_t, int32_t)</argsstring>
        <name>COMPLETE_FUNCTIONS</name>
        <param>
          <type>int64_t</type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2815" column="1" declfile="src/ml_array.c" declline="2815" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a5db4cdc85d73cdf4d6960692990e74c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>COMPLETE_FUNCTIONS</definition>
        <argsstring>(uint64_t, uint64_t)</argsstring>
        <name>COMPLETE_FUNCTIONS</name>
        <param>
          <type>uint64_t</type>
        </param>
        <param>
          <type>uint64_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2816" column="1" declfile="src/ml_array.c" declline="2816" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a18b5b91b5d6dd48c9d85764d7a3faf62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>COMPLETE_FUNCTIONS</definition>
        <argsstring>(int64_t, int64_t)</argsstring>
        <name>COMPLETE_FUNCTIONS</name>
        <param>
          <type>int64_t</type>
        </param>
        <param>
          <type>int64_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2817" column="1" declfile="src/ml_array.c" declline="2817" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a3f36d4be18186e9fd7642f3c7cf04f03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>COMPLETE_FUNCTIONS</definition>
        <argsstring>(double, float)</argsstring>
        <name>COMPLETE_FUNCTIONS</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2818" column="1" declfile="src/ml_array.c" declline="2818" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aba16f3b0da7052190411890bb49c8c35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>COMPLETE_FUNCTIONS</definition>
        <argsstring>(double, double)</argsstring>
        <name>COMPLETE_FUNCTIONS</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2819" column="1" declfile="src/ml_array.c" declline="2819" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a274f4bf849007e626ee73127f88c3a0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MINMAX_FUNCTIONS</definition>
        <argsstring>(uint8_t)</argsstring>
        <name>MINMAX_FUNCTIONS</name>
        <param>
          <type>uint8_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2821" column="1" declfile="src/ml_array.c" declline="2821" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ad26fe441359c432cf500c1eb0913f108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MINMAX_FUNCTIONS</definition>
        <argsstring>(int8_t)</argsstring>
        <name>MINMAX_FUNCTIONS</name>
        <param>
          <type>int8_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2822" column="1" declfile="src/ml_array.c" declline="2822" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ad31c76e66544c4383b6c91e16e9f0015" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MINMAX_FUNCTIONS</definition>
        <argsstring>(uint16_t)</argsstring>
        <name>MINMAX_FUNCTIONS</name>
        <param>
          <type>uint16_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2823" column="1" declfile="src/ml_array.c" declline="2823" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ac77e8fdbd98cef8175e3b1449792d945" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MINMAX_FUNCTIONS</definition>
        <argsstring>(int16_t)</argsstring>
        <name>MINMAX_FUNCTIONS</name>
        <param>
          <type>int16_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2824" column="1" declfile="src/ml_array.c" declline="2824" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a8136b173d0e6ab1378d7d6749aba834d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MINMAX_FUNCTIONS</definition>
        <argsstring>(uint32_t)</argsstring>
        <name>MINMAX_FUNCTIONS</name>
        <param>
          <type>uint32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2825" column="1" declfile="src/ml_array.c" declline="2825" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a8da48f207055ae97570cfad20be9c433" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MINMAX_FUNCTIONS</definition>
        <argsstring>(int32_t)</argsstring>
        <name>MINMAX_FUNCTIONS</name>
        <param>
          <type>int32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2826" column="1" declfile="src/ml_array.c" declline="2826" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a43cd5847956ad236bd7cc0772233d6ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MINMAX_FUNCTIONS</definition>
        <argsstring>(uint64_t)</argsstring>
        <name>MINMAX_FUNCTIONS</name>
        <param>
          <type>uint64_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2827" column="1" declfile="src/ml_array.c" declline="2827" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a7ee774bf111ab5f269ebee1b34259442" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MINMAX_FUNCTIONS</definition>
        <argsstring>(int64_t)</argsstring>
        <name>MINMAX_FUNCTIONS</name>
        <param>
          <type>int64_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2828" column="1" declfile="src/ml_array.c" declline="2828" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ae04b4cb3b602519b9847d460fa2931a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MINMAX_FUNCTIONS</definition>
        <argsstring>(float)</argsstring>
        <name>MINMAX_FUNCTIONS</name>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2829" column="1" declfile="src/ml_array.c" declline="2829" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1af94683d8c6ef06c0e9dd81be1574bf1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MINMAX_FUNCTIONS</definition>
        <argsstring>(double)</argsstring>
        <name>MINMAX_FUNCTIONS</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2830" column="1" declfile="src/ml_array.c" declline="2830" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a6103ea13740ff73ca0b63efa697c0de8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>static int64_t isquare</definition>
        <argsstring>(int64_t X)</argsstring>
        <name>isquare</name>
        <param>
          <type>int64_t</type>
          <declname>X</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2841" column="16" bodyfile="src/ml_array.c" bodystart="2841" bodyend="2843"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a593c77103f0eb980706c8400387dbccb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double square</definition>
        <argsstring>(double X)</argsstring>
        <name>square</name>
        <param>
          <type>double</type>
          <declname>X</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2845" column="15" bodyfile="src/ml_array.c" bodystart="2845" bodyend="2847"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ab7ca19232f8310cb519b4f9c0ee414f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NORM_FUNCTION</definition>
        <argsstring>(double, uint8_t, labs)</argsstring>
        <name>NORM_FUNCTION</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>uint8_t</type>
        </param>
        <param>
          <type>labs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2922" column="1" declfile="src/ml_array.c" declline="2922" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a9d38efa0b522c70a8c96d447f0a4c5ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NORM_FUNCTION</definition>
        <argsstring>(double, int8_t, labs)</argsstring>
        <name>NORM_FUNCTION</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>int8_t</type>
        </param>
        <param>
          <type>labs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2923" column="1" declfile="src/ml_array.c" declline="2923" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ab9403fe0928f0ed98b25268257d5aa4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NORM_FUNCTION</definition>
        <argsstring>(double, uint16_t, labs)</argsstring>
        <name>NORM_FUNCTION</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>uint16_t</type>
        </param>
        <param>
          <type>labs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2924" column="1" declfile="src/ml_array.c" declline="2924" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1acddcda2acedc56d1423423f2b959fdaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NORM_FUNCTION</definition>
        <argsstring>(double, int16_t, labs)</argsstring>
        <name>NORM_FUNCTION</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>int16_t</type>
        </param>
        <param>
          <type>labs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2925" column="1" declfile="src/ml_array.c" declline="2925" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a3c8a11bc17ff44b54d8dffcd4b7a08d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NORM_FUNCTION</definition>
        <argsstring>(double, uint32_t, labs)</argsstring>
        <name>NORM_FUNCTION</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>labs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2926" column="1" declfile="src/ml_array.c" declline="2926" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1afaf1f43e42983182e3e6bdd5e20f5e55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NORM_FUNCTION</definition>
        <argsstring>(double, int32_t, labs)</argsstring>
        <name>NORM_FUNCTION</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>labs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2927" column="1" declfile="src/ml_array.c" declline="2927" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a1ced1dffdb5efd81bcb466f2c57c269c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NORM_FUNCTION</definition>
        <argsstring>(double, uint64_t, labs)</argsstring>
        <name>NORM_FUNCTION</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>uint64_t</type>
        </param>
        <param>
          <type>labs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2928" column="1" declfile="src/ml_array.c" declline="2928" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ad59f060da79cd2ea43190dd1ce8f94de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NORM_FUNCTION</definition>
        <argsstring>(double, int64_t, labs)</argsstring>
        <name>NORM_FUNCTION</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>int64_t</type>
        </param>
        <param>
          <type>labs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2929" column="1" declfile="src/ml_array.c" declline="2929" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a4534d71826f9c9b7dcaef70e0f41c8a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NORM_FUNCTION</definition>
        <argsstring>(double, float, fabs)</argsstring>
        <name>NORM_FUNCTION</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>fabs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2930" column="1" declfile="src/ml_array.c" declline="2930" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a4081c4929836f3495f4849280e41b7be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NORM_FUNCTION</definition>
        <argsstring>(double, double, fabs)</argsstring>
        <name>NORM_FUNCTION</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>fabs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2931" column="1" declfile="src/ml_array.c" declline="2931" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ac4bfd60a3eb34b326732e77d9ee2421d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char * array_flatten_to</definition>
        <argsstring>(char *Target, int Size, int Degree, int FlatDegree, ml_array_dimension_t *Dimension, char *Source)</argsstring>
        <name>array_flatten_to</name>
        <param>
          <type>char *</type>
          <declname>Target</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Degree</declname>
        </param>
        <param>
          <type>int</type>
          <declname>FlatDegree</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>Dimension</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>Source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="2940" column="13" bodyfile="src/ml_array.c" bodystart="2940" bodyend="3037"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aabde23c10bf2899cf30eae7bd271e880" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char * array_flatten</definition>
        <argsstring>(ml_array_t *Source)</argsstring>
        <name>array_flatten</name>
        <param>
          <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
          <declname>Source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="3039" column="13" bodyfile="src/ml_array.c" bodystart="3039" bodyend="3050"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a1fcb8812fba5aa81366263a90b0c98f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;reshape&quot;, MLArrayT, MLListT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;reshape&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>MLListT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="3071" column="1" bodyfile="src/ml_array.c" bodystart="3071" bodyend="3105"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ac0746e9973c2fa214cad81c0ad467d1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;sums&quot;, MLArrayT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;sums&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="3107" column="1" bodyfile="src/ml_array.c" bodystart="3107" bodyend="3156"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a11783a6cebbcd2c5a46853ef3163e265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;prods&quot;, MLArrayT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;prods&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="3158" column="1" bodyfile="src/ml_array.c" bodystart="3158" bodyend="3206"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a0fd549278b7630c08fc8e8609fbcfb2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;sum&quot;, MLArrayT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;sum&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="3208" column="1" bodyfile="src/ml_array.c" bodystart="3208" bodyend="3245"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a8fca0bf2296fd5701aac1f7840fc1c89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;sum&quot;, MLArrayT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;sum&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="3247" column="1" bodyfile="src/ml_array.c" bodystart="3247" bodyend="3323"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a7d29b0dadbd7888bdca975ffac66ed10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;prod&quot;, MLArrayT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;prod&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="3325" column="1" bodyfile="src/ml_array.c" bodystart="3325" bodyend="3362"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a6f0c44b1061dae66e6c063cc478375e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;prod&quot;, MLArrayT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;prod&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="3364" column="1" bodyfile="src/ml_array.c" bodystart="3364" bodyend="3440"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aa8204d137066373359f5318a1ae53490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;minval&quot;, MLArrayT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;minval&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="3442" column="1" bodyfile="src/ml_array.c" bodystart="3442" bodyend="3473"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a60f2a79facad7c1a032d53d287406faf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;minval&quot;, MLArrayT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;minval&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="3475" column="1" bodyfile="src/ml_array.c" bodystart="3475" bodyend="3531"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a1d3a310c1916eab57b2892444ef934d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;minidx&quot;, MLArrayT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;minidx&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="3533" column="1" bodyfile="src/ml_array.c" bodystart="3533" bodyend="3581"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a91c253a9976e37a67cc93b15edd27b4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;minidx&quot;, MLArrayT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;minidx&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="3583" column="1" bodyfile="src/ml_array.c" bodystart="3583" bodyend="3642"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a684754430e4701ee56cc06512ee87329" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;maxval&quot;, MLArrayT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;maxval&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="3644" column="1" bodyfile="src/ml_array.c" bodystart="3644" bodyend="3675"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ab03362ca8aa8fa827923dc2bc1f9766f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;maxval&quot;, MLArrayT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;maxval&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="3677" column="1" bodyfile="src/ml_array.c" bodystart="3677" bodyend="3733"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aa52692fee81db818f0451c87ccbeba37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;maxidx&quot;, MLArrayT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;maxidx&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="3735" column="1" bodyfile="src/ml_array.c" bodystart="3735" bodyend="3783"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a6eba1df258124457d5d6867a979fcf85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;maxidx&quot;, MLArrayT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;maxidx&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="3785" column="1" bodyfile="src/ml_array.c" bodystart="3785" bodyend="3844"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a0caea156e37f29d5785b1090805f4556" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;||&quot;, MLArrayT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;||&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="3846" column="1" bodyfile="src/ml_array.c" bodystart="3846" bodyend="3895"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a4ed2a770bd83c247d0f0b668393eec82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;||&quot;, MLArrayT, MLRealT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;||&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>MLRealT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="3897" column="1" bodyfile="src/ml_array.c" bodystart="3897" bodyend="3947"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ad39119f8876ddee777ede37f4db25956" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&quot;, MLArrayT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="3949" column="1" bodyfile="src/ml_array.c" bodystart="3949" bodyend="4023"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a0e22d7c474b93036b1d0edc4af0d18f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * array_math_integer_fn</definition>
        <argsstring>(int64_t(*fn)(int64_t), int Count, ml_value_t **Args)</argsstring>
        <name>array_math_integer_fn</name>
        <param>
          <type>int64_t(*)(int64_t)</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4025" column="19" bodyfile="src/ml_array.c" bodystart="4025" bodyend="4035"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a061f276ff41bda4b9742746b431dc2d6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * array_math_real_fn</definition>
        <argsstring>(double(*fn)(double), int Count, ml_value_t **Args)</argsstring>
        <name>array_math_real_fn</name>
        <param>
          <type>double(*)(double)</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4037" column="19" bodyfile="src/ml_array.c" bodystart="4037" bodyend="4047"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1abf00f961fd38830cae79c3ed1e5eb51f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * array_infix_fn</definition>
        <argsstring>(void *Data, int Count, ml_value_t **Args)</argsstring>
        <name>array_infix_fn</name>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4081" column="19" bodyfile="src/ml_array.c" bodystart="4081" bodyend="4111"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a6d20cfd9b950f51b0de6c3d6d5f6b0cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARITH_METHOD</definition>
        <argsstring>(+, ML_ARRAY_FORMAT_I64, AddMethod)</argsstring>
        <name>ML_ARITH_METHOD</name>
        <param>
          <type>+</type>
        </param>
        <param>
          <type>ML_ARRAY_FORMAT_I64</type>
        </param>
        <param>
          <type>AddMethod</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4359" column="1" declfile="src/ml_array.c" declline="4359" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a3a6909e43801067fe04fd2dc94178c37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARITH_METHOD</definition>
        <argsstring>(-, ML_ARRAY_FORMAT_I64, SubMethod)</argsstring>
        <name>ML_ARITH_METHOD</name>
        <param>
          <type>-</type>
        </param>
        <param>
          <type>ML_ARRAY_FORMAT_I64</type>
        </param>
        <param>
          <type>SubMethod</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4361" column="1" declfile="src/ml_array.c" declline="4361" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a593ab3d89cb93e6a766108a805635bec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARITH_METHOD</definition>
        <argsstring>(/, ML_ARRAY_FORMAT_F64, DivMethod)</argsstring>
        <name>ML_ARITH_METHOD</name>
        <param>
          <type>/</type>
        </param>
        <param>
          <type>ML_ARRAY_FORMAT_F64</type>
        </param>
        <param>
          <type>DivMethod</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4362" column="1" declfile="src/ml_array.c" declline="4362" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a87f8a8506964ac677c5dea937e2c9769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;^&quot;, MLArrayMutableRealT, MLRealT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;^&quot;</type>
        </param>
        <param>
          <type>MLArrayMutableRealT</type>
        </param>
        <param>
          <type>MLRealT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4475" column="1" bodyfile="src/ml_array.c" bodystart="4475" bodyend="4485"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a67cac44e209683386ec7caa2e902fe32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_COMPARE_METHOD</definition>
        <argsstring>(Eq, Eq,=)</argsstring>
        <name>ML_COMPARE_METHOD</name>
        <param>
          <type>Eq</type>
        </param>
        <param>
          <type>Eq</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4673" column="1" declfile="src/ml_array.c" declline="4673" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a28dc8e5475707ea7f71173116bfd91c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_COMPARE_METHOD</definition>
        <argsstring>(Ne, Ne, !=)</argsstring>
        <name>ML_COMPARE_METHOD</name>
        <param>
          <type>Ne</type>
        </param>
        <param>
          <type>Ne</type>
        </param>
        <param>
          <type>!</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4674" column="1" declfile="src/ml_array.c" declline="4674" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a2991a521a28a6e63a2976a3cdfbb7205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_COMPARE_METHOD</definition>
        <argsstring>(Lt, Gt,&lt;)</argsstring>
        <name>ML_COMPARE_METHOD</name>
        <param>
          <type>Lt</type>
        </param>
        <param>
          <type>Gt</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4675" column="1" declfile="src/ml_array.c" declline="4675" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a35b7209d90165782f8bb843ddb4ee4d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_COMPARE_METHOD</definition>
        <argsstring>(Gt, Lt, &gt;)</argsstring>
        <name>ML_COMPARE_METHOD</name>
        <param>
          <type>Gt</type>
        </param>
        <param>
          <type>Lt</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4676" column="1" declfile="src/ml_array.c" declline="4676" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a1ec9a67e6f3994b8ae733434435bf9cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_COMPARE_METHOD</definition>
        <argsstring>(Le, Ge,&lt;=)</argsstring>
        <name>ML_COMPARE_METHOD</name>
        <param>
          <type>Le</type>
        </param>
        <param>
          <type>Ge</type>
        </param>
        <param>
          <type>&lt;=</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4677" column="1" declfile="src/ml_array.c" declline="4677" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a0bb923e41cda27e296cb792bfa76f6e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_COMPARE_METHOD</definition>
        <argsstring>(Ge, Le, &gt;=)</argsstring>
        <name>ML_COMPARE_METHOD</name>
        <param>
          <type>Ge</type>
        </param>
        <param>
          <type>Le</type>
        </param>
        <param>
          <type>&gt;=</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4678" column="1" declfile="src/ml_array.c" declline="4678" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a4ab75af341e408283909d24969b8ba2c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ml_array_format_t</type>
        <definition>static ml_array_format_t ml_array_of_type_guess</definition>
        <argsstring>(ml_value_t *Value, ml_array_format_t Format)</argsstring>
        <name>ml_array_of_type_guess</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4680" column="26" bodyfile="src/ml_array.c" bodystart="4680" bodyend="4684"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a3bf498209a58e0423c3be5430beb8cb4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ml_array_format_t</type>
        <definition>static ml_array_format_t ML_TYPED_FN</definition>
        <argsstring>(ml_array_of_type_guess, MLListT, ml_value_t *Value, ml_array_format_t Format)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_of_type_guess</type>
        </param>
        <param>
          <type>MLListT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4686" column="26" bodyfile="src/ml_array.c" bodystart="4686" bodyend="4691"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ab33cc58b736793143f2678f2f2f471c4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ml_array_format_t</type>
        <definition>static ml_array_format_t ML_TYPED_FN</definition>
        <argsstring>(ml_array_of_type_guess, MLTupleT, ml_value_t *Value, ml_array_format_t Format)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_of_type_guess</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4693" column="26" bodyfile="src/ml_array.c" bodystart="4693" bodyend="4699"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ae2aad45e38b3c011549fb213b36c9e0d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ml_array_format_t</type>
        <definition>static ml_array_format_t ML_TYPED_FN</definition>
        <argsstring>(ml_array_of_type_guess, MLArrayT, ml_value_t *Value, ml_array_format_t Format)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_of_type_guess</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4701" column="26" bodyfile="src/ml_array.c" bodystart="4701" bodyend="4705"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a8583666d6a003bca6412bc8b6b36f373" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ml_array_format_t</type>
        <definition>static ml_array_format_t ML_TYPED_FN</definition>
        <argsstring>(ml_array_of_type_guess, MLIntegerT, ml_value_t *Value, ml_array_format_t Format)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_of_type_guess</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4707" column="26" bodyfile="src/ml_array.c" bodystart="4707" bodyend="4710"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a1eb75bad2d647364c03bc2ef1d53c96c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ml_array_format_t</type>
        <definition>static ml_array_format_t ML_TYPED_FN</definition>
        <argsstring>(ml_array_of_type_guess, MLRealT, ml_value_t *Value, ml_array_format_t Format)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_of_type_guess</type>
        </param>
        <param>
          <type>MLRealT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4712" column="26" bodyfile="src/ml_array.c" bodystart="4712" bodyend="4715"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a8efb1b4d7f29e68d6786865b9c148c83" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ml_array_format_t</type>
        <definition>static ml_array_format_t ML_TYPED_FN</definition>
        <argsstring>(ml_array_of_type_guess, MLIntegerRangeT, ml_value_t *Value, ml_array_format_t Format)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_of_type_guess</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4724" column="26" bodyfile="src/ml_array.c" bodystart="4724" bodyend="4727"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a0a8e20a4193c9c3d6552e81e7a557e75" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ml_array_format_t</type>
        <definition>static ml_array_format_t ML_TYPED_FN</definition>
        <argsstring>(ml_array_of_type_guess, MLRealRangeT, ml_value_t *Value, ml_array_format_t Format)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_of_type_guess</type>
        </param>
        <param>
          <type>MLRealRangeT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4729" column="26" bodyfile="src/ml_array.c" bodystart="4729" bodyend="4732"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aeee0f2fa0569ce0f0eb2b30a1d0db7fa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
        <definition>static ml_array_t * ml_array_of_create</definition>
        <argsstring>(ml_value_t *Value, int Degree, ml_array_format_t Format)</argsstring>
        <name>ml_array_of_create</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Degree</declname>
        </param>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4734" column="19" bodyfile="src/ml_array.c" bodystart="4734" bodyend="4743"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a578af2ed369ca50ebad882c14f9e84ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
        <definition>static ml_array_t * ML_TYPED_FN</definition>
        <argsstring>(ml_array_of_create, MLListT, ml_value_t *Value, int Degree, ml_array_format_t Format)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_of_create</type>
        </param>
        <param>
          <type>MLListT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Degree</declname>
        </param>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4745" column="19" bodyfile="src/ml_array.c" bodystart="4745" bodyend="4755"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a3b3afd9d50cf23b43ac76f24646de22c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
        <definition>static ml_array_t * ML_TYPED_FN</definition>
        <argsstring>(ml_array_of_create, MLTupleT, ml_value_t *Value, int Degree, ml_array_format_t Format)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_of_create</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Degree</declname>
        </param>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4757" column="19" bodyfile="src/ml_array.c" bodystart="4757" bodyend="4767"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ab6fc04726103bf6a81525fa1f812ab23" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
        <definition>static ml_array_t * ML_TYPED_FN</definition>
        <argsstring>(ml_array_of_create, MLArrayT, ml_array_t *Value, int Degree, ml_array_format_t Format)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_of_create</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Degree</declname>
        </param>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4769" column="19" bodyfile="src/ml_array.c" bodystart="4769" bodyend="4779"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ab4eb0f6489276320a810322429cc0679" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
        <definition>static ml_array_t * ML_TYPED_FN</definition>
        <argsstring>(ml_array_of_create, MLIntegerRangeT, ml_integer_range_t *Range, int Degree, ml_array_format_t Format)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_of_create</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <param>
          <type><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref> *</type>
          <declname>Range</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Degree</declname>
        </param>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4781" column="19" bodyfile="src/ml_array.c" bodystart="4781" bodyend="4796"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a4f1c088fea50e8e1a6b8a20f3722169d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
        <definition>static ml_array_t * ML_TYPED_FN</definition>
        <argsstring>(ml_array_of_create, MLRealRangeT, ml_real_range_t *Range, int Degree, ml_array_format_t Format)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_of_create</type>
        </param>
        <param>
          <type>MLRealRangeT</type>
        </param>
        <param>
          <type><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref> *</type>
          <declname>Range</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Degree</declname>
        </param>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4798" column="19" bodyfile="src/ml_array.c" bodystart="4798" bodyend="4805"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ab43e5ea410e07150dd3d42aea556925a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_array_of_fill</definition>
        <argsstring>(ml_array_format_t Format, ml_array_dimension_t *Dimension, char *Address, int Degree, ml_value_t *Value)</argsstring>
        <name>ml_array_of_fill</name>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>Dimension</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Degree</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4807" column="19" bodyfile="src/ml_array.c" bodystart="4807" bodyend="4830"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a4a9cd697bac03ef08557777690610c03" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_array_of_fill, MLListT, ml_array_format_t Format, ml_array_dimension_t *Dimension, char *Address, int Degree, ml_value_t *Value)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_of_fill</type>
        </param>
        <param>
          <type>MLListT</type>
        </param>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>Dimension</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Degree</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4832" column="19" bodyfile="src/ml_array.c" bodystart="4832" bodyend="4841"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a854680f215ca1ece9fab83a2a3567f9c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_array_of_fill, MLTupleT, ml_array_format_t Format, ml_array_dimension_t *Dimension, char *Address, int Degree, ml_value_t *Value)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_of_fill</type>
        </param>
        <param>
          <type>MLTupleT</type>
        </param>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>Dimension</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Degree</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4843" column="19" bodyfile="src/ml_array.c" bodystart="4843" bodyend="4853"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a130c1d145a47fdad08749779eee51a2e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_array_of_fill, MLArrayT, ml_array_format_t Format, ml_array_dimension_t *Dimension, char *Address, int Degree, ml_value_t *Value)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_of_fill</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>Dimension</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Degree</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4855" column="19" bodyfile="src/ml_array.c" bodystart="4855" bodyend="4864"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a620d2677ef599be677e85d9c9083b337" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_array_of_fill, MLIntegerRangeT, ml_array_format_t Format, ml_array_dimension_t *Dimension, char *Address, int Degree, ml_integer_range_t *Range)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_of_fill</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>Dimension</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Degree</declname>
        </param>
        <param>
          <type><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref> *</type>
          <declname>Range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4866" column="19" bodyfile="src/ml_array.c" bodystart="4866" bodyend="4992"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a17d09bf25c6c2b236e3b26821669328a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_array_of_fill, MLRealRangeT, ml_array_format_t Format, ml_array_dimension_t *Dimension, char *Address, int Degree, ml_real_range_t *Range)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_array_of_fill</type>
        </param>
        <param>
          <type>MLRealRangeT</type>
        </param>
        <param>
          <type>ml_array_format_t</type>
          <declname>Format</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>Dimension</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Degree</declname>
        </param>
        <param>
          <type><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref> *</type>
          <declname>Range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="4994" column="19" bodyfile="src/ml_array.c" bodystart="4994" bodyend="5109"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ae0815e4f34b3dd49374bab4b4cf73a1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;copy&quot;, MLArrayT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;copy&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5134" column="1" bodyfile="src/ml_array.c" bodystart="5134" bodyend="5143"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a2164187c5912b3b46408ace90438aa40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;copy&quot;, MLVisitorT, MLArrayT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;copy&quot;</type>
        </param>
        <param>
          <type>MLVisitorT</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5145" column="1" bodyfile="src/ml_array.c" bodystart="5145" bodyend="5158"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ab9a121bb6d92d6cbd4cfde055d987fcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;const&quot;, MLVisitorT, MLArrayT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;const&quot;</type>
        </param>
        <param>
          <type>MLVisitorT</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5160" column="1" bodyfile="src/ml_array.c" bodystart="5160" bodyend="5178"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a95fedd60678de0271e0fb92f459f531c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;^&quot;, MLListT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;^&quot;</type>
        </param>
        <param>
          <type>MLListT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5188" column="1" bodyfile="src/ml_array.c" bodystart="5188" bodyend="5205"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1af4c3b12512b8471d6cc6faf9c10f662c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_APPLY</definition>
        <argsstring>(U8, uint8_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_APPLY</name>
        <param>
          <type>U8</type>
        </param>
        <param>
          <type>uint8_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5245" column="1" declfile="src/ml_array.c" declline="5245" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ae1f997f065d16033f9448bf906b4672a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_APPLY</definition>
        <argsstring>(I8, int8_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_APPLY</name>
        <param>
          <type>I8</type>
        </param>
        <param>
          <type>int8_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5246" column="1" declfile="src/ml_array.c" declline="5246" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ad604a91f3f95662501029c9df043b758" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_APPLY</definition>
        <argsstring>(U16, uint16_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_APPLY</name>
        <param>
          <type>U16</type>
        </param>
        <param>
          <type>uint16_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5247" column="1" declfile="src/ml_array.c" declline="5247" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1adac7c6bf30ef4d6c0ab1eda7e55b1609" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_APPLY</definition>
        <argsstring>(I16, int16_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_APPLY</name>
        <param>
          <type>I16</type>
        </param>
        <param>
          <type>int16_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5248" column="1" declfile="src/ml_array.c" declline="5248" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a65b203ffc11a110d2756ee95384d832d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_APPLY</definition>
        <argsstring>(U32, uint32_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_APPLY</name>
        <param>
          <type>U32</type>
        </param>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5249" column="1" declfile="src/ml_array.c" declline="5249" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ab19c44c834767de62b131b63b90127f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_APPLY</definition>
        <argsstring>(I32, int32_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_APPLY</name>
        <param>
          <type>I32</type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5250" column="1" declfile="src/ml_array.c" declline="5250" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ac2616599594a915fb89b618a7fb756d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_APPLY</definition>
        <argsstring>(U64, uint64_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_APPLY</name>
        <param>
          <type>U64</type>
        </param>
        <param>
          <type>uint64_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5251" column="1" declfile="src/ml_array.c" declline="5251" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a9e351940910fdc96b304bd893eebe48c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_APPLY</definition>
        <argsstring>(I64, int64_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_APPLY</name>
        <param>
          <type>I64</type>
        </param>
        <param>
          <type>int64_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5252" column="1" declfile="src/ml_array.c" declline="5252" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ac121a841948ee1aa2fde3842d1b4ae54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_APPLY</definition>
        <argsstring>(F32, float, ml_real, ml_real_value)</argsstring>
        <name>ARRAY_APPLY</name>
        <param>
          <type>F32</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>ml_real</type>
        </param>
        <param>
          <type>ml_real_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5253" column="1" declfile="src/ml_array.c" declline="5253" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a645c10da5f17fbf6ba88ebbd20f4a43e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_APPLY</definition>
        <argsstring>(F64, double, ml_real, ml_real_value)</argsstring>
        <name>ARRAY_APPLY</name>
        <param>
          <type>F64</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>ml_real</type>
        </param>
        <param>
          <type>ml_real_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5254" column="1" declfile="src/ml_array.c" declline="5254" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a306d08d22f80dd94aa5f4bdce30372fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_APPLY</definition>
        <argsstring>(Any, any,,)</argsstring>
        <name>ARRAY_APPLY</name>
        <param>
          <type>Any</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">any</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5263" column="1" declfile="src/ml_array.c" declline="5263" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a826dd8c9cf782e1c4ae32bf1dec1581a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;copy&quot;, MLArrayT, MLFunctionT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;copy&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5265" column="1" bodyfile="src/ml_array.c" bodystart="5265" bodyend="5354"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a4e8e700b62caee422941345e4921cbf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_UPDATE</definition>
        <argsstring>(uint8_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_UPDATE</name>
        <param>
          <type>uint8_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5395" column="1" declfile="src/ml_array.c" declline="5395" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a8f4c5d683106a05b7f676b9f53fa134a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_UPDATE</definition>
        <argsstring>(int8_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_UPDATE</name>
        <param>
          <type>int8_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5396" column="1" declfile="src/ml_array.c" declline="5396" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a91f4751841ccf94d006ef4aafa5ac6e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_UPDATE</definition>
        <argsstring>(uint16_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_UPDATE</name>
        <param>
          <type>uint16_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5397" column="1" declfile="src/ml_array.c" declline="5397" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a986401e95deebb0b15384abb8f0d769b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_UPDATE</definition>
        <argsstring>(int16_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_UPDATE</name>
        <param>
          <type>int16_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5398" column="1" declfile="src/ml_array.c" declline="5398" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aebc102b6b8080ab4933e3e45c9f473fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_UPDATE</definition>
        <argsstring>(uint32_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_UPDATE</name>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5399" column="1" declfile="src/ml_array.c" declline="5399" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aa3bfb29528c1aabba956508353d1c6ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_UPDATE</definition>
        <argsstring>(int32_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_UPDATE</name>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5400" column="1" declfile="src/ml_array.c" declline="5400" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a31b0501f9389203e6bee8b9618ff96a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_UPDATE</definition>
        <argsstring>(uint64_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_UPDATE</name>
        <param>
          <type>uint64_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5401" column="1" declfile="src/ml_array.c" declline="5401" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ad36d88ffdf7d02b1f6dd443a0fde6631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_UPDATE</definition>
        <argsstring>(int64_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_UPDATE</name>
        <param>
          <type>int64_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5402" column="1" declfile="src/ml_array.c" declline="5402" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ad1f9e401faec37460ef438ee665a3260" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_UPDATE</definition>
        <argsstring>(float, ml_real, ml_real_value)</argsstring>
        <name>ARRAY_UPDATE</name>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>ml_real</type>
        </param>
        <param>
          <type>ml_real_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5403" column="1" declfile="src/ml_array.c" declline="5403" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aaaa8be086a6fe0b8914a1727dc64f22a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_UPDATE</definition>
        <argsstring>(double, ml_real, ml_real_value)</argsstring>
        <name>ARRAY_UPDATE</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>ml_real</type>
        </param>
        <param>
          <type>ml_real_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5404" column="1" declfile="src/ml_array.c" declline="5404" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a4451255051531b9929af9bdc6924a9bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_UPDATE</definition>
        <argsstring>(any,,)</argsstring>
        <name>ARRAY_UPDATE</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">any</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5413" column="1" declfile="src/ml_array.c" declline="5413" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a6e2f555e802d2c4bf3f1dab3f797dd22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;update&quot;, MLArrayMutableT, MLFunctionT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;update&quot;</type>
        </param>
        <param>
          <type>MLArrayMutableT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5415" column="1" bodyfile="src/ml_array.c" bodystart="5415" bodyend="5508"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a0786b05ab6840f167fc51316dd897ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_WHERE</definition>
        <argsstring>(uint8_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_WHERE</name>
        <param>
          <type>uint8_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5562" column="1" declfile="src/ml_array.c" declline="5562" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ac78a2f603635b4151523aa410b358346" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_WHERE</definition>
        <argsstring>(int8_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_WHERE</name>
        <param>
          <type>int8_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5563" column="1" declfile="src/ml_array.c" declline="5563" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ac3febb82e00d8b70445f033f7d2420a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_WHERE</definition>
        <argsstring>(uint16_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_WHERE</name>
        <param>
          <type>uint16_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5564" column="1" declfile="src/ml_array.c" declline="5564" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a399cb9afba01e34139ac5954edb0b90e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_WHERE</definition>
        <argsstring>(int16_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_WHERE</name>
        <param>
          <type>int16_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5565" column="1" declfile="src/ml_array.c" declline="5565" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1af55e7b89272a28f6e2a4342ef4ed0e0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_WHERE</definition>
        <argsstring>(uint32_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_WHERE</name>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5566" column="1" declfile="src/ml_array.c" declline="5566" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ad19681d112d5781184220d38e61baa5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_WHERE</definition>
        <argsstring>(int32_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_WHERE</name>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5567" column="1" declfile="src/ml_array.c" declline="5567" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1abe0afb8f9e2e974616522574e5f934d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_WHERE</definition>
        <argsstring>(uint64_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_WHERE</name>
        <param>
          <type>uint64_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5568" column="1" declfile="src/ml_array.c" declline="5568" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a24cab210108fd692a08e16a542b52693" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_WHERE</definition>
        <argsstring>(int64_t, ml_integer, ml_integer_value)</argsstring>
        <name>ARRAY_WHERE</name>
        <param>
          <type>int64_t</type>
        </param>
        <param>
          <type>ml_integer</type>
        </param>
        <param>
          <type>ml_integer_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5569" column="1" declfile="src/ml_array.c" declline="5569" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a93a87bfa2bc1d2d5a9fe19cd90a31a43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_WHERE</definition>
        <argsstring>(float, ml_real, ml_real_value)</argsstring>
        <name>ARRAY_WHERE</name>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>ml_real</type>
        </param>
        <param>
          <type>ml_real_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5570" column="1" declfile="src/ml_array.c" declline="5570" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a9ae961bfc87830e15dacfc113e3e7f3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_WHERE</definition>
        <argsstring>(double, ml_real, ml_real_value)</argsstring>
        <name>ARRAY_WHERE</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>ml_real</type>
        </param>
        <param>
          <type>ml_real_value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5571" column="1" declfile="src/ml_array.c" declline="5571" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ae7def3bc84bafa2f09be05407402650f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_WHERE</definition>
        <argsstring>(any,,)</argsstring>
        <name>ARRAY_WHERE</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">any</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5580" column="1" declfile="src/ml_array.c" declline="5580" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a5127b9061cde382c9d6babcb2c8d8f7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;where&quot;, MLArrayT, MLFunctionT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;where&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5582" column="1" bodyfile="src/ml_array.c" bodystart="5582" bodyend="5676"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1abed03949a0da744ac03b2b5a2881b05f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_WHERE_NONZERO</definition>
        <argsstring>(uint8_t, 0)</argsstring>
        <name>ARRAY_WHERE_NONZERO</name>
        <param>
          <type>uint8_t</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5750" column="1" declfile="src/ml_array.c" declline="5750" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aeebc9d09c46a16e44a283b9ce0683a97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_WHERE_NONZERO</definition>
        <argsstring>(int8_t, 0)</argsstring>
        <name>ARRAY_WHERE_NONZERO</name>
        <param>
          <type>int8_t</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5751" column="1" declfile="src/ml_array.c" declline="5751" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a7c598e0c18cd70b630b99ffbb167f1bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_WHERE_NONZERO</definition>
        <argsstring>(uint16_t, 0)</argsstring>
        <name>ARRAY_WHERE_NONZERO</name>
        <param>
          <type>uint16_t</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5752" column="1" declfile="src/ml_array.c" declline="5752" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a0998907529dd8491df272d5889728cfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_WHERE_NONZERO</definition>
        <argsstring>(int16_t, 0)</argsstring>
        <name>ARRAY_WHERE_NONZERO</name>
        <param>
          <type>int16_t</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5753" column="1" declfile="src/ml_array.c" declline="5753" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a6e95facfea97116a85b0321fe488f9c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_WHERE_NONZERO</definition>
        <argsstring>(uint32_t, 0)</argsstring>
        <name>ARRAY_WHERE_NONZERO</name>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5754" column="1" declfile="src/ml_array.c" declline="5754" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ad07d6163b13d86f886845b8e3b0658cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_WHERE_NONZERO</definition>
        <argsstring>(int32_t, 0)</argsstring>
        <name>ARRAY_WHERE_NONZERO</name>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5755" column="1" declfile="src/ml_array.c" declline="5755" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a3adef1502115190f0901b30ababf1a8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_WHERE_NONZERO</definition>
        <argsstring>(uint64_t, 0)</argsstring>
        <name>ARRAY_WHERE_NONZERO</name>
        <param>
          <type>uint64_t</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5756" column="1" declfile="src/ml_array.c" declline="5756" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a70eb9b3709cdc2d5239b1e19d99dca26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_WHERE_NONZERO</definition>
        <argsstring>(int64_t, 0)</argsstring>
        <name>ARRAY_WHERE_NONZERO</name>
        <param>
          <type>int64_t</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5757" column="1" declfile="src/ml_array.c" declline="5757" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ad8e4e0fcdeb2c98f5966462a076899b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_WHERE_NONZERO</definition>
        <argsstring>(float, 0)</argsstring>
        <name>ARRAY_WHERE_NONZERO</name>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5758" column="1" declfile="src/ml_array.c" declline="5758" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a42dfc0dd1a74f6368e5e2914451a7054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_WHERE_NONZERO</definition>
        <argsstring>(double, 0)</argsstring>
        <name>ARRAY_WHERE_NONZERO</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5759" column="1" declfile="src/ml_array.c" declline="5759" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a7df0c698c24613e04b67b9dbebd0ec7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ARRAY_WHERE_NONZERO</definition>
        <argsstring>(any, MLNil)</argsstring>
        <name>ARRAY_WHERE_NONZERO</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">any</ref></type>
        </param>
        <param>
          <type>MLNil</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5768" column="1" declfile="src/ml_array.c" declline="5768" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a628001d65615ad06a8ef7f7c1ca7c3a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;where&quot;, MLArrayT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;where&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5770" column="1" bodyfile="src/ml_array.c" bodystart="5770" bodyend="5901"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a7bcf117b264b13d9341f8233e7c2ec4c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_array_getter_any_any</definition>
        <argsstring>(void *Data)</argsstring>
        <name>ml_array_getter_any_any</name>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="5983" column="19" bodyfile="src/ml_array.c" bodystart="5983" bodyend="5985"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aac042cc8caa63f8699f5753df5814e4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_GETTER_DECLS</definition>
        <argsstring>(UInt8, uint8_t)</argsstring>
        <name>ML_ARRAY_GETTER_DECLS</name>
        <param>
          <type>UInt8</type>
        </param>
        <param>
          <type>uint8_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6025" column="1" declfile="src/ml_array.c" declline="6025" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a3b53b0c01e19a1b7367bc440a5a8072d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_GETTER_DECLS</definition>
        <argsstring>(Int8, int8_t)</argsstring>
        <name>ML_ARRAY_GETTER_DECLS</name>
        <param>
          <type>Int8</type>
        </param>
        <param>
          <type>int8_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6026" column="1" declfile="src/ml_array.c" declline="6026" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a58c13f0788d816bf5ff8e22444b916ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_GETTER_DECLS</definition>
        <argsstring>(UInt16, uint16_t)</argsstring>
        <name>ML_ARRAY_GETTER_DECLS</name>
        <param>
          <type>UInt16</type>
        </param>
        <param>
          <type>uint16_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6027" column="1" declfile="src/ml_array.c" declline="6027" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1af08f4460a4870a9e78b77df320b2fd38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_GETTER_DECLS</definition>
        <argsstring>(Int16, int16_t)</argsstring>
        <name>ML_ARRAY_GETTER_DECLS</name>
        <param>
          <type>Int16</type>
        </param>
        <param>
          <type>int16_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6028" column="1" declfile="src/ml_array.c" declline="6028" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a67f72aa6bde1a6dec56a3c7ec4b9a4f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_GETTER_DECLS</definition>
        <argsstring>(UInt32, uint32_t)</argsstring>
        <name>ML_ARRAY_GETTER_DECLS</name>
        <param>
          <type>UInt32</type>
        </param>
        <param>
          <type>uint32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6029" column="1" declfile="src/ml_array.c" declline="6029" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a8a5aacd62c5456476b2cb822d3fc90d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_GETTER_DECLS</definition>
        <argsstring>(Int32, int32_t)</argsstring>
        <name>ML_ARRAY_GETTER_DECLS</name>
        <param>
          <type>Int32</type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6030" column="1" declfile="src/ml_array.c" declline="6030" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a346d4f501f8a4c7f1a79b90355e38e26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_GETTER_DECLS</definition>
        <argsstring>(UInt64, uint64_t)</argsstring>
        <name>ML_ARRAY_GETTER_DECLS</name>
        <param>
          <type>UInt64</type>
        </param>
        <param>
          <type>uint64_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6031" column="1" declfile="src/ml_array.c" declline="6031" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aa4a79b401c4589845d4d1ee41016ca3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_GETTER_DECLS</definition>
        <argsstring>(Int64, int64_t)</argsstring>
        <name>ML_ARRAY_GETTER_DECLS</name>
        <param>
          <type>Int64</type>
        </param>
        <param>
          <type>int64_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6032" column="1" declfile="src/ml_array.c" declline="6032" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ad0df24de0debb592573c4570d1c57d00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_GETTER_DECLS</definition>
        <argsstring>(Float32, float)</argsstring>
        <name>ML_ARRAY_GETTER_DECLS</name>
        <param>
          <type>Float32</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6033" column="1" declfile="src/ml_array.c" declline="6033" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ae91d729d0558cd6dcf073a80fc2daa0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_GETTER_DECLS</definition>
        <argsstring>(Float64, double)</argsstring>
        <name>ML_ARRAY_GETTER_DECLS</name>
        <param>
          <type>Float64</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6034" column="1" declfile="src/ml_array.c" declline="6034" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a241e1f109c9383eff13ec9a2523dc972" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_GETTER_DECLS</definition>
        <argsstring>(Any, any)</argsstring>
        <name>ML_ARRAY_GETTER_DECLS</name>
        <param>
          <type>Any</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">any</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6043" column="1" declfile="src/ml_array.c" declline="6043" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ad8384ed932e52912e269578f2f7aa557" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_array_dot_any</definition>
        <argsstring>(void *DataA, ml_array_dimension_t *DimA, ml_array_getter_any GetterA, void *DataB, ml_array_dimension_t *DimB, ml_array_getter_any GetterB, ml_value_t **DataC)</argsstring>
        <name>ml_array_dot_any</name>
        <param>
          <type>void *</type>
          <declname>DataA</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>DimA</declname>
        </param>
        <param>
          <type>ml_array_getter_any</type>
          <declname>GetterA</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>DataB</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>DimB</declname>
        </param>
        <param>
          <type>ml_array_getter_any</type>
          <declname>GetterB</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>DataC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6112" column="13" bodyfile="src/ml_array.c" bodystart="6112" bodyend="6174"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a72c8417403c08dead99978513a3fe6df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_DOT</definition>
        <argsstring>(uint8_t)</argsstring>
        <name>ML_ARRAY_DOT</name>
        <param>
          <type>uint8_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6176" column="1" declfile="src/ml_array.c" declline="6176" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1af0d2bedc31d397a590923f3b16c05a57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_DOT</definition>
        <argsstring>(int8_t)</argsstring>
        <name>ML_ARRAY_DOT</name>
        <param>
          <type>int8_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6177" column="1" declfile="src/ml_array.c" declline="6177" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ac25e31c0a6ba6250a98a1382d8394a6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_DOT</definition>
        <argsstring>(uint16_t)</argsstring>
        <name>ML_ARRAY_DOT</name>
        <param>
          <type>uint16_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6178" column="1" declfile="src/ml_array.c" declline="6178" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a24a163961921df0fa322d122f9e78e6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_DOT</definition>
        <argsstring>(int16_t)</argsstring>
        <name>ML_ARRAY_DOT</name>
        <param>
          <type>int16_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6179" column="1" declfile="src/ml_array.c" declline="6179" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a8c9975ab1a73e5d595b470dfd9129c78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_DOT</definition>
        <argsstring>(uint32_t)</argsstring>
        <name>ML_ARRAY_DOT</name>
        <param>
          <type>uint32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6180" column="1" declfile="src/ml_array.c" declline="6180" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a1107739de26846d79e1c83b536b562ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_DOT</definition>
        <argsstring>(int32_t)</argsstring>
        <name>ML_ARRAY_DOT</name>
        <param>
          <type>int32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6181" column="1" declfile="src/ml_array.c" declline="6181" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a623c783e6300645831f88f0b89cee13d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_DOT</definition>
        <argsstring>(uint64_t)</argsstring>
        <name>ML_ARRAY_DOT</name>
        <param>
          <type>uint64_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6182" column="1" declfile="src/ml_array.c" declline="6182" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a2b81f533ee37d3b74464b91725478351" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_DOT</definition>
        <argsstring>(int64_t)</argsstring>
        <name>ML_ARRAY_DOT</name>
        <param>
          <type>int64_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6183" column="1" declfile="src/ml_array.c" declline="6183" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1ade5741ddcb9be693dd6f2dbd6933ae56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_DOT</definition>
        <argsstring>(float)</argsstring>
        <name>ML_ARRAY_DOT</name>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6184" column="1" declfile="src/ml_array.c" declline="6184" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a2124c46f4afbd5421f0af7976360a4c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ARRAY_DOT</definition>
        <argsstring>(double)</argsstring>
        <name>ML_ARRAY_DOT</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6185" column="1" declfile="src/ml_array.c" declline="6185" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aba0fe2e26c5c4360bcd08e8c2d892e92" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_array_dot_fill</definition>
        <argsstring>(void *DataA, ml_array_dimension_t *DimA, void *GetterA, int DegreeA, void *DataB, ml_array_dimension_t *DimB, void *GetterB, int DegreeB, void *DataC, ml_array_dimension_t *DimC, ml_array_dot_fn DotFn, int DegreeC)</argsstring>
        <name>ml_array_dot_fill</name>
        <param>
          <type>void *</type>
          <declname>DataA</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>DimA</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>GetterA</declname>
        </param>
        <param>
          <type>int</type>
          <declname>DegreeA</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>DataB</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>DimB</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>GetterB</declname>
        </param>
        <param>
          <type>int</type>
          <declname>DegreeB</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>DataC</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>DimC</declname>
        </param>
        <param>
          <type>ml_array_dot_fn</type>
          <declname>DotFn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>DegreeC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6200" column="13" bodyfile="src/ml_array.c" bodystart="6200" bodyend="6256"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1abf6a5d2e7fd59719e6e3a5fe58154065" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_array_infix_fill</definition>
        <argsstring>(void *DataA, ml_array_dimension_t *DimA, void *GetterA, int DegreeA, void *DataB, ml_array_dimension_t *DimB, void *GetterB, int DegreeB, void *DataC, ml_array_dimension_t *DimC, ml_array_infix_set_fn InfixSetFn, int DegreeC)</argsstring>
        <name>ml_array_infix_fill</name>
        <param>
          <type>void *</type>
          <declname>DataA</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>DimA</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>GetterA</declname>
        </param>
        <param>
          <type>int</type>
          <declname>DegreeA</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>DataB</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>DimB</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>GetterB</declname>
        </param>
        <param>
          <type>int</type>
          <declname>DegreeB</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>DataC</declname>
        </param>
        <param>
          <type><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref> *</type>
          <declname>DimC</declname>
        </param>
        <param>
          <type>ml_array_infix_set_fn</type>
          <declname>InfixSetFn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>DegreeC</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6300" column="13" bodyfile="src/ml_array.c" bodystart="6300" bodyend="6356"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1adc3e229ef567444022f97f57b37768cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;.&quot;, MLArrayT, MLArrayT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;.&quot;</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <param>
          <type>MLArrayT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6419" column="1" bodyfile="src/ml_array.c" bodystart="6419" bodyend="6543"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a5c14df93dca51499b76d5e4a2a94ceec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;@&quot;, MLMatrixT, MLVectorT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;@&quot;</type>
        </param>
        <param>
          <type>MLMatrixT</type>
        </param>
        <param>
          <type>MLVectorT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6545" column="1" bodyfile="src/ml_array.c" bodystart="6545" bodyend="6640"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a922744fc62f4c8192a03bec20654ed39" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_array_pairwise_infix</definition>
        <argsstring>(ml_array_infix_set_fn *InfixSetFns, int Count, ml_value_t **Args)</argsstring>
        <name>ml_array_pairwise_infix</name>
        <param>
          <type>ml_array_infix_set_fn *</type>
          <declname>InfixSetFns</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6642" column="19" bodyfile="src/ml_array.c" bodystart="6642" bodyend="6680"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1af23d2bc9fb2477aaec85ed753de93ad0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_lu_decomp_real</definition>
        <argsstring>(double **A, int *P, int N)</argsstring>
        <name>ml_lu_decomp_real</name>
        <param>
          <type>double **</type>
          <declname>A</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>P</declname>
        </param>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6690" column="12" bodyfile="src/ml_array.c" bodystart="6690" bodyend="6720"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a7fd38543f01c3d94aca5187c161edb55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;\\&quot;, MLMatrixT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;\\&quot;</type>
        </param>
        <param>
          <type>MLMatrixT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6758" column="1" bodyfile="src/ml_array.c" bodystart="6758" bodyend="6833"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aadb5367331e28463ca79e6157bbb8fe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;\\&quot;, MLMatrixT, MLVectorT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;\\&quot;</type>
        </param>
        <param>
          <type>MLMatrixT</type>
        </param>
        <param>
          <type>MLVectorT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6835" column="1" bodyfile="src/ml_array.c" bodystart="6835" bodyend="6909"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1adc2370d72efd4fa043ee4bbbc079ffef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * determinant2</definition>
        <argsstring>(ml_array_t *M, int N, int *Rows, int *Cols)</argsstring>
        <name>determinant2</name>
        <param>
          <type><ref refid="structml__array__t" kindref="compound">ml_array_t</ref> *</type>
          <declname>M</declname>
        </param>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>Rows</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>Cols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6911" column="19" bodyfile="src/ml_array.c" bodystart="6911" bodyend="6953"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a9cc047dd503913324fa038659e06f39a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;det&quot;, MLMatrixT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;det&quot;</type>
        </param>
        <param>
          <type>MLMatrixT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="6955" column="1" bodyfile="src/ml_array.c" bodystart="6955" bodyend="7009"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1aecda53bc2883d701a2c46f902093b996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;tr&quot;, MLMatrixT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;tr&quot;</type>
        </param>
        <param>
          <type>MLMatrixT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="7011" column="1" bodyfile="src/ml_array.c" bodystart="7011" bodyend="7117"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a2783efa04778004d1ecd2db14a8b1d28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;softmax&quot;, MLVectorMutableRealT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;softmax&quot;</type>
        </param>
        <param>
          <type>MLVectorMutableRealT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="7119" column="1" bodyfile="src/ml_array.c" bodystart="7119" bodyend="7137"/>
      </memberdef>
      <memberdef kind="function" id="ml__array_8c_1a6844c232b8ac69227fccd412d0d496d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_array_init</definition>
        <argsstring>(stringmap_t *Globals)</argsstring>
        <name>ml_array_init</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Globals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_array.c" line="7332" column="6" bodyfile="src/ml_array.c" bodystart="7332" bodyend="7492"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ml_array.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_math.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>I</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ML_CATEGORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;array&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*<ref refid="structml__value__t" kindref="compound">any</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_array_of_fn(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">ML_CFUNCTION(MLArray,<sp/>NULL,<sp/>ml_array_of_fn);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//@array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//&lt;List:list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>array<sp/>containing<sp/>the<sp/>values<sp/>in<sp/>:mini:`List`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>shape<sp/>and<sp/>type<sp/>of<sp/>the<sp/>array<sp/>is<sp/>determined<sp/>from<sp/>the<sp/>elements<sp/>in<sp/>:mini:`List`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">ML_TYPE(MLArrayT,<sp/>(MLAddressT,<sp/>MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>type<sp/>for<sp/>multidimensional<sp/>arrays.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArray</highlight></codeline>
<codeline lineno="32"><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">ML_TYPE(MLArrayMutableT,<sp/>(MLArrayT,<sp/>MLBufferT),<sp/></highlight><highlight class="stringliteral">&quot;array::mutable&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArray</highlight></codeline>
<codeline lineno="36"><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">ML_TYPE(MLVectorT,<sp/>(MLArrayT),<sp/></highlight><highlight class="stringliteral">&quot;vector&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arrays<sp/>with<sp/>exactly<sp/>1<sp/>dimension.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArray</highlight></codeline>
<codeline lineno="41"><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">ML_TYPE(MLVectorMutableT,<sp/>(MLVectorT,<sp/>MLArrayMutableT),<sp/></highlight><highlight class="stringliteral">&quot;vector::mutable&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArray</highlight></codeline>
<codeline lineno="45"><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">ML_TYPE(MLMatrixT,<sp/>(MLArrayT),<sp/></highlight><highlight class="stringliteral">&quot;matrix&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arrays<sp/>with<sp/>exactly<sp/>2<sp/>dimensions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArray</highlight></codeline>
<codeline lineno="50"><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">ML_TYPE(MLMatrixMutableT,<sp/>(MLMatrixT,<sp/>MLArrayMutableT),<sp/></highlight><highlight class="stringliteral">&quot;matrix::mutable&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArray</highlight></codeline>
<codeline lineno="54"><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">ML_TYPE(MLArrayComplexT,<sp/>(MLArrayT),<sp/></highlight><highlight class="stringliteral">&quot;array::complex&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayComplex32T[];</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayComplex64T[];</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">ML_TYPE(MLArrayMutableComplexT,<sp/>(MLArrayComplexT,<sp/>MLArrayMutableT),<sp/></highlight><highlight class="stringliteral">&quot;array::mutable::complex&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>type<sp/>for<sp/>arrays<sp/>of<sp/>complex<sp/>numbers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayMutableComplex32T[];</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayMutableComplex64T[];</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">ML_TYPE(MLVectorComplexT,<sp/>(MLArrayComplexT,<sp/>MLVectorT),<sp/></highlight><highlight class="stringliteral">&quot;vector::complex&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorComplex32T[];</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorComplex64T[];</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">ML_TYPE(MLVectorMutableComplexT,<sp/>(MLVectorComplexT,<sp/>MLArrayMutableComplexT,<sp/>MLVectorMutableT),<sp/></highlight><highlight class="stringliteral">&quot;vector::mutable::complex&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>type<sp/>for<sp/>vectors<sp/>of<sp/>complex<sp/>numbers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorMutableComplex32T[];</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorMutableComplex64T[];</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">ML_TYPE(MLMatrixComplexT,<sp/>(MLArrayComplexT,<sp/>MLMatrixT),<sp/></highlight><highlight class="stringliteral">&quot;matrix::mutable::complex&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixComplex32T[];</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixComplex64T[];</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">ML_TYPE(MLMatrixMutableComplexT,<sp/>(MLArrayMutableComplexT,<sp/>MLMatrixMutableT),<sp/></highlight><highlight class="stringliteral">&quot;matrix::mutable::complex&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>type<sp/>for<sp/>matrices<sp/>of<sp/>complex<sp/>numbers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixMutableComplex32T[];</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixMutableComplex64T[];</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">ML_TYPE(MLArrayRealT,<sp/>(MLArrayComplexT),<sp/></highlight><highlight class="stringliteral">&quot;array::mutable::real&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">ML_TYPE(MLArrayMutableRealT,<sp/>(MLArrayRealT,<sp/>MLArrayMutableComplexT),<sp/></highlight><highlight class="stringliteral">&quot;array::mutable::real&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>type<sp/>for<sp/>arrays<sp/>of<sp/>real<sp/>numbers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">ML_TYPE(MLVectorRealT,<sp/>(MLArrayRealT,<sp/>MLVectorComplexT),<sp/></highlight><highlight class="stringliteral">&quot;vector::real&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">ML_TYPE(MLVectorMutableRealT,<sp/>(MLVectorRealT,<sp/>MLArrayMutableRealT,<sp/>MLVectorMutableComplexT),<sp/></highlight><highlight class="stringliteral">&quot;vector::mutable::real&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>type<sp/>for<sp/>vectors<sp/>of<sp/>real<sp/>numbers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">ML_TYPE(MLMatrixRealT,<sp/>(MLArrayRealT,<sp/>MLMatrixComplexT),<sp/></highlight><highlight class="stringliteral">&quot;matrix::real&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">ML_TYPE(MLMatrixMutableRealT,<sp/>(MLMatrixRealT,<sp/>MLArrayMutableRealT,<sp/>MLMatrixMutableComplexT),<sp/></highlight><highlight class="stringliteral">&quot;matrix::mutable::real&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>type<sp/>for<sp/>matrices<sp/>of<sp/>real<sp/>numbers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">ML_TYPE(MLArrayRealT,<sp/>(MLArrayT),<sp/></highlight><highlight class="stringliteral">&quot;array::mutable::real&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">ML_TYPE(MLArrayMutableRealT,<sp/>(MLArrayRealT,<sp/>MLArrayMutableT),<sp/></highlight><highlight class="stringliteral">&quot;array::mutable::real&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">ML_TYPE(MLVectorRealT,<sp/>(MLArrayRealT,<sp/>MLVectorT),<sp/></highlight><highlight class="stringliteral">&quot;vector::real&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">ML_TYPE(MLVectorMutableRealT,<sp/>(MLVectorRealT,<sp/>MLArrayMutableRealT,<sp/>MLVectorMutableT),<sp/></highlight><highlight class="stringliteral">&quot;vector::mutable::real&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">ML_TYPE(MLMatrixRealT,<sp/>(MLArrayRealT,<sp/>MLMatrixT),<sp/></highlight><highlight class="stringliteral">&quot;matrix::real&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">ML_TYPE(MLMatrixMutableRealT,<sp/>(MLMatrixRealT,<sp/>MLArrayMutableRealT,<sp/>MLMatrixMutableT),<sp/></highlight><highlight class="stringliteral">&quot;matrix::mutable::real&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">ML_TYPE(MLArrayIntegerT,<sp/>(MLArrayRealT),<sp/></highlight><highlight class="stringliteral">&quot;array::integer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayUInt8T[];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayInt8T[];</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayUInt16T[];</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayInt16T[];</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayUInt32T[];</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayInt32T[];</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayUInt64T[];</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayInt64T[];</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayFloat32T[];</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayFloat64T[];</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">ML_TYPE(MLArrayMutableIntegerT,<sp/>(MLArrayIntegerT,<sp/>MLArrayMutableRealT),<sp/></highlight><highlight class="stringliteral">&quot;array::mutable::integer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>type<sp/>for<sp/>arrays<sp/>of<sp/>integers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayMutableUInt8T[];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayMutableInt8T[];</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayMutableUInt16T[];</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayMutableInt16T[];</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayMutableUInt32T[];</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayMutableInt32T[];</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayMutableUInt64T[];</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayMutableInt64T[];</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayMutableFloat32T[];</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayMutableFloat64T[];</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">ML_TYPE(MLVectorIntegerT,<sp/>(MLVectorRealT),<sp/></highlight><highlight class="stringliteral">&quot;vector::integer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorUInt8T[];</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorInt8T[];</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorUInt16T[];</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorInt16T[];</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorUInt32T[];</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorInt32T[];</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorUInt64T[];</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorInt64T[];</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorFloat32T[];</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorFloat64T[];</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">ML_TYPE(MLVectorMutableIntegerT,<sp/>(MLVectorIntegerT,<sp/>MLVectorMutableRealT),<sp/></highlight><highlight class="stringliteral">&quot;vector::mutable::integer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>type<sp/>for<sp/>vectors<sp/>of<sp/>integers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorMutableUInt8T[];</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorMutableInt8T[];</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorMutableUInt16T[];</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorMutableInt16T[];</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorMutableUInt32T[];</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorMutableInt32T[];</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorMutableUInt64T[];</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorMutableInt64T[];</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorMutableFloat32T[];</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorMutableFloat64T[];</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">ML_TYPE(MLMatrixIntegerT,<sp/>(MLMatrixRealT),<sp/></highlight><highlight class="stringliteral">&quot;matrix::integer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixUInt8T[];</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixInt8T[];</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixUInt16T[];</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixInt16T[];</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixUInt32T[];</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixInt32T[];</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixUInt64T[];</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixInt64T[];</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixFloat32T[];</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixFloat64T[];</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal">ML_TYPE(MLMatrixMutableIntegerT,<sp/>(MLMatrixIntegerT,<sp/>MLMatrixMutableRealT),<sp/></highlight><highlight class="stringliteral">&quot;matrix::mutable::integer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>type<sp/>for<sp/>matrices<sp/>of<sp/>integers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixMutableUInt8T[];</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixMutableInt8T[];</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixMutableUInt16T[];</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixMutableInt16T[];</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixMutableUInt32T[];</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixMutableInt32T[];</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixMutableUInt64T[];</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixMutableInt64T[];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixMutableFloat32T[];</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixMutableFloat64T[];</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayAnyT[];</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorAnyT[];</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixAnyT[];</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLArrayMutableAnyT[];</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLVectorMutableAnyT[];</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLMatrixMutableAnyT[];</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>MLArraySizes[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_NONE]<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*),</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U8]<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint8_t),</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I8]<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int8_t),</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U16]<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint16_t),</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I16]<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int16_t),</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U32]<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t),</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I32]<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32_t),</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U64]<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t),</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I64]<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int64_t),</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_F32]<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_F64]<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double),</highlight></codeline>
<codeline lineno="229"><highlight class="normal">#ifdef<sp/>ML_COMPLEX</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_C32]<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(complex<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_C64]<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(complex<sp/>double),</highlight></codeline>
<codeline lineno="232"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_ANY]<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)</highlight></codeline>
<codeline lineno="234"><highlight class="normal">};</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ARRAY_TYPES(NAME)<sp/>\</highlight></codeline>
<codeline lineno="239"><highlight class="preprocessor">static<sp/>ml_type_t<sp/>*ML<sp/>##<sp/>NAME<sp/>##<sp/>Types[]<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="240"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_NONE]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>T,<sp/>\</highlight></codeline>
<codeline lineno="241"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U8]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>UInt8T,<sp/>\</highlight></codeline>
<codeline lineno="242"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I8]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>Int8T,<sp/>\</highlight></codeline>
<codeline lineno="243"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U16]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>UInt16T,<sp/>\</highlight></codeline>
<codeline lineno="244"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I16]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>Int16T,<sp/>\</highlight></codeline>
<codeline lineno="245"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U32]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>UInt32T,<sp/>\</highlight></codeline>
<codeline lineno="246"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I32]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>Int32T,<sp/>\</highlight></codeline>
<codeline lineno="247"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U64]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>UInt64T,<sp/>\</highlight></codeline>
<codeline lineno="248"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I64]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>Int64T,<sp/>\</highlight></codeline>
<codeline lineno="249"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_F32]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>Float32T,<sp/>\</highlight></codeline>
<codeline lineno="250"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_F64]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>Float64T,<sp/>\</highlight></codeline>
<codeline lineno="251"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_C32]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>Complex32T,<sp/>\</highlight></codeline>
<codeline lineno="252"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_C64]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>Complex64T,<sp/>\</highlight></codeline>
<codeline lineno="253"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_ANY]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>AnyT<sp/>\</highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ARRAY_TYPES(NAME)<sp/>\</highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor">static<sp/>ml_type_t<sp/>*ML<sp/>##<sp/>NAME<sp/>##<sp/>Types[]<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="260"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_NONE]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>T,<sp/>\</highlight></codeline>
<codeline lineno="261"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U8]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>UInt8T,<sp/>\</highlight></codeline>
<codeline lineno="262"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I8]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>Int8T,<sp/>\</highlight></codeline>
<codeline lineno="263"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U16]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>UInt16T,<sp/>\</highlight></codeline>
<codeline lineno="264"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I16]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>Int16T,<sp/>\</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U32]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>UInt32T,<sp/>\</highlight></codeline>
<codeline lineno="266"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I32]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>Int32T,<sp/>\</highlight></codeline>
<codeline lineno="267"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U64]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>UInt64T,<sp/>\</highlight></codeline>
<codeline lineno="268"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I64]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>Int64T,<sp/>\</highlight></codeline>
<codeline lineno="269"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_F32]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>Float32T,<sp/>\</highlight></codeline>
<codeline lineno="270"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_F64]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>Float64T,<sp/>\</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_ANY]<sp/>=<sp/>ML<sp/>##<sp/>NAME<sp/>##<sp/>AnyT<sp/>\</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">ML_ARRAY_TYPES(Array);</highlight></codeline>
<codeline lineno="277"><highlight class="normal">ML_ARRAY_TYPES(ArrayMutable);</highlight></codeline>
<codeline lineno="278"><highlight class="normal">ML_ARRAY_TYPES(Vector);</highlight></codeline>
<codeline lineno="279"><highlight class="normal">ML_ARRAY_TYPES(VectorMutable);</highlight></codeline>
<codeline lineno="280"><highlight class="normal">ML_ARRAY_TYPES(Matrix);</highlight></codeline>
<codeline lineno="281"><highlight class="normal">ML_ARRAY_TYPES(MatrixMutable);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ml_array_format_t<sp/>ml_array_format(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ml_array_format_t<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_NONE;<sp/>Format<sp/>&lt;=<sp/>ML_ARRAY_FORMAT_ANY;<sp/>++Format)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MLArrayTypes[Format]<sp/>==<sp/>Type)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Format;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MLArrayMutableTypes[Format]<sp/>==<sp/>Type)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Format;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MLVectorTypes[Format]<sp/>==<sp/>Type)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Format;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MLVectorMutableTypes[Format]<sp/>==<sp/>Type)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Format;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MLMatrixTypes[Format]<sp/>==<sp/>Type)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Format;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MLMatrixMutableTypes[Format]<sp/>==<sp/>Type)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Format;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_NONE;</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*ml_array_alloc(ml_array_format_t<sp/>Format,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array<sp/>=<sp/>xnew(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref>,<sp/>Degree,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref>);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Base.Type<sp/>=<sp/>MLVectorMutableTypes[Format];</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Base.Type<sp/>=<sp/>MLMatrixMutableTypes[Format];</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Base.Type<sp/>=<sp/>MLArrayMutableTypes[Format];</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>Array-&gt;Degree<sp/>=<sp/>Degree;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>Array-&gt;Format<sp/>=<sp/>Format;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Array;</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*array_alloc(ml_array_format_t<sp/>Format,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Format<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>anew(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*,<sp/>Size<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*));</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>snew(Size);</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*ml_array(ml_array_format_t<sp/>Format,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array<sp/>=<sp/>ml_array_alloc(Format,<sp/>Degree);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>MLArraySizes[Format];</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>Sizes;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Sizes,<sp/>Degree);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Dimensions[I].Stride<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Array-&gt;Dimensions[I].Size<sp/>=<sp/>va_arg(Sizes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Sizes);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>Array-&gt;Base.Value<sp/>=<sp/>array_alloc(Format,<sp/>DataSize);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>Array-&gt;Base.Length<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Array;</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_array_degree(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Value)-&gt;Degree;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_array_size(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Dim)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Dim<sp/>&lt;<sp/>0<sp/>||<sp/>Dim<sp/>&gt;=<sp/>Array-&gt;Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Array-&gt;Dimensions[Dim].Size;</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="structml__array__init__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__array__init__state__t" kindref="compound">ml_array_init_state_t</ref><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Address;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[];</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}<sp/><ref refid="structml__array__init__state__t" kindref="compound">ml_array_init_state_t</ref>;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_array_init_run(<ref refid="structml__array__init__state__t" kindref="compound">ml_array_init_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array<sp/>=<sp/>State-&gt;Array;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Array-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_NONE:</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_ANY:</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)State-&gt;Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(uint8_t<sp/>*)State-&gt;Address<sp/>=<sp/>ml_integer_value(Value);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint8_t);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(int8_t<sp/>*)State-&gt;Address<sp/>=<sp/>ml_integer_value(Value);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int8_t);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(uint16_t<sp/>*)State-&gt;Address<sp/>=<sp/>ml_integer_value(Value);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint16_t);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(int16_t<sp/>*)State-&gt;Address<sp/>=<sp/>ml_integer_value(Value);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int16_t);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(uint32_t<sp/>*)State-&gt;Address<sp/>=<sp/>ml_integer_value(Value);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(int32_t<sp/>*)State-&gt;Address<sp/>=<sp/>ml_integer_value(Value);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32_t);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(uint64_t<sp/>*)State-&gt;Address<sp/>=<sp/>ml_integer_value(Value);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(int64_t<sp/>*)State-&gt;Address<sp/>=<sp/>ml_integer_value(Value);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int64_t);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)State-&gt;Address<sp/>=<sp/>ml_real_value(Value);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)State-&gt;Address<sp/>=<sp/>ml_real_value(Value);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(complex<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)State-&gt;Address<sp/>=<sp/>ml_complex_value(Value);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(complex<sp/>float);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)State-&gt;Address<sp/>=<sp/>ml_complex_value(Value);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(complex<sp/>double);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Array-&gt;Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Next<sp/>=<sp/>ml_integer_value(State-&gt;Args[I])<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Next<sp/>&lt;=<sp/>Array-&gt;Dimensions[I].Size)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[I]<sp/>=<sp/>ml_integer(Next);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>State-&gt;Function,<sp/>Array-&gt;Degree,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[I]<sp/>=<sp/>ml_integer(1);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Array);</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>array_copy(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target,<sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_array_typed_new_fnx(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_array_format_t<sp/>Format<sp/>=<sp/>(intptr_t)Data;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Args[0],<sp/>MLListT))<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>ml_list_length(Args[0]);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array<sp/>=<sp/>ml_array_alloc(Format,<sp/>Degree);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[0],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter-&gt;Value,<sp/>MLIntegerT))<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Dimension<sp/>is<sp/>not<sp/>an<sp/>integer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Dimensions[I++].Size<sp/>=<sp/>ml_integer_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>MLArraySizes[Format];</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Array-&gt;Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Dimensions[I].Stride<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Array-&gt;Dimensions[I].Size;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Base.Value<sp/>=<sp/>array_alloc(Format,<sp/>DataSize);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Base.Length<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Format<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Values<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)Array-&gt;Base.Value;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Values++<sp/>=<sp/>MLNil;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(Array-&gt;Base.Value,<sp/>0,<sp/>DataSize);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Array);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__init__state__t" kindref="compound">ml_array_init_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__array__init__state__t" kindref="compound">ml_array_init_state_t</ref>,<sp/>Array-&gt;Degree,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_init_run;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>=<sp/>Array-&gt;Base.Value;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Array<sp/>=<sp/>Array;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>State-&gt;Function<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Array-&gt;Degree;<sp/>++I)<sp/>State-&gt;Args[I]<sp/>=<sp/>ml_integer(1);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>Array-&gt;Degree,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Args[0],<sp/>MLArrayT))<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(Format,<sp/>Source-&gt;Degree);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_copy(Target,<sp/>Source);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Target);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Args[0],<sp/>MLIntegerT))<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count<sp/>-<sp/>1;<sp/>++I)<sp/>ML_CHECKX_ARG_TYPE(I,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>ml_is(Args[Count<sp/>-<sp/>1],<sp/>MLIntegerT)<sp/>?<sp/>Count<sp/>:<sp/>(Count<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array<sp/>=<sp/>ml_array_alloc(Format,<sp/>Degree);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>MLArraySizes[Format];</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Array-&gt;Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Dimensions[I].Stride<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Array-&gt;Dimensions[I].Size<sp/>=<sp/>ml_integer_value(Args[I]);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Base.Value<sp/>=<sp/>array_alloc(Format,<sp/>DataSize);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Base.Length<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>==<sp/>Degree)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Format<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Values<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)Array-&gt;Base.Value;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Values++<sp/>=<sp/>MLNil;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(Array-&gt;Base.Value,<sp/>0,<sp/>DataSize);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Array);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__init__state__t" kindref="compound">ml_array_init_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__array__init__state__t" kindref="compound">ml_array_init_state_t</ref>,<sp/>Array-&gt;Degree,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_init_run;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>=<sp/>Array-&gt;Base.Value;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Array<sp/>=<sp/>Array;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>State-&gt;Function<sp/>=<sp/>Args[Count<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Array-&gt;Degree;<sp/>++I)<sp/>State-&gt;Args[I]<sp/>=<sp/>ml_integer(1);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>Array-&gt;Degree,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Args[0],<sp/>MLAddressT))<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array<sp/>=<sp/>ml_array_alloc(Format,<sp/>1);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Args[0],<sp/>MLBufferT))<sp/>Array-&gt;Base.Type<sp/>=<sp/>MLVectorTypes[Format];</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Array-&gt;Dimensions[0].Size<sp/>=<sp/>ml_address_length(Args[0])<sp/>/<sp/>MLArraySizes[Format];</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Stride<sp/>=<sp/>Array-&gt;Dimensions[0].Stride<sp/>=<sp/>MLArraySizes[Format];</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Base.Value<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_address_value(Args[0]);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Base.Length<sp/>=<sp/>Size<sp/>*<sp/>Stride;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Array);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>list<sp/>or<sp/>array<sp/>for<sp/>argument<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal">ML_FUNCTIONX(MLArrayNew)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="comment">//@array::new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLTypeT);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(1,<sp/>MLListT);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_array_format_t<sp/>Format<sp/>=<sp/>ml_array_format((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[0]);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Format<sp/>==<sp/>ML_ARRAY_FORMAT_NONE)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>type<sp/>for<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_typed_new_fnx(Caller,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Format,<sp/>Count<sp/>-<sp/>1,<sp/>Args<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal">ML_FUNCTION(MLArrayWrap)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="comment">//@array::wrap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type:type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="comment">//&lt;Strides</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>pointing<sp/>to<sp/>the<sp/>contents<sp/>of<sp/>:mini:`Address`<sp/>with<sp/>the<sp/>corresponding<sp/>sizes<sp/>and<sp/>strides.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>buffer(16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>array::wrap(array::uint16,<sp/>B,<sp/>[2,<sp/>2,<sp/>2],<sp/>[8,<sp/>4,<sp/>2])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(4);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLTypeT);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>MLAddressT);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(2,<sp/>MLListT);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(3,<sp/>MLListT);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_array_format_t<sp/>Format<sp/>=<sp/>ml_array_format((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[0]);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Format<sp/>==<sp/>ML_ARRAY_FORMAT_NONE)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>type<sp/>for<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>ml_list_length(Args[2]);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Dimensions<sp/>must<sp/>not<sp/>be<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree<sp/>!=<sp/>ml_list_length(Args[3]))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Dimensions<sp/>and<sp/>strides<sp/>must<sp/>have<sp/>same<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array<sp/>=<sp/>ml_array_alloc(Format,<sp/>Degree);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Args[1],<sp/>MLBufferT))<sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Degree)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>Array-&gt;Base.Type<sp/>=<sp/>MLVectorTypes[Format];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/>Array-&gt;Base.Type<sp/>=<sp/>MLMatrixTypes[Format];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>Array-&gt;Base.Type<sp/>=<sp/>MLArrayTypes[Format];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Total<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Degree;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*SizeValue<sp/>=<sp/>ml_list_get(Args[2],<sp/>I<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*StrideValue<sp/>=<sp/>ml_list_get(Args[3],<sp/>I<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(SizeValue,<sp/>MLIntegerT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Dimension<sp/>is<sp/>not<sp/>an<sp/>integer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(StrideValue,<sp/>MLIntegerT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Stride<sp/>is<sp/>not<sp/>an<sp/>integer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>ml_integer_value(SizeValue);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Size<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Dimension<sp/>must<sp/>be<sp/>positive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride<sp/>=<sp/>ml_integer_value(StrideValue);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Stride<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Stride<sp/>must<sp/>be<sp/>positive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Total<sp/>+=<sp/>(Size<sp/>-<sp/>1)<sp/>*<sp/>Stride;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Dimensions[I].Size<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Dimensions[I].Stride<sp/>=<sp/>Stride;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>Total<sp/>+=<sp/>Array-&gt;Dimensions[Degree<sp/>-<sp/>1].Stride;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Total<sp/>&gt;<sp/>ml_address_length(Args[1]))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Size<sp/>larger<sp/>than<sp/>buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>Array-&gt;Base.Value<sp/>=<sp/>((<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[1])-&gt;Value;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>Array-&gt;Base.Length<sp/>=<sp/>Total;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Array;</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;degree&quot;</highlight><highlight class="normal">,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>degree<sp/>of<sp/>:mini:`Array`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2,<sp/>3],<sp/>[4,<sp/>5,<sp/>6]])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:degree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Array-&gt;Degree);</highlight></codeline>
<codeline lineno="579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;shape&quot;</highlight><highlight class="normal">,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="comment">//&gt;list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>shape<sp/>of<sp/>:mini:`Array`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2,<sp/>3],<sp/>[4,<sp/>5,<sp/>6]])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Shape<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Array-&gt;Degree;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Shape,<sp/>ml_integer(Array-&gt;Dimensions[I].Size));</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Shape;</highlight></codeline>
<codeline lineno="593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;count&quot;</highlight><highlight class="normal">,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>:mini:`Array`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2,<sp/>3],<sp/>[4,<sp/>5,<sp/>6]])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Array-&gt;Degree;<sp/>++I)<sp/>Size<sp/>*=<sp/>Array-&gt;Dimensions[I].Size;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Size);</highlight></codeline>
<codeline lineno="605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*ml_array_transpose(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>Source-&gt;Degree;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(Source-&gt;Format,<sp/>Degree);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Degree;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target-&gt;Dimensions[I]<sp/>=<sp/>Source-&gt;Dimensions[Degree<sp/>-<sp/>I<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Base<sp/>=<sp/>Source-&gt;Base;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Target;</highlight></codeline>
<codeline lineno="615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;^&quot;</highlight><highlight class="normal">,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>transpose<sp/>of<sp/>:mini:`Array`,<sp/>sharing<sp/>the<sp/>underlying<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2,<sp/>3],<sp/>[4,<sp/>5,<sp/>6]])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>^A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)ml_array_transpose((<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0]);</highlight></codeline>
<codeline lineno="624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;permute&quot;</highlight><highlight class="normal">,<sp/>MLArrayT,<sp/>MLListT)<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="comment">//&lt;Indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>sharing<sp/>the<sp/>underlying<sp/>data<sp/>with<sp/>:mini:`Array`,<sp/>permuting<sp/>the<sp/>axes<sp/>according<sp/>to<sp/>:mini:`Indices`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[[1,<sp/>2,<sp/>3],<sp/>[4,<sp/>5,<sp/>6]],<sp/>[[7,<sp/>8,<sp/>9],<sp/>[10,<sp/>11,<sp/>12]]])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>A:permute([2,<sp/>3,<sp/>1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>B:shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>Source-&gt;Degree;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree<sp/>&gt;<sp/>64)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>implemented<sp/>for<sp/>degree<sp/>&gt;<sp/>64<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_list_length(Args[1])<sp/>!=<sp/>Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;List<sp/>length<sp/>must<sp/>match<sp/>degree&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(Source-&gt;Format,<sp/>Degree);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*TargetDimension<sp/>=<sp/>Target-&gt;Dimensions;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Bits<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>Degree)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[1],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter-&gt;Value,<sp/>MLIntegerT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>ml_integer_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(J<sp/>&lt;=<sp/>0)<sp/>J<sp/>+=<sp/>Degree<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(J<sp/>&lt;<sp/>1<sp/>||<sp/>J<sp/>&gt;<sp/>Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Bit<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(J<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(Bits<sp/>&amp;<sp/>Bit))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>permutation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bits<sp/>-=<sp/>Bit;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*TargetDimension++<sp/>=<sp/>Source-&gt;Dimensions[J<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Bits<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>permutation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Base<sp/>=<sp/>Source-&gt;Base;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;permute&quot;</highlight><highlight class="normal">,<sp/>MLArrayT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="comment">//&lt;Indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>sharing<sp/>the<sp/>underlying<sp/>data<sp/>with<sp/>:mini:`Array`,<sp/>permuting<sp/>the<sp/>axes<sp/>according<sp/>to<sp/>:mini:`Indices`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[[1,<sp/>2,<sp/>3],<sp/>[4,<sp/>5,<sp/>6]],<sp/>[[7,<sp/>8,<sp/>9],<sp/>[10,<sp/>11,<sp/>12]]])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>A:permute(2,<sp/>3,<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>B:shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>Source-&gt;Degree;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree<sp/>&gt;<sp/>64)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>implemented<sp/>for<sp/>degree<sp/>&gt;<sp/>64<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>-<sp/>1<sp/>!=<sp/>Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;List<sp/>length<sp/>must<sp/>match<sp/>degree&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(Source-&gt;Format,<sp/>Degree);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*TargetDimension<sp/>=<sp/>Target-&gt;Dimensions;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Bits<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>Degree)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>ml_integer_value(Args[I]);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(J<sp/>&lt;=<sp/>0)<sp/>J<sp/>+=<sp/>Degree<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(J<sp/>&lt;<sp/>1<sp/>||<sp/>J<sp/>&gt;<sp/>Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Bit<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(J<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(Bits<sp/>&amp;<sp/>Bit))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>permutation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bits<sp/>-=<sp/>Bit;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*TargetDimension++<sp/>=<sp/>Source-&gt;Dimensions[J<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Bits<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>permutation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Base<sp/>=<sp/>Source-&gt;Base;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;swap&quot;</highlight><highlight class="normal">,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>transpose<sp/>of<sp/>:mini:`Array`,<sp/>sharing<sp/>the<sp/>underlying<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2,<sp/>3],<sp/>[4,<sp/>5,<sp/>6]])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:swap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)ml_array_transpose((<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0]);</highlight></codeline>
<codeline lineno="696"><highlight class="normal">}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;swap&quot;</highlight><highlight class="normal">,<sp/>MLArrayT,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="comment">//&lt;Index/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="comment">//&lt;Index/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>sharing<sp/>the<sp/>underlying<sp/>data<sp/>with<sp/>:mini:`Array`<sp/>with<sp/>dimensions<sp/>:mini:`Index/1`<sp/>and<sp/>:mini:`Index/2`<sp/>swapped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>Source-&gt;Degree;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IndexA<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IndexB<sp/>=<sp/>ml_integer_value(Args[2]);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IndexA<sp/>&lt;=<sp/>0)<sp/>IndexA<sp/>+=<sp/>(Degree<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IndexB<sp/>&lt;=<sp/>0)<sp/>IndexB<sp/>+=<sp/>(Degree<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IndexA<sp/>&lt;<sp/>1<sp/>||<sp/>IndexA<sp/>&gt;<sp/>Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IndexB<sp/>&lt;<sp/>1<sp/>||<sp/>IndexB<sp/>&gt;<sp/>Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(Source-&gt;Format,<sp/>Degree);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Degree;<sp/>++I)<sp/>Target-&gt;Dimensions[I]<sp/>=<sp/>Source-&gt;Dimensions[I];</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Dimensions[IndexA<sp/>-<sp/>1]<sp/>=<sp/>Source-&gt;Dimensions[IndexB<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Dimensions[IndexB<sp/>-<sp/>1]<sp/>=<sp/>Source-&gt;Dimensions[IndexA<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Base<sp/>=<sp/>Source-&gt;Base;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="718"><highlight class="normal">}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;reverse&quot;</highlight><highlight class="normal">,<sp/>MLArrayT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="comment">//&lt;Index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>sharing<sp/>the<sp/>underlying<sp/>data<sp/>with<sp/>:mini:`Array`<sp/>with<sp/>dimension<sp/>:mini:`Index`<sp/>reversed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>Source-&gt;Degree;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;=<sp/>0)<sp/>Index<sp/>+=<sp/>(Degree<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;<sp/>1<sp/>||<sp/>Index<sp/>&gt;<sp/>Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(Source-&gt;Format,<sp/>Degree);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Degree;<sp/>++I)<sp/>Target-&gt;Dimensions[I]<sp/>=<sp/>Source-&gt;Dimensions[I];</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Dimension<sp/>=<sp/>&amp;Target-&gt;Dimensions[Index<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Base<sp/>=<sp/>Source-&gt;Base;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Dimension-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)snew(Dimension-&gt;Size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0,<sp/>J<sp/>=<sp/>Dimension-&gt;Size;<sp/>--J<sp/>&gt;=<sp/>0;<sp/>++I)<sp/>Indices[I]<sp/>=<sp/>Dimension-&gt;Indices[J];</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dimension-&gt;Indices<sp/>=<sp/>Indices;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target-&gt;Base.Value<sp/>+=<sp/>Dimension-&gt;Stride<sp/>*<sp/>(Dimension-&gt;Size<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dimension-&gt;Stride<sp/>=<sp/>-Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="743"><highlight class="normal">}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;expand&quot;</highlight><highlight class="normal">,<sp/>MLArrayT,<sp/>MLListT)<sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="comment">//&lt;Indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>sharing<sp/>the<sp/>underlying<sp/>data<sp/>with<sp/>:mini:`Array`<sp/>with<sp/>additional<sp/>unit-length<sp/>axes<sp/>at<sp/>the<sp/>specified<sp/>:mini:`Indices`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>Source-&gt;Degree<sp/>+<sp/>ml_list_length(Args[1]);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Expands[Source-&gt;Degree<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;=<sp/>Source-&gt;Degree;<sp/>++I)<sp/>Expands[I]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[1],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter-&gt;Value,<sp/>MLIntegerT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>ml_integer_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(J<sp/>&lt;=<sp/>0)<sp/>J<sp/>+=<sp/>Degree<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(J<sp/>&lt;<sp/>1<sp/>||<sp/>J<sp/>&gt;=<sp/>Degree<sp/>+<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expands[J<sp/>-<sp/>1]<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(Source-&gt;Format,<sp/>Degree);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Dim<sp/>=<sp/>Target-&gt;Dimensions;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Degree;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>0;<sp/>J<sp/>&lt;<sp/>Expands[I];<sp/>++J)<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dim-&gt;Size<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dim-&gt;Stride<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Dim;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dim++<sp/>=<sp/>Source-&gt;Dimensions[I];</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>0;<sp/>J<sp/>&lt;<sp/>Expands[Source-&gt;Degree];<sp/>++J)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dim-&gt;Size<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dim-&gt;Stride<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Dim;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Base<sp/>=<sp/>Source-&gt;Base;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="778"><highlight class="normal">}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;split&quot;</highlight><highlight class="normal">,<sp/>MLArrayT,<sp/>MLIntegerT,<sp/>MLListT)<sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="comment">//&lt;Index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>sharing<sp/>the<sp/>underlying<sp/>data<sp/>with<sp/>:mini:`Array`<sp/>replacing<sp/>the<sp/>dimension<sp/>at<sp/>:mini:`Index`<sp/>with<sp/>new<sp/>dimensions<sp/>with<sp/>sizes<sp/>:mini:`Sizes`.<sp/>The<sp/>total<sp/>count<sp/>:mini:`Sizes/1<sp/>*<sp/>Sizes/2<sp/>*<sp/>...<sp/>*<sp/>Sizes/n`<sp/>must<sp/>equal<sp/>the<sp/>original<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>Source-&gt;Degree;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Expand<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expand<sp/>&lt;=<sp/>0)<sp/>Expand<sp/>+=<sp/>Degree<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expand<sp/>&lt;<sp/>1<sp/>||<sp/>Expand<sp/>&gt;<sp/>Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>--Expand;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Dimensions[Expand].Indices)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>split<sp/>indexed<sp/>dimension<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Total<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[2],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter-&gt;Value,<sp/>MLIntegerT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>ml_integer_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Size<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Total<sp/>*=<sp/>Size;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Dimensions[Expand].Size<sp/>!=<sp/>Total)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(Source-&gt;Format,<sp/>Degree<sp/>+<sp/>ml_list_length(Args[2])<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*SourceDimension<sp/>=<sp/>Source-&gt;Dimensions<sp/>+<sp/>Degree;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*TargetDimension<sp/>=<sp/>Target-&gt;Dimensions<sp/>+<sp/>Target-&gt;Degree;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Expand<sp/>+<sp/>1;<sp/>I<sp/>&lt;<sp/>Degree;<sp/>++I)<sp/>*--TargetDimension<sp/>=<sp/>*--SourceDimension;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride<sp/>=<sp/>(--SourceDimension)-&gt;Stride;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LIST_REVERSE(Args[2],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--TargetDimension;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>TargetDimension-&gt;Size<sp/>=<sp/>ml_integer_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetDimension-&gt;Stride<sp/>=<sp/>Stride;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stride<sp/>*=<sp/>Size;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Expand;<sp/>++I)<sp/>*--TargetDimension<sp/>=<sp/>*--SourceDimension;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Base<sp/>=<sp/>Source-&gt;Base;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;join&quot;</highlight><highlight class="normal">,<sp/>MLArrayT,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="comment">//&lt;Start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="comment">//&lt;Count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>sharing<sp/>the<sp/>underlying<sp/>data<sp/>with<sp/>:mini:`Array`<sp/>replacing<sp/>the<sp/>dimensions<sp/>at<sp/>:mini:`Start<sp/>..<sp/>(Start<sp/>+<sp/>Count)`<sp/>with<sp/>a<sp/>single<sp/>dimension<sp/>with<sp/>the<sp/>same<sp/>overall<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>Source-&gt;Degree;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Start<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&lt;=<sp/>0)<sp/>Start<sp/>+=<sp/>Degree<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&lt;<sp/>1<sp/>||<sp/>Start<sp/>&gt;<sp/>Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Join<sp/>=<sp/>ml_integer_value(Args[2]);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Join<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>run&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>--Start;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>End<sp/>=<sp/>Start<sp/>+<sp/>Join<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End<sp/>&gt;=<sp/>Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>run&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(Source-&gt;Format,<sp/>Degree<sp/>+<sp/>1<sp/>-<sp/>Join);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*SourceDimension<sp/>=<sp/>Source-&gt;Dimensions<sp/>+<sp/>Degree;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*TargetDimension<sp/>=<sp/>Target-&gt;Dimensions<sp/>+<sp/>Target-&gt;Degree;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>End<sp/>+<sp/>1;<sp/>I<sp/>&lt;<sp/>Degree;<sp/>++I)<sp/>*--TargetDimension<sp/>=<sp/>*--SourceDimension;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>--TargetDimension;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>TargetDimension-&gt;Stride<sp/>=<sp/>SourceDimension[-1].Stride;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Join;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--SourceDimension;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SourceDimension-&gt;Indices)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>join<sp/>indexed<sp/>dimension<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Size<sp/>*=<sp/>SourceDimension-&gt;Size;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>TargetDimension-&gt;Size<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Start;<sp/>++I)<sp/>*--TargetDimension<sp/>=<sp/>*--SourceDimension;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Base<sp/>=<sp/>Source-&gt;Base;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;strides&quot;</highlight><highlight class="normal">,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="comment">//&gt;list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>strides<sp/>of<sp/>:mini:`Array`<sp/>in<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Strides<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Array-&gt;Degree;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Strides,<sp/>ml_integer(Array-&gt;Dimensions[I].Stride));</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Strides;</highlight></codeline>
<codeline lineno="861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="comment">/*ML_METHOD(&quot;size&quot;,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="comment">//&lt;Array</highlight></codeline>
<codeline lineno="865"><highlight class="comment">//&gt;integer</highlight></codeline>
<codeline lineno="866"><highlight class="comment">//<sp/>Return<sp/>the<sp/>size<sp/>of<sp/>:mini:`Array`<sp/>in<sp/>contiguous<sp/>bytes,<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>:mini:`Array`<sp/>is<sp/>not<sp/>contiguous.</highlight></codeline>
<codeline lineno="867"><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2,<sp/>3],<sp/>[4,<sp/>5,<sp/>6]])</highlight></codeline>
<codeline lineno="868"><highlight class="comment">//$=<sp/>A:size</highlight></codeline>
<codeline lineno="869"><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>^A</highlight></codeline>
<codeline lineno="870"><highlight class="comment">//$=<sp/>B:size</highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*Array<sp/>=<sp/>(ml_array_t<sp/>*)Args[0];</highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/><sp/><sp/><sp/>size_t<sp/>Size<sp/>=<sp/>Array-&gt;Dimensions[Array-&gt;Degree<sp/>-<sp/>1].Stride;</highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Array-&gt;Degree;<sp/>++I)<sp/>Size<sp/>*=<sp/>Array-&gt;Dimensions[I].Size;</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(Array-&gt;Dimensions[0].Stride<sp/>==<sp/>Size)<sp/>return<sp/>ml_integer(Size<sp/>*<sp/>Array-&gt;Dimensions[0].Size);</highlight></codeline>
<codeline lineno="875"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>MLNil;</highlight></codeline>
<codeline lineno="876"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*RangeMethod;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*MulMethod;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*AddMethod;</highlight></codeline>
<codeline lineno="881"><highlight class="normal">ML_METHOD_DECL(SubMethod,<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="882"><highlight class="normal">ML_METHOD_DECL(DivMethod,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_array_value(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Address)<sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_array_value)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(Array-&gt;Base.Type,<sp/>ml_array_value);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(Array,<sp/>Address);</highlight></codeline>
<codeline lineno="887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889" refid="structml__array__ref__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>Array[1];</highlight></codeline>
<codeline lineno="892"><highlight class="normal">}<sp/><ref refid="structml__array__ref__t" kindref="compound">ml_array_ref_t</ref>;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_array_ref_deref(<ref refid="structml__array__ref__t" kindref="compound">ml_array_ref_t</ref><sp/>*Ref);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_array_ref_assign(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__array__ref__t" kindref="compound">ml_array_ref_t</ref><sp/>*Ref,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal">ML_TYPE(MLArrayRefT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;array::ref&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>.deref<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_ref_deref,</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>.assign<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_ref_assign</highlight></codeline>
<codeline lineno="902"><highlight class="normal">);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><ref refid="structml__array__ref__t" kindref="compound">ml_array_ref_t</ref><sp/>*ml_array_ref_alloc(ml_array_format_t<sp/>Format,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree)<sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__ref__t" kindref="compound">ml_array_ref_t</ref><sp/>*Ref<sp/>=<sp/>xnew(<ref refid="structml__array__ref__t" kindref="compound">ml_array_ref_t</ref>,<sp/>Degree,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref>);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>Ref-&gt;Type<sp/>=<sp/>MLArrayRefT;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ref-&gt;Array-&gt;Base.Type<sp/>=<sp/>MLVectorMutableTypes[Format];</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ref-&gt;Array-&gt;Base.Type<sp/>=<sp/>MLMatrixMutableTypes[Format];</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ref-&gt;Array-&gt;Base.Type<sp/>=<sp/>MLArrayMutableTypes[Format];</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>Ref-&gt;Array-&gt;Degree<sp/>=<sp/>Degree;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>Ref-&gt;Array-&gt;Format<sp/>=<sp/>Format;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Ref;</highlight></codeline>
<codeline lineno="917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919" refid="structml__array__indexer__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Target,<sp/>*Source,<sp/>*Limit;</highlight></codeline>
<codeline lineno="922"><highlight class="normal">}<sp/><ref refid="structml__array__indexer__t" kindref="compound">ml_array_indexer_t</ref>;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_array_index_get(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Index,<sp/><ref refid="structml__array__indexer__t" kindref="compound">ml_array_indexer_t</ref><sp/>*Indexer)<sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_array_index_get)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Index),<sp/>ml_array_index_get);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>index<sp/>type:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Index)-&gt;Name);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(Index,<sp/>Indexer);</highlight></codeline>
<codeline lineno="928"><highlight class="normal">}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_array_index_get,<sp/>MLNilT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Index,<sp/><ref refid="structml__array__indexer__t" kindref="compound">ml_array_indexer_t</ref><sp/>*Indexer)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>*Indexer-&gt;Target<sp/>=<sp/>*Indexer-&gt;Source;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>++Indexer-&gt;Target;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>++Indexer-&gt;Source;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_array_nil_deref(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Array)<sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_array_nil_assign(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Array,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="943"><highlight class="normal">}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal">ML_TYPE(MLArrayNilT,<sp/>(MLArrayT),<sp/></highlight><highlight class="stringliteral">&quot;array::nil&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>.deref<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_nil_deref,</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>.assign<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_nil_assign</highlight></codeline>
<codeline lineno="949"><highlight class="normal">);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>MLArrayNil[1]<sp/>=<sp/>{{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>{MLArrayNilT,<sp/>NULL,<sp/>0},<sp/>-1,<sp/>ML_ARRAY_FORMAT_NONE</highlight></codeline>
<codeline lineno="953"><highlight class="normal">}};</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_array_index_get,<sp/>MLIntegerT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Index,<sp/><ref refid="structml__array__indexer__t" kindref="compound">ml_array_indexer_t</ref><sp/>*Indexer)<sp/>{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IndexValue<sp/>=<sp/>ml_integer_value_fast(Index);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IndexValue<sp/>&lt;=<sp/>0)<sp/>IndexValue<sp/>+=<sp/>Indexer-&gt;Source-&gt;Size<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--IndexValue<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArrayNil;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IndexValue<sp/>&gt;=<sp/>Indexer-&gt;Source-&gt;Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArrayNil;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Indexer-&gt;Source-&gt;Indices)<sp/>IndexValue<sp/>=<sp/>Indexer-&gt;Source-&gt;Indices[IndexValue];</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>Indexer-&gt;Address<sp/>+=<sp/>Indexer-&gt;Source-&gt;Stride<sp/>*<sp/>IndexValue;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>++Indexer-&gt;Source;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="964"><highlight class="normal">}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_array_index_get,<sp/>MLListT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Index,<sp/><ref refid="structml__array__indexer__t" kindref="compound">ml_array_indexer_t</ref><sp/>*Indexer)<sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>Indexer-&gt;Target-&gt;Size<sp/>=<sp/>ml_list_length(Index);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Count)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArrayNil;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices<sp/>=<sp/>Indexer-&gt;Target-&gt;Indices<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)snew(Count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*IndexPtr<sp/>=<sp/>Indices;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Index0<sp/>=<sp/>((<ref refid="structml__list__t" kindref="compound">ml_list_t</ref><sp/>*)Index)-&gt;Head-&gt;Value;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Index0,<sp/>MLTupleT))<sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>((<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Index0)-&gt;Size;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Indexer-&gt;Source<sp/>+<sp/>Size<sp/>&gt;<sp/>Indexer-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>indices&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Index,<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Index0)-&gt;Size<sp/>!=<sp/>Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ShapeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Inconsistent<sp/>tuple<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Values<sp/>=<sp/>((<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Iter-&gt;Value)-&gt;Values;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Source<sp/>=<sp/>Indexer-&gt;Source;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address<sp/>=<sp/>Indexer-&gt;Address;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IndexValue<sp/>=<sp/>ml_integer_value(Values[I]);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IndexValue<sp/>&lt;=<sp/>0)<sp/>IndexValue<sp/>+=<sp/>Source-&gt;Size<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--IndexValue<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArrayNil;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IndexValue<sp/>&gt;=<sp/>Source-&gt;Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArrayNil;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Indices)<sp/>IndexValue<sp/>=<sp/>Source-&gt;Indices[IndexValue];</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>IndexValue<sp/>*<sp/>Source-&gt;Stride;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Source;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*IndexPtr++<sp/>=<sp/>Address<sp/>-<sp/>Indexer-&gt;Address;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>First<sp/>=<sp/>Indices[0];</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>Indices[I]<sp/>-=<sp/>First;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indexer-&gt;Target-&gt;Stride<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indexer-&gt;Address<sp/>+=<sp/>First;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indexer-&gt;Source<sp/>+=<sp/>Size;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Indexer-&gt;Source-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Index,<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IndexValue<sp/>=<sp/>ml_integer_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IndexValue<sp/>&lt;=<sp/>0)<sp/>IndexValue<sp/>+=<sp/>Indexer-&gt;Source-&gt;Size<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--IndexValue<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArrayNil;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IndexValue<sp/>&gt;=<sp/>Indexer-&gt;Source-&gt;Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArrayNil;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*IndexPtr++<sp/>=<sp/>Indexer-&gt;Source-&gt;Indices[IndexValue];</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Index,<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IndexValue<sp/>=<sp/>ml_integer_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IndexValue<sp/>&lt;=<sp/>0)<sp/>IndexValue<sp/>+=<sp/>Indexer-&gt;Source-&gt;Size<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--IndexValue<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArrayNil;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IndexValue<sp/>&gt;=<sp/>Indexer-&gt;Source-&gt;Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArrayNil;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*IndexPtr++<sp/>=<sp/>IndexValue;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>First<sp/>=<sp/>Indices[0];</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>Indices[I]<sp/>-=<sp/>First;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indexer-&gt;Target-&gt;Stride<sp/>=<sp/>Indexer-&gt;Source-&gt;Stride;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indexer-&gt;Address<sp/>+=<sp/>Indexer-&gt;Source-&gt;Stride<sp/>*<sp/>First;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Indexer-&gt;Source;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>++Indexer-&gt;Target;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_array_index_get,<sp/>MLIntegerRangeT,<sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range,<sp/><ref refid="structml__array__indexer__t" kindref="compound">ml_array_indexer_t</ref><sp/>*Indexer)<sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Min<sp/>=<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Max<sp/>=<sp/>Range-&gt;Limit;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Step<sp/>=<sp/>Range-&gt;Step;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Min<sp/>&lt;<sp/>1)<sp/>Min<sp/>+=<sp/>Indexer-&gt;Source-&gt;Size<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Max<sp/>&lt;<sp/>1)<sp/>Max<sp/>+=<sp/>Indexer-&gt;Source-&gt;Size<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--Min<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArrayNil;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Min<sp/>&gt;=<sp/>Indexer-&gt;Source-&gt;Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArrayNil;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--Max<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArrayNil;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Max<sp/>&gt;=<sp/>Indexer-&gt;Source-&gt;Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArrayNil;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Step<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArrayNil;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Indexer-&gt;Target-&gt;Size<sp/>=<sp/>(Max<sp/>-<sp/>Min)<sp/>/<sp/>Step<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Size<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArrayNil;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Indexer-&gt;Source-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices<sp/>=<sp/>Indexer-&gt;Target-&gt;Indices<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)snew(Size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*IndexPtr<sp/>=<sp/>Indices;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Min;<sp/>I<sp/>&lt;=<sp/>Max;<sp/>I<sp/>+=<sp/>Step)<sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*IndexPtr++<sp/>=<sp/>Indexer-&gt;Source-&gt;Indices[I];</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indexer-&gt;Target-&gt;Stride<sp/>=<sp/>Indexer-&gt;Source-&gt;Stride;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indexer-&gt;Target-&gt;Indices<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indexer-&gt;Address<sp/>+=<sp/>Indexer-&gt;Source-&gt;Stride<sp/>*<sp/>Min;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indexer-&gt;Target-&gt;Stride<sp/>=<sp/>Indexer-&gt;Source-&gt;Stride<sp/>*<sp/>Step;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>++Indexer-&gt;Target;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>++Indexer-&gt;Source;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_array_index_get,<sp/>MLTupleT,<sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Tuple,<sp/><ref refid="structml__array__indexer__t" kindref="compound">ml_array_indexer_t</ref><sp/>*Indexer)<sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Tuple-&gt;Size;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Indexer-&gt;Source<sp/>+<sp/>Size<sp/>&gt;<sp/>Indexer-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>indices&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**TupleValues<sp/>=<sp/>Tuple-&gt;Values;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(TupleValues[I],<sp/>MLIntegerT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>integer<sp/>in<sp/>tuple<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IndexValue<sp/>=<sp/>ml_integer_value(TupleValues[I]);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IndexValue<sp/>&lt;=<sp/>0)<sp/>IndexValue<sp/>+=<sp/>Indexer-&gt;Source-&gt;Size<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--IndexValue<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArrayNil;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IndexValue<sp/>&gt;=<sp/>Indexer-&gt;Source-&gt;Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArrayNil;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Indexer-&gt;Source-&gt;Indices)<sp/>IndexValue<sp/>=<sp/>Indexer-&gt;Source-&gt;Indices[IndexValue];</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indexer-&gt;Address<sp/>+=<sp/>Indexer-&gt;Source-&gt;Stride<sp/>*<sp/>IndexValue;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Indexer-&gt;Source;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARRAY_OFFSETS_NONZERO(CTYPE,<sp/>ZERO)<sp/>\</highlight></codeline>
<codeline lineno="1072"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="1073"><highlight class="preprocessor">static<sp/>int<sp/>ml_array_count_nonzero_<sp/>##<sp/>CTYPE(void<sp/>*Address,<sp/>int<sp/>Degree,<sp/>ml_array_dimension_t<sp/>*Dimension)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1074"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Count<sp/>=<sp/>0;<sp/>\</highlight></codeline>
<codeline lineno="1075"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!Degree)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1076"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Size<sp/>=<sp/>Dimension-&gt;Size;<sp/>\</highlight></codeline>
<codeline lineno="1077"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="1078"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1079"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="1080"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1081"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*(CTYPE<sp/>*)(Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride)<sp/>!=<sp/>ZERO)<sp/>++Count;<sp/>\</highlight></codeline>
<codeline lineno="1082"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1083"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1084"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1085"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*(CTYPE<sp/>*)(Address<sp/>+<sp/>I<sp/>*<sp/>Stride)<sp/>!=<sp/>ZERO)<sp/>++Count;<sp/>\</highlight></codeline>
<codeline lineno="1086"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1087"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1088"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1089"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Size<sp/>=<sp/>Dimension-&gt;Size;<sp/>\</highlight></codeline>
<codeline lineno="1090"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="1091"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1092"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;\</highlight></codeline>
<codeline lineno="1093"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1094"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Count<sp/>+=<sp/>ml_array_count_nonzero_<sp/>##<sp/>CTYPE(Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride,<sp/>Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1);<sp/>\</highlight></codeline>
<codeline lineno="1095"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1096"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1097"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1098"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Count<sp/>+=<sp/>ml_array_count_nonzero_<sp/>##<sp/>CTYPE(Address<sp/>+<sp/>I<sp/>*<sp/>Stride,<sp/>Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1);<sp/>\</highlight></codeline>
<codeline lineno="1099"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1100"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1101"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1102"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>Count;<sp/>\</highlight></codeline>
<codeline lineno="1103"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="1104"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="1105"><highlight class="preprocessor">static<sp/>int<sp/>*ml_array_offsets_nonzero_<sp/>##<sp/>CTYPE(int<sp/>*Offsets,<sp/>void<sp/>*Address,<sp/>int<sp/>Degree,<sp/>ml_array_dimension_t<sp/>*Dimension,<sp/>int<sp/>Offset,<sp/>ml_array_dimension_t<sp/>*Source)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!Degree)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Size<sp/>=<sp/>Dimension-&gt;Size;<sp/>\</highlight></codeline>
<codeline lineno="1108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="1109"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1110"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="1111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1112"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*(CTYPE<sp/>*)(Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride)<sp/>!=<sp/>ZERO)<sp/>*Offsets++<sp/>=<sp/>Offset<sp/>+<sp/>Indices[I]<sp/>*<sp/>Source-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="1113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1114"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1116"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*(CTYPE<sp/>*)(Address<sp/>+<sp/>I<sp/>*<sp/>Stride)<sp/>!=<sp/>ZERO)<sp/>*Offsets++<sp/>=<sp/>Offset<sp/>+<sp/>Source-&gt;Stride<sp/>*<sp/>I;<sp/>\</highlight></codeline>
<codeline lineno="1117"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Size<sp/>=<sp/>Dimension-&gt;Size;<sp/>\</highlight></codeline>
<codeline lineno="1121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="1122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;\</highlight></codeline>
<codeline lineno="1124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offsets<sp/>=<sp/>ml_array_offsets_nonzero_<sp/>##<sp/>CTYPE(Offsets,<sp/>Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride,<sp/>Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Offset<sp/>+<sp/>Indices[I]<sp/>*<sp/>Source-&gt;Stride,<sp/>Source<sp/>+<sp/>1);<sp/>\</highlight></codeline>
<codeline lineno="1126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1128"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1129"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offsets<sp/>=<sp/>ml_array_offsets_nonzero_<sp/>##<sp/>CTYPE(Offsets,<sp/>Address<sp/>+<sp/>I<sp/>*<sp/>Stride,<sp/>Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Offset<sp/>+<sp/>I<sp/>*<sp/>Source-&gt;Stride,<sp/>Source<sp/>+<sp/>1);<sp/>\</highlight></codeline>
<codeline lineno="1130"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1131"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1132"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>Offsets;<sp/>\</highlight></codeline>
<codeline lineno="1134"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal">ARRAY_OFFSETS_NONZERO(uint8_t,<sp/>0);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal">ARRAY_OFFSETS_NONZERO(int8_t,<sp/>0);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal">ARRAY_OFFSETS_NONZERO(uint16_t,<sp/>0);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal">ARRAY_OFFSETS_NONZERO(int16_t,<sp/>0);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal">ARRAY_OFFSETS_NONZERO(uint32_t,<sp/>0);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal">ARRAY_OFFSETS_NONZERO(int32_t,<sp/>0);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal">ARRAY_OFFSETS_NONZERO(uint64_t,<sp/>0);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal">ARRAY_OFFSETS_NONZERO(int64_t,<sp/>0);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal">ARRAY_OFFSETS_NONZERO(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal">ARRAY_OFFSETS_NONZERO(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal">ARRAY_OFFSETS_NONZERO(complex_float,<sp/>0);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal">ARRAY_OFFSETS_NONZERO(complex_double,<sp/>0);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal">ARRAY_OFFSETS_NONZERO(<ref refid="structml__value__t" kindref="compound">any</ref>,<sp/>MLNil);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_array_count_nonzero(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*A)<sp/>{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(A-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_count_nonzero_uint8_t(A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_count_nonzero_int8_t(A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_count_nonzero_uint16_t(A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_count_nonzero_int16_t(A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_count_nonzero_uint32_t(A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_count_nonzero_int32_t(A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_count_nonzero_uint64_t(A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_count_nonzero_int64_t(A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_count_nonzero_float(A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_count_nonzero_double(A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_count_nonzero_complex_float(A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_count_nonzero_complex_double(A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_ANY:</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_count_nonzero_any(A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ml_array_offsets_nonzero(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*A,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Offsets,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Source)<sp/>{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(A-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_offsets_nonzero_uint8_t(Offsets,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions,<sp/>0,<sp/>Source);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_offsets_nonzero_int8_t(Offsets,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions,<sp/>0,<sp/>Source);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_offsets_nonzero_uint16_t(Offsets,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions,<sp/>0,<sp/>Source);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_offsets_nonzero_int16_t(Offsets,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions,<sp/>0,<sp/>Source);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_offsets_nonzero_uint32_t(Offsets,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions,<sp/>0,<sp/>Source);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_offsets_nonzero_int32_t(Offsets,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions,<sp/>0,<sp/>Source);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_offsets_nonzero_uint64_t(Offsets,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions,<sp/>0,<sp/>Source);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_offsets_nonzero_int64_t(Offsets,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions,<sp/>0,<sp/>Source);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_offsets_nonzero_float(Offsets,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions,<sp/>0,<sp/>Source);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_offsets_nonzero_double(Offsets,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions,<sp/>0,<sp/>Source);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_offsets_nonzero_complex_float(Offsets,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions,<sp/>0,<sp/>Source);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_offsets_nonzero_complex_double(Offsets,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions,<sp/>0,<sp/>Source);</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_ANY:</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_offsets_nonzero_any(Offsets,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions,<sp/>0,<sp/>Source);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_array_index_get,<sp/>MLArrayMutableInt8T,<sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array,<sp/><ref refid="structml__array__indexer__t" kindref="compound">ml_array_indexer_t</ref><sp/>*Indexer)<sp/>{</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>Array-&gt;Degree;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Indexer-&gt;Source<sp/>+<sp/>Degree<sp/>&gt;<sp/>Indexer-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>indices&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Degree;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Array-&gt;Dimensions[I].Size<sp/>!=<sp/>Indexer-&gt;Source[I].Size)<sp/>{</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ShapeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Array<sp/>sizes<sp/>do<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>Indexer-&gt;Target-&gt;Size<sp/>=<sp/>ml_array_count_nonzero(Array);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Count)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLArrayNil;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices<sp/>=<sp/>Indexer-&gt;Target-&gt;Indices<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)snew(Count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_array_offsets_nonzero(Array,<sp/>Indices,<sp/>Indexer-&gt;Source);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>First<sp/>=<sp/>Indices[0];</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>Indices[I]<sp/>-=<sp/>First;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>Indexer-&gt;Target-&gt;Stride<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>Indexer-&gt;Address<sp/>+=<sp/>First;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>++Indexer-&gt;Target;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>Indexer-&gt;Source<sp/>+=<sp/>Degree;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ml_array_to_indices(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*TargetDimension,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Offset,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*IndexDimension,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*IndexData)<sp/>{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IndexDimension-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*IndexIndices<sp/>=<sp/>IndexDimension-&gt;Indices;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>IndexDimension-&gt;Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>*(int32_t<sp/>*)(IndexData<sp/>+<sp/>IndexIndices[I]<sp/>*<sp/>IndexDimension-&gt;Stride)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&lt;<sp/>0<sp/>||<sp/>N<sp/>&gt;=<sp/>TargetDimension[I].Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/>+=<sp/>N<sp/>*<sp/>TargetDimension[I].Stride;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>IndexDimension-&gt;Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>*(int32_t<sp/>*)(IndexData<sp/>+<sp/>I<sp/>*<sp/>IndexDimension-&gt;Stride)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&lt;<sp/>0<sp/>||<sp/>N<sp/>&gt;=<sp/>TargetDimension[I].Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/>+=<sp/>N<sp/>*<sp/>TargetDimension[I].Stride;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Indices++<sp/>=<sp/>Offset;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IndexDimension-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*IndexIndices<sp/>=<sp/>IndexDimension-&gt;Indices;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TargetDimension-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*TargetIndices<sp/>=<sp/>TargetDimension-&gt;Indices;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>IndexDimension-&gt;Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indices<sp/>=<sp/>ml_array_to_indices(Indices,<sp/>Degree<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetDimension<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/>+<sp/>TargetIndices[I]<sp/>*<sp/>TargetDimension-&gt;Stride,</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexDimension<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexData<sp/>+<sp/><sp/>IndexIndices[I]<sp/>*<sp/>IndexDimension-&gt;Stride</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Indices)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Indices;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>IndexDimension-&gt;Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indices<sp/>=<sp/>ml_array_to_indices(Indices,<sp/>Degree<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetDimension<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/>+<sp/>I<sp/>*<sp/>TargetDimension-&gt;Stride,</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexDimension<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexData<sp/>+<sp/><sp/>IndexIndices[I]<sp/>*<sp/>IndexDimension-&gt;Stride</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Indices)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Indices;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TargetDimension-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*TargetIndices<sp/>=<sp/>TargetDimension-&gt;Indices;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>IndexDimension-&gt;Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indices<sp/>=<sp/>ml_array_to_indices(Indices,<sp/>Degree<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetDimension<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/>+<sp/>TargetIndices[I]<sp/>*<sp/>TargetDimension-&gt;Stride,</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexDimension<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexData<sp/>+<sp/><sp/>I<sp/>*<sp/>IndexDimension-&gt;Stride</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Indices)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Indices;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>IndexDimension-&gt;Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indices<sp/>=<sp/>ml_array_to_indices(Indices,<sp/>Degree<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetDimension<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/>+<sp/>I<sp/>*<sp/>TargetDimension-&gt;Stride,</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexDimension<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexData<sp/>+<sp/><sp/>I<sp/>*<sp/>IndexDimension-&gt;Stride</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Indices)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Indices;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Indices;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_array_index_get,<sp/>MLArrayMutableInt32T,<sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array,<sp/><ref refid="structml__array__indexer__t" kindref="compound">ml_array_indexer_t</ref><sp/>*Indexer)<sp/>{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>Array-&gt;Degree<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Total<sp/>=<sp/>Degree<sp/>+<sp/>Array-&gt;Dimensions[Degree].Size;</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Indexer-&gt;Source<sp/>+<sp/>Total<sp/>&gt;<sp/>Indexer-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>indices&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Degree;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Array-&gt;Dimensions[I].Size<sp/>!=<sp/>Indexer-&gt;Source[I].Size)<sp/>{</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ShapeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Array<sp/>sizes<sp/>do<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Count<sp/>*=<sp/>Array-&gt;Dimensions[I].Size;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>Indexer-&gt;Target-&gt;Size<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices<sp/>=<sp/>Indexer-&gt;Target-&gt;Indices<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)snew(Count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_array_to_indices(Indices,<sp/>Degree,<sp/>Indexer-&gt;Source,<sp/>0,<sp/>Array-&gt;Dimensions,<sp/>Array-&gt;Base.Value))<sp/>{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;IndexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>bounds&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>First<sp/>=<sp/>Indices[0];</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>Indices[I]<sp/>-=<sp/>First;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/>Indexer-&gt;Target-&gt;Stride<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>Indexer-&gt;Address<sp/>+=<sp/>First;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>++Indexer-&gt;Target;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>Indexer-&gt;Source<sp/>+=<sp/>Total;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_array_index(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Indices)<sp/>{</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>TargetDimensions[Source-&gt;Degree];</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__indexer__t" kindref="compound">ml_array_indexer_t</ref><sp/>Indexer[1]<sp/>=<sp/>{{</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Source-&gt;Base.Value,<sp/>TargetDimensions,</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Dimensions<sp/>+<sp/>Source-&gt;Degree</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>}};</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Index<sp/>=<sp/>Indices[I];</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>==<sp/>RangeMethod)<sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Skip<sp/>=<sp/>Indexer-&gt;Limit<sp/>-<sp/>(Count<sp/>-<sp/>(I<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Skip<sp/>&gt;<sp/>Indexer-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>indices&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Indexer-&gt;Source<sp/>&lt;<sp/>Skip)<sp/>{</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Indexer-&gt;Target<sp/>=<sp/>*Indexer-&gt;Source;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Indexer-&gt;Target;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Indexer-&gt;Source;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>==<sp/>MulMethod)<sp/>{</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Indexer-&gt;Source<sp/>&gt;=<sp/>Indexer-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>indices&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Indexer-&gt;Target<sp/>=<sp/>*Indexer-&gt;Source;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Indexer-&gt;Target;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Indexer-&gt;Source;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Indexer-&gt;Source<sp/>&gt;=<sp/>Indexer-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Too<sp/>many<sp/>indices&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>ml_array_index_get(Index,<sp/>Indexer);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Indexer-&gt;Source<sp/>&lt;<sp/>Indexer-&gt;Limit)<sp/>{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Indexer-&gt;Target<sp/>=<sp/>*Indexer-&gt;Source;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Indexer-&gt;Target;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Indexer-&gt;Source;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>Indexer-&gt;Target<sp/>-<sp/>TargetDimensions;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_subtype(Source-&gt;Base.Type,<sp/>MLArrayMutableT))<sp/>{</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__ref__t" kindref="compound">ml_array_ref_t</ref><sp/>*Ref<sp/>=<sp/>ml_array_ref_alloc(Source-&gt;Format,<sp/>Degree);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Degree;<sp/>++I)<sp/>Ref-&gt;Array-&gt;Dimensions[I]<sp/>=<sp/>TargetDimensions[I];</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ref-&gt;Array-&gt;Base.Value<sp/>=<sp/>Indexer-&gt;Address;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Ref;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Val<sp/>=<sp/>ml_array_alloc(Source-&gt;Format,<sp/>Degree);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Degree;<sp/>++I)<sp/>Val-&gt;Dimensions[I]<sp/>=<sp/>TargetDimensions[I];</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Val-&gt;Base.Value<sp/>=<sp/>Indexer-&gt;Address;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Val;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;[]&quot;</highlight><highlight class="normal">,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight><highlight class="comment">//&lt;Index/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>sub-array<sp/>of<sp/>:mini:`Array`<sp/>sharing<sp/>the<sp/>underlying<sp/>data,<sp/>indexed<sp/>by<sp/>:mini:`Index/i`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dimensions<sp/>are<sp/>copied<sp/>to<sp/>the<sp/>output<sp/>array,<sp/>applying<sp/>the<sp/>indices<sp/>as<sp/>follows:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>If<sp/>:mini:`Index/i`<sp/>is<sp/>:mini:`nil`<sp/>or<sp/>:mini:`*`<sp/>then<sp/>the<sp/>next<sp/>dimension<sp/>is<sp/>copied<sp/>unchanged.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>If<sp/>:mini:`Index/i`<sp/>is<sp/>:mini:`..`<sp/>then<sp/>the<sp/>remaining<sp/>indices<sp/>are<sp/>applied<sp/>to<sp/>the<sp/>last<sp/>dimensions<sp/>of<sp/>:mini:`Array`<sp/>and<sp/>the<sp/>dimensions<sp/>in<sp/>between<sp/>are<sp/>copied<sp/>unchanged.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>If<sp/>:mini:`Index/i`<sp/>is<sp/>an<sp/>:mini:`integer`<sp/>then<sp/>the<sp/>:mini:`Index/i`-th<sp/>value<sp/>of<sp/>the<sp/>next<sp/>dimension<sp/>is<sp/>selected<sp/>and<sp/>the<sp/>dimension<sp/>is<sp/>dropped<sp/>from<sp/>the<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>If<sp/>:mini:`Index/i`<sp/>is<sp/>an<sp/>:mini:`integer::range`<sp/>then<sp/>the<sp/>corresponding<sp/>slice<sp/>of<sp/>the<sp/>next<sp/>dimension<sp/>is<sp/>copied<sp/>to<sp/>the<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>If<sp/>:mini:`Index/i`<sp/>is<sp/>a<sp/>:mini:`tuple[integer,<sp/>...]`<sp/>then<sp/>the<sp/>next<sp/>dimensions<sp/>are<sp/>indexed<sp/>by<sp/>the<sp/>corresponding<sp/>integer<sp/>in<sp/>turn<sp/>(i.e.<sp/>:mini:`A[(I,<sp/>J,<sp/>K)]`<sp/>gives<sp/>the<sp/>same<sp/>result<sp/>as<sp/>:mini:`A[I,<sp/>J,<sp/>K]`).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>If<sp/>:mini:`Index/i`<sp/>is<sp/>a<sp/>:mini:`list[integer]`<sp/>then<sp/>the<sp/>next<sp/>dimension<sp/>is<sp/>copied<sp/>as<sp/>a<sp/>sparse<sp/>dimension<sp/>with<sp/>the<sp/>respective<sp/>entries.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>If<sp/>:mini:`Index/i`<sp/>is<sp/>a<sp/>:mini:`list[tuple[integer,<sp/>...]]`<sp/>then<sp/>the<sp/>appropriate<sp/>dimensions<sp/>are<sp/>dropped<sp/>and<sp/>a<sp/>single<sp/>sparse<sp/>dimension<sp/>is<sp/>added<sp/>with<sp/>the<sp/>corresponding<sp/>entries.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>If<sp/>:mini:`Index/i`<sp/>is<sp/>an<sp/>:mini:`array::int8`<sp/>with<sp/>dimensions<sp/>matching<sp/>the<sp/>corresponding<sp/>dimensions<sp/>of<sp/>:mini:`A`<sp/>then<sp/>a<sp/>sparse<sp/>dimension<sp/>is<sp/>added<sp/>with<sp/>entries<sp/>corresponding<sp/>to<sp/>the<sp/>non-zero<sp/>values<sp/>in<sp/>:mini:`Index/i`<sp/>(i.e.<sp/>:mini:`A[B]`<sp/>is<sp/>equivalent<sp/>to<sp/>:mini:`A[B:where]`).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>If<sp/>:mini:`Index/i`<sp/>is<sp/>an<sp/>:mini:`array::int32`<sp/>with<sp/>all<sp/>but<sp/>last<sp/>dimensions<sp/>matching<sp/>the<sp/>corresponding<sp/>dimensions<sp/>of<sp/>:mini:`A`<sp/>then<sp/>a<sp/>sparse<sp/>dimension<sp/>is<sp/>added<sp/>with<sp/>entries<sp/>corresponding<sp/>indices<sp/>in<sp/>the<sp/>last<sp/>dimension<sp/>of<sp/>:mini:`Index/i`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>fewer<sp/>than<sp/>:mini:`A:degree`<sp/>indices<sp/>are<sp/>provided<sp/>then<sp/>the<sp/>remaining<sp/>dimensions<sp/>are<sp/>copied<sp/>unchanged.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>A<sp/>:=<sp/>array([[[19,<sp/>16,<sp/>12],<sp/>[4,<sp/>7,<sp/>20]],<sp/>[[5,<sp/>17,<sp/>8],<sp/>[20,<sp/>9,<sp/>20]]])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A[1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A[1,<sp/>2]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A[1,<sp/>2,<sp/>3]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A[nil,<sp/>2]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A[..,<sp/>3]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A[..,<sp/>1<sp/>..<sp/>2]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A[(1,<sp/>2,<sp/>3)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A[[(1,<sp/>2,<sp/>3),<sp/>(2,<sp/>1,<sp/>1)]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>A<sp/>&gt;<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>type(B)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A[B]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>C<sp/>:=<sp/>A:maxidx(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>type(C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A[C]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_index(Source,<sp/>Count<sp/>-<sp/>1,<sp/>Args<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;[]&quot;</highlight><highlight class="normal">,<sp/>MLArrayT,<sp/>MLMapT)<sp/>{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="comment">//&lt;Indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>sub-array<sp/>of<sp/>:mini:`Array`<sp/>sharing<sp/>the<sp/>underlying<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>:mini:`i`-th<sp/>dimension<sp/>is<sp/>indexed<sp/>by<sp/>:mini:`Indices[i]`<sp/>if<sp/>present,<sp/>and<sp/>:mini:`nil`<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>Source-&gt;Degree;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Indices[Degree];</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Degree;<sp/>++I)<sp/>Indices[I]<sp/>=<sp/>MLNil;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_MAP_FOREACH(Args[1],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>ml_integer_value(Iter-&gt;Key)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;<sp/>0)<sp/>Index<sp/>+=<sp/>Degree<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;<sp/>0<sp/>||<sp/>Index<sp/>&gt;=<sp/>Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indices[Index]<sp/>=<sp/>Iter-&gt;Value;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_index(Source,<sp/>Degree,<sp/>Indices);</highlight></codeline>
<codeline lineno="1449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_array_indexv(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array,<sp/>va_list<sp/>Indices)<sp/>{</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Dimension<sp/>=<sp/>Array-&gt;Dimensions;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Address<sp/>=<sp/>Array-&gt;Base.Value;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Array-&gt;Degree;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>va_arg(Indices,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;<sp/>0<sp/>||<sp/>Index<sp/>&gt;=<sp/>Dimension-&gt;Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Dimension-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride<sp/>*<sp/>Dimension-&gt;Indices[Index];</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride<sp/>*<sp/>Index;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Dimension;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Address;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467" refid="structml__array__iter__ref__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Address;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal">}<sp/><ref refid="structml__array__iter__ref__t" kindref="compound">ml_array_iter_ref_t</ref>;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*(*ml_array_iter_deref_t)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*ml_array_iter_assign_t)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ARRAY_ITER_FN(SUFFIX,<sp/>CTYPE,<sp/>TO_VAL,<sp/>FROM_VAL)<sp/>\</highlight></codeline>
<codeline lineno="1476"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="1477"><highlight class="preprocessor">static<sp/>ml_value_t<sp/>*ml_array_iter_ref_deref_<sp/>##<sp/>CTYPE(ml_array_iter_ref_t<sp/>*Ref)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1478"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>TO_VAL(*(CTYPE<sp/>*)Ref-&gt;Address);<sp/>\</highlight></codeline>
<codeline lineno="1479"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="1480"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="1481"><highlight class="preprocessor">static<sp/>ml_value_t<sp/>*ml_array_iter_deref_<sp/>##<sp/>CTYPE(char<sp/>*Address)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1482"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>TO_VAL(*(CTYPE<sp/>*)Address);<sp/>\</highlight></codeline>
<codeline lineno="1483"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="1484"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="1485"><highlight class="preprocessor">static<sp/>void<sp/>ml_array_iter_ref_assign_<sp/>##<sp/>CTYPE(ml_state_t<sp/>*Caller,<sp/>ml_array_iter_ref_t<sp/>*Ref,<sp/>ml_value_t<sp/>*Value)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1486"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>*(CTYPE<sp/>*)Ref-&gt;Address<sp/>=<sp/>FROM_VAL(Value);<sp/>\</highlight></codeline>
<codeline lineno="1487"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ML_RETURN(Value);<sp/>\</highlight></codeline>
<codeline lineno="1488"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="1489"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="1490"><highlight class="preprocessor">ML_TYPE(MLRef<sp/>##<sp/>SUFFIX,<sp/>(),<sp/>&quot;ref::&quot;<sp/>#CTYPE,<sp/>\</highlight></codeline>
<codeline lineno="1491"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.deref<sp/>=<sp/>(void<sp/>*)ml_array_iter_ref_deref_<sp/>##<sp/>CTYPE,<sp/>\</highlight></codeline>
<codeline lineno="1492"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.assign<sp/>=<sp/>(void<sp/>*)ml_array_iter_ref_assign_<sp/>##<sp/>CTYPE<sp/>\</highlight></codeline>
<codeline lineno="1493"><highlight class="preprocessor">)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal">ML_ARRAY_ITER_FN(UInt8T,<sp/>uint8_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal">ML_ARRAY_ITER_FN(Int8T,<sp/>int8_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal">ML_ARRAY_ITER_FN(UInt16T,<sp/>uint16_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal">ML_ARRAY_ITER_FN(Int16T,<sp/>int16_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="1499"><highlight class="normal">ML_ARRAY_ITER_FN(UInt32T,<sp/>uint32_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal">ML_ARRAY_ITER_FN(Int32T,<sp/>int32_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal">ML_ARRAY_ITER_FN(UInt64T,<sp/>uint64_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="1502"><highlight class="normal">ML_ARRAY_ITER_FN(Int64T,<sp/>int64_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="1503"><highlight class="normal">ML_ARRAY_ITER_FN(Float32T,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>ml_real,<sp/>ml_real_value);</highlight></codeline>
<codeline lineno="1504"><highlight class="normal">ML_ARRAY_ITER_FN(Float64T,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>ml_real,<sp/>ml_real_value);</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal">ML_ARRAY_ITER_FN(Complex32T,<sp/>complex_float,<sp/>ml_complex,<sp/>ml_complex_value);</highlight></codeline>
<codeline lineno="1508"><highlight class="normal">ML_ARRAY_ITER_FN(Complex64T,<sp/>complex_double,<sp/>ml_complex,<sp/>ml_complex_value);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal">ML_ARRAY_ITER_FN(AnyT,<sp/><ref refid="structml__value__t" kindref="compound">any</ref>,<sp/>,<sp/>);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513" refid="structml__array__iter__dim__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size,<sp/>Stride,<sp/>Index;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal">}<sp/><ref refid="structml__array__iter__dim__t" kindref="compound">ml_array_iter_dim_t</ref>;</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight></codeline>
<codeline lineno="1519" refid="structml__array__iterator__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Address;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*RefType;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*(*deref)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Address);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__iter__dim__t" kindref="compound">ml_array_iter_dim_t</ref><sp/>Dimensions[];</highlight></codeline>
<codeline lineno="1528"><highlight class="normal">}<sp/><ref refid="structml__array__iterator__t" kindref="compound">ml_array_iterator_t</ref>;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal">ML_TYPE(MLArrayIteratorT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;array::iterator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLArrayIteratorT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__array__iterator__t" kindref="compound">ml_array_iterator_t</ref><sp/>*Iterator)<sp/>{</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Iterator-&gt;Degree;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__iter__dim__t" kindref="compound">ml_array_iter_dim_t</ref><sp/>*Dimensions<sp/>=<sp/>Iterator-&gt;Dimensions;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--I<sp/>&lt;<sp/>0)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++Dimensions[I].Index<sp/>&lt;<sp/>Dimensions[I].Size)<sp/>{</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Address<sp/>=<sp/>Dimensions[I].Value;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Dimensions[I].Indices)<sp/>{</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimensions[I].Indices[Dimensions[I].Index]<sp/>*<sp/>Dimensions[I].Stride;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimensions[I].Index<sp/>*<sp/>Dimensions[I].Stride;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>I<sp/>+<sp/>1;<sp/>J<sp/>&lt;<sp/>Iterator-&gt;Degree;<sp/>++J)<sp/>{</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dimensions[J].Value<sp/>=<sp/>Address;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dimensions[J].Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;Address<sp/>=<sp/>Address;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Iterator);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLArrayIteratorT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__array__iterator__t" kindref="compound">ml_array_iterator_t</ref><sp/>*Iterator)<sp/>{</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iterator-&gt;Degree<sp/>==<sp/>1)<sp/>ML_RETURN(ml_integer(Iterator-&gt;Dimensions[0].Index<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Tuple<sp/>=<sp/>ml_tuple(Iterator-&gt;Degree);</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Iterator-&gt;Degree;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Tuple,<sp/>I<sp/>+<sp/>1,<sp/>ml_integer(Iterator-&gt;Dimensions[I].Index<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Tuple);</highlight></codeline>
<codeline lineno="1561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLArrayIteratorT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__array__iterator__t" kindref="compound">ml_array_iterator_t</ref><sp/>*Iterator)<sp/>{</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iterator-&gt;deref(Iterator-&gt;Address));</highlight></codeline>
<codeline lineno="1565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal">ML_TYPE(MLArrayMutableIteratorT,<sp/>(MLArrayIteratorT),<sp/></highlight><highlight class="stringliteral">&quot;array::mutable::iterator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLArrayMutableIteratorT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__array__iterator__t" kindref="compound">ml_array_iterator_t</ref><sp/>*Iterator)<sp/>{</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__iter__ref__t" kindref="compound">ml_array_iter_ref_t</ref><sp/>*Ref<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__array__iter__ref__t" kindref="compound">ml_array_iter_ref_t</ref>);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/>Ref-&gt;Type<sp/>=<sp/>Iterator-&gt;RefType;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/>Ref-&gt;Address<sp/>=<sp/>Iterator-&gt;Address;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Ref);</highlight></codeline>
<codeline lineno="1574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLArrayT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array)<sp/>{</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__iterator__t" kindref="compound">ml_array_iterator_t</ref><sp/>*Iterator<sp/>=<sp/>xnew(<ref refid="structml__array__iterator__t" kindref="compound">ml_array_iterator_t</ref>,<sp/>Array-&gt;Degree,<sp/><ref refid="structml__array__iter__dim__t" kindref="compound">ml_array_iter_dim_t</ref>);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator-&gt;Type<sp/>=<sp/>MLArrayIteratorT;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator-&gt;Address<sp/>=<sp/>Array-&gt;Base.Value;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator-&gt;Degree<sp/>=<sp/>Array-&gt;Degree;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Array-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;deref<sp/>=<sp/>ml_array_iter_deref_uint8_t;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;deref<sp/>=<sp/>ml_array_iter_deref_int8_t;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;deref<sp/>=<sp/>ml_array_iter_deref_uint16_t;</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;deref<sp/>=<sp/>ml_array_iter_deref_int16_t;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;deref<sp/>=<sp/>ml_array_iter_deref_uint32_t;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;deref<sp/>=<sp/>ml_array_iter_deref_int32_t;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;deref<sp/>=<sp/>ml_array_iter_deref_uint64_t;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;deref<sp/>=<sp/>ml_array_iter_deref_int64_t;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;deref<sp/>=<sp/>ml_array_iter_deref_float;</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;deref<sp/>=<sp/>ml_array_iter_deref_double;</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;deref<sp/>=<sp/>ml_array_iter_deref_complex_float;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;deref<sp/>=<sp/>ml_array_iter_deref_complex_double;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_ANY:</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;deref<sp/>=<sp/>ml_array_iter_deref_any;</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>array<sp/>type<sp/>for<sp/>iteration&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Array-&gt;Degree;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;Dimensions[I].Size<sp/>=<sp/>Array-&gt;Dimensions[I].Size;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;Dimensions[I].Stride<sp/>=<sp/>Array-&gt;Dimensions[I].Stride;</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;Dimensions[I].Indices<sp/>=<sp/>Array-&gt;Dimensions[I].Indices;</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;Dimensions[I].Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;Dimensions[I].Value<sp/>=<sp/>Array-&gt;Base.Value;</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iterator);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLArrayMutableT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array)<sp/>{</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__iterator__t" kindref="compound">ml_array_iterator_t</ref><sp/>*Iterator<sp/>=<sp/>xnew(<ref refid="structml__array__iterator__t" kindref="compound">ml_array_iterator_t</ref>,<sp/>Array-&gt;Degree,<sp/><ref refid="structml__array__iter__dim__t" kindref="compound">ml_array_iter_dim_t</ref>);</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator-&gt;Type<sp/>=<sp/>MLArrayMutableIteratorT;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator-&gt;Address<sp/>=<sp/>Array-&gt;Base.Value;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator-&gt;Degree<sp/>=<sp/>Array-&gt;Degree;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Array-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;RefType<sp/>=<sp/>MLRefUInt8T;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;RefType<sp/>=<sp/>MLRefInt8T;</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;RefType<sp/>=<sp/>MLRefUInt16T;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;RefType<sp/>=<sp/>MLRefInt16T;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;RefType<sp/>=<sp/>MLRefUInt32T;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;RefType<sp/>=<sp/>MLRefInt32T;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;RefType<sp/>=<sp/>MLRefUInt64T;</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;RefType<sp/>=<sp/>MLRefInt64T;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;RefType<sp/>=<sp/>MLRefFloat32T;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;RefType<sp/>=<sp/>MLRefFloat64T;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;RefType<sp/>=<sp/>MLRefComplex32T;</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;RefType<sp/>=<sp/>MLRefComplex64T;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_ANY:</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;RefType<sp/>=<sp/>MLRefAnyT;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>array<sp/>type<sp/>for<sp/>iteration&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Array-&gt;Degree;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;Dimensions[I].Size<sp/>=<sp/>Array-&gt;Dimensions[I].Size;</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;Dimensions[I].Stride<sp/>=<sp/>Array-&gt;Dimensions[I].Stride;</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;Dimensions[I].Indices<sp/>=<sp/>Array-&gt;Dimensions[I].Indices;</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;Dimensions[I].Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator-&gt;Dimensions[I].Value<sp/>=<sp/>Array-&gt;Base.Value;</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iterator);</highlight></codeline>
<codeline lineno="1694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*update_row_fn_t)(<ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*TargetDimension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TargetData,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*SourceDimension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*SourceData);</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UPDATE_FNS(TITLE)<sp/>\</highlight></codeline>
<codeline lineno="1699"><highlight class="preprocessor">extern<sp/>update_row_fn_t<sp/>Update<sp/>##<sp/>TITLE<sp/>##<sp/>RowFns[];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal">UPDATE_FNS(Set);</highlight></codeline>
<codeline lineno="1702"><highlight class="normal">UPDATE_FNS(Add);</highlight></codeline>
<codeline lineno="1703"><highlight class="normal">UPDATE_FNS(Mul);</highlight></codeline>
<codeline lineno="1704"><highlight class="normal">UPDATE_FNS(Sub);</highlight></codeline>
<codeline lineno="1705"><highlight class="normal">UPDATE_FNS(RSub);</highlight></codeline>
<codeline lineno="1706"><highlight class="normal">UPDATE_FNS(Div);</highlight></codeline>
<codeline lineno="1707"><highlight class="normal">UPDATE_FNS(RDiv);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal">UPDATE_FNS(And);</highlight></codeline>
<codeline lineno="1709"><highlight class="normal">UPDATE_FNS(Or);</highlight></codeline>
<codeline lineno="1710"><highlight class="normal">UPDATE_FNS(Xor);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal">UPDATE_FNS(Min);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal">UPDATE_FNS(Max);</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update_array(update_row_fn_t<sp/>Update,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*TargetDimension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TargetData,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SourceDegree,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*SourceDimension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*SourceData)<sp/>{</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SourceDegree<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>ConstantDimension[1]<sp/>=<sp/>{{TargetDimension-&gt;Size,<sp/>0,<sp/>NULL}};</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Update(TargetDimension,<sp/>TargetData,<sp/>ConstantDimension,<sp/>SourceData);</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SourceDegree<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Update(TargetDimension,<sp/>TargetData,<sp/>SourceDimension,<sp/>SourceData);</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>TargetDimension-&gt;Size;</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TargetDimension-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*TargetIndices<sp/>=<sp/>TargetDimension-&gt;Indices;</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SourceDimension-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*SourceIndices<sp/>=<sp/>SourceDimension-&gt;Indices;</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_array(Update,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetData<sp/>+<sp/>TargetIndices[I]<sp/>*<sp/>TargetDimension-&gt;Stride,<sp/>SourceDegree<sp/>-<sp/>1,<sp/>SourceDimension<sp/>+<sp/>1,<sp/>SourceData<sp/>+<sp/>SourceIndices[I]<sp/>*<sp/>SourceDimension-&gt;Stride);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SourceStride<sp/>=<sp/>SourceDimension-&gt;Stride;</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_array(Update,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetData<sp/>+<sp/>TargetIndices[I]<sp/>*<sp/>TargetDimension-&gt;Stride,<sp/>SourceDegree<sp/>-<sp/>1,<sp/>SourceDimension<sp/>+<sp/>1,<sp/>SourceData);</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SourceData<sp/>+=<sp/>SourceStride;</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TargetStride<sp/>=<sp/>TargetDimension-&gt;Stride;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SourceDimension-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*SourceIndices<sp/>=<sp/>SourceDimension-&gt;Indices;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_array(Update,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetData,<sp/>SourceDegree<sp/>-<sp/>1,<sp/>SourceDimension<sp/>+<sp/>1,<sp/>SourceData<sp/>+<sp/>SourceIndices[I]<sp/>*<sp/>SourceDimension-&gt;Stride);</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetData<sp/>+=<sp/>TargetStride;</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SourceStride<sp/>=<sp/>SourceDimension-&gt;Stride;</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_array(Update,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetData,<sp/>SourceDegree<sp/>-<sp/>1,<sp/>SourceDimension<sp/>+<sp/>1,<sp/>SourceData);</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetData<sp/>+=<sp/>TargetStride;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SourceData<sp/>+=<sp/>SourceStride;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update_prefix(update_row_fn_t<sp/>Update,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PrefixDegree,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*TargetDimension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TargetData,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SourceDegree,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*SourceDimension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*SourceData)<sp/>{</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PrefixDegree<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>update_array(Update,<sp/>TargetDimension,<sp/>TargetData,<sp/>SourceDegree,<sp/>SourceDimension,<sp/>SourceData);</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>TargetDimension-&gt;Size;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TargetDimension-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*TargetIndices<sp/>=<sp/>TargetDimension-&gt;Indices;</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_prefix(Update,<sp/>PrefixDegree<sp/>-<sp/>1,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetData<sp/>+<sp/>TargetIndices[I]<sp/>*<sp/>TargetDimension-&gt;Stride,<sp/>SourceDegree,<sp/>SourceDimension,<sp/>SourceData);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride<sp/>=<sp/>TargetDimension-&gt;Stride;</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_prefix(Update,<sp/>PrefixDegree<sp/>-<sp/>1,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetData,<sp/>SourceDegree,<sp/>SourceDimension,<sp/>SourceData);</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetData<sp/>+=<sp/>Stride;</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*update_array_fn(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/>update_row_fn_t<sp/>*Updates<sp/>=<sp/>(update_row_fn_t<sp/>*)Data;</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Target-&gt;Degree<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Degree<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Degree<sp/>&gt;<sp/>Target-&gt;Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Incompatible<sp/>assignment<sp/>(%d)&quot;</highlight><highlight class="normal">,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PrefixDegree<sp/>=<sp/>Target-&gt;Degree<sp/>-<sp/>Source-&gt;Degree;</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Source-&gt;Degree;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Target-&gt;Dimensions[PrefixDegree<sp/>+<sp/>I].Size<sp/>!=<sp/>Source-&gt;Dimensions[I].Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Incompatible<sp/>assignment<sp/>(%d)&quot;</highlight><highlight class="normal">,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/>update_row_fn_t<sp/>Update<sp/>=<sp/>Updates[Target-&gt;Format<sp/>*<sp/>MAX_FORMATS<sp/>+<sp/>Source-&gt;Format];</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Update)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>array<sp/>format<sp/>pair<sp/>(%s,<sp/>%s)&quot;</highlight><highlight class="normal">,<sp/>Target-&gt;Base.Type-&gt;Name,<sp/>Source-&gt;Base.Type-&gt;Name);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Target-&gt;Degree)<sp/>{</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_prefix(Update,<sp/>PrefixDegree,<sp/>Target-&gt;Dimensions,<sp/>Target-&gt;Base.Value,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>ValueDimension[1]<sp/>=<sp/>{{1,<sp/>0,<sp/>NULL}};</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Update(ValueDimension,<sp/>Target-&gt;Base.Value,<sp/>ValueDimension,<sp/>Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="1793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_array_cat(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Axis,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>A-&gt;Degree;</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Axis<sp/>&gt;=<sp/>A-&gt;Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>axis&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Total<sp/>=<sp/>A-&gt;Dimensions[Axis].Size;</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_array_format_t<sp/>Format<sp/>=<sp/>A-&gt;Format;</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLArrayT);</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[I];</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(B-&gt;Degree<sp/>!=<sp/>Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ShapeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Incompatible<sp/>array<sp/>shapes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>0;<sp/>J<sp/>&lt;<sp/>Degree;<sp/>++J)<sp/>{</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(J<sp/>==<sp/>Axis)<sp/>{</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Total<sp/>+=<sp/>B-&gt;Dimensions[J].Size;</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(B-&gt;Dimensions[J].Size<sp/>!=<sp/>A-&gt;Dimensions[J].Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ShapeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Incompatible<sp/>array<sp/>shapes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Format<sp/>&lt;<sp/>B-&gt;Format)<sp/>Format<sp/>=<sp/>B-&gt;Format;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*C<sp/>=<sp/>ml_array_alloc(Format,<sp/>Degree);</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride<sp/>=<sp/>MLArraySizes[Format];</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions[I].Stride<sp/>=<sp/>Stride;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I<sp/>==<sp/>Axis)<sp/>{</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions[I].Size<sp/>=<sp/>Total;</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stride<sp/>*=<sp/>Total;</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions[I].Size<sp/>=<sp/>A-&gt;Dimensions[I].Size;</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stride<sp/>*=<sp/>A-&gt;Dimensions[I].Size;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Base.Length<sp/>=<sp/>Stride;</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value<sp/>=<sp/>C-&gt;Base.Value<sp/>=<sp/>array_alloc(Format,<sp/>Stride);</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/>update_row_fn_t<sp/>Update<sp/>=<sp/>UpdateSetRowFns[C-&gt;Format<sp/>*<sp/>MAX_FORMATS<sp/>+<sp/>A-&gt;Format];</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Dimensions[Axis].Size<sp/>=<sp/>A-&gt;Dimensions[Axis].Size;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/>update_array(Update,<sp/>C-&gt;Dimensions,<sp/>Value,<sp/>Degree,<sp/>A-&gt;Dimensions,<sp/>A-&gt;Base.Value);</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Offset<sp/>=<sp/>A-&gt;Dimensions[Axis].Size;</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Offset<sp/>*<sp/>C-&gt;Dimensions[Axis].Stride;</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[I];</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Update<sp/>=<sp/>UpdateSetRowFns[C-&gt;Format<sp/>*<sp/>MAX_FORMATS<sp/>+<sp/>B-&gt;Format];</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions[Axis].Size<sp/>=<sp/>B-&gt;Dimensions[Axis].Size;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_array(Update,<sp/>C-&gt;Dimensions,<sp/>Value,<sp/>Degree,<sp/>B-&gt;Dimensions,<sp/>B-&gt;Base.Value);</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset<sp/>=<sp/>B-&gt;Dimensions[Axis].Size;</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Dimensions[Axis].Size<sp/>=<sp/>Total;</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal">ML_FUNCTION(MLArrayCat)<sp/>{</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight><highlight class="comment">//@array::cat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight><highlight class="comment">//&lt;Index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array/1...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>array<sp/>with<sp/>the<sp/>values<sp/>of<sp/>:mini:`Array/1,<sp/>...,<sp/>Array/n`<sp/>concatenated<sp/>along<sp/>the<sp/>:mini:`Index`-th<sp/>dimension.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>$[[1,<sp/>2,<sp/>3],<sp/>[4,<sp/>5,<sp/>6]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>$[[7,<sp/>8,<sp/>9],<sp/>[10,<sp/>11,<sp/>12]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>array::cat(1,<sp/>A,<sp/>B)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>array::cat(2,<sp/>A,<sp/>B)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Axis<sp/>=<sp/>ml_integer_value(Args[0])<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Axis<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>axis&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>MLArrayT);</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_cat(Axis,<sp/>Count<sp/>-<sp/>1,<sp/>Args<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal">ML_FUNCTION(MLArrayHCat)<sp/>{</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight><highlight class="comment">//@array::hcat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array/1...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>array<sp/>with<sp/>the<sp/>values<sp/>of<sp/>:mini:`Array/1,<sp/>...,<sp/>Array/n`<sp/>concatenated<sp/>along<sp/>the<sp/>last<sp/>dimension.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>$[[1,<sp/>2,<sp/>3],<sp/>[4,<sp/>5,<sp/>6]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>$[[7,<sp/>8,<sp/>9],<sp/>[10,<sp/>11,<sp/>12]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>array::hcat(A,<sp/>B)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLArrayT);</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_cat(A-&gt;Degree<sp/>-<sp/>1,<sp/>Count,<sp/>Args);</highlight></codeline>
<codeline lineno="1874"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal">ML_FUNCTION(MLArrayVCat)<sp/>{</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight><highlight class="comment">//@array::vcat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array/1...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>array<sp/>with<sp/>the<sp/>values<sp/>of<sp/>:mini:`Array/1,<sp/>...,<sp/>Array/n`<sp/>concatenated<sp/>along<sp/>the<sp/>first<sp/>dimension.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>$[[1,<sp/>2,<sp/>3],<sp/>[4,<sp/>5,<sp/>6]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>$[[7,<sp/>8,<sp/>9],<sp/>[10,<sp/>11,<sp/>12]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>array::vcat(A,<sp/>B)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLArrayT);</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_cat(0,<sp/>Count,<sp/>Args);</highlight></codeline>
<codeline lineno="1887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UPDATE_METHOD(TITLE,<sp/>NAME,<sp/>ATYPE,<sp/>CTYPE,<sp/>FROM_VAL,<sp/>FORMAT)<sp/>\</highlight></codeline>
<codeline lineno="1890"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="1891"><highlight class="preprocessor"><sp/>ML_METHOD(#NAME,<sp/>ATYPE,<sp/>MLNumberT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1892"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*Array<sp/>=<sp/>(ml_array_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="1893"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CTYPE<sp/>Value<sp/>=<sp/>FROM_VAL(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="1894"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>update_row_fn_t<sp/>Update<sp/>=<sp/>Update<sp/>##<sp/>TITLE<sp/>##<sp/>RowFns[Array-&gt;Format<sp/>*<sp/>MAX_FORMATS<sp/>+<sp/>FORMAT];<sp/>\</highlight></codeline>
<codeline lineno="1895"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!Update)<sp/>return<sp/>ml_error(&quot;ArrayError&quot;,<sp/>&quot;Unsupported<sp/>array<sp/>format<sp/>pair<sp/>(%s,<sp/>%s)&quot;,<sp/>ml_typeof(Args[0])-&gt;Name,<sp/>ml_typeof(Args[1])-&gt;Name);<sp/>\</highlight></codeline>
<codeline lineno="1896"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Array-&gt;Degree<sp/>==<sp/>0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1897"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_dimension_t<sp/>ValueDimension[1]<sp/>=<sp/>{{1,<sp/>0,<sp/>NULL}};<sp/>\</highlight></codeline>
<codeline lineno="1898"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Update(ValueDimension,<sp/>Array-&gt;Base.Value,<sp/>ValueDimension,<sp/>(char<sp/>*)&amp;Value);<sp/>\</highlight></codeline>
<codeline lineno="1899"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1900"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_prefix(Update,<sp/>Array-&gt;Degree<sp/>-<sp/>1,<sp/>Array-&gt;Dimensions,<sp/>Array-&gt;Base.Value,<sp/>0,<sp/>NULL,<sp/>(char<sp/>*)&amp;Value);<sp/>\</highlight></codeline>
<codeline lineno="1901"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1902"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>Args[0];<sp/>\</highlight></codeline>
<codeline lineno="1903"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UPDATE_METHODS(ATYPE,<sp/>CTYPE,<sp/>FROM_VAL,<sp/>FORMAT)<sp/>\</highlight></codeline>
<codeline lineno="1906"><highlight class="preprocessor">UPDATE_METHOD(Set,<sp/>set,<sp/>ATYPE,<sp/>CTYPE,<sp/>FROM_VAL,<sp/>FORMAT);<sp/>\</highlight></codeline>
<codeline lineno="1907"><highlight class="preprocessor">UPDATE_METHOD(Add,<sp/>add,<sp/>ATYPE,<sp/>CTYPE,<sp/>FROM_VAL,<sp/>FORMAT);<sp/>\</highlight></codeline>
<codeline lineno="1908"><highlight class="preprocessor">UPDATE_METHOD(Sub,<sp/>sub,<sp/>ATYPE,<sp/>CTYPE,<sp/>FROM_VAL,<sp/>FORMAT);<sp/>\</highlight></codeline>
<codeline lineno="1909"><highlight class="preprocessor">UPDATE_METHOD(Mul,<sp/>mul,<sp/>ATYPE,<sp/>CTYPE,<sp/>FROM_VAL,<sp/>FORMAT);<sp/>\</highlight></codeline>
<codeline lineno="1910"><highlight class="preprocessor">UPDATE_METHOD(Div,<sp/>div,<sp/>ATYPE,<sp/>CTYPE,<sp/>FROM_VAL,<sp/>FORMAT);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1911"><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*compare_row_fn_t)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Target,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*LeftDimension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*LeftData,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*RightDimension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*RightData);</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>COMPARE_FNS(TITLE)<sp/>\</highlight></codeline>
<codeline lineno="1915"><highlight class="preprocessor">extern<sp/>compare_row_fn_t<sp/>Compare<sp/>##<sp/>TITLE<sp/>##<sp/>RowFns[];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal">COMPARE_FNS(Eq);</highlight></codeline>
<codeline lineno="1918"><highlight class="normal">COMPARE_FNS(Ne);</highlight></codeline>
<codeline lineno="1919"><highlight class="normal">COMPARE_FNS(Lt);</highlight></codeline>
<codeline lineno="1920"><highlight class="normal">COMPARE_FNS(Gt);</highlight></codeline>
<codeline lineno="1921"><highlight class="normal">COMPARE_FNS(Le);</highlight></codeline>
<codeline lineno="1922"><highlight class="normal">COMPARE_FNS(Ge);</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compare_array(compare_row_fn_t<sp/>Compare,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*TargetDimension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TargetData,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*LeftDimension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*LeftData,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RightDegree,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*RightDimension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*RightData)<sp/>{</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RightDegree<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>ConstantDimension[1]<sp/>=<sp/>{{LeftDimension-&gt;Size,<sp/>0,<sp/>NULL}};</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Compare(TargetData,<sp/>LeftDimension,<sp/>LeftData,<sp/>ConstantDimension,<sp/>RightData);</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RightDegree<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Compare(TargetData,<sp/>LeftDimension,<sp/>LeftData,<sp/>RightDimension,<sp/>RightData);</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>LeftDimension-&gt;Size;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TargetStride<sp/>=<sp/>TargetDimension-&gt;Stride;</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LeftDimension-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*LeftIndices<sp/>=<sp/>LeftDimension-&gt;Indices;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RightDimension-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*RightIndices<sp/>=<sp/>RightDimension-&gt;Indices;</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compare_array(Compare,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetData,<sp/>LeftDimension<sp/>+<sp/>1,<sp/>LeftData<sp/>+<sp/>LeftIndices[I]<sp/>*<sp/>LeftDimension-&gt;Stride,<sp/>RightDegree<sp/>-<sp/>1,<sp/>RightDimension<sp/>+<sp/>1,<sp/>RightData<sp/>+<sp/>RightIndices[I]<sp/>*<sp/>RightDimension-&gt;Stride);</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetData<sp/>+=<sp/>TargetStride;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RightStride<sp/>=<sp/>RightDimension-&gt;Stride;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compare_array(Compare,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetData,<sp/>LeftDimension<sp/>+<sp/>1,<sp/>LeftData<sp/>+<sp/>LeftIndices[I]<sp/>*<sp/>LeftDimension-&gt;Stride,<sp/>RightDegree<sp/>-<sp/>1,<sp/>RightDimension<sp/>+<sp/>1,<sp/>RightData);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RightData<sp/>+=<sp/>RightStride;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetData<sp/>+=<sp/>TargetStride;</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LeftStride<sp/>=<sp/>LeftDimension-&gt;Stride;</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RightDimension-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*RightIndices<sp/>=<sp/>RightDimension-&gt;Indices;</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compare_array(Compare,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetData,<sp/>LeftDimension<sp/>+<sp/>1,<sp/>LeftData,<sp/>RightDegree<sp/>-<sp/>1,<sp/>RightDimension<sp/>+<sp/>1,<sp/>RightData<sp/>+<sp/>RightIndices[I]<sp/>*<sp/>RightDimension-&gt;Stride);</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LeftData<sp/>+=<sp/>LeftStride;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetData<sp/>+=<sp/>TargetStride;</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RightStride<sp/>=<sp/>RightDimension-&gt;Stride;</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compare_array(Compare,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetData,<sp/>LeftDimension<sp/>+<sp/>1,<sp/>LeftData,<sp/>RightDegree<sp/>-<sp/>1,<sp/>RightDimension<sp/>+<sp/>1,<sp/>RightData);</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LeftData<sp/>+=<sp/>LeftStride;</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RightData<sp/>+=<sp/>RightStride;</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetData<sp/>+=<sp/>TargetStride;</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1969"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compare_prefix(compare_row_fn_t<sp/>Compare,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*TargetDimension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TargetData,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PrefixDegree,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*LeftDimension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*LeftData,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RightDegree,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*RightDimension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*RightData)<sp/>{</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PrefixDegree<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>compare_array(Compare,<sp/>TargetDimension,<sp/>TargetData,<sp/>LeftDimension,<sp/>LeftData,<sp/>RightDegree,<sp/>RightDimension,<sp/>RightData);</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>LeftDimension-&gt;Size;</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TargetStride<sp/>=<sp/>TargetDimension-&gt;Stride;</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LeftDimension-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*LeftIndices<sp/>=<sp/>LeftDimension-&gt;Indices;</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compare_prefix(Compare,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetData,<sp/>PrefixDegree<sp/>-<sp/>1,<sp/>LeftDimension<sp/>+<sp/>1,<sp/>LeftData<sp/>+<sp/>LeftIndices[I]<sp/>*<sp/>LeftDimension-&gt;Stride,<sp/>RightDegree,<sp/>RightDimension,<sp/>RightData);</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetData<sp/>+=<sp/>TargetStride;</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride<sp/>=<sp/>LeftDimension-&gt;Stride;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compare_prefix(Compare,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetData,<sp/>PrefixDegree<sp/>-<sp/>1,<sp/>LeftDimension<sp/>+<sp/>1,<sp/>LeftData,<sp/>RightDegree,<sp/>RightDimension,<sp/>RightData);</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LeftData<sp/>+=<sp/>Stride;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetData<sp/>+=<sp/>TargetStride;</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1989"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*compare_array_fn(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/>compare_row_fn_t<sp/>*Compares<sp/>=<sp/>(compare_row_fn_t<sp/>*)Data;</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Left<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Right<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>Left-&gt;Degree;</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Right-&gt;Degree<sp/>&gt;<sp/>Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Incompatible<sp/>assignment<sp/>(%d)&quot;</highlight><highlight class="normal">,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PrefixDegree<sp/>=<sp/>Degree<sp/>-<sp/>Right-&gt;Degree;</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Right-&gt;Degree;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Left-&gt;Dimensions[PrefixDegree<sp/>+<sp/>I].Size<sp/>!=<sp/>Right-&gt;Dimensions[I].Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Incompatible<sp/>assignment<sp/>(%d)&quot;</highlight><highlight class="normal">,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_I8,<sp/>Degree);</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target-&gt;Dimensions[I].Stride<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Target-&gt;Dimensions[I].Size<sp/>=<sp/>Left-&gt;Dimensions[I].Size;</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Base.Value<sp/>=<sp/>snew(DataSize);</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/>compare_row_fn_t<sp/>Compare<sp/>=<sp/>Compares[Left-&gt;Format<sp/>*<sp/>MAX_FORMATS<sp/>+<sp/>Right-&gt;Format];</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Compare)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>array<sp/>format<sp/>pair<sp/>(%s,<sp/>%s)&quot;</highlight><highlight class="normal">,<sp/>Left-&gt;Base.Type-&gt;Name,<sp/>Right-&gt;Base.Type-&gt;Name);</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree)<sp/>{</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compare_prefix(Compare,<sp/>Target-&gt;Dimensions,<sp/>Target-&gt;Base.Value,<sp/>PrefixDegree,<sp/>Left-&gt;Dimensions,<sp/>Left-&gt;Base.Value,<sp/>Right-&gt;Degree,<sp/>Right-&gt;Dimensions,<sp/>Right-&gt;Base.Value);</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>ValueDimension[1]<sp/>=<sp/>{{1,<sp/>0,<sp/>NULL}};</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compare(Target-&gt;Base.Value,<sp/>ValueDimension,<sp/>Left-&gt;Base.Value,<sp/>ValueDimension,<sp/>Right-&gt;Base.Value);</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>COMPARE_METHOD(OP)<sp/>\</highlight></codeline>
<codeline lineno="2021"><highlight class="preprocessor"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2022"><highlight class="comment">ML_METHOD(#OP,<sp/>MLArrayT,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="2023"><highlight class="comment">//&lt;A</highlight></codeline>
<codeline lineno="2024"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="2025"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="2026"><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>OP<sp/>B`<sp/>(element-wise).<sp/>The<sp/>shapes<sp/>of<sp/>:mini:`A`<sp/>and<sp/>:mini:`B`<sp/>must<sp/>be<sp/>compatible,<sp/>i.e.<sp/>either</highlight></codeline>
<codeline lineno="2027"><highlight class="comment">//</highlight></codeline>
<codeline lineno="2028"><highlight class="comment">//<sp/>*<sp/>:mini:`A:shape<sp/>=<sp/>B:shape`<sp/>or</highlight></codeline>
<codeline lineno="2029"><highlight class="comment">//<sp/>*<sp/>:mini:`B:shape`<sp/>is<sp/>a<sp/>prefix<sp/>of<sp/>:mini:`A:shape`.</highlight></codeline>
<codeline lineno="2030"><highlight class="comment">//</highlight></codeline>
<codeline lineno="2031"><highlight class="comment">//<sp/>When<sp/>the<sp/>shapes<sp/>are<sp/>not<sp/>the<sp/>same,<sp/>remaining<sp/>dimensions<sp/>are<sp/>repeated<sp/>(broadcast)<sp/>to<sp/>the<sp/>required<sp/>size.</highlight></codeline>
<codeline lineno="2032"><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>8,<sp/>3],<sp/>[4,<sp/>5,<sp/>12]])</highlight></codeline>
<codeline lineno="2033"><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>array([[7,<sp/>2,<sp/>9],<sp/>[4,<sp/>11,<sp/>6]])</highlight></codeline>
<codeline lineno="2034"><highlight class="comment">//$=<sp/>let<sp/>C<sp/>:=<sp/>array([1,<sp/>5,<sp/>10])</highlight></codeline>
<codeline lineno="2035"><highlight class="comment">//$=<sp/>A<sp/>OP<sp/>B</highlight></codeline>
<codeline lineno="2036"><highlight class="comment">//$=<sp/>A<sp/>OP<sp/>C</highlight></codeline>
<codeline lineno="2037"><highlight class="comment">}</highlight></codeline>
<codeline lineno="2038"><highlight class="comment">*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal">COMPARE_METHOD(=)</highlight></codeline>
<codeline lineno="2041"><highlight class="normal">COMPARE_METHOD(!=)</highlight></codeline>
<codeline lineno="2042"><highlight class="normal">COMPARE_METHOD(&lt;)</highlight></codeline>
<codeline lineno="2043"><highlight class="normal">COMPARE_METHOD(&lt;=)</highlight></codeline>
<codeline lineno="2044"><highlight class="normal">COMPARE_METHOD(&gt;)</highlight></codeline>
<codeline lineno="2045"><highlight class="normal">COMPARE_METHOD(&gt;=)</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal">extern<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_array_compare(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*A,<sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*B);</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal">ML_METHOD(&quot;&lt;&gt;&quot;,<sp/>MLArrayT,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compare<sp/>the<sp/>degrees,<sp/>dimensions<sp/>and<sp/>entries<sp/>of<sp/><sp/>:mini:`A`<sp/>and<sp/>:mini:`B`<sp/>and<sp/>returns<sp/>:mini:`-1`,<sp/>:mini:`0`<sp/>or<sp/>:mini:`1`.<sp/>This<sp/>method<sp/>is<sp/>only<sp/>intending<sp/>for<sp/>sorting<sp/>arrays<sp/>or<sp/>using<sp/>them<sp/>as<sp/>keys<sp/>in<sp/>a<sp/>map.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(ml_array_compare(A,<sp/>B));</highlight></codeline>
<codeline lineno="2057"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>srotl(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>X,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N)<sp/>{</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Mask<sp/>=<sp/>(CHAR_BIT<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(long)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(X<sp/>&lt;&lt;<sp/>(N<sp/>&amp;<sp/>Mask))<sp/>|<sp/>(X<sp/>&gt;&gt;<sp/>((-N)<sp/>&amp;<sp/>Mask<sp/>));</highlight></codeline>
<codeline lineno="2062"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BUFFER_APPEND(BUFFER,<sp/>PRINTF,<sp/>VALUE)<sp/>ml_stringbuffer_simple_append(BUFFER,<sp/>VALUE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>COMPLEX_APPEND(BUFFER,<sp/>PRINTF,<sp/>VALUE)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2069"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>Real<sp/>=<sp/>creal(VALUE),<sp/>Imag<sp/>=<sp/>cimag(VALUE);<sp/>\</highlight></codeline>
<codeline lineno="2070"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Imag<sp/>&lt;<sp/>0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2071"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(BUFFER,<sp/>PRINTF<sp/>&quot;<sp/>-<sp/>&quot;<sp/>PRINTF<sp/>&quot;i&quot;,<sp/>Real,<sp/>-Imag);<sp/>\</highlight></codeline>
<codeline lineno="2072"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2073"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(BUFFER,<sp/>PRINTF<sp/>&quot;<sp/>+<sp/>&quot;<sp/>PRINTF<sp/>&quot;i&quot;,<sp/>Real,<sp/>Imag);<sp/>\</highlight></codeline>
<codeline lineno="2074"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2075"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_number(X)<sp/>_Generic(X,<sp/>ml_value_t<sp/>*:<sp/>ml_nop,<sp/>double:<sp/>ml_real,<sp/>default:<sp/>ml_integer)(X)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_number_value(T,<sp/>X)<sp/>_Generic(T,<sp/>double:<sp/>ml_real_value,<sp/>default:<sp/>ml_integer_value)(X)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_array_get0_complex(FROM_NUM)<sp/>\</highlight></codeline>
<codeline lineno="2086"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_C32:<sp/>return<sp/>FROM_NUM(*(complex_float<sp/>*)Address);<sp/>\</highlight></codeline>
<codeline lineno="2087"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_C64:<sp/>return<sp/>FROM_NUM(*(complex_double<sp/>*)Address);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_array_set_complex(TO_NUM)<sp/>\</highlight></codeline>
<codeline lineno="2090"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_C32:<sp/>*(complex_float<sp/>*)Address<sp/>=<sp/>TO_NUM((complex_float)0,<sp/>Value);<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2091"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_C64:<sp/>*(complex_double<sp/>*)Address<sp/>=<sp/>TO_NUM((complex_double)0,<sp/>Value);<sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"></highlight></codeline>
<codeline lineno="2095"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_array_get0_complex(FROM_NUM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_array_set_complex(TO_NUM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARRAY_DECL(PARENT,<sp/>PREFIX,<sp/>SUFFIX,<sp/>CTYPE,<sp/>APPEND,<sp/>PRINTF,<sp/>FROM_VAL,<sp/>TO_VAL,<sp/>FROM_NUM,<sp/>TO_NUM,<sp/>FORMAT,<sp/>HASH)<sp/>\</highlight></codeline>
<codeline lineno="2101"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2102"><highlight class="preprocessor">static<sp/>void<sp/>append_array_<sp/>##<sp/>CTYPE(ml_stringbuffer_t<sp/>*Buffer,<sp/>int<sp/>Degree,<sp/>ml_array_dimension_t<sp/>*Dimension,<sp/>char<sp/>*Address)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2103"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!Dimension-&gt;Size)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>&quot;&lt;&gt;&quot;,<sp/>2);<sp/>\</highlight></codeline>
<codeline lineno="2105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;<sp/>\</highlight></codeline>
<codeline lineno="2106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>&quot;&lt;&quot;,<sp/>1);<sp/>\</highlight></codeline>
<codeline lineno="2108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2109"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Degree<sp/>==<sp/>1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2110"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2112"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>APPEND(Buffer,<sp/>PRINTF,<sp/>*(CTYPE<sp/>*)(Address<sp/>+<sp/>(Indices[0])<sp/>*<sp/>Dimension-&gt;Stride));<sp/>\</highlight></codeline>
<codeline lineno="2113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2114"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_put(Buffer,<sp/>&apos;<sp/>&apos;);<sp/>\</highlight></codeline>
<codeline lineno="2115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>APPEND(Buffer,<sp/>PRINTF,<sp/>*(CTYPE<sp/>*)(Address<sp/>+<sp/>(Indices[I])<sp/>*<sp/>Stride));<sp/>\</highlight></codeline>
<codeline lineno="2116"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2117"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>APPEND(Buffer,<sp/>PRINTF,<sp/>*(CTYPE<sp/>*)Address);<sp/>\</highlight></codeline>
<codeline lineno="2119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>Dimension-&gt;Size;<sp/>--I<sp/>&gt;<sp/>0;)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_put(Buffer,<sp/>&apos;<sp/>&apos;);<sp/>\</highlight></codeline>
<codeline lineno="2121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>APPEND(Buffer,<sp/>PRINTF,<sp/>*(CTYPE<sp/>*)Address);<sp/>\</highlight></codeline>
<codeline lineno="2123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2128"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>append_array_<sp/>##<sp/>CTYPE(Buffer,<sp/>Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address<sp/>+<sp/>(Indices[0])<sp/>*<sp/>Dimension-&gt;Stride);<sp/>\</highlight></codeline>
<codeline lineno="2129"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2130"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_put(Buffer,<sp/>&apos;<sp/>&apos;);<sp/>\</highlight></codeline>
<codeline lineno="2131"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>append_array_<sp/>##<sp/>CTYPE(Buffer,<sp/>Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address<sp/>+<sp/>(Indices[I])<sp/>*<sp/>Dimension-&gt;Stride);<sp/>\</highlight></codeline>
<codeline lineno="2132"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2134"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>append_array_<sp/>##<sp/>CTYPE(Buffer,<sp/>Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address);<sp/>\</highlight></codeline>
<codeline lineno="2135"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>Dimension-&gt;Size;<sp/>--I<sp/>&gt;<sp/>0;)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2136"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_put(Buffer,<sp/>&apos;<sp/>&apos;);<sp/>\</highlight></codeline>
<codeline lineno="2137"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2138"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>append_array_<sp/>##<sp/>CTYPE(Buffer,<sp/>Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address);<sp/>\</highlight></codeline>
<codeline lineno="2139"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2141"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>&quot;&gt;&quot;,<sp/>1);<sp/>\</highlight></codeline>
<codeline lineno="2143"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="2144"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2145"><highlight class="preprocessor"><sp/>ML_METHOD(&quot;append&quot;,<sp/>MLStringBufferT,<sp/>MLArray<sp/>##<sp/>SUFFIX)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_stringbuffer_t<sp/>*Buffer<sp/>=<sp/>(ml_stringbuffer_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="2147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*Array<sp/>=<sp/>(ml_array_t<sp/>*)Args[1];<sp/>\</highlight></codeline>
<codeline lineno="2148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Array-&gt;Degree<sp/>==<sp/>0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>APPEND(Buffer,<sp/>PRINTF,<sp/>*(CTYPE<sp/>*)Array-&gt;Base.Value);<sp/>\</highlight></codeline>
<codeline lineno="2150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2151"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>append_array_<sp/>##<sp/>CTYPE(Buffer,<sp/>Array-&gt;Degree,<sp/>Array-&gt;Dimensions,<sp/>Array-&gt;Base.Value);<sp/>\</highlight></codeline>
<codeline lineno="2152"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2153"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>MLSome;<sp/>\</highlight></codeline>
<codeline lineno="2154"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="2155"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2156"><highlight class="preprocessor">UPDATE_METHODS(MLArrayMutable<sp/>##<sp/>SUFFIX,<sp/>CTYPE,<sp/>FROM_VAL,<sp/>FORMAT);<sp/>\</highlight></codeline>
<codeline lineno="2157"><highlight class="preprocessor">static<sp/>CTYPE<sp/>ml_array_get0_<sp/>##<sp/>CTYPE(void<sp/>*Address,<sp/>int<sp/>Format)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>switch<sp/>(Format)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_NONE:<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2160"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_U8:<sp/>return<sp/>FROM_NUM(*(uint8_t<sp/>*)Address);<sp/>\</highlight></codeline>
<codeline lineno="2161"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_I8:<sp/>return<sp/>FROM_NUM(*(int8_t<sp/>*)Address);<sp/>\</highlight></codeline>
<codeline lineno="2162"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_U16:<sp/>return<sp/>FROM_NUM(*(uint16_t<sp/>*)Address);<sp/>\</highlight></codeline>
<codeline lineno="2163"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_I16:<sp/>return<sp/>FROM_NUM(*(int16_t<sp/>*)Address);<sp/>\</highlight></codeline>
<codeline lineno="2164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_U32:<sp/>return<sp/>FROM_NUM(*(uint32_t<sp/>*)Address);<sp/>\</highlight></codeline>
<codeline lineno="2165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_I32:<sp/>return<sp/>FROM_NUM(*(int32_t<sp/>*)Address);<sp/>\</highlight></codeline>
<codeline lineno="2166"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_U64:<sp/>return<sp/>FROM_NUM(*(uint64_t<sp/>*)Address);<sp/>\</highlight></codeline>
<codeline lineno="2167"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_I64:<sp/>return<sp/>FROM_NUM(*(int64_t<sp/>*)Address);<sp/>\</highlight></codeline>
<codeline lineno="2168"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_F32:<sp/>return<sp/>FROM_NUM(*(float<sp/>*)Address);<sp/>\</highlight></codeline>
<codeline lineno="2169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_F64:<sp/>return<sp/>FROM_NUM(*(double<sp/>*)Address);<sp/>\</highlight></codeline>
<codeline lineno="2170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_get0_complex(FROM_NUM)<sp/>\</highlight></codeline>
<codeline lineno="2171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_ANY:<sp/>return<sp/>FROM_VAL(*(ml_value_t<sp/>**)Address);<sp/>\</highlight></codeline>
<codeline lineno="2172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(CTYPE)0;<sp/>\</highlight></codeline>
<codeline lineno="2174"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="2175"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2176"><highlight class="preprocessor">CTYPE<sp/>ml_array_get_<sp/>##<sp/>CTYPE(ml_array_t<sp/>*Array,<sp/>...)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2177"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>va_list<sp/>Indices;<sp/>\</highlight></codeline>
<codeline lineno="2178"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>va_start(Indices,<sp/>Array);<sp/>\</highlight></codeline>
<codeline lineno="2179"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>char<sp/>*Address<sp/>=<sp/>ml_array_indexv(Array,<sp/>Indices);<sp/>\</highlight></codeline>
<codeline lineno="2180"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>va_end(Indices);<sp/>\</highlight></codeline>
<codeline lineno="2181"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!Address)<sp/>return<sp/>0;<sp/>\</highlight></codeline>
<codeline lineno="2182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>ml_array_get0_<sp/>##<sp/>CTYPE(Address,<sp/>Array-&gt;Format);<sp/>\</highlight></codeline>
<codeline lineno="2183"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="2184"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2185"><highlight class="preprocessor">void<sp/>ml_array_set_<sp/>##<sp/>CTYPE(CTYPE<sp/>Value,<sp/>ml_array_t<sp/>*Array,<sp/>...)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>va_list<sp/>Indices;<sp/>\</highlight></codeline>
<codeline lineno="2187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>va_start(Indices,<sp/>Array);<sp/>\</highlight></codeline>
<codeline lineno="2188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>char<sp/>*Address<sp/>=<sp/>ml_array_indexv(Array,<sp/>Indices);<sp/>\</highlight></codeline>
<codeline lineno="2189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>va_end(Indices);<sp/>\</highlight></codeline>
<codeline lineno="2190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!Address)<sp/>return;<sp/>\</highlight></codeline>
<codeline lineno="2191"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>switch<sp/>(Array-&gt;Format)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2192"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_NONE:<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2193"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_U8:<sp/>*(uint8_t<sp/>*)Address<sp/>=<sp/>TO_NUM((uint8_t)0,<sp/>Value);<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2194"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_I8:<sp/>*(int8_t<sp/>*)Address<sp/>=<sp/>TO_NUM((int8_t)0,<sp/>Value);<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2195"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_U16:<sp/>*(uint16_t<sp/>*)Address<sp/>=<sp/>TO_NUM((uint16_t)0,<sp/>Value);<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2196"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_I16:<sp/>*(int16_t<sp/>*)Address<sp/>=<sp/>TO_NUM((int16_t)0,<sp/>Value);<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2197"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_U32:<sp/>*(uint32_t<sp/>*)Address<sp/>=<sp/>TO_NUM((uint32_t)0,<sp/>Value);<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2198"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_I32:<sp/>*(int32_t<sp/>*)Address<sp/>=<sp/>TO_NUM((int32_t)0,<sp/>Value);<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_U64:<sp/>*(uint64_t<sp/>*)Address<sp/>=<sp/>TO_NUM((uint8_t)0,<sp/>Value);<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_I64:<sp/>*(int64_t<sp/>*)Address<sp/>=<sp/>TO_NUM((int64_t)0,<sp/>Value);<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_F32:<sp/>*(float<sp/>*)Address<sp/>=<sp/>TO_NUM((float)0,<sp/>Value);<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_F64:<sp/>*(double<sp/>*)Address<sp/>=<sp/>TO_NUM((double)0,<sp/>Value);<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2203"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_set_complex(TO_NUM)<sp/>\</highlight></codeline>
<codeline lineno="2204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_ANY:<sp/>*(ml_value_t<sp/>**)Address<sp/>=<sp/>TO_VAL(Value);<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2206"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="2207"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2208"><highlight class="preprocessor">static<sp/>long<sp/>hash_array_<sp/>##<sp/>CTYPE(int<sp/>Degree,<sp/>ml_array_dimension_t<sp/>*Dimension,<sp/>char<sp/>*Address)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2209"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2210"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2212"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Size)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2213"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Degree<sp/>==<sp/>1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2214"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>Hash<sp/>=<sp/>HASH(*(CTYPE<sp/>*)(Address<sp/>+<sp/>(Indices[0])<sp/>*<sp/>Dimension-&gt;Stride));<sp/>\</highlight></codeline>
<codeline lineno="2215"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2216"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hash<sp/>=<sp/>srotl(Hash,<sp/>1)<sp/>|<sp/>HASH(*(CTYPE<sp/>*)(Address<sp/>+<sp/>(Indices[I])<sp/>*<sp/>Stride));<sp/>\</highlight></codeline>
<codeline lineno="2217"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2218"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>srotl(Hash,<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="2219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2220"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>Hash<sp/>=<sp/>hash_array_<sp/>##<sp/>CTYPE(Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address<sp/>+<sp/>(Indices[0])<sp/>*<sp/>Dimension-&gt;Stride);<sp/>\</highlight></codeline>
<codeline lineno="2221"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2222"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hash<sp/>=<sp/>srotl(Hash,<sp/>1)<sp/>|<sp/>hash_array_<sp/>##<sp/>CTYPE(Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address<sp/>+<sp/>(Indices[I])<sp/>*<sp/>Dimension-&gt;Stride);<sp/>\</highlight></codeline>
<codeline lineno="2223"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2224"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>srotl(Hash,<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="2225"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2226"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2227"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;<sp/>\</highlight></codeline>
<codeline lineno="2228"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2229"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Degree<sp/>==<sp/>1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2230"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>Hash<sp/>=<sp/>HASH(*(CTYPE<sp/>*)Address);<sp/>\</highlight></codeline>
<codeline lineno="2231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>Dimension-&gt;Size;<sp/>--I<sp/>&gt;<sp/>0;)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2233"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hash<sp/>=<sp/>srotl(Hash,<sp/>1)<sp/>|<sp/>HASH(*(CTYPE<sp/>*)Address);<sp/>\</highlight></codeline>
<codeline lineno="2234"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2235"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2236"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>srotl(Hash,<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="2237"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2238"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>Hash<sp/>=<sp/>hash_array_<sp/>##<sp/>CTYPE(Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address);<sp/>\</highlight></codeline>
<codeline lineno="2239"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2240"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>Dimension-&gt;Size;<sp/>--I<sp/>&gt;<sp/>0;)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2241"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hash<sp/>=<sp/>srotl(Hash,<sp/>1)<sp/>|<sp/>hash_array_<sp/>##<sp/>CTYPE(Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address);<sp/>\</highlight></codeline>
<codeline lineno="2242"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2243"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2244"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>srotl(Hash,<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="2245"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2246"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2247"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="2248"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2249"><highlight class="preprocessor">static<sp/>long<sp/>ml_array_<sp/>##<sp/>CTYPE<sp/>##<sp/>_hash(ml_array_t<sp/>*Array)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2250"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Array-&gt;Degree<sp/>==<sp/>0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2251"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Array-&gt;Format<sp/>+<sp/>(long)*(CTYPE<sp/>*)Array-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="2252"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2253"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Array-&gt;Format<sp/>+<sp/>hash_array_<sp/>##<sp/>CTYPE(Array-&gt;Degree,<sp/>Array-&gt;Dimensions,<sp/>Array-&gt;Base.Value);<sp/>\</highlight></codeline>
<codeline lineno="2254"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2255"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="2256"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2257"><highlight class="preprocessor">static<sp/>ml_value_t<sp/>*ml_array_<sp/>##<sp/>CTYPE<sp/>##<sp/>_deref(ml_array_t<sp/>*Target)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2258"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Target-&gt;Degree<sp/>==<sp/>0)<sp/><sp/>return<sp/>TO_VAL(*(CTYPE<sp/>*)Target-&gt;Base.Value);<sp/>\</highlight></codeline>
<codeline lineno="2259"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)Target;<sp/>\</highlight></codeline>
<codeline lineno="2260"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="2261"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2262"><highlight class="preprocessor">static<sp/>void<sp/>ml_array_<sp/>##<sp/>CTYPE<sp/>##<sp/>_assign(ml_state_t<sp/>*Caller,<sp/>ml_array_t<sp/>*Target,<sp/>ml_value_t<sp/>*Value)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2263"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(;;)<sp/>if<sp/>(FORMAT<sp/>==<sp/>ML_ARRAY_FORMAT_ANY<sp/>&amp;&amp;<sp/>!Target-&gt;Degree)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2264"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(ml_value_t<sp/>**)Target-&gt;Base.Value<sp/>=<sp/>Value;<sp/>\</highlight></codeline>
<codeline lineno="2265"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Value);<sp/>\</highlight></codeline>
<codeline lineno="2266"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(ml_is(Value,<sp/>MLArrayT))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2267"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_t<sp/>*Source<sp/>=<sp/>(ml_array_t<sp/>*)Value;<sp/>\</highlight></codeline>
<codeline lineno="2268"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Source-&gt;Degree<sp/>&gt;<sp/>Target-&gt;Degree)<sp/>ML_ERROR(&quot;ArrayError&quot;,<sp/>&quot;Incompatible<sp/>assignment<sp/>(%d)&quot;,<sp/>__LINE__);<sp/>\</highlight></codeline>
<codeline lineno="2269"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>PrefixDegree<sp/>=<sp/>Target-&gt;Degree<sp/>-<sp/>Source-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="2270"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Source-&gt;Degree;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2271"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Target-&gt;Dimensions[PrefixDegree<sp/>+<sp/>I].Size<sp/>!=<sp/>Source-&gt;Dimensions[I].Size)<sp/>ML_ERROR(&quot;ArrayError&quot;,<sp/>&quot;Incompatible<sp/>assignment<sp/>(%d)&quot;,<sp/>__LINE__);<sp/>\</highlight></codeline>
<codeline lineno="2272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2273"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_row_fn_t<sp/>Update<sp/>=<sp/>UpdateSetRowFns[Target-&gt;Format<sp/>*<sp/>MAX_FORMATS<sp/>+<sp/>Source-&gt;Format];<sp/>\</highlight></codeline>
<codeline lineno="2274"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!Update)<sp/>ML_ERROR(&quot;ArrayError&quot;,<sp/>&quot;Unsupported<sp/>array<sp/>format<sp/>pair<sp/>(%s,<sp/>%s)&quot;,<sp/>Target-&gt;Base.Type-&gt;Name,<sp/>Source-&gt;Base.Type-&gt;Name);<sp/>\</highlight></codeline>
<codeline lineno="2275"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Target-&gt;Degree)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2276"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_prefix(Update,<sp/>PrefixDegree,<sp/>Target-&gt;Dimensions,<sp/>Target-&gt;Base.Value,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value);<sp/>\</highlight></codeline>
<codeline lineno="2277"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2278"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_dimension_t<sp/>ValueDimension[1]<sp/>=<sp/>{{1,<sp/>0,<sp/>NULL}};<sp/>\</highlight></codeline>
<codeline lineno="2279"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Update(ValueDimension,<sp/>Target-&gt;Base.Value,<sp/>ValueDimension,<sp/>Source-&gt;Base.Value);<sp/>\</highlight></codeline>
<codeline lineno="2280"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2281"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Value);<sp/>\</highlight></codeline>
<codeline lineno="2282"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(FORMAT<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2283"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_dimension_t<sp/>ValueDimension[1]<sp/>=<sp/>{{1,<sp/>0,<sp/>NULL}};<sp/>\</highlight></codeline>
<codeline lineno="2284"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_row_fn_t<sp/>Update<sp/>=<sp/>UpdateSetRowFns[Target-&gt;Format<sp/>*<sp/>MAX_FORMATS<sp/>+<sp/>Target-&gt;Format];<sp/>\</highlight></codeline>
<codeline lineno="2285"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!Update)<sp/>ML_ERROR(&quot;ArrayError&quot;,<sp/>&quot;Unsupported<sp/>array<sp/>format<sp/>pair<sp/>(%s,<sp/>%s)&quot;,<sp/>Target-&gt;Base.Type-&gt;Name,<sp/>ml_typeof(Value)-&gt;Name);<sp/>\</highlight></codeline>
<codeline lineno="2286"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Target-&gt;Degree<sp/>==<sp/>0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2287"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Update(ValueDimension,<sp/>Target-&gt;Base.Value,<sp/>ValueDimension,<sp/>(char<sp/>*)&amp;Value);<sp/>\</highlight></codeline>
<codeline lineno="2288"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2289"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_prefix(Update,<sp/>Target-&gt;Degree<sp/>-<sp/>1,<sp/>Target-&gt;Dimensions,<sp/>Target-&gt;Base.Value,<sp/>0,<sp/>NULL,<sp/>(char<sp/>*)&amp;Value);<sp/>\</highlight></codeline>
<codeline lineno="2290"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2291"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Value);<sp/>\</highlight></codeline>
<codeline lineno="2292"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(ml_is(Value,<sp/>MLNumberT))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2293"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>CValue<sp/>=<sp/>FROM_VAL(Value);<sp/>\</highlight></codeline>
<codeline lineno="2294"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_dimension_t<sp/>ValueDimension[1]<sp/>=<sp/>{{1,<sp/>0,<sp/>NULL}};<sp/>\</highlight></codeline>
<codeline lineno="2295"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_row_fn_t<sp/>Update<sp/>=<sp/>UpdateSetRowFns[Target-&gt;Format<sp/>*<sp/>MAX_FORMATS<sp/>+<sp/>Target-&gt;Format];<sp/>\</highlight></codeline>
<codeline lineno="2296"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!Update)<sp/>ML_ERROR(&quot;ArrayError&quot;,<sp/>&quot;Unsupported<sp/>array<sp/>format<sp/>pair<sp/>(%s,<sp/>%s)&quot;,<sp/>Target-&gt;Base.Type-&gt;Name,<sp/>ml_typeof(Value)-&gt;Name);<sp/>\</highlight></codeline>
<codeline lineno="2297"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Target-&gt;Degree<sp/>==<sp/>0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2298"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Update(ValueDimension,<sp/>Target-&gt;Base.Value,<sp/>ValueDimension,<sp/>(char<sp/>*)&amp;CValue);<sp/>\</highlight></codeline>
<codeline lineno="2299"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2300"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_prefix(Update,<sp/>Target-&gt;Degree<sp/>-<sp/>1,<sp/>Target-&gt;Dimensions,<sp/>Target-&gt;Base.Value,<sp/>0,<sp/>NULL,<sp/>(char<sp/>*)&amp;CValue);<sp/>\</highlight></codeline>
<codeline lineno="2301"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2302"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Value);<sp/>\</highlight></codeline>
<codeline lineno="2303"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2304"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_array_of_fn(NULL,<sp/>1,<sp/>&amp;Value);<sp/>\</highlight></codeline>
<codeline lineno="2305"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2306"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="2307"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2308"><highlight class="preprocessor">ML_CFUNCTIONX(MLArray<sp/>##<sp/>SUFFIX<sp/>##<sp/>New,<sp/>(void<sp/>*)FORMAT,<sp/>ml_array_typed_new_fnx);<sp/>\</highlight></codeline>
<codeline lineno="2309"><highlight class="preprocessor"></highlight><highlight class="comment">/*@array::PREFIX</highlight></codeline>
<codeline lineno="2310"><highlight class="comment">//&lt;Sizes:list[integer]</highlight></codeline>
<codeline lineno="2311"><highlight class="comment">//&gt;array::PREFIX</highlight></codeline>
<codeline lineno="2312"><highlight class="comment">//<sp/><sp/>Returns<sp/>a<sp/>new<sp/>array<sp/>of<sp/>PREFIX<sp/>values<sp/>with<sp/>the<sp/>specified<sp/>dimensions.</highlight></codeline>
<codeline lineno="2313"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2314"><highlight class="preprocessor">ML_TYPE(MLArray<sp/>##<sp/>SUFFIX,<sp/>(MLArray<sp/>##<sp/>PARENT),<sp/>&quot;array::&quot;<sp/>#PREFIX,<sp/>\</highlight></codeline>
<codeline lineno="2315"><highlight class="preprocessor"></highlight><highlight class="comment">/*@array::PREFIX</highlight></codeline>
<codeline lineno="2316"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="2317"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.hash<sp/>=<sp/>(void<sp/>*)ml_array_<sp/>##<sp/>CTYPE<sp/>##<sp/>_hash,<sp/>\</highlight></codeline>
<codeline lineno="2318"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(ml_value_t<sp/>*)MLArray<sp/>##<sp/>SUFFIX<sp/>##<sp/>New<sp/>\</highlight></codeline>
<codeline lineno="2319"><highlight class="preprocessor">);<sp/>\</highlight></codeline>
<codeline lineno="2320"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2321"><highlight class="preprocessor">ML_TYPE(MLArrayMutable<sp/>##<sp/>SUFFIX,<sp/>(MLArray<sp/>##<sp/>SUFFIX,<sp/>MLArrayMutable<sp/>##<sp/>PARENT),<sp/>&quot;array::mutable::&quot;<sp/>#PREFIX,<sp/>\</highlight></codeline>
<codeline lineno="2322"><highlight class="preprocessor"></highlight><highlight class="comment">/*@array::mutable::PREFIX</highlight></codeline>
<codeline lineno="2323"><highlight class="comment">//<sp/>An<sp/>array<sp/>of<sp/>PREFIX<sp/>values.</highlight></codeline>
<codeline lineno="2324"><highlight class="comment">//</highlight></codeline>
<codeline lineno="2325"><highlight class="comment">//<sp/>:mini:`(A:<sp/>array::mutable::PREFIX)<sp/>:=<sp/>(B:<sp/>number)`</highlight></codeline>
<codeline lineno="2326"><highlight class="comment">//<sp/><sp/><sp/><sp/>Sets<sp/>the<sp/>values<sp/>in<sp/>:mini:`A`<sp/>to<sp/>:mini:`B`.</highlight></codeline>
<codeline lineno="2327"><highlight class="comment">//<sp/>:mini:`(A:<sp/>array::mutable::PREFIX)<sp/>:=<sp/>(B:<sp/>array<sp/>|<sp/>list)`</highlight></codeline>
<codeline lineno="2328"><highlight class="comment">//<sp/><sp/><sp/><sp/>Sets<sp/>the<sp/>values<sp/>in<sp/>:mini:`A`<sp/>to<sp/>those<sp/>in<sp/>:mini:`B`,<sp/>broadcasting<sp/>as<sp/>necessary.<sp/>The<sp/>shape<sp/>of<sp/>:mini:`B`<sp/>must<sp/>match<sp/>the<sp/>last<sp/>dimensions<sp/>of<sp/>:mini:`A`.</highlight></codeline>
<codeline lineno="2329"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2330"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.hash<sp/>=<sp/>(void<sp/>*)ml_array_<sp/>##<sp/>CTYPE<sp/>##<sp/>_hash,<sp/>\</highlight></codeline>
<codeline lineno="2331"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(ml_value_t<sp/>*)MLArray<sp/>##<sp/>SUFFIX<sp/>##<sp/>New<sp/>\</highlight></codeline>
<codeline lineno="2332"><highlight class="preprocessor">);<sp/>\</highlight></codeline>
<codeline lineno="2333"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2334"><highlight class="preprocessor">ML_TYPE(MLVector<sp/>##<sp/>SUFFIX,<sp/>(MLVector<sp/>##<sp/>PARENT,<sp/>MLArray<sp/>##<sp/>SUFFIX),<sp/>&quot;vector::&quot;<sp/>#PREFIX,<sp/>\</highlight></codeline>
<codeline lineno="2335"><highlight class="preprocessor"></highlight><highlight class="comment">/*@vector::PREFIX</highlight></codeline>
<codeline lineno="2336"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="2337"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.hash<sp/>=<sp/>(void<sp/>*)ml_array_<sp/>##<sp/>CTYPE<sp/>##<sp/>_hash,<sp/>\</highlight></codeline>
<codeline lineno="2338"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(ml_value_t<sp/>*)MLArray<sp/>##<sp/>SUFFIX<sp/>##<sp/>New<sp/>\</highlight></codeline>
<codeline lineno="2339"><highlight class="preprocessor">);<sp/>\</highlight></codeline>
<codeline lineno="2340"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2341"><highlight class="preprocessor">ML_TYPE(MLVectorMutable<sp/>##<sp/>SUFFIX,<sp/>(MLVector<sp/>##<sp/>SUFFIX,<sp/>MLVectorMutable<sp/>##<sp/>PARENT,<sp/>MLArrayMutable<sp/>##<sp/>SUFFIX),<sp/>&quot;vector::mutable::&quot;<sp/>#PREFIX,<sp/>\</highlight></codeline>
<codeline lineno="2342"><highlight class="preprocessor"></highlight><highlight class="comment">/*@vector::mutable::PREFIX</highlight></codeline>
<codeline lineno="2343"><highlight class="comment">//<sp/>A<sp/>vector<sp/>of<sp/>PREFIX<sp/>values.</highlight></codeline>
<codeline lineno="2344"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2345"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.hash<sp/>=<sp/>(void<sp/>*)ml_array_<sp/>##<sp/>CTYPE<sp/>##<sp/>_hash,<sp/>\</highlight></codeline>
<codeline lineno="2346"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(ml_value_t<sp/>*)MLArray<sp/>##<sp/>SUFFIX<sp/>##<sp/>New<sp/>\</highlight></codeline>
<codeline lineno="2347"><highlight class="preprocessor">);<sp/>\</highlight></codeline>
<codeline lineno="2348"><highlight class="preprocessor">ML_TYPE(MLMatrix<sp/>##<sp/>SUFFIX,<sp/>(MLMatrix<sp/>##<sp/>PARENT,<sp/>MLArray<sp/>##<sp/>SUFFIX),<sp/>&quot;matrix::&quot;<sp/>#PREFIX,<sp/>\</highlight></codeline>
<codeline lineno="2349"><highlight class="preprocessor"></highlight><highlight class="comment">/*@matrix::PREFIX</highlight></codeline>
<codeline lineno="2350"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="2351"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.hash<sp/>=<sp/>(void<sp/>*)ml_array_<sp/>##<sp/>CTYPE<sp/>##<sp/>_hash,<sp/>\</highlight></codeline>
<codeline lineno="2352"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(ml_value_t<sp/>*)MLArray<sp/>##<sp/>SUFFIX<sp/>##<sp/>New<sp/>\</highlight></codeline>
<codeline lineno="2353"><highlight class="preprocessor">);<sp/>\</highlight></codeline>
<codeline lineno="2354"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2355"><highlight class="preprocessor">ML_TYPE(MLMatrixMutable<sp/>##<sp/>SUFFIX,<sp/>(MLMatrix<sp/>##<sp/>SUFFIX,<sp/>MLMatrixMutable<sp/>##<sp/>PARENT,<sp/>MLArrayMutable<sp/>##<sp/>SUFFIX),<sp/>&quot;matrix::mutable::&quot;<sp/>#PREFIX,<sp/>\</highlight></codeline>
<codeline lineno="2356"><highlight class="preprocessor"></highlight><highlight class="comment">/*@matrix::mutable::PREFIX</highlight></codeline>
<codeline lineno="2357"><highlight class="comment">//<sp/>A<sp/>matrix<sp/>of<sp/>PREFIX<sp/>values.</highlight></codeline>
<codeline lineno="2358"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2359"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.hash<sp/>=<sp/>(void<sp/>*)ml_array_<sp/>##<sp/>CTYPE<sp/>##<sp/>_hash,<sp/>\</highlight></codeline>
<codeline lineno="2360"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(ml_value_t<sp/>*)MLArray<sp/>##<sp/>SUFFIX<sp/>##<sp/>New<sp/>\</highlight></codeline>
<codeline lineno="2361"><highlight class="preprocessor">);<sp/>\</highlight></codeline>
<codeline lineno="2362"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2363"><highlight class="preprocessor">static<sp/>ml_value_t<sp/>*ML_TYPED_FN(ml_array_value,<sp/>MLArray<sp/>##<sp/>SUFFIX,<sp/>ml_array_t<sp/>*Array,<sp/>char<sp/>*Address)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2364"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>TO_VAL(*(CTYPE<sp/>*)Array-&gt;Base.Value);<sp/>\</highlight></codeline>
<codeline lineno="2365"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOP_VAL(T,<sp/>X)<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal">ARRAY_DECL(IntegerT,<sp/>uint8,<sp/>UInt8T,<sp/>uint8_t,<sp/>ml_stringbuffer_printf,<sp/></highlight><highlight class="stringliteral">&quot;%u&quot;</highlight><highlight class="normal">,<sp/>ml_integer_value,<sp/>ml_integer,<sp/>,<sp/>NOP_VAL,<sp/>ML_ARRAY_FORMAT_U8,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2370"><highlight class="normal">ARRAY_DECL(IntegerT,<sp/>int8,<sp/>Int8T,<sp/>int8_t,<sp/>ml_stringbuffer_printf,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>ml_integer_value,<sp/>ml_integer,<sp/>,<sp/>NOP_VAL,<sp/>ML_ARRAY_FORMAT_I8,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2371"><highlight class="normal">ARRAY_DECL(IntegerT,<sp/>uint16,<sp/>UInt16T,<sp/>uint16_t,<sp/>ml_stringbuffer_printf,<sp/></highlight><highlight class="stringliteral">&quot;%u&quot;</highlight><highlight class="normal">,<sp/>ml_integer_value,<sp/>ml_integer,<sp/>,<sp/>NOP_VAL,<sp/>ML_ARRAY_FORMAT_U16,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2372"><highlight class="normal">ARRAY_DECL(IntegerT,<sp/>int16,<sp/>Int16T,<sp/>int16_t,<sp/>ml_stringbuffer_printf,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>ml_integer_value,<sp/>ml_integer,<sp/>,<sp/>NOP_VAL,<sp/>ML_ARRAY_FORMAT_I16,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2373"><highlight class="normal">ARRAY_DECL(IntegerT,<sp/>uint32,<sp/>UInt32T,<sp/>uint32_t,<sp/>ml_stringbuffer_printf,<sp/></highlight><highlight class="stringliteral">&quot;%u&quot;</highlight><highlight class="normal">,<sp/>ml_integer_value,<sp/>ml_integer,<sp/>,<sp/>NOP_VAL,<sp/>ML_ARRAY_FORMAT_U32,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2374"><highlight class="normal">ARRAY_DECL(IntegerT,<sp/>int32,<sp/>Int32T,<sp/>int32_t,<sp/>ml_stringbuffer_printf,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>ml_integer_value,<sp/>ml_integer,<sp/>,<sp/>NOP_VAL,<sp/>ML_ARRAY_FORMAT_I32,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2375"><highlight class="normal">ARRAY_DECL(IntegerT,<sp/>uint64,<sp/>UInt64T,<sp/>uint64_t,<sp/>ml_stringbuffer_printf,<sp/></highlight><highlight class="stringliteral">&quot;%lu&quot;</highlight><highlight class="normal">,<sp/>ml_integer_value,<sp/>ml_integer,<sp/>,<sp/>NOP_VAL,<sp/>ML_ARRAY_FORMAT_U64,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2376"><highlight class="normal">ARRAY_DECL(IntegerT,<sp/>int64,<sp/>Int64T,<sp/>int64_t,<sp/>ml_stringbuffer_printf,<sp/></highlight><highlight class="stringliteral">&quot;%ld&quot;</highlight><highlight class="normal">,<sp/>ml_integer_value,<sp/>ml_integer,<sp/>,<sp/>NOP_VAL,<sp/>ML_ARRAY_FORMAT_I64,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2377"><highlight class="normal">ARRAY_DECL(RealT,<sp/>float32,<sp/>Float32T,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>ml_stringbuffer_printf,<sp/></highlight><highlight class="stringliteral">&quot;%g&quot;</highlight><highlight class="normal">,<sp/>ml_real_value,<sp/>ml_real,<sp/>,<sp/>NOP_VAL,<sp/>ML_ARRAY_FORMAT_F32,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2378"><highlight class="normal">ARRAY_DECL(RealT,<sp/>float64,<sp/>Float64T,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>ml_stringbuffer_printf,<sp/></highlight><highlight class="stringliteral">&quot;%g&quot;</highlight><highlight class="normal">,<sp/>ml_real_value,<sp/>ml_real,<sp/>,<sp/>NOP_VAL,<sp/>ML_ARRAY_FORMAT_F64,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"></highlight></codeline>
<codeline lineno="2380"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal">ARRAY_DECL(ComplexT,<sp/>complex32,<sp/>Complex32T,<sp/>complex_float,<sp/>COMPLEX_APPEND,<sp/></highlight><highlight class="stringliteral">&quot;%g&quot;</highlight><highlight class="normal">,<sp/>ml_complex_value,<sp/>ml_complex,<sp/>,<sp/>NOP_VAL,<sp/>ML_ARRAY_FORMAT_C32,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2383"><highlight class="normal">ARRAY_DECL(ComplexT,<sp/>complex64,<sp/>Complex64T,<sp/>complex_double,<sp/>COMPLEX_APPEND,<sp/></highlight><highlight class="stringliteral">&quot;%g&quot;</highlight><highlight class="normal">,<sp/>ml_complex_value,<sp/>ml_complex,<sp/>,<sp/>NOP_VAL,<sp/>ML_ARRAY_FORMAT_C64,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"></highlight></codeline>
<codeline lineno="2387"><highlight class="normal">ARRAY_DECL(T,<sp/><ref refid="structml__value__t" kindref="compound">any</ref>,<sp/>AnyT,<sp/><ref refid="structml__value__t" kindref="compound">any</ref>,<sp/>BUFFER_APPEND,<sp/></highlight><highlight class="stringliteral">&quot;?&quot;</highlight><highlight class="normal">,<sp/>ml_nop,<sp/>ml_nop,<sp/>ml_number,<sp/>ml_number_value,<sp/>ML_ARRAY_FORMAT_ANY,<sp/>ml_hash);</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_array_ref_deref(<ref refid="structml__array__ref__t" kindref="compound">ml_array_ref_t</ref><sp/>*Ref)<sp/>{</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Ref-&gt;Array-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_uint8_t_deref(Ref-&gt;Array);</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_int8_t_deref(Ref-&gt;Array);</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_uint16_t_deref(Ref-&gt;Array);</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_int16_t_deref(Ref-&gt;Array);</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_uint32_t_deref(Ref-&gt;Array);</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_int32_t_deref(Ref-&gt;Array);</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_uint64_t_deref(Ref-&gt;Array);</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_int64_t_deref(Ref-&gt;Array);</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_float_deref(Ref-&gt;Array);</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_double_deref(Ref-&gt;Array);</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_complex_float_deref(Ref-&gt;Array);</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_complex_double_deref(Ref-&gt;Array);</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_ANY:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_any_deref(Ref-&gt;Array);</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>__builtin_unreachable();</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"></highlight></codeline>
<codeline lineno="2410"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_array_ref_assign(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__array__ref__t" kindref="compound">ml_array_ref_t</ref><sp/>*Ref,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Ref-&gt;Array-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_uint8_t_assign(Caller,<sp/>Ref-&gt;Array,<sp/>Value);</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_int8_t_assign(Caller,<sp/>Ref-&gt;Array,<sp/>Value);</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_uint16_t_assign(Caller,<sp/>Ref-&gt;Array,<sp/>Value);</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_int16_t_assign(Caller,<sp/>Ref-&gt;Array,<sp/>Value);</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_uint32_t_assign(Caller,<sp/>Ref-&gt;Array,<sp/>Value);</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_int32_t_assign(Caller,<sp/>Ref-&gt;Array,<sp/>Value);</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_uint64_t_assign(Caller,<sp/>Ref-&gt;Array,<sp/>Value);</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_int64_t_assign(Caller,<sp/>Ref-&gt;Array,<sp/>Value);</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_float_assign(Caller,<sp/>Ref-&gt;Array,<sp/>Value);</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_double_assign(Caller,<sp/>Ref-&gt;Array,<sp/>Value);</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_complex_float_assign(Caller,<sp/>Ref-&gt;Array,<sp/>Value);</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_complex_double_assign(Caller,<sp/>Ref-&gt;Array,<sp/>Value);</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_ANY:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_array_any_assign(Caller,<sp/>Ref-&gt;Array,<sp/>Value);</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>__builtin_unreachable();</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PARTIAL_FUNCTIONS(CTYPE)<sp/>\</highlight></codeline>
<codeline lineno="2432"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2433"><highlight class="preprocessor">static<sp/>void<sp/>partial_sums_<sp/>##<sp/>CTYPE(int<sp/>Target,<sp/>int<sp/>Degree,<sp/>ml_array_dimension_t<sp/>*Dimension,<sp/>char<sp/>*Address,<sp/>int<sp/>LastRow)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2434"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Degree<sp/>==<sp/>0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2435"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(CTYPE<sp/>*)Address<sp/>+=<sp/>*(CTYPE<sp/>*)(Address<sp/>-<sp/>LastRow);<sp/>\</highlight></codeline>
<codeline lineno="2436"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(Target<sp/>==<sp/>Degree)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2437"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2438"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2439"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2440"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2441"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_sums_<sp/>##<sp/>CTYPE(Target,<sp/>Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride,<sp/>(Indices[I]<sp/>-<sp/>Indices[I<sp/>-<sp/>1])<sp/>*<sp/>Stride);<sp/>\</highlight></codeline>
<codeline lineno="2442"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2443"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2444"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2445"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2446"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_sums_<sp/>##<sp/>CTYPE(Target,<sp/>Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address,<sp/>Stride);<sp/>\</highlight></codeline>
<codeline lineno="2447"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2448"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2449"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2450"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2451"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2452"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2453"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2454"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_sums_<sp/>##<sp/>CTYPE(Target,<sp/>Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride,<sp/>LastRow);<sp/>\</highlight></codeline>
<codeline lineno="2455"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2456"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2457"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2458"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_sums_<sp/>##<sp/>CTYPE(Target,<sp/>Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address,<sp/>LastRow);<sp/>\</highlight></codeline>
<codeline lineno="2459"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2460"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2461"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2462"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2463"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="2464"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2465"><highlight class="preprocessor">static<sp/>void<sp/>partial_prods_<sp/>##<sp/>CTYPE(int<sp/>Target,<sp/>int<sp/>Degree,<sp/>ml_array_dimension_t<sp/>*Dimension,<sp/>char<sp/>*Address,<sp/>int<sp/>LastRow)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2466"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Degree<sp/>==<sp/>0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2467"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(CTYPE<sp/>*)Address<sp/>*=<sp/>*(CTYPE<sp/>*)(Address<sp/>-<sp/>LastRow);<sp/>\</highlight></codeline>
<codeline lineno="2468"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(Target<sp/>==<sp/>Degree)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2469"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2470"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2471"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2472"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2473"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_prods_<sp/>##<sp/>CTYPE(Target,<sp/>Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride,<sp/>(Indices[I]<sp/>-<sp/>Indices[I<sp/>-<sp/>1])<sp/>*<sp/>Stride);<sp/>\</highlight></codeline>
<codeline lineno="2474"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2475"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2476"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2477"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2478"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_prods_<sp/>##<sp/>CTYPE(Target,<sp/>Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address,<sp/>Stride);<sp/>\</highlight></codeline>
<codeline lineno="2479"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2480"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2481"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2482"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2483"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2484"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2485"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2486"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_prods_<sp/>##<sp/>CTYPE(Target,<sp/>Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride,<sp/>LastRow);<sp/>\</highlight></codeline>
<codeline lineno="2487"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2488"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2489"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2490"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_prods_<sp/>##<sp/>CTYPE(Target,<sp/>Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address,<sp/>LastRow);<sp/>\</highlight></codeline>
<codeline lineno="2491"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2492"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2493"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2494"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2495"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="2496"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2497"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>COMPLETE_FUNCTIONS(CTYPE1,<sp/>CTYPE2)<sp/>\</highlight></codeline>
<codeline lineno="2498"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2499"><highlight class="preprocessor">static<sp/>CTYPE1<sp/>compute_sums_<sp/>##<sp/>CTYPE2(int<sp/>Degree,<sp/>ml_array_dimension_t<sp/>*Dimension,<sp/>void<sp/>*Address)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2500"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CTYPE1<sp/>Sum<sp/>=<sp/>0;<sp/>\</highlight></codeline>
<codeline lineno="2501"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Degree<sp/>&gt;<sp/>1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2502"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2503"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2504"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2505"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2506"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sum<sp/>+=<sp/>compute_sums_<sp/>##<sp/>CTYPE2(Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride);<sp/>\</highlight></codeline>
<codeline lineno="2507"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2508"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2509"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2510"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sum<sp/>+=<sp/>compute_sums_<sp/>##<sp/>CTYPE2(Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address);<sp/>\</highlight></codeline>
<codeline lineno="2511"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2512"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2513"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2514"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2515"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2516"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2517"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2518"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2519"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sum<sp/>+=<sp/>*(CTYPE2<sp/>*)(Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride);<sp/>\</highlight></codeline>
<codeline lineno="2520"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2521"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2522"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2523"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sum<sp/>+=<sp/>*(CTYPE2<sp/>*)Address;<sp/>\</highlight></codeline>
<codeline lineno="2524"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2525"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2526"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2527"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2528"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>Sum;<sp/>\</highlight></codeline>
<codeline lineno="2529"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="2530"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2531"><highlight class="preprocessor">static<sp/>void<sp/>fill_sums_<sp/>##<sp/>CTYPE2(int<sp/>TargetDegree,<sp/>ml_array_dimension_t<sp/>*TargetDimension,<sp/>void<sp/>*TargetAddress,<sp/>int<sp/>SourceDegree,<sp/>ml_array_dimension_t<sp/>*SourceDimension,<sp/>void<sp/>*SourceAddress)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2532"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(TargetDegree<sp/>==<sp/>0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2533"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(CTYPE1<sp/>*)TargetAddress<sp/>=<sp/>compute_sums_<sp/>##<sp/>CTYPE2(SourceDegree,<sp/>SourceDimension,<sp/>SourceAddress);<sp/>\</highlight></codeline>
<codeline lineno="2534"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2535"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>TargetStride<sp/>=<sp/>TargetDimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2536"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SourceStride<sp/>=<sp/>SourceDimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2537"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(SourceDimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2538"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>SourceDimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2539"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>SourceDimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2540"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_sums_<sp/>##<sp/>CTYPE2(TargetDegree<sp/>-<sp/>1,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetAddress,<sp/>SourceDegree<sp/>-<sp/>1,<sp/>SourceDimension<sp/>+<sp/>1,<sp/>SourceAddress<sp/>+<sp/>Indices[I]<sp/>*<sp/>SourceStride);<sp/>\</highlight></codeline>
<codeline lineno="2541"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetAddress<sp/>+=<sp/>TargetStride;<sp/>\</highlight></codeline>
<codeline lineno="2542"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2543"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2544"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>SourceDimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2545"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_sums_<sp/>##<sp/>CTYPE2(TargetDegree<sp/>-<sp/>1,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetAddress,<sp/>SourceDegree<sp/>-<sp/>1,<sp/>SourceDimension<sp/>+<sp/>1,<sp/>SourceAddress);<sp/>\</highlight></codeline>
<codeline lineno="2546"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetAddress<sp/>+=<sp/>TargetStride;<sp/>\</highlight></codeline>
<codeline lineno="2547"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SourceAddress<sp/>+=<sp/>SourceStride;<sp/>\</highlight></codeline>
<codeline lineno="2548"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2549"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2550"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2551"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="2552"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2553"><highlight class="preprocessor">static<sp/>CTYPE1<sp/>compute_prods_<sp/>##<sp/>CTYPE2(int<sp/>Degree,<sp/>ml_array_dimension_t<sp/>*Dimension,<sp/>void<sp/>*Address)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2554"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CTYPE1<sp/>Prod<sp/>=<sp/>1;<sp/>\</highlight></codeline>
<codeline lineno="2555"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Degree<sp/>&gt;<sp/>1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2556"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2557"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2558"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2559"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2560"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prod<sp/>*=<sp/>compute_prods_<sp/>##<sp/>CTYPE2(Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride);<sp/>\</highlight></codeline>
<codeline lineno="2561"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2562"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2563"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2564"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prod<sp/>*=<sp/>compute_prods_<sp/>##<sp/>CTYPE2(Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address);<sp/>\</highlight></codeline>
<codeline lineno="2565"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2566"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2567"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2568"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2569"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2570"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2571"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2572"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2573"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prod<sp/>*=<sp/>*(CTYPE2<sp/>*)(Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride);<sp/>\</highlight></codeline>
<codeline lineno="2574"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2575"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2576"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2577"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prod<sp/>*=<sp/>*(CTYPE2<sp/>*)Address;<sp/>\</highlight></codeline>
<codeline lineno="2578"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2579"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2580"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2581"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2582"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>Prod;<sp/>\</highlight></codeline>
<codeline lineno="2583"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="2584"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2585"><highlight class="preprocessor">static<sp/>void<sp/>fill_prods_<sp/>##<sp/>CTYPE2(int<sp/>TargetDegree,<sp/>ml_array_dimension_t<sp/>*TargetDimension,<sp/>void<sp/>*TargetAddress,<sp/>int<sp/>SourceDegree,<sp/>ml_array_dimension_t<sp/>*SourceDimension,<sp/>void<sp/>*SourceAddress)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2586"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(TargetDegree<sp/>==<sp/>0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2587"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(CTYPE1<sp/>*)TargetAddress<sp/>=<sp/>compute_prods_<sp/>##<sp/>CTYPE2(SourceDegree,<sp/>SourceDimension,<sp/>SourceAddress);<sp/>\</highlight></codeline>
<codeline lineno="2588"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2589"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>TargetStride<sp/>=<sp/>TargetDimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2590"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SourceStride<sp/>=<sp/>SourceDimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2591"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(SourceDimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2592"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>SourceDimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2593"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>SourceDimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2594"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_prods_<sp/>##<sp/>CTYPE2(TargetDegree<sp/>-<sp/>1,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetAddress,<sp/>SourceDegree<sp/>-<sp/>1,<sp/>SourceDimension<sp/>+<sp/>1,<sp/>SourceAddress<sp/>+<sp/>Indices[I]<sp/>*<sp/>SourceStride);<sp/>\</highlight></codeline>
<codeline lineno="2595"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetAddress<sp/>+=<sp/>TargetStride;<sp/>\</highlight></codeline>
<codeline lineno="2596"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2597"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2598"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>SourceDimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2599"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_prods_<sp/>##<sp/>CTYPE2(TargetDegree<sp/>-<sp/>1,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetAddress,<sp/>SourceDegree<sp/>-<sp/>1,<sp/>SourceDimension<sp/>+<sp/>1,<sp/>SourceAddress);<sp/>\</highlight></codeline>
<codeline lineno="2600"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetAddress<sp/>+=<sp/>TargetStride;<sp/>\</highlight></codeline>
<codeline lineno="2601"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SourceAddress<sp/>+=<sp/>SourceStride;<sp/>\</highlight></codeline>
<codeline lineno="2602"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2603"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2604"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2605"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2606"><highlight class="normal"></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MINMAX_FUNCTIONS(CTYPE)<sp/>\</highlight></codeline>
<codeline lineno="2608"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2609"><highlight class="preprocessor">static<sp/>CTYPE<sp/>compute_mins_<sp/>##<sp/>CTYPE(int<sp/>Degree,<sp/>ml_array_dimension_t<sp/>*Dimension,<sp/>void<sp/>*Address)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2610"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CTYPE<sp/>Min<sp/>=<sp/>*(CTYPE<sp/>*)Address;<sp/>\</highlight></codeline>
<codeline lineno="2611"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Degree<sp/>&gt;<sp/>1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2612"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2613"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2614"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2615"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2616"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>Min2<sp/>=<sp/>compute_mins_<sp/>##<sp/>CTYPE(Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride);<sp/>\</highlight></codeline>
<codeline lineno="2617"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Min2<sp/>&lt;<sp/>Min)<sp/>Min<sp/>=<sp/>Min2;<sp/>\</highlight></codeline>
<codeline lineno="2618"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2619"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2620"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2621"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>Min2<sp/>=<sp/>compute_mins_<sp/>##<sp/>CTYPE(Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address);<sp/>\</highlight></codeline>
<codeline lineno="2622"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Min2<sp/>&lt;<sp/>Min)<sp/>Min<sp/>=<sp/>Min2;<sp/>\</highlight></codeline>
<codeline lineno="2623"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2624"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2625"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2626"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2627"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2628"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2629"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2630"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2631"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>Min2<sp/>=<sp/>*(CTYPE<sp/>*)(Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride);<sp/>\</highlight></codeline>
<codeline lineno="2632"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Min2<sp/>&lt;<sp/>Min)<sp/>Min<sp/>=<sp/>Min2;<sp/>\</highlight></codeline>
<codeline lineno="2633"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2634"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2635"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2636"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>Min2<sp/>=<sp/>*(CTYPE<sp/>*)Address;<sp/>\</highlight></codeline>
<codeline lineno="2637"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Min2<sp/>&lt;<sp/>Min)<sp/>Min<sp/>=<sp/>Min2;<sp/>\</highlight></codeline>
<codeline lineno="2638"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2639"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2640"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2641"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2642"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>Min;<sp/>\</highlight></codeline>
<codeline lineno="2643"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="2644"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2645"><highlight class="preprocessor">static<sp/>void<sp/>fill_mins_<sp/>##<sp/>CTYPE(int<sp/>TargetDegree,<sp/>ml_array_dimension_t<sp/>*TargetDimension,<sp/>void<sp/>*TargetAddress,<sp/>int<sp/>SourceDegree,<sp/>ml_array_dimension_t<sp/>*SourceDimension,<sp/>void<sp/>*SourceAddress)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2646"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(TargetDegree<sp/>==<sp/>0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2647"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(CTYPE<sp/>*)TargetAddress<sp/>=<sp/>compute_mins_<sp/>##<sp/>CTYPE(SourceDegree,<sp/>SourceDimension,<sp/>SourceAddress);<sp/>\</highlight></codeline>
<codeline lineno="2648"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2649"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>TargetStride<sp/>=<sp/>TargetDimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2650"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SourceStride<sp/>=<sp/>SourceDimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2651"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(SourceDimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2652"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>SourceDimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2653"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>SourceDimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2654"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_mins_<sp/>##<sp/>CTYPE(TargetDegree<sp/>-<sp/>1,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetAddress,<sp/>SourceDegree<sp/>-<sp/>1,<sp/>SourceDimension<sp/>+<sp/>1,<sp/>SourceAddress<sp/>+<sp/>Indices[I]<sp/>*<sp/>SourceStride);<sp/>\</highlight></codeline>
<codeline lineno="2655"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetAddress<sp/>+=<sp/>TargetStride;<sp/>\</highlight></codeline>
<codeline lineno="2656"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2657"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2658"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>SourceDimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2659"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_mins_<sp/>##<sp/>CTYPE(TargetDegree<sp/>-<sp/>1,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetAddress,<sp/>SourceDegree<sp/>-<sp/>1,<sp/>SourceDimension<sp/>+<sp/>1,<sp/>SourceAddress);<sp/>\</highlight></codeline>
<codeline lineno="2660"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetAddress<sp/>+=<sp/>TargetStride;<sp/>\</highlight></codeline>
<codeline lineno="2661"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SourceAddress<sp/>+=<sp/>SourceStride;<sp/>\</highlight></codeline>
<codeline lineno="2662"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2663"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2664"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2665"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="2666"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2667"><highlight class="preprocessor">static<sp/>CTYPE<sp/>find_mins_<sp/>##<sp/>CTYPE(uint32_t<sp/>*Target,<sp/>int<sp/>Degree,<sp/>ml_array_dimension_t<sp/>*Dimension,<sp/>void<sp/>*Address,<sp/>CTYPE<sp/>Min)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2668"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Degree<sp/>&gt;<sp/>1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2669"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2670"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2671"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2672"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2673"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>Min2<sp/>=<sp/>find_mins_<sp/>##<sp/>CTYPE(Target<sp/>+<sp/>1,<sp/>Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride,<sp/>Min);<sp/>\</highlight></codeline>
<codeline lineno="2674"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Min2<sp/>&lt;<sp/>Min)<sp/>{<sp/>Min<sp/>=<sp/>Min2;<sp/>*Target<sp/>=<sp/>I<sp/>+<sp/>1;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2675"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2676"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2677"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2678"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>Min2<sp/>=<sp/>find_mins_<sp/>##<sp/>CTYPE(Target<sp/>+<sp/>1,<sp/>Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address,<sp/>Min);<sp/>\</highlight></codeline>
<codeline lineno="2679"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Min2<sp/>&lt;<sp/>Min)<sp/>{<sp/>Min<sp/>=<sp/>Min2;<sp/>*Target<sp/>=<sp/>I<sp/>+<sp/>1;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2680"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2681"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2682"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2683"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2684"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2685"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2686"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2687"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2688"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>Min2<sp/>=<sp/>*(CTYPE<sp/>*)(Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride);<sp/>\</highlight></codeline>
<codeline lineno="2689"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Min2<sp/>&lt;<sp/>Min)<sp/>{<sp/>Min<sp/>=<sp/>Min2;<sp/>*Target<sp/>=<sp/>I<sp/>+<sp/>1;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2690"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2691"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2692"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2693"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>Min2<sp/>=<sp/>*(CTYPE<sp/>*)Address;<sp/>\</highlight></codeline>
<codeline lineno="2694"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Min2<sp/>&lt;<sp/>Min)<sp/>{<sp/>Min<sp/>=<sp/>Min2;<sp/>*Target<sp/>=<sp/>I<sp/>+<sp/>1;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2695"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2696"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2697"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2698"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2699"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>Min;<sp/>\</highlight></codeline>
<codeline lineno="2700"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="2701"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2702"><highlight class="preprocessor">static<sp/>void<sp/>index_mins_<sp/>##<sp/>CTYPE(int<sp/>TargetDegree,<sp/>ml_array_dimension_t<sp/>*TargetDimension,<sp/>void<sp/>*TargetAddress,<sp/>int<sp/>SourceDegree,<sp/>ml_array_dimension_t<sp/>*SourceDimension,<sp/>void<sp/>*SourceAddress)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2703"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(TargetDegree<sp/>==<sp/>1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2704"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(uint32_t<sp/>*)TargetAddress<sp/>=<sp/>1;<sp/>\</highlight></codeline>
<codeline lineno="2705"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_mins_<sp/>##<sp/>CTYPE((uint32_t<sp/>*)TargetAddress,<sp/>SourceDegree,<sp/>SourceDimension,<sp/>SourceAddress,<sp/>*(CTYPE<sp/>*)SourceAddress);<sp/>\</highlight></codeline>
<codeline lineno="2706"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2707"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>TargetStride<sp/>=<sp/>TargetDimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2708"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SourceStride<sp/>=<sp/>SourceDimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2709"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(SourceDimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2710"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>SourceDimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2711"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>SourceDimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2712"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_mins_<sp/>##<sp/>CTYPE(TargetDegree<sp/>-<sp/>1,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetAddress,<sp/>SourceDegree<sp/>-<sp/>1,<sp/>SourceDimension<sp/>+<sp/>1,<sp/>SourceAddress<sp/>+<sp/>Indices[I]<sp/>*<sp/>SourceStride);<sp/>\</highlight></codeline>
<codeline lineno="2713"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetAddress<sp/>+=<sp/>TargetStride;<sp/>\</highlight></codeline>
<codeline lineno="2714"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2715"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2716"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>SourceDimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2717"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_mins_<sp/>##<sp/>CTYPE(TargetDegree<sp/>-<sp/>1,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetAddress,<sp/>SourceDegree<sp/>-<sp/>1,<sp/>SourceDimension<sp/>+<sp/>1,<sp/>SourceAddress);<sp/>\</highlight></codeline>
<codeline lineno="2718"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetAddress<sp/>+=<sp/>TargetStride;<sp/>\</highlight></codeline>
<codeline lineno="2719"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SourceAddress<sp/>+=<sp/>SourceStride;<sp/>\</highlight></codeline>
<codeline lineno="2720"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2721"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2722"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2723"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="2724"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2725"><highlight class="preprocessor">static<sp/>CTYPE<sp/>compute_maxs_<sp/>##<sp/>CTYPE(int<sp/>Degree,<sp/>ml_array_dimension_t<sp/>*Dimension,<sp/>void<sp/>*Address)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2726"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CTYPE<sp/>Max<sp/>=<sp/>*(CTYPE<sp/>*)Address;<sp/>\</highlight></codeline>
<codeline lineno="2727"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Degree<sp/>&gt;<sp/>1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2728"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2729"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2730"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2731"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2732"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>Max2<sp/>=<sp/>compute_maxs_<sp/>##<sp/>CTYPE(Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride);<sp/>\</highlight></codeline>
<codeline lineno="2733"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Max2<sp/>&gt;<sp/>Max)<sp/>Max<sp/>=<sp/>Max2;<sp/>\</highlight></codeline>
<codeline lineno="2734"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2735"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2736"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2737"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>Max2<sp/>=<sp/>compute_maxs_<sp/>##<sp/>CTYPE(Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address);<sp/>\</highlight></codeline>
<codeline lineno="2738"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Max2<sp/>&gt;<sp/>Max)<sp/>Max<sp/>=<sp/>Max2;<sp/>\</highlight></codeline>
<codeline lineno="2739"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2740"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2741"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2742"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2743"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2744"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2745"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2746"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2747"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>Max2<sp/>=<sp/>*(CTYPE<sp/>*)(Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride);<sp/>\</highlight></codeline>
<codeline lineno="2748"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Max2<sp/>&gt;<sp/>Max)<sp/>Max<sp/>=<sp/>Max2;<sp/>\</highlight></codeline>
<codeline lineno="2749"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2750"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2751"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2752"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>Max2<sp/>=<sp/>*(CTYPE<sp/>*)Address;<sp/>\</highlight></codeline>
<codeline lineno="2753"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Max2<sp/>&gt;<sp/>Max)<sp/>Max<sp/>=<sp/>Max2;<sp/>\</highlight></codeline>
<codeline lineno="2754"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2755"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2756"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2757"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2758"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>Max;<sp/>\</highlight></codeline>
<codeline lineno="2759"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="2760"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2761"><highlight class="preprocessor">static<sp/>void<sp/>fill_maxs_<sp/>##<sp/>CTYPE(int<sp/>TargetDegree,<sp/>ml_array_dimension_t<sp/>*TargetDimension,<sp/>void<sp/>*TargetAddress,<sp/>int<sp/>SourceDegree,<sp/>ml_array_dimension_t<sp/>*SourceDimension,<sp/>void<sp/>*SourceAddress)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2762"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(TargetDegree<sp/>==<sp/>0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2763"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(CTYPE<sp/>*)TargetAddress<sp/>=<sp/>compute_maxs_<sp/>##<sp/>CTYPE(SourceDegree,<sp/>SourceDimension,<sp/>SourceAddress);<sp/>\</highlight></codeline>
<codeline lineno="2764"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2765"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>TargetStride<sp/>=<sp/>TargetDimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2766"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SourceStride<sp/>=<sp/>SourceDimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2767"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(SourceDimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2768"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>SourceDimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2769"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>SourceDimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2770"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_maxs_<sp/>##<sp/>CTYPE(TargetDegree<sp/>-<sp/>1,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetAddress,<sp/>SourceDegree<sp/>-<sp/>1,<sp/>SourceDimension<sp/>+<sp/>1,<sp/>SourceAddress<sp/>+<sp/>Indices[I]<sp/>*<sp/>SourceStride);<sp/>\</highlight></codeline>
<codeline lineno="2771"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetAddress<sp/>+=<sp/>TargetStride;<sp/>\</highlight></codeline>
<codeline lineno="2772"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2773"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2774"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>SourceDimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2775"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_maxs_<sp/>##<sp/>CTYPE(TargetDegree<sp/>-<sp/>1,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetAddress,<sp/>SourceDegree<sp/>-<sp/>1,<sp/>SourceDimension<sp/>+<sp/>1,<sp/>SourceAddress);<sp/>\</highlight></codeline>
<codeline lineno="2776"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetAddress<sp/>+=<sp/>TargetStride;<sp/>\</highlight></codeline>
<codeline lineno="2777"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SourceAddress<sp/>+=<sp/>SourceStride;<sp/>\</highlight></codeline>
<codeline lineno="2778"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2779"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2780"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2781"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="2782"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2783"><highlight class="preprocessor">static<sp/>CTYPE<sp/>find_maxs_<sp/>##<sp/>CTYPE(uint32_t<sp/>*Target,<sp/>int<sp/>Degree,<sp/>ml_array_dimension_t<sp/>*Dimension,<sp/>void<sp/>*Address,<sp/>CTYPE<sp/>Max)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2784"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Degree<sp/>&gt;<sp/>1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2785"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2786"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2787"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2788"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2789"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>Max2<sp/>=<sp/>find_maxs_<sp/>##<sp/>CTYPE(Target<sp/>+<sp/>1,<sp/>Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride,<sp/>Max);<sp/>\</highlight></codeline>
<codeline lineno="2790"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Max2<sp/>&gt;<sp/>Max)<sp/>{<sp/>Max<sp/>=<sp/>Max2;<sp/>*Target<sp/>=<sp/>I<sp/>+<sp/>1;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2791"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2792"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2793"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2794"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>Max2<sp/>=<sp/>find_maxs_<sp/>##<sp/>CTYPE(Target<sp/>+<sp/>1,<sp/>Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address,<sp/>Max);<sp/>\</highlight></codeline>
<codeline lineno="2795"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Max2<sp/>&gt;<sp/>Max)<sp/>{<sp/>Max<sp/>=<sp/>Max2;<sp/>*Target<sp/>=<sp/>I<sp/>+<sp/>1;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2796"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2797"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2798"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2799"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2800"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2801"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2802"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2803"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2804"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>Max2<sp/>=<sp/>*(CTYPE<sp/>*)(Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride);<sp/>\</highlight></codeline>
<codeline lineno="2805"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Max2<sp/>&gt;<sp/>Max)<sp/>{<sp/>Max<sp/>=<sp/>Max2;<sp/>*Target<sp/>=<sp/>I<sp/>+<sp/>1;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2806"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2807"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2808"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2809"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>Max2<sp/>=<sp/>*(CTYPE<sp/>*)Address;<sp/>\</highlight></codeline>
<codeline lineno="2810"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Max2<sp/>&gt;<sp/>Max)<sp/>{<sp/>Max<sp/>=<sp/>Max2;<sp/>*Target<sp/>=<sp/>I<sp/>+<sp/>1;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2811"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2812"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2813"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2814"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2815"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>Max;<sp/>\</highlight></codeline>
<codeline lineno="2816"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="2817"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2818"><highlight class="preprocessor">static<sp/>void<sp/>index_maxs_<sp/>##<sp/>CTYPE(int<sp/>TargetDegree,<sp/>ml_array_dimension_t<sp/>*TargetDimension,<sp/>void<sp/>*TargetAddress,<sp/>int<sp/>SourceDegree,<sp/>ml_array_dimension_t<sp/>*SourceDimension,<sp/>void<sp/>*SourceAddress)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2819"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(TargetDegree<sp/>==<sp/>1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2820"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(uint32_t<sp/>*)TargetAddress<sp/>=<sp/>1;<sp/>\</highlight></codeline>
<codeline lineno="2821"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_maxs_<sp/>##<sp/>CTYPE((uint32_t<sp/>*)TargetAddress,<sp/>SourceDegree,<sp/>SourceDimension,<sp/>SourceAddress,<sp/>*(CTYPE<sp/>*)SourceAddress);<sp/>\</highlight></codeline>
<codeline lineno="2822"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2823"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>TargetStride<sp/>=<sp/>TargetDimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2824"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>SourceStride<sp/>=<sp/>SourceDimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2825"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(SourceDimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2826"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>SourceDimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2827"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>SourceDimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2828"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_maxs_<sp/>##<sp/>CTYPE(TargetDegree<sp/>-<sp/>1,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetAddress,<sp/>SourceDegree<sp/>-<sp/>1,<sp/>SourceDimension<sp/>+<sp/>1,<sp/>SourceAddress<sp/>+<sp/>Indices[I]<sp/>*<sp/>SourceStride);<sp/>\</highlight></codeline>
<codeline lineno="2829"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetAddress<sp/>+=<sp/>TargetStride;<sp/>\</highlight></codeline>
<codeline lineno="2830"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2831"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2832"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>SourceDimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2833"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_maxs_<sp/>##<sp/>CTYPE(TargetDegree<sp/>-<sp/>1,<sp/>TargetDimension<sp/>+<sp/>1,<sp/>TargetAddress,<sp/>SourceDegree<sp/>-<sp/>1,<sp/>SourceDimension<sp/>+<sp/>1,<sp/>SourceAddress);<sp/>\</highlight></codeline>
<codeline lineno="2834"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetAddress<sp/>+=<sp/>TargetStride;<sp/>\</highlight></codeline>
<codeline lineno="2835"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SourceAddress<sp/>+=<sp/>SourceStride;<sp/>\</highlight></codeline>
<codeline lineno="2836"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2837"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2838"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2839"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2840"><highlight class="normal"></highlight></codeline>
<codeline lineno="2841"><highlight class="normal">PARTIAL_FUNCTIONS(uint64_t);</highlight></codeline>
<codeline lineno="2842"><highlight class="normal">PARTIAL_FUNCTIONS(int64_t);</highlight></codeline>
<codeline lineno="2843"><highlight class="normal">PARTIAL_FUNCTIONS(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"></highlight></codeline>
<codeline lineno="2845"><highlight class="normal">COMPLETE_FUNCTIONS(uint64_t,<sp/>uint8_t);</highlight></codeline>
<codeline lineno="2846"><highlight class="normal">COMPLETE_FUNCTIONS(int64_t,<sp/>int8_t);</highlight></codeline>
<codeline lineno="2847"><highlight class="normal">COMPLETE_FUNCTIONS(uint64_t,<sp/>uint16_t);</highlight></codeline>
<codeline lineno="2848"><highlight class="normal">COMPLETE_FUNCTIONS(int64_t,<sp/>int16_t);</highlight></codeline>
<codeline lineno="2849"><highlight class="normal">COMPLETE_FUNCTIONS(uint64_t,<sp/>uint32_t);</highlight></codeline>
<codeline lineno="2850"><highlight class="normal">COMPLETE_FUNCTIONS(int64_t,<sp/>int32_t);</highlight></codeline>
<codeline lineno="2851"><highlight class="normal">COMPLETE_FUNCTIONS(uint64_t,<sp/>uint64_t);</highlight></codeline>
<codeline lineno="2852"><highlight class="normal">COMPLETE_FUNCTIONS(int64_t,<sp/>int64_t);</highlight></codeline>
<codeline lineno="2853"><highlight class="normal">COMPLETE_FUNCTIONS(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2854"><highlight class="normal">COMPLETE_FUNCTIONS(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"></highlight></codeline>
<codeline lineno="2856"><highlight class="normal">MINMAX_FUNCTIONS(uint8_t);</highlight></codeline>
<codeline lineno="2857"><highlight class="normal">MINMAX_FUNCTIONS(int8_t);</highlight></codeline>
<codeline lineno="2858"><highlight class="normal">MINMAX_FUNCTIONS(uint16_t);</highlight></codeline>
<codeline lineno="2859"><highlight class="normal">MINMAX_FUNCTIONS(int16_t);</highlight></codeline>
<codeline lineno="2860"><highlight class="normal">MINMAX_FUNCTIONS(uint32_t);</highlight></codeline>
<codeline lineno="2861"><highlight class="normal">MINMAX_FUNCTIONS(int32_t);</highlight></codeline>
<codeline lineno="2862"><highlight class="normal">MINMAX_FUNCTIONS(uint64_t);</highlight></codeline>
<codeline lineno="2863"><highlight class="normal">MINMAX_FUNCTIONS(int64_t);</highlight></codeline>
<codeline lineno="2864"><highlight class="normal">MINMAX_FUNCTIONS(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2865"><highlight class="normal">MINMAX_FUNCTIONS(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"></highlight></codeline>
<codeline lineno="2867"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2868"><highlight class="normal"></highlight></codeline>
<codeline lineno="2869"><highlight class="normal">PARTIAL_FUNCTIONS(complex_double);</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"></highlight></codeline>
<codeline lineno="2871"><highlight class="normal">COMPLETE_FUNCTIONS(complex_double,<sp/>complex_float);</highlight></codeline>
<codeline lineno="2872"><highlight class="normal">COMPLETE_FUNCTIONS(complex_double,<sp/>complex_double);</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"></highlight></codeline>
<codeline lineno="2874"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2875"><highlight class="normal"></highlight></codeline>
<codeline lineno="2876"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int64_t<sp/>isquare(int64_t<sp/>X)<sp/>{</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X<sp/>*<sp/>X;</highlight></codeline>
<codeline lineno="2878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"></highlight></codeline>
<codeline lineno="2880"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>square(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>X)<sp/>{</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X<sp/>*<sp/>X;</highlight></codeline>
<codeline lineno="2882"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"></highlight></codeline>
<codeline lineno="2884"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2885"><highlight class="normal"></highlight></codeline>
<codeline lineno="2886"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>csquare(complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>X)<sp/>{</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X<sp/>*<sp/>X;</highlight></codeline>
<codeline lineno="2888"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2890"><highlight class="normal"></highlight></codeline>
<codeline lineno="2891"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NORM_FUNCTION(CTYPE1,<sp/>CTYPE2,<sp/>NORM)<sp/>\</highlight></codeline>
<codeline lineno="2892"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2893"><highlight class="preprocessor">static<sp/>double<sp/>compute_norm_<sp/>##<sp/>CTYPE2(int<sp/>Degree,<sp/>ml_array_dimension_t<sp/>*Dimension,<sp/>void<sp/>*Address,<sp/>double<sp/>P)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2894"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>Sum<sp/>=<sp/>0;<sp/>\</highlight></codeline>
<codeline lineno="2895"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Degree<sp/>&gt;<sp/>1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2896"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2897"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2898"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2899"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2900"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sum<sp/>+=<sp/>compute_norm_<sp/>##<sp/>CTYPE2(Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride,<sp/>P);<sp/>\</highlight></codeline>
<codeline lineno="2901"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2902"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2903"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2904"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sum<sp/>+=<sp/>compute_norm_<sp/>##<sp/>CTYPE2(Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address,<sp/>P);<sp/>\</highlight></codeline>
<codeline lineno="2905"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2906"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2907"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2908"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2909"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2910"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2911"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2912"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2913"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sum<sp/>+=<sp/>pow(NORM(*(CTYPE2<sp/>*)(Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride)),<sp/>P);<sp/>\</highlight></codeline>
<codeline lineno="2914"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2915"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2916"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2917"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sum<sp/>+=<sp/>pow(NORM(*(CTYPE2<sp/>*)Address),<sp/>P);<sp/>\</highlight></codeline>
<codeline lineno="2918"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2919"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2920"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2921"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2922"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>Sum;<sp/>\</highlight></codeline>
<codeline lineno="2923"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="2924"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="2925"><highlight class="preprocessor">static<sp/>double<sp/>compute_norm0_<sp/>##<sp/>CTYPE2(int<sp/>Degree,<sp/>ml_array_dimension_t<sp/>*Dimension,<sp/>void<sp/>*Address,<sp/>double<sp/>P)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2926"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>Sum<sp/>=<sp/>1;<sp/>\</highlight></codeline>
<codeline lineno="2927"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Degree<sp/>&gt;<sp/>1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2928"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2929"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2930"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2931"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2932"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sum<sp/>+=<sp/>compute_norm0_<sp/>##<sp/>CTYPE2(Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride,<sp/>P);<sp/>\</highlight></codeline>
<codeline lineno="2933"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2934"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2935"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2936"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sum<sp/>+=<sp/>compute_norm0_<sp/>##<sp/>CTYPE2(Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address,<sp/>P);<sp/>\</highlight></codeline>
<codeline lineno="2937"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2938"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2939"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2940"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2941"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="2942"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2943"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="2944"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2945"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sum<sp/>*=<sp/>pow(NORM(*(CTYPE2<sp/>*)(Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride)),<sp/>P);<sp/>\</highlight></codeline>
<codeline lineno="2946"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2947"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2948"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2949"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sum<sp/>*=<sp/>pow(NORM(*(CTYPE2<sp/>*)Address),<sp/>P);<sp/>\</highlight></codeline>
<codeline lineno="2950"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;<sp/>\</highlight></codeline>
<codeline lineno="2951"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2952"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2953"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2954"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>Sum;<sp/>\</highlight></codeline>
<codeline lineno="2955"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2956"><highlight class="normal"></highlight></codeline>
<codeline lineno="2957"><highlight class="normal">NORM_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>uint8_t,<sp/>labs);</highlight></codeline>
<codeline lineno="2958"><highlight class="normal">NORM_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>int8_t,<sp/>labs);</highlight></codeline>
<codeline lineno="2959"><highlight class="normal">NORM_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>uint16_t,<sp/>labs);</highlight></codeline>
<codeline lineno="2960"><highlight class="normal">NORM_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>int16_t,<sp/>labs);</highlight></codeline>
<codeline lineno="2961"><highlight class="normal">NORM_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>uint32_t,<sp/>labs);</highlight></codeline>
<codeline lineno="2962"><highlight class="normal">NORM_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>int32_t,<sp/>labs);</highlight></codeline>
<codeline lineno="2963"><highlight class="normal">NORM_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>uint64_t,<sp/>labs);</highlight></codeline>
<codeline lineno="2964"><highlight class="normal">NORM_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>int64_t,<sp/>labs);</highlight></codeline>
<codeline lineno="2965"><highlight class="normal">NORM_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>fabs);</highlight></codeline>
<codeline lineno="2966"><highlight class="normal">NORM_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>fabs);</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"></highlight></codeline>
<codeline lineno="2968"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2969"><highlight class="normal"></highlight></codeline>
<codeline lineno="2970"><highlight class="normal">NORM_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>complex_float,<sp/>cabs);</highlight></codeline>
<codeline lineno="2971"><highlight class="normal">NORM_FUNCTION(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>complex_double,<sp/>cabs);</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"></highlight></codeline>
<codeline lineno="2973"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2974"><highlight class="normal"></highlight></codeline>
<codeline lineno="2975"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*array_flatten_to(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Target,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FlatDegree,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Dimension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source)<sp/>{</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree<sp/>==<sp/>FlatDegree)<sp/>{</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Total<sp/>=<sp/>Dimension-&gt;Size<sp/>*<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Target,<sp/>Source,<sp/>Total);</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Target<sp/>+<sp/>Total;</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Dimension-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Size)<sp/>{</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Dimension-&gt;Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Target,<sp/>Source,<sp/>1);</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Source<sp/>+=<sp/>Stride;</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Dimension-&gt;Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Target,<sp/>Source,<sp/>2);</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Source<sp/>+=<sp/>Stride;</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Dimension-&gt;Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Target,<sp/>Source,<sp/>4);</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Source<sp/>+=<sp/>Stride;</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Dimension-&gt;Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Target,<sp/>Source,<sp/>8);</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Source<sp/>+=<sp/>Stride;</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>16:</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Dimension-&gt;Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Target,<sp/>Source,<sp/>16);</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target<sp/>+=<sp/>16;</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Source<sp/>+=<sp/>Stride;</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Size)<sp/>{</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Dimension-&gt;Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Target,<sp/>Source<sp/>+<sp/>Stride<sp/>*<sp/>*Indices++,<sp/>1);</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Dimension-&gt;Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Target,<sp/>Source<sp/>+<sp/>Stride<sp/>*<sp/>*Indices++,<sp/>2);</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Dimension-&gt;Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Target,<sp/>Source<sp/>+<sp/>Stride<sp/>*<sp/>*Indices++,<sp/>4);</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Dimension-&gt;Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Target,<sp/>Source<sp/>+<sp/>Stride<sp/>*<sp/>*Indices++,<sp/>8);</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>16:</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Dimension-&gt;Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Target,<sp/>Source<sp/>+<sp/>Stride<sp/>*<sp/>*Indices++,<sp/>16);</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target<sp/>+=<sp/>16;</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Target;</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Dimension-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Dimension-&gt;Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target<sp/>=<sp/>array_flatten_to(Target,<sp/>Size,<sp/>Degree<sp/>-<sp/>1,<sp/>FlatDegree,<sp/>Dimension<sp/>+<sp/>1,<sp/>Source);</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Source<sp/>+=<sp/>Stride;</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Target;</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Dimension-&gt;Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target<sp/>=<sp/>array_flatten_to(Target,<sp/>Size,<sp/>Degree<sp/>-<sp/>1,<sp/>FlatDegree,<sp/>Dimension<sp/>+<sp/>1,<sp/>Source<sp/>+<sp/>Stride<sp/>*<sp/>*Indices++);</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Target;</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3072"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"></highlight></codeline>
<codeline lineno="3074"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*array_flatten(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source)<sp/>{</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>MLArraySizes[Source-&gt;Format];</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FlatDegree<sp/>=<sp/>Source-&gt;Degree;</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Source-&gt;Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Size<sp/>==<sp/>Source-&gt;Dimensions[I].Stride)<sp/>FlatDegree<sp/>=<sp/>I;</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Size<sp/>*=<sp/>Source-&gt;Dimensions[I].Size;</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/>FlatDegree<sp/>=<sp/>Source-&gt;Degree<sp/>-<sp/>FlatDegree;</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Data<sp/>=<sp/>array_alloc(Source-&gt;Format,<sp/>Size);</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/>array_flatten_to(Data,<sp/>MLArraySizes[Source-&gt;Format],<sp/>Source-&gt;Degree,<sp/>FlatDegree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Data;</highlight></codeline>
<codeline lineno="3085"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"></highlight></codeline>
<codeline lineno="3087"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>array_copy(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target,<sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source)<sp/>{</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>Source-&gt;Degree;</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>MLArraySizes[Target-&gt;Format];</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target-&gt;Dimensions[I].Stride<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Target-&gt;Dimensions[I].Size<sp/>=<sp/>Source-&gt;Dimensions[I].Size;</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Base.Length<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Target-&gt;Format<sp/>==<sp/>Source-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target-&gt;Base.Value<sp/>=<sp/>array_flatten(Source);</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target-&gt;Base.Value<sp/>=<sp/>array_alloc(Target-&gt;Format,<sp/>DataSize);</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_row_fn_t<sp/>Update<sp/>=<sp/>UpdateSetRowFns[Target-&gt;Format<sp/>*<sp/>MAX_FORMATS<sp/>+<sp/>Source-&gt;Format];</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>update_array(Update,<sp/>Target-&gt;Dimensions,<sp/>Target-&gt;Base.Value,<sp/>Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DataSize;</highlight></codeline>
<codeline lineno="3104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"></highlight></codeline>
<codeline lineno="3106"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;reshape&quot;</highlight><highlight class="normal">,<sp/>MLArrayT,<sp/>MLListT)<sp/>{</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3108"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3109"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>copy<sp/>of<sp/>:mini:`Array`<sp/>with<sp/>dimensions<sp/>specified<sp/>by<sp/>:mini:`Sizes`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>..<sp/>note::</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3112"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3113"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>This<sp/>method<sp/>always<sp/>makes<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>data<sp/>so<sp/>that<sp/>changes<sp/>to<sp/>the<sp/>returned<sp/>array<sp/>do<sp/>not<sp/>affect<sp/>the<sp/>original.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TargetDegree<sp/>=<sp/>ml_list_length(Args[1]);</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>TargetCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[1],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter-&gt;Value,<sp/>MLIntegerT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>ml_integer_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Size<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetCount<sp/>*=<sp/>Size;</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SourceDegree<sp/>=<sp/>Source-&gt;Degree;</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SourceCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>SourceDegree;<sp/>++I)<sp/>SourceCount<sp/>*=<sp/>Source-&gt;Dimensions[I].Size;</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TargetCount<sp/>!=<sp/>SourceCount)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Incompatible<sp/>shapes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"></highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(Source-&gt;Format,<sp/>TargetDegree);</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Base.Value<sp/>=<sp/>array_flatten(Source);</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>MLArraySizes[Target-&gt;Format];</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>TargetDegree;</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LIST_REVERSE(Args[1],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--I;</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target-&gt;Dimensions[I].Stride<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Target-&gt;Dimensions[I].Size<sp/>=<sp/>ml_integer_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Base.Length<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="3140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"></highlight></codeline>
<codeline lineno="3142"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;sums&quot;</highlight><highlight class="normal">,<sp/>MLArrayT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3144"><highlight class="normal"></highlight><highlight class="comment">//&lt;Index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3145"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>array<sp/>with<sp/>the<sp/>partial<sp/>sums<sp/>of<sp/>:mini:`Array`<sp/>in<sp/>the<sp/>:mini:`Index`-th<sp/>dimension.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;=<sp/>0)<sp/>Index<sp/>+=<sp/>Source-&gt;Degree<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;<sp/>1<sp/>||<sp/>Index<sp/>&gt;<sp/>Source-&gt;Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Dimension<sp/>index<sp/>invalid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/>Index<sp/>=<sp/>Source-&gt;Degree<sp/>+<sp/>1<sp/>-<sp/>Index;</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Source-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:<sp/>{</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_U64,<sp/>Source-&gt;Degree);</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_copy(Target,<sp/>Source);</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_sums_uint64_t(Index,<sp/>Target-&gt;Degree,<sp/>Target-&gt;Dimensions,<sp/>Target-&gt;Base.Value,<sp/>0);</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:<sp/>{</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_I64,<sp/>Source-&gt;Degree);</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_copy(Target,<sp/>Source);</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_sums_int64_t(Index,<sp/>Target-&gt;Degree,<sp/>Target-&gt;Dimensions,<sp/>Target-&gt;Base.Value,<sp/>0);</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:<sp/>{</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_F64,<sp/>Source-&gt;Degree);</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_copy(Target,<sp/>Source);</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_sums_double(Index,<sp/>Target-&gt;Degree,<sp/>Target-&gt;Dimensions,<sp/>Target-&gt;Base.Value,<sp/>0);</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:<sp/>{</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_C64,<sp/>Source-&gt;Degree);</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_copy(Target,<sp/>Source);</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_sums_complex_double(Index,<sp/>Target-&gt;Degree,<sp/>Target-&gt;Dimensions,<sp/>Target-&gt;Base.Value,<sp/>0);</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3187"><highlight class="normal"></highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>array<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"></highlight></codeline>
<codeline lineno="3193"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;prods&quot;</highlight><highlight class="normal">,<sp/>MLArrayT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3195"><highlight class="normal"></highlight><highlight class="comment">//&lt;Index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3196"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>array<sp/>with<sp/>the<sp/>partial<sp/>products<sp/>of<sp/>:mini:`Array`<sp/>in<sp/>the<sp/>:mini:`Index`-th<sp/>dimension.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;=<sp/>0)<sp/>Index<sp/>+=<sp/>Source-&gt;Degree<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;<sp/>1<sp/>||<sp/>Index<sp/>&gt;<sp/>Source-&gt;Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Dimension<sp/>index<sp/>invalid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/>Index<sp/>=<sp/>Source-&gt;Degree<sp/>+<sp/>1<sp/>-<sp/>Index;</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Source-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:<sp/>{</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_U64,<sp/>Source-&gt;Degree);</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_copy(Target,<sp/>Source);</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_prods_uint64_t(Index,<sp/>Target-&gt;Degree,<sp/>Target-&gt;Dimensions,<sp/>Target-&gt;Base.Value,<sp/>0);</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:<sp/>{</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_I64,<sp/>Source-&gt;Degree);</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_copy(Target,<sp/>Source);</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_prods_int64_t(Index,<sp/>Target-&gt;Degree,<sp/>Target-&gt;Dimensions,<sp/>Target-&gt;Base.Value,<sp/>0);</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:<sp/>{</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_F64,<sp/>Source-&gt;Degree);</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_copy(Target,<sp/>Source);</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_prods_double(Index,<sp/>Target-&gt;Degree,<sp/>Target-&gt;Dimensions,<sp/>Target-&gt;Base.Value,<sp/>0);</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:<sp/>{</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_C64,<sp/>Source-&gt;Degree);</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_copy(Target,<sp/>Source);</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_prods_complex_double(Index,<sp/>Target-&gt;Degree,<sp/>Target-&gt;Dimensions,<sp/>Target-&gt;Base.Value,<sp/>0);</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>array<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"></highlight></codeline>
<codeline lineno="3243"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;sum&quot;</highlight><highlight class="normal">,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3245"><highlight class="normal"></highlight><highlight class="comment">//&gt;number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>sum<sp/>of<sp/>the<sp/>values<sp/>in<sp/>:mini:`Array`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3247"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2,<sp/>3],<sp/>[4,<sp/>5,<sp/>6]])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3248"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:sum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Source-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_sums_uint8_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_sums_int8_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_sums_uint16_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_sums_int16_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_sums_uint32_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_sums_int32_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_sums_uint64_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_sums_int64_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(compute_sums_float(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(compute_sums_double(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(compute_sums_complex_float(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(compute_sums_complex_double(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>array<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"></highlight></codeline>
<codeline lineno="3282"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;sum&quot;</highlight><highlight class="normal">,<sp/>MLArrayT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3284"><highlight class="normal"></highlight><highlight class="comment">//&lt;Index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3285"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3286"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>array<sp/>with<sp/>the<sp/>sums<sp/>of<sp/>:mini:`Array`<sp/>in<sp/>the<sp/>last<sp/>:mini:`Count`<sp/>dimensions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3287"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2,<sp/>3],<sp/>[4,<sp/>5,<sp/>6]])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3288"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:sum(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Slice<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Slice<sp/>&lt;=<sp/>0<sp/>||<sp/>Slice<sp/>&gt;=<sp/>Source-&gt;Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>axes<sp/>count<sp/>for<sp/>sum&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_array_format_t<sp/>Format;</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*fill_sums)(int,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>int,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Source-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_U64;</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_sums<sp/>=<sp/>fill_sums_uint8_t;</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I64;</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_sums<sp/>=<sp/>fill_sums_int8_t;</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_U64;</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_sums<sp/>=<sp/>fill_sums_uint16_t;</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I64;</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_sums<sp/>=<sp/>fill_sums_int16_t;</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_U64;</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_sums<sp/>=<sp/>fill_sums_uint32_t;</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I64;</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_sums<sp/>=<sp/>fill_sums_int32_t;</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_U64;</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_sums<sp/>=<sp/>fill_sums_uint64_t;</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I64;</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_sums<sp/>=<sp/>fill_sums_int64_t;</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_F64;</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_sums<sp/>=<sp/>fill_sums_float;</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_F64;</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_sums<sp/>=<sp/>fill_sums_double;</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_C64;</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_sums<sp/>=<sp/>fill_sums_complex_float;</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_C64;</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_sums<sp/>=<sp/>fill_sums_complex_double;</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>array<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(Format,<sp/>Source-&gt;Degree<sp/>-<sp/>Slice);</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>MLArraySizes[Target-&gt;Format];</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Target-&gt;Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target-&gt;Dimensions[I].Stride<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Target-&gt;Dimensions[I].Size<sp/>=<sp/>Source-&gt;Dimensions[I].Size;</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Base.Value<sp/>=<sp/>array_alloc(Format,<sp/>DataSize);</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_sums(Target-&gt;Degree,<sp/>Target-&gt;Dimensions,<sp/>Target-&gt;Base.Value,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="3358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"></highlight></codeline>
<codeline lineno="3360"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;prod&quot;</highlight><highlight class="normal">,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3362"><highlight class="normal"></highlight><highlight class="comment">//&gt;number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3363"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>product<sp/>of<sp/>the<sp/>values<sp/>in<sp/>:mini:`Array`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3364"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2,<sp/>3],<sp/>[4,<sp/>5,<sp/>6]])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3365"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:prod</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Source-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_prods_uint8_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_prods_int8_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_prods_uint16_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_prods_int16_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_prods_uint32_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_prods_int32_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_prods_uint64_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_prods_int64_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(compute_prods_float(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(compute_prods_double(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(compute_prods_complex_float(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(compute_prods_complex_double(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>array<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"></highlight></codeline>
<codeline lineno="3399"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;prod&quot;</highlight><highlight class="normal">,<sp/>MLArrayT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3401"><highlight class="normal"></highlight><highlight class="comment">//&lt;Count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3402"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3403"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>array<sp/>with<sp/>the<sp/>products<sp/>of<sp/>:mini:`Array`<sp/>in<sp/>the<sp/>last<sp/>:mini:`Count`<sp/>dimensions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3404"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2,<sp/>3],<sp/>[4,<sp/>5,<sp/>6]])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3405"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:prod(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Slice<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Slice<sp/>&lt;=<sp/>0<sp/>||<sp/>Slice<sp/>&gt;=<sp/>Source-&gt;Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>axes<sp/>count<sp/>for<sp/>prod&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_array_format_t<sp/>Format;</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*fill_prods)(int,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>int,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Source-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_U64;</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_prods<sp/>=<sp/>fill_prods_uint8_t;</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I64;</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_prods<sp/>=<sp/>fill_prods_int8_t;</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_U64;</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_prods<sp/>=<sp/>fill_prods_uint16_t;</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I64;</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_prods<sp/>=<sp/>fill_prods_int16_t;</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_U64;</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_prods<sp/>=<sp/>fill_prods_uint32_t;</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I64;</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_prods<sp/>=<sp/>fill_prods_int32_t;</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_U64;</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_prods<sp/>=<sp/>fill_prods_uint64_t;</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I64;</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_prods<sp/>=<sp/>fill_prods_int64_t;</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_F64;</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_prods<sp/>=<sp/>fill_prods_float;</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_F64;</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_prods<sp/>=<sp/>fill_prods_double;</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_C64;</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_prods<sp/>=<sp/>fill_prods_complex_float;</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_C64;</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_prods<sp/>=<sp/>fill_prods_complex_double;</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>array<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(Format,<sp/>Source-&gt;Degree<sp/>-<sp/>Slice);</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>MLArraySizes[Target-&gt;Format];</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Target-&gt;Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target-&gt;Dimensions[I].Stride<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Target-&gt;Dimensions[I].Size<sp/>=<sp/>Source-&gt;Dimensions[I].Size;</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Base.Value<sp/>=<sp/>array_alloc(Format,<sp/>DataSize);</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_prods(Target-&gt;Degree,<sp/>Target-&gt;Dimensions,<sp/>Target-&gt;Base.Value,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="3475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"></highlight></codeline>
<codeline lineno="3477"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;minval&quot;</highlight><highlight class="normal">,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3479"><highlight class="normal"></highlight><highlight class="comment">//&gt;number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3480"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>minimum<sp/>of<sp/>the<sp/>values<sp/>in<sp/>:mini:`Array`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3481"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>A<sp/>:=<sp/>array([[[19,<sp/>16,<sp/>12],<sp/>[4,<sp/>7,<sp/>20]],<sp/>[[5,<sp/>17,<sp/>8],<sp/>[20,<sp/>9,<sp/>20]]])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3482"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:minval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Source-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_mins_uint8_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_mins_int8_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_mins_uint16_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_mins_int16_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_mins_uint32_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_mins_int32_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_mins_uint64_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_mins_int64_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(compute_mins_float(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(compute_mins_double(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>array<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"></highlight></codeline>
<codeline lineno="3510"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;minval&quot;</highlight><highlight class="normal">,<sp/>MLArrayT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3512"><highlight class="normal"></highlight><highlight class="comment">//&lt;Count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3513"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3514"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>array<sp/>with<sp/>the<sp/>minimums<sp/>:mini:`Array`<sp/>in<sp/>the<sp/>last<sp/>:mini:`Count`<sp/>dimensions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3515"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>A<sp/>:=<sp/>array([[[19,<sp/>16,<sp/>12],<sp/>[4,<sp/>7,<sp/>20]],<sp/>[[5,<sp/>17,<sp/>8],<sp/>[20,<sp/>9,<sp/>20]]])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3516"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:minval(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3517"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:minval(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Slice<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Slice<sp/>&lt;=<sp/>0<sp/>||<sp/>Slice<sp/>&gt;=<sp/>Source-&gt;Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>axes<sp/>count<sp/>for<sp/>min&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*fill_mins)(int,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>int,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Source-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_mins<sp/>=<sp/>fill_mins_uint8_t;</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_mins<sp/>=<sp/>fill_mins_int8_t;</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_mins<sp/>=<sp/>fill_mins_uint16_t;</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_mins<sp/>=<sp/>fill_mins_int16_t;</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_mins<sp/>=<sp/>fill_mins_uint32_t;</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_mins<sp/>=<sp/>fill_mins_int32_t;</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_mins<sp/>=<sp/>fill_mins_uint64_t;</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_mins<sp/>=<sp/>fill_mins_int64_t;</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_mins<sp/>=<sp/>fill_mins_float;</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_mins<sp/>=<sp/>fill_mins_double;</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>array<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(Source-&gt;Format,<sp/>Source-&gt;Degree<sp/>-<sp/>Slice);</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>MLArraySizes[Target-&gt;Format];</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Target-&gt;Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target-&gt;Dimensions[I].Stride<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Target-&gt;Dimensions[I].Size<sp/>=<sp/>Source-&gt;Dimensions[I].Size;</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Base.Value<sp/>=<sp/>array_alloc(Source-&gt;Format,<sp/>DataSize);</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_mins(Target-&gt;Degree,<sp/>Target-&gt;Dimensions,<sp/>Target-&gt;Base.Value,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="3566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"></highlight></codeline>
<codeline lineno="3568"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;minidx&quot;</highlight><highlight class="normal">,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3570"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3571"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>array<sp/>with<sp/>the<sp/>indices<sp/>of<sp/>minimums<sp/>of<sp/>:mini:`Array`<sp/>in<sp/>the<sp/>last<sp/>:mini:`Count`<sp/>dimensions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3572"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>A<sp/>:=<sp/>array([[[19,<sp/>16,<sp/>12],<sp/>[4,<sp/>7,<sp/>20]],<sp/>[[5,<sp/>17,<sp/>8],<sp/>[20,<sp/>9,<sp/>20]]])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3573"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:minidx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_U32,<sp/>1);</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>MLArraySizes[Target-&gt;Format];</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Dimensions[Target-&gt;Degree<sp/>-<sp/>1].Stride<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Dimensions[Target-&gt;Degree<sp/>-<sp/>1].Size<sp/>=<sp/>Source-&gt;Degree;</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*Indices<sp/>=<sp/>(uint32_t<sp/>*)(Target-&gt;Base.Value<sp/>=<sp/>snew(DataSize));</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Source-&gt;Degree;<sp/>++I)<sp/>Indices[I]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Source-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_mins_uint8_t(Indices,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>*(uint8_t<sp/>*)Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_mins_int8_t(Indices,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>*(int8_t<sp/>*)Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_mins_uint16_t(Indices,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>*(uint16_t<sp/>*)Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_mins_int16_t(Indices,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>*(int16_t<sp/>*)Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_mins_uint32_t(Indices,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>*(uint32_t<sp/>*)Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_mins_int32_t(Indices,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>*(int32_t<sp/>*)Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_mins_uint64_t(Indices,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>*(uint64_t<sp/>*)Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_mins_int64_t(Indices,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>*(int64_t<sp/>*)Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_mins_float(Indices,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>*(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_mins_double(Indices,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>*(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>array<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="3616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"></highlight></codeline>
<codeline lineno="3618"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;minidx&quot;</highlight><highlight class="normal">,<sp/>MLArrayT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3620"><highlight class="normal"></highlight><highlight class="comment">//&lt;Count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3621"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3622"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>array<sp/>with<sp/>the<sp/>indices<sp/>of<sp/>minimums<sp/>of<sp/>:mini:`Array`<sp/>in<sp/>the<sp/>last<sp/>:mini:`Count`<sp/>dimensions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3623"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>A<sp/>:=<sp/>array([[[19,<sp/>16,<sp/>12],<sp/>[4,<sp/>7,<sp/>20]],<sp/>[[5,<sp/>17,<sp/>8],<sp/>[20,<sp/>9,<sp/>20]]])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3624"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:minidx(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3625"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:minidx(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Slice<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Slice<sp/>&lt;=<sp/>0<sp/>||<sp/>Slice<sp/>&gt;=<sp/>Source-&gt;Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>axes<sp/>count<sp/>for<sp/>min&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*index_mins)(int,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>int,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Source-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_mins<sp/>=<sp/>index_mins_uint8_t;</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_mins<sp/>=<sp/>index_mins_int8_t;</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_mins<sp/>=<sp/>index_mins_uint16_t;</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_mins<sp/>=<sp/>index_mins_int16_t;</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_mins<sp/>=<sp/>index_mins_uint32_t;</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_mins<sp/>=<sp/>index_mins_int32_t;</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_mins<sp/>=<sp/>index_mins_uint64_t;</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_mins<sp/>=<sp/>index_mins_int64_t;</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_mins<sp/>=<sp/>index_mins_float;</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_mins<sp/>=<sp/>index_mins_double;</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>array<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_U32,<sp/>(Source-&gt;Degree<sp/>-<sp/>Slice)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>MLArraySizes[Target-&gt;Format];</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Dimensions[Target-&gt;Degree<sp/>-<sp/>1].Stride<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Dimensions[Target-&gt;Degree<sp/>-<sp/>1].Size<sp/>=<sp/>Slice;</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Slice;</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Target-&gt;Degree<sp/>-<sp/>1;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target-&gt;Dimensions[I].Stride<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Target-&gt;Dimensions[I].Size<sp/>=<sp/>Source-&gt;Dimensions[I].Size;</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Base.Value<sp/>=<sp/>snew(DataSize);</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/>index_mins(Target-&gt;Degree,<sp/>Target-&gt;Dimensions,<sp/>Target-&gt;Base.Value,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="3677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"></highlight></codeline>
<codeline lineno="3679"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;maxval&quot;</highlight><highlight class="normal">,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3681"><highlight class="normal"></highlight><highlight class="comment">//&gt;number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3682"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>maximum<sp/>of<sp/>the<sp/>values<sp/>in<sp/>:mini:`Array`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3683"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>A<sp/>:=<sp/>array([[[19,<sp/>16,<sp/>12],<sp/>[4,<sp/>7,<sp/>20]],<sp/>[[5,<sp/>17,<sp/>8],<sp/>[20,<sp/>9,<sp/>20]]])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3684"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:maxval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Source-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_maxs_uint8_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_maxs_int8_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_maxs_uint16_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_maxs_int16_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_maxs_uint32_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_maxs_int32_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_maxs_uint64_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(compute_maxs_int64_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(compute_maxs_float(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(compute_maxs_double(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value));</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>array<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"></highlight></codeline>
<codeline lineno="3712"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;maxval&quot;</highlight><highlight class="normal">,<sp/>MLArrayT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3714"><highlight class="normal"></highlight><highlight class="comment">//&lt;Count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3715"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3716"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>array<sp/>with<sp/>the<sp/>maximums<sp/>of<sp/>:mini:`Array`<sp/>in<sp/>the<sp/>last<sp/>:mini:`Count`<sp/>dimensions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3717"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>A<sp/>:=<sp/>array([[[19,<sp/>16,<sp/>12],<sp/>[4,<sp/>7,<sp/>20]],<sp/>[[5,<sp/>17,<sp/>8],<sp/>[20,<sp/>9,<sp/>20]]])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3718"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:maxval(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3719"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:maxval(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Slice<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Slice<sp/>&lt;=<sp/>0<sp/>||<sp/>Slice<sp/>&gt;=<sp/>Source-&gt;Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>axes<sp/>count<sp/>for<sp/>max&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*fill_maxs)(int,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>int,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Source-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_maxs<sp/>=<sp/>fill_maxs_uint8_t;</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_maxs<sp/>=<sp/>fill_maxs_int8_t;</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_maxs<sp/>=<sp/>fill_maxs_uint16_t;</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_maxs<sp/>=<sp/>fill_maxs_int16_t;</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_maxs<sp/>=<sp/>fill_maxs_uint32_t;</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_maxs<sp/>=<sp/>fill_maxs_int32_t;</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_maxs<sp/>=<sp/>fill_maxs_uint64_t;</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_maxs<sp/>=<sp/>fill_maxs_int64_t;</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_maxs<sp/>=<sp/>fill_maxs_float;</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_maxs<sp/>=<sp/>fill_maxs_double;</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>array<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(Source-&gt;Format,<sp/>Source-&gt;Degree<sp/>-<sp/>Slice);</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>MLArraySizes[Target-&gt;Format];</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Target-&gt;Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target-&gt;Dimensions[I].Stride<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Target-&gt;Dimensions[I].Size<sp/>=<sp/>Source-&gt;Dimensions[I].Size;</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Base.Value<sp/>=<sp/>array_alloc(Source-&gt;Format,<sp/>DataSize);</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_maxs(Target-&gt;Degree,<sp/>Target-&gt;Dimensions,<sp/>Target-&gt;Base.Value,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="3768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"></highlight></codeline>
<codeline lineno="3770"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;maxidx&quot;</highlight><highlight class="normal">,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3772"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3773"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>array<sp/>with<sp/>the<sp/>indices<sp/>of<sp/>maximums<sp/>of<sp/>:mini:`Array`<sp/>in<sp/>the<sp/>last<sp/>:mini:`Count`<sp/>dimensions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3774"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>A<sp/>:=<sp/>array([[[19,<sp/>16,<sp/>12],<sp/>[4,<sp/>7,<sp/>20]],<sp/>[[5,<sp/>17,<sp/>8],<sp/>[20,<sp/>9,<sp/>20]]])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3775"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:maxidx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_I32,<sp/>1);</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>MLArraySizes[Target-&gt;Format];</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Dimensions[Target-&gt;Degree<sp/>-<sp/>1].Stride<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Dimensions[Target-&gt;Degree<sp/>-<sp/>1].Size<sp/>=<sp/>Source-&gt;Degree;</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*Indices<sp/>=<sp/>(uint32_t<sp/>*)(Target-&gt;Base.Value<sp/>=<sp/>snew(DataSize));</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Source-&gt;Degree;<sp/>++I)<sp/>Indices[I]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Source-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_maxs_uint8_t(Indices,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>*(uint8_t<sp/>*)Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_maxs_int8_t(Indices,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>*(int8_t<sp/>*)Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_maxs_uint16_t(Indices,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>*(uint16_t<sp/>*)Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_maxs_int16_t(Indices,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>*(int16_t<sp/>*)Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_maxs_uint32_t(Indices,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>*(uint32_t<sp/>*)Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_maxs_int32_t(Indices,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>*(int32_t<sp/>*)Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_maxs_uint64_t(Indices,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>*(uint64_t<sp/>*)Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_maxs_int64_t(Indices,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>*(int64_t<sp/>*)Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_maxs_float(Indices,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>*(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:</highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find_maxs_double(Indices,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>*(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>array<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="3818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"></highlight></codeline>
<codeline lineno="3820"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;maxidx&quot;</highlight><highlight class="normal">,<sp/>MLArrayT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3822"><highlight class="normal"></highlight><highlight class="comment">//&lt;Count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3823"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3824"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>array<sp/>with<sp/>the<sp/>indices<sp/>of<sp/>maximums<sp/>of<sp/>:mini:`Array`<sp/>in<sp/>the<sp/>last<sp/>:mini:`Count`<sp/>dimensions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3825"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>A<sp/>:=<sp/>array([[[19,<sp/>16,<sp/>12],<sp/>[4,<sp/>7,<sp/>20]],<sp/>[[5,<sp/>17,<sp/>8],<sp/>[20,<sp/>9,<sp/>20]]])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3826"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:maxidx(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3827"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:maxidx(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Slice<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Slice<sp/>&lt;=<sp/>0<sp/>||<sp/>Slice<sp/>&gt;=<sp/>Source-&gt;Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>axes<sp/>count<sp/>for<sp/>max&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*index_maxs)(int,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>int,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Source-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_maxs<sp/>=<sp/>index_maxs_uint8_t;</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_maxs<sp/>=<sp/>index_maxs_int8_t;</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_maxs<sp/>=<sp/>index_maxs_uint16_t;</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_maxs<sp/>=<sp/>index_maxs_int16_t;</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_maxs<sp/>=<sp/>index_maxs_uint32_t;</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_maxs<sp/>=<sp/>index_maxs_int32_t;</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_maxs<sp/>=<sp/>index_maxs_uint64_t;</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_maxs<sp/>=<sp/>index_maxs_int64_t;</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_maxs<sp/>=<sp/>index_maxs_float;</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_maxs<sp/>=<sp/>index_maxs_double;</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>array<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_I32,<sp/>(Source-&gt;Degree<sp/>-<sp/>Slice)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>MLArraySizes[Target-&gt;Format];</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Dimensions[Target-&gt;Degree<sp/>-<sp/>1].Stride<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Dimensions[Target-&gt;Degree<sp/>-<sp/>1].Size<sp/>=<sp/>Slice;</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Slice;</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Target-&gt;Degree<sp/>-<sp/>1;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target-&gt;Dimensions[I].Stride<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Target-&gt;Dimensions[I].Size<sp/>=<sp/>Source-&gt;Dimensions[I].Size;</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Base.Value<sp/>=<sp/>snew(DataSize);</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/>index_maxs(Target-&gt;Degree,<sp/>Target-&gt;Dimensions,<sp/>Target-&gt;Base.Value,<sp/>Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="3879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"></highlight></codeline>
<codeline lineno="3881"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;||&quot;</highlight><highlight class="normal">,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3883"><highlight class="normal"></highlight><highlight class="comment">//&gt;number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3884"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>norm<sp/>of<sp/>the<sp/>values<sp/>in<sp/>:mini:`Array`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>P<sp/>=<sp/>2,<sp/>Norm;</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Source-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_uint8_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_int8_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_uint16_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_int16_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_uint32_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_int32_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_uint64_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_int64_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_float(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_double(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_complex_float(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_complex_double(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>array<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(pow(Norm,<sp/>1<sp/>/<sp/>P));</highlight></codeline>
<codeline lineno="3930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"></highlight></codeline>
<codeline lineno="3932"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;||&quot;</highlight><highlight class="normal">,<sp/>MLArrayT,<sp/>MLRealT)<sp/>{</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3934"><highlight class="normal"></highlight><highlight class="comment">//&gt;number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3935"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>norm<sp/>of<sp/>the<sp/>values<sp/>in<sp/>:mini:`Array`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>P<sp/>=<sp/>ml_real_value(Args[1]),<sp/>Norm;</highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(P<sp/>&lt;<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>p-value<sp/>for<sp/>norm&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Source-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_uint8_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_int8_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_uint16_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_int16_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_uint32_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_int32_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_uint64_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_int64_t(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_float(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_double(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_complex_float(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Norm<sp/>=<sp/>compute_norm_complex_double(Source-&gt;Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value,<sp/>P);</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>array<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(pow(Norm,<sp/>1<sp/>/<sp/>P));</highlight></codeline>
<codeline lineno="3982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"></highlight></codeline>
<codeline lineno="3984"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3986"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3987"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>with<sp/>the<sp/>negated<sp/>values<sp/>from<sp/>:mini:`Array`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Format<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>types<sp/>for<sp/>array<sp/>operation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>A-&gt;Degree;</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(A-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:<sp/>{</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_I8,<sp/>Degree);</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int8_t<sp/>*Values<sp/>=<sp/>(int8_t<sp/>*)C-&gt;Base.Value;</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int8_t);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>-*Values;</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:<sp/>{</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_I16,<sp/>Degree);</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/>*Values<sp/>=<sp/>(int16_t<sp/>*)C-&gt;Base.Value;</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int16_t);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>-*Values;</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:<sp/>{</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_I32,<sp/>Degree);</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>*Values<sp/>=<sp/>(int32_t<sp/>*)C-&gt;Base.Value;</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32_t);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>-*Values;</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:<sp/>{</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_I64,<sp/>Degree);</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>*Values<sp/>=<sp/>(int64_t<sp/>*)C-&gt;Base.Value;</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int64_t);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>-*Values;</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:<sp/>{</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_F32,<sp/>Degree);</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*Values<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)C-&gt;Base.Value;</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>-*Values;</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:<sp/>{</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_F64,<sp/>Degree);</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Values<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)C-&gt;Base.Value;</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>-*Values;</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:<sp/>{</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_C32,<sp/>Degree);</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex_float<sp/>*Values<sp/>=<sp/>(complex_float<sp/>*)C-&gt;Base.Value;</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(complex_float);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>-*Values;</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:<sp/>{</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_C64,<sp/>Degree);</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex_double<sp/>*Values<sp/>=<sp/>(complex_double<sp/>*)C-&gt;Base.Value;</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(complex_double);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>-*Values;</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>types<sp/>for<sp/>array<sp/>operation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"></highlight></codeline>
<codeline lineno="4060"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*array_math_integer_fn(int64_t<sp/>(*fn)(int64_t),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A;</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Format<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>types<sp/>for<sp/>array<sp/>operation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>A-&gt;Degree;</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_I64,<sp/>Degree);</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>*Values<sp/>=<sp/>(int64_t<sp/>*)C-&gt;Base.Value;</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int64_t);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>fn(*Values);</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="4070"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"></highlight></codeline>
<codeline lineno="4072"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*array_math_real_fn(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>(*fn)(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A;</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Format<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>types<sp/>for<sp/>array<sp/>operation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>A-&gt;Degree;</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_F64,<sp/>Degree);</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Values<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)C-&gt;Base.Value;</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>fn(*Values);</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="4082"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"></highlight></codeline>
<codeline lineno="4084"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4085"><highlight class="normal"></highlight></codeline>
<codeline lineno="4086"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*array_math_complex_fn(complex_double<sp/>(*fn)(complex_double),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A;</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Format<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>types<sp/>for<sp/>array<sp/>operation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>A-&gt;Degree;</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_C64,<sp/>Degree);</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/>complex_double<sp/>*Values<sp/>=<sp/>(complex_double<sp/>*)C-&gt;Base.Value;</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(complex_double);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>fn(*Values);</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="4096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"></highlight></codeline>
<codeline lineno="4098"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*array_math_complex_real_fn(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>(*fn)(complex_double),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A;</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Format<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>types<sp/>for<sp/>array<sp/>operation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>A-&gt;Degree;</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_C64,<sp/>Degree);</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/>complex_double<sp/>*Values<sp/>=<sp/>(complex_double<sp/>*)C-&gt;Base.Value;</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(complex_double);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>fn(*Values);</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*D<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_F64,<sp/>Degree);</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/><sp/><sp/>array_copy(D,<sp/>C);</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)D;</highlight></codeline>
<codeline lineno="4110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4112"><highlight class="normal"></highlight></codeline>
<codeline lineno="4113"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIN(X,<sp/>Y)<sp/>((X<sp/>&lt;<sp/>Y)<sp/>?<sp/>X<sp/>:<sp/>Y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4114"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX(X,<sp/>Y)<sp/>((X<sp/>&gt;<sp/>Y)<sp/>?<sp/>X<sp/>:<sp/>Y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4115"><highlight class="normal"></highlight></codeline>
<codeline lineno="4116"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*array_infix_fn(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/><sp/><sp/>update_row_fn_t<sp/>*Updates<sp/>=<sp/>(update_row_fn_t<sp/>*)Data;</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A;</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(B-&gt;Degree<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_array_format_t<sp/>Format<sp/>=<sp/>MAX(A-&gt;Format,<sp/>B-&gt;Format);</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Updates<sp/>==<sp/>UpdateDivRowFns)<sp/>Format<sp/>=<sp/>MAX(Format,<sp/>ML_ARRAY_FORMAT_F64);</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Degree<sp/>&lt;<sp/>B-&gt;Degree)<sp/>{</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*T<sp/>=<sp/>A;</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>=<sp/>B;</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Updates<sp/>==<sp/>UpdateSubRowFns)<sp/>{</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Updates<sp/>=<sp/>UpdateRSubRowFns;</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Updates<sp/>==<sp/>UpdateDivRowFns)<sp/>{</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Updates<sp/>=<sp/>UpdateRDivRowFns;</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>A-&gt;Degree;</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D<sp/>=<sp/>A-&gt;Degree<sp/>-<sp/>B-&gt;Degree,<sp/>I<sp/>=<sp/>B-&gt;Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Dimensions[D<sp/>+<sp/>I].Size<sp/>!=<sp/>B-&gt;Dimensions[I].Size)<sp/>{</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ShapeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Incompatible<sp/>arrays&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*C<sp/>=<sp/>ml_array_alloc(Format,<sp/>Degree);</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/><sp/><sp/>array_copy(C,<sp/>A);</highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/><sp/><sp/>update_row_fn_t<sp/>Update<sp/>=<sp/>Updates[C-&gt;Format<sp/>*<sp/>MAX_FORMATS<sp/>+<sp/>B-&gt;Format];</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Update)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>array<sp/>format<sp/>pair<sp/>(%s,<sp/>%s)&quot;</highlight><highlight class="normal">,<sp/>C-&gt;Base.Type-&gt;Name,<sp/>B-&gt;Base.Type-&gt;Name);</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/><sp/><sp/>update_prefix(Update,<sp/>C-&gt;Degree<sp/>-<sp/>B-&gt;Degree,<sp/>C-&gt;Dimensions,<sp/>C-&gt;Base.Value,<sp/>B-&gt;Degree,<sp/>B-&gt;Dimensions,<sp/>B-&gt;Base.Value);</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="4146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"></highlight></codeline>
<codeline lineno="4148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INFIX_METHOD(OP)<sp/>\</highlight></codeline>
<codeline lineno="4149"><highlight class="preprocessor"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4150"><highlight class="comment">ML_METHOD(#OP,<sp/>MLArrayT,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="4151"><highlight class="comment">//&lt;A</highlight></codeline>
<codeline lineno="4152"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="4153"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="4154"><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>OP<sp/>B`<sp/>(element-wise).<sp/>The<sp/>shapes<sp/>of<sp/>:mini:`A`<sp/>and<sp/>:mini:`B`<sp/>must<sp/>be<sp/>compatible,<sp/>i.e.<sp/>either</highlight></codeline>
<codeline lineno="4155"><highlight class="comment">//</highlight></codeline>
<codeline lineno="4156"><highlight class="comment">//<sp/>*<sp/>:mini:`A:shape<sp/>=<sp/>B:shape`<sp/>or</highlight></codeline>
<codeline lineno="4157"><highlight class="comment">//<sp/>*<sp/>:mini:`A:shape`<sp/>is<sp/>a<sp/>prefix<sp/>of<sp/>:mini:`B:shape`<sp/>or</highlight></codeline>
<codeline lineno="4158"><highlight class="comment">//<sp/>*<sp/>:mini:`B:shape`<sp/>is<sp/>a<sp/>prefix<sp/>of<sp/>:mini:`A:shape`.</highlight></codeline>
<codeline lineno="4159"><highlight class="comment">//</highlight></codeline>
<codeline lineno="4160"><highlight class="comment">//<sp/>When<sp/>the<sp/>shapes<sp/>are<sp/>not<sp/>the<sp/>same,<sp/>remaining<sp/>dimensions<sp/>are<sp/>repeated<sp/>(broadcast)<sp/>to<sp/>the<sp/>required<sp/>size.</highlight></codeline>
<codeline lineno="4161"><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2,<sp/>3],<sp/>[4,<sp/>5,<sp/>6]])</highlight></codeline>
<codeline lineno="4162"><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>array([[7,<sp/>8,<sp/>9],<sp/>[10,<sp/>11,<sp/>12]])</highlight></codeline>
<codeline lineno="4163"><highlight class="comment">//$=<sp/>let<sp/>C<sp/>:=<sp/>array([5,<sp/>10,<sp/>15])</highlight></codeline>
<codeline lineno="4164"><highlight class="comment">//$=<sp/>A<sp/>OP<sp/>B</highlight></codeline>
<codeline lineno="4165"><highlight class="comment">//$=<sp/>B<sp/>OP<sp/>A</highlight></codeline>
<codeline lineno="4166"><highlight class="comment">//$=<sp/>A<sp/>OP<sp/>C</highlight></codeline>
<codeline lineno="4167"><highlight class="comment">//$=<sp/>C<sp/>OP<sp/>A</highlight></codeline>
<codeline lineno="4168"><highlight class="comment">//$=<sp/>B<sp/>OP<sp/>C</highlight></codeline>
<codeline lineno="4169"><highlight class="comment">//$=<sp/>C<sp/>OP<sp/>B</highlight></codeline>
<codeline lineno="4170"><highlight class="comment">}</highlight></codeline>
<codeline lineno="4171"><highlight class="comment">*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4172"><highlight class="normal"></highlight></codeline>
<codeline lineno="4173"><highlight class="normal">INFIX_METHOD(+)</highlight></codeline>
<codeline lineno="4174"><highlight class="normal">INFIX_METHOD(-)</highlight></codeline>
<codeline lineno="4175"><highlight class="normal">INFIX_METHOD(*)</highlight></codeline>
<codeline lineno="4176"><highlight class="normal">INFIX_METHOD(/)</highlight></codeline>
<codeline lineno="4177"><highlight class="normal">INFIX_METHOD(/\\)</highlight></codeline>
<codeline lineno="4178"><highlight class="normal">INFIX_METHOD(\\/)</highlight></codeline>
<codeline lineno="4179"><highlight class="normal">INFIX_METHOD(&gt;&lt;)</highlight></codeline>
<codeline lineno="4180"><highlight class="normal">INFIX_METHOD(min)</highlight></codeline>
<codeline lineno="4181"><highlight class="normal">INFIX_METHOD(max)</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"></highlight></codeline>
<codeline lineno="4183"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4184"><highlight class="normal"></highlight></codeline>
<codeline lineno="4185"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>op_complex_array_left(NAME)<sp/>\</highlight></codeline>
<codeline lineno="4186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_C32:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex_float<sp/>*Values<sp/>=<sp/>(complex_float<sp/>*)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(complex_float);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>*Values<sp/>NAME<sp/>B;<sp/>\</highlight></codeline>
<codeline lineno="4189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="4190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4191"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_C64:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4192"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex_double<sp/>*Values<sp/>=<sp/>(complex_double<sp/>*)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4193"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(complex_double);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>*Values<sp/>NAME<sp/>B;<sp/>\</highlight></codeline>
<codeline lineno="4194"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="4195"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4196"><highlight class="normal"></highlight></codeline>
<codeline lineno="4197"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>op_complex_array_right(NAME)<sp/>\</highlight></codeline>
<codeline lineno="4198"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_C32:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex_float<sp/>*Values<sp/>=<sp/>(complex_float<sp/>*)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(complex_float);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>B<sp/>NAME<sp/>*Values;<sp/>\</highlight></codeline>
<codeline lineno="4201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="4202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4203"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_C64:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex_double<sp/>*Values<sp/>=<sp/>(complex_double<sp/>*)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(complex_double);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>B<sp/>NAME<sp/>*Values;<sp/>\</highlight></codeline>
<codeline lineno="4206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="4207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4208"><highlight class="normal"></highlight></codeline>
<codeline lineno="4209"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4210"><highlight class="normal"></highlight></codeline>
<codeline lineno="4211"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>op_complex_array_left(NAME)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4212"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>op_complex_array_right(NAME)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4213"><highlight class="normal"></highlight></codeline>
<codeline lineno="4214"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4215"><highlight class="normal"></highlight></codeline>
<codeline lineno="4216"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ARITH_METHOD_BASE(NAME,<sp/>MIN_FORMAT,<sp/>METHOD)<sp/>\</highlight></codeline>
<codeline lineno="4217"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="4218"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLArrayT,<sp/>MLAnyT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4219"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="4220"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="4221"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="4222"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>:mini:`C`<sp/>where<sp/>each<sp/>:mini:`C/v<sp/>:=<sp/>A/v<sp/>NAME<sp/>B`.</highlight></codeline>
<codeline lineno="4223"><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2],<sp/>[3,<sp/>4]])</highlight></codeline>
<codeline lineno="4224"><highlight class="comment">//$=<sp/>A<sp/>NAME<sp/>2</highlight></codeline>
<codeline lineno="4225"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="4226"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*A<sp/>=<sp/>(ml_array_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="4227"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/>return<sp/>(ml_value_t<sp/>*)A;<sp/>\</highlight></codeline>
<codeline lineno="4228"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_value_t<sp/>*B<sp/>=<sp/>Args[1];<sp/>\</highlight></codeline>
<codeline lineno="4229"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Degree<sp/>=<sp/>A-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="4230"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_ANY,<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="4231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);<sp/>\</highlight></codeline>
<codeline lineno="4232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_value_t<sp/>**Values<sp/>=<sp/>(ml_value_t<sp/>**)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4233"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(ml_value_t<sp/>*);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4234"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Values<sp/>=<sp/>ml_simple_inline(METHOD,<sp/>2,<sp/>*Values,<sp/>B);<sp/>\</highlight></codeline>
<codeline lineno="4235"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4236"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)C;<sp/>\</highlight></codeline>
<codeline lineno="4237"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="4238"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="4239"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLAnyT,<sp/>MLArrayT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4240"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="4241"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="4242"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="4243"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>:mini:`C`<sp/>where<sp/>each<sp/>:mini:`C/v<sp/>:=<sp/>A<sp/>NAME<sp/>B/v`.</highlight></codeline>
<codeline lineno="4244"><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>array([[1,<sp/>2],<sp/>[3,<sp/>4]])</highlight></codeline>
<codeline lineno="4245"><highlight class="comment">//$=<sp/>2<sp/>NAME<sp/>B</highlight></codeline>
<codeline lineno="4246"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="4247"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*A<sp/>=<sp/>(ml_array_t<sp/>*)Args[1];<sp/>\</highlight></codeline>
<codeline lineno="4248"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/>return<sp/>(ml_value_t<sp/>*)A;<sp/>\</highlight></codeline>
<codeline lineno="4249"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_value_t<sp/>*B<sp/>=<sp/>Args[0];<sp/>\</highlight></codeline>
<codeline lineno="4250"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Degree<sp/>=<sp/>A-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="4251"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_ANY,<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="4252"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);<sp/>\</highlight></codeline>
<codeline lineno="4253"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_value_t<sp/>**Values<sp/>=<sp/>(ml_value_t<sp/>**)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4254"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(ml_value_t<sp/>*);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4255"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Values<sp/>=<sp/>ml_simple_inline(METHOD,<sp/>2,<sp/>B,<sp/>*Values);<sp/>\</highlight></codeline>
<codeline lineno="4256"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4257"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)C;<sp/>\</highlight></codeline>
<codeline lineno="4258"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="4259"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="4260"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLArrayIntegerT,<sp/>MLIntegerT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4261"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="4262"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="4263"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="4264"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>:mini:`C`<sp/>where<sp/>each<sp/>:mini:`C/v<sp/>:=<sp/>A/v<sp/>NAME<sp/>B`.</highlight></codeline>
<codeline lineno="4265"><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2],<sp/>[3,<sp/>4]])</highlight></codeline>
<codeline lineno="4266"><highlight class="comment">//$=<sp/>A<sp/>NAME<sp/>2</highlight></codeline>
<codeline lineno="4267"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="4268"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*A<sp/>=<sp/>(ml_array_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="4269"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/>return<sp/>(ml_value_t<sp/>*)A;<sp/>\</highlight></codeline>
<codeline lineno="4270"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>B<sp/>=<sp/>ml_integer_value_fast(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="4271"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Degree<sp/>=<sp/>A-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="4272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*C<sp/>=<sp/>ml_array_alloc(MAX(A-&gt;Format,<sp/>MIN_FORMAT),<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="4273"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);<sp/>\</highlight></codeline>
<codeline lineno="4274"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>switch<sp/>(C-&gt;Format)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4275"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_U64:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4276"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>*Values<sp/>=<sp/>(uint64_t<sp/>*)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4277"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(uint64_t);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>*Values<sp/>NAME<sp/>B;<sp/>\</highlight></codeline>
<codeline lineno="4278"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="4279"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4280"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_I64:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4281"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>*Values<sp/>=<sp/>(int64_t<sp/>*)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4282"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(int64_t);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>*Values<sp/>NAME<sp/>B;<sp/>\</highlight></codeline>
<codeline lineno="4283"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="4284"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4285"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_F32:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4286"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>*Values<sp/>=<sp/>(float<sp/>*)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4287"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(float);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>*Values<sp/>NAME<sp/>B;<sp/>\</highlight></codeline>
<codeline lineno="4288"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="4289"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4290"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_F64:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4291"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>*Values<sp/>=<sp/>(double<sp/>*)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4292"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(double);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>*Values<sp/>NAME<sp/>B;<sp/>\</highlight></codeline>
<codeline lineno="4293"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="4294"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4295"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>op_complex_array_left(NAME)<sp/>\</highlight></codeline>
<codeline lineno="4296"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>default:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4297"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_error(&quot;TypeError&quot;,<sp/>&quot;Invalid<sp/>types<sp/>for<sp/>array<sp/>operation&quot;);<sp/>\</highlight></codeline>
<codeline lineno="4298"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4299"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4300"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)C;<sp/>\</highlight></codeline>
<codeline lineno="4301"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="4302"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="4303"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLIntegerT,<sp/>MLArrayIntegerT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4304"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="4305"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="4306"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="4307"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>:mini:`C`<sp/>where<sp/>each<sp/>:mini:`C/v<sp/>:=<sp/>A<sp/>NAME<sp/>B/v`.</highlight></codeline>
<codeline lineno="4308"><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2],<sp/>[3,<sp/>4]])</highlight></codeline>
<codeline lineno="4309"><highlight class="comment">//$=<sp/>2<sp/>NAME<sp/>A</highlight></codeline>
<codeline lineno="4310"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="4311"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*A<sp/>=<sp/>(ml_array_t<sp/>*)Args[1];<sp/>\</highlight></codeline>
<codeline lineno="4312"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/>return<sp/>(ml_value_t<sp/>*)A;<sp/>\</highlight></codeline>
<codeline lineno="4313"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>B<sp/>=<sp/>ml_integer_value_fast(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="4314"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Degree<sp/>=<sp/>A-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="4315"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*C<sp/>=<sp/>ml_array_alloc(MAX(A-&gt;Format,<sp/>MIN_FORMAT),<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="4316"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);<sp/>\</highlight></codeline>
<codeline lineno="4317"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>switch<sp/>(C-&gt;Format)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4318"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_U64:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4319"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>*Values<sp/>=<sp/>(uint64_t<sp/>*)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4320"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(uint64_t);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>B<sp/>NAME<sp/>*Values;<sp/>\</highlight></codeline>
<codeline lineno="4321"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="4322"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4323"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_I64:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4324"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>*Values<sp/>=<sp/>(int64_t<sp/>*)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4325"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(int64_t);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>B<sp/>NAME<sp/>*Values;<sp/>\</highlight></codeline>
<codeline lineno="4326"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="4327"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4328"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_F32:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4329"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>*Values<sp/>=<sp/>(float<sp/>*)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4330"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(float);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>B<sp/>NAME<sp/>*Values;<sp/>\</highlight></codeline>
<codeline lineno="4331"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="4332"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4333"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_F64:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4334"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>*Values<sp/>=<sp/>(double<sp/>*)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4335"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(double);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>B<sp/>NAME<sp/>*Values;<sp/>\</highlight></codeline>
<codeline lineno="4336"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="4337"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4338"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>op_complex_array_right(NAME)<sp/>\</highlight></codeline>
<codeline lineno="4339"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>default:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4340"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_error(&quot;TypeError&quot;,<sp/>&quot;Invalid<sp/>types<sp/>for<sp/>array<sp/>operation&quot;);<sp/>\</highlight></codeline>
<codeline lineno="4341"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4342"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4343"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)C;<sp/>\</highlight></codeline>
<codeline lineno="4344"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="4345"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="4346"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLArrayRealT,<sp/>MLRealT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4347"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="4348"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="4349"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="4350"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>:mini:`C`<sp/>where<sp/>each<sp/>:mini:`C/v<sp/>:=<sp/>A/v<sp/>NAME<sp/>B`.</highlight></codeline>
<codeline lineno="4351"><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2],<sp/>[3,<sp/>4]])</highlight></codeline>
<codeline lineno="4352"><highlight class="comment">//$=<sp/>A<sp/>NAME<sp/>2.5</highlight></codeline>
<codeline lineno="4353"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="4354"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*A<sp/>=<sp/>(ml_array_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="4355"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/>return<sp/>(ml_value_t<sp/>*)A;<sp/>\</highlight></codeline>
<codeline lineno="4356"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>B<sp/>=<sp/>ml_real_value(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="4357"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Degree<sp/>=<sp/>A-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="4358"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*C<sp/>=<sp/>ml_array_alloc(MAX(A-&gt;Format,<sp/>ML_ARRAY_FORMAT_F64),<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="4359"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);<sp/>\</highlight></codeline>
<codeline lineno="4360"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>switch<sp/>(C-&gt;Format)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4361"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_F64:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4362"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>*Values<sp/>=<sp/>(double<sp/>*)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4363"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(double);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>*Values<sp/>NAME<sp/>B;<sp/>\</highlight></codeline>
<codeline lineno="4364"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="4365"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4366"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>op_complex_array_left(NAME)<sp/>\</highlight></codeline>
<codeline lineno="4367"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>default:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4368"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_error(&quot;TypeError&quot;,<sp/>&quot;Invalid<sp/>types<sp/>for<sp/>array<sp/>operation&quot;);<sp/>\</highlight></codeline>
<codeline lineno="4369"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4370"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4371"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)C;<sp/>\</highlight></codeline>
<codeline lineno="4372"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="4373"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="4374"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLRealT,<sp/>MLArrayRealT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4375"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="4376"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="4377"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="4378"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>:mini:`C`<sp/>where<sp/>each<sp/>:mini:`C/v<sp/>:=<sp/>A<sp/>NAME<sp/>B/v`.</highlight></codeline>
<codeline lineno="4379"><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2],<sp/>[3,<sp/>4]])</highlight></codeline>
<codeline lineno="4380"><highlight class="comment">//$=<sp/>2.5<sp/>NAME<sp/>A</highlight></codeline>
<codeline lineno="4381"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="4382"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*A<sp/>=<sp/>(ml_array_t<sp/>*)Args[1];<sp/>\</highlight></codeline>
<codeline lineno="4383"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/>return<sp/>(ml_value_t<sp/>*)A;<sp/>\</highlight></codeline>
<codeline lineno="4384"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>B<sp/>=<sp/>ml_real_value(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="4385"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Degree<sp/>=<sp/>A-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="4386"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*C<sp/>=<sp/>ml_array_alloc(MAX(A-&gt;Format,<sp/>ML_ARRAY_FORMAT_F64),<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="4387"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);<sp/>\</highlight></codeline>
<codeline lineno="4388"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>switch<sp/>(C-&gt;Format)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4389"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>ML_ARRAY_FORMAT_F64:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4390"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>*Values<sp/>=<sp/>(double<sp/>*)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4391"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(double);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>B<sp/>NAME<sp/>*Values;<sp/>\</highlight></codeline>
<codeline lineno="4392"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="4393"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4394"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>op_complex_array_right(NAME)<sp/>\</highlight></codeline>
<codeline lineno="4395"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>default:<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4396"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_error(&quot;TypeError&quot;,<sp/>&quot;Invalid<sp/>types<sp/>for<sp/>array<sp/>operation&quot;);<sp/>\</highlight></codeline>
<codeline lineno="4397"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4398"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4399"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)C;<sp/>\</highlight></codeline>
<codeline lineno="4400"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4401"><highlight class="normal"></highlight></codeline>
<codeline lineno="4402"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4403"><highlight class="normal"></highlight></codeline>
<codeline lineno="4404"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ARITH_METHOD(NAME,<sp/>MIN_FORMAT,<sp/>METHOD)<sp/>\</highlight></codeline>
<codeline lineno="4405"><highlight class="preprocessor">ML_ARITH_METHOD_BASE(NAME,<sp/>MIN_FORMAT,<sp/>METHOD)<sp/>\</highlight></codeline>
<codeline lineno="4406"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="4407"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLArrayComplexT,<sp/>MLComplexT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4408"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="4409"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="4410"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="4411"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>:mini:`C`<sp/>where<sp/>each<sp/>:mini:`C/v<sp/>:=<sp/>A/v<sp/>NAME<sp/>B`.</highlight></codeline>
<codeline lineno="4412"><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2],<sp/>[3,<sp/>4]])</highlight></codeline>
<codeline lineno="4413"><highlight class="comment">//$=<sp/>A<sp/>NAME<sp/>(1<sp/>+<sp/>1i)</highlight></codeline>
<codeline lineno="4414"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="4415"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*A<sp/>=<sp/>(ml_array_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="4416"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/>return<sp/>(ml_value_t<sp/>*)A;<sp/>\</highlight></codeline>
<codeline lineno="4417"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>complex_double<sp/>B<sp/>=<sp/>ml_complex_value(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="4418"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Degree<sp/>=<sp/>A-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="4419"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_C64,<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="4420"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);<sp/>\</highlight></codeline>
<codeline lineno="4421"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>complex_double<sp/>*Values<sp/>=<sp/>(complex_double<sp/>*)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4422"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(complex_double);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>*Values<sp/>NAME<sp/>B;<sp/>\</highlight></codeline>
<codeline lineno="4423"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)C;<sp/>\</highlight></codeline>
<codeline lineno="4424"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="4425"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="4426"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLComplexT,<sp/>MLArrayComplexT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4427"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="4428"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="4429"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="4430"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>:mini:`C`<sp/>where<sp/>each<sp/>:mini:`C/v<sp/>:=<sp/>A<sp/>NAME<sp/>B/v`.</highlight></codeline>
<codeline lineno="4431"><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2],<sp/>[3,<sp/>4]])</highlight></codeline>
<codeline lineno="4432"><highlight class="comment">//$=<sp/>(1<sp/>+<sp/>1i)<sp/>NAME<sp/>A</highlight></codeline>
<codeline lineno="4433"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="4434"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*A<sp/>=<sp/>(ml_array_t<sp/>*)Args[1];<sp/>\</highlight></codeline>
<codeline lineno="4435"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/>return<sp/>(ml_value_t<sp/>*)A;<sp/>\</highlight></codeline>
<codeline lineno="4436"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>complex_double<sp/>B<sp/>=<sp/>ml_complex_value(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="4437"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Degree<sp/>=<sp/>A-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="4438"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_C64,<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="4439"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);<sp/>\</highlight></codeline>
<codeline lineno="4440"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>complex_double<sp/>*Values<sp/>=<sp/>(complex_double<sp/>*)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4441"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(complex_double);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>B<sp/>NAME<sp/>*Values;<sp/>\</highlight></codeline>
<codeline lineno="4442"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)C;<sp/>\</highlight></codeline>
<codeline lineno="4443"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4444"><highlight class="normal"></highlight></codeline>
<codeline lineno="4445"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4446"><highlight class="normal"></highlight></codeline>
<codeline lineno="4447"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ARITH_METHOD(NAME,<sp/>MIN_FORMAT,<sp/>METHOD)<sp/>\</highlight></codeline>
<codeline lineno="4448"><highlight class="preprocessor">ML_ARITH_METHOD_BASE(NAME,<sp/>MIN_FORMAT,<sp/>METHOD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4449"><highlight class="normal"></highlight></codeline>
<codeline lineno="4450"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4451"><highlight class="normal"></highlight></codeline>
<codeline lineno="4452"><highlight class="normal">ML_ARITH_METHOD(+,<sp/>ML_ARRAY_FORMAT_I64,<sp/>AddMethod);</highlight></codeline>
<codeline lineno="4453"><highlight class="normal">ML_ARITH_METHOD(*,<sp/>ML_ARRAY_FORMAT_I64,<sp/>MulMethod);</highlight></codeline>
<codeline lineno="4454"><highlight class="normal">ML_ARITH_METHOD(-,<sp/>ML_ARRAY_FORMAT_I64,<sp/>SubMethod);</highlight></codeline>
<codeline lineno="4455"><highlight class="normal">ML_ARITH_METHOD(/,<sp/>ML_ARRAY_FORMAT_F64,<sp/>DivMethod);</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"></highlight></codeline>
<codeline lineno="4457"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ARITH_METHOD_BITWISE(NAME,<sp/>SYMBOL,<sp/>OP)<sp/>\</highlight></codeline>
<codeline lineno="4458"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="4459"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLArrayT,<sp/>MLIntegerT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4460"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="4461"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="4462"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="4463"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>:mini:`C`<sp/>where<sp/>each<sp/>:mini:`C/v<sp/>:=<sp/>A/v<sp/>bitwise<sp/>OP<sp/>B`.</highlight></codeline>
<codeline lineno="4464"><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2],<sp/>[3,<sp/>4]])</highlight></codeline>
<codeline lineno="4465"><highlight class="comment">//$=<sp/>A<sp/>NAME<sp/>2</highlight></codeline>
<codeline lineno="4466"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="4467"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*A<sp/>=<sp/>(ml_array_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="4468"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/>return<sp/>(ml_value_t<sp/>*)A;<sp/>\</highlight></codeline>
<codeline lineno="4469"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Format<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/>return<sp/>ml_error(&quot;TypeError&quot;,<sp/>&quot;Invalid<sp/>types<sp/>for<sp/>array<sp/>operation&quot;);<sp/>\</highlight></codeline>
<codeline lineno="4470"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>B<sp/>=<sp/>ml_integer_value_fast(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="4471"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Degree<sp/>=<sp/>A-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="4472"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_I64,<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="4473"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);<sp/>\</highlight></codeline>
<codeline lineno="4474"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>*Values<sp/>=<sp/>(int64_t<sp/>*)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4475"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(int64_t);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>*Values<sp/>SYMBOL<sp/>B;<sp/>\</highlight></codeline>
<codeline lineno="4476"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)C;<sp/>\</highlight></codeline>
<codeline lineno="4477"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="4478"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="4479"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLIntegerT,<sp/>MLArrayT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4480"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="4481"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="4482"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="4483"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>:mini:`C`<sp/>where<sp/>each<sp/>:mini:`C/v<sp/>:=<sp/>A<sp/>bitwise<sp/>OP<sp/>B/v`.</highlight></codeline>
<codeline lineno="4484"><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2],<sp/>[3,<sp/>4]])</highlight></codeline>
<codeline lineno="4485"><highlight class="comment">//$=<sp/>2<sp/>NAME<sp/>A</highlight></codeline>
<codeline lineno="4486"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="4487"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*A<sp/>=<sp/>(ml_array_t<sp/>*)Args[1];<sp/>\</highlight></codeline>
<codeline lineno="4488"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/>return<sp/>(ml_value_t<sp/>*)A;<sp/>\</highlight></codeline>
<codeline lineno="4489"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Format<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/>return<sp/>ml_error(&quot;TypeError&quot;,<sp/>&quot;Invalid<sp/>types<sp/>for<sp/>array<sp/>operation&quot;);<sp/>\</highlight></codeline>
<codeline lineno="4490"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>B<sp/>=<sp/>ml_integer_value_fast(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="4491"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Degree<sp/>=<sp/>A-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="4492"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_I64,<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="4493"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);<sp/>\</highlight></codeline>
<codeline lineno="4494"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>*Values<sp/>=<sp/>(int64_t<sp/>*)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4495"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(int64_t);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>B<sp/>SYMBOL<sp/>*Values;<sp/>\</highlight></codeline>
<codeline lineno="4496"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)C;<sp/>\</highlight></codeline>
<codeline lineno="4497"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4498"><highlight class="normal"></highlight></codeline>
<codeline lineno="4499"><highlight class="normal">ML_ARITH_METHOD_BITWISE(/\\,<sp/>&amp;,<sp/>and)</highlight></codeline>
<codeline lineno="4500"><highlight class="normal">ML_ARITH_METHOD_BITWISE(\\/,<sp/>|,<sp/>or)</highlight></codeline>
<codeline lineno="4501"><highlight class="normal">ML_ARITH_METHOD_BITWISE(&gt;&lt;,<sp/>^,<sp/>xor)</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"></highlight></codeline>
<codeline lineno="4503"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ARITH_METHOD_MINMAX(NAME,<sp/>FN)<sp/>\</highlight></codeline>
<codeline lineno="4504"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="4505"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLArrayT,<sp/>MLIntegerT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4506"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="4507"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="4508"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="4509"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>:mini:`C`<sp/>where<sp/>each<sp/>:mini:`C/v<sp/>:=<sp/>NAME(A/v,<sp/>B)`.</highlight></codeline>
<codeline lineno="4510"><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2],<sp/>[3,<sp/>4]])</highlight></codeline>
<codeline lineno="4511"><highlight class="comment">//$=<sp/>A<sp/>NAME<sp/>2</highlight></codeline>
<codeline lineno="4512"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="4513"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*A<sp/>=<sp/>(ml_array_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="4514"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/>return<sp/>(ml_value_t<sp/>*)A;<sp/>\</highlight></codeline>
<codeline lineno="4515"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Format<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/>return<sp/>ml_error(&quot;TypeError&quot;,<sp/>&quot;Invalid<sp/>types<sp/>for<sp/>array<sp/>operation&quot;);<sp/>\</highlight></codeline>
<codeline lineno="4516"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>B<sp/>=<sp/>ml_integer_value_fast(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="4517"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Degree<sp/>=<sp/>A-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="4518"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_I64,<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="4519"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);<sp/>\</highlight></codeline>
<codeline lineno="4520"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>*Values<sp/>=<sp/>(int64_t<sp/>*)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4521"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(int64_t);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>FN(*Values,<sp/>B);<sp/>\</highlight></codeline>
<codeline lineno="4522"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)C;<sp/>\</highlight></codeline>
<codeline lineno="4523"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="4524"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="4525"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLIntegerT,<sp/>MLArrayT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4526"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="4527"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="4528"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="4529"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>:mini:`C`<sp/>where<sp/>each<sp/>:mini:`C/v<sp/>:=<sp/>NAME(A,<sp/>B/v)`.</highlight></codeline>
<codeline lineno="4530"><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2],<sp/>[3,<sp/>4]])</highlight></codeline>
<codeline lineno="4531"><highlight class="comment">//$=<sp/>2<sp/>NAME<sp/>A</highlight></codeline>
<codeline lineno="4532"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="4533"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*A<sp/>=<sp/>(ml_array_t<sp/>*)Args[1];<sp/>\</highlight></codeline>
<codeline lineno="4534"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/>return<sp/>(ml_value_t<sp/>*)A;<sp/>\</highlight></codeline>
<codeline lineno="4535"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Format<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/>return<sp/>ml_error(&quot;TypeError&quot;,<sp/>&quot;Invalid<sp/>types<sp/>for<sp/>array<sp/>operation&quot;);<sp/>\</highlight></codeline>
<codeline lineno="4536"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>B<sp/>=<sp/>ml_integer_value_fast(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="4537"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Degree<sp/>=<sp/>A-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="4538"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_I64,<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="4539"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);<sp/>\</highlight></codeline>
<codeline lineno="4540"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>*Values<sp/>=<sp/>(int64_t<sp/>*)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4541"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(int64_t);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>FN(B,<sp/>*Values);<sp/>\</highlight></codeline>
<codeline lineno="4542"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)C;<sp/>\</highlight></codeline>
<codeline lineno="4543"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="4544"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="4545"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLArrayT,<sp/>MLRealT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4546"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="4547"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="4548"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="4549"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>:mini:`C`<sp/>where<sp/>each<sp/>:mini:`C/v<sp/>:=<sp/>NAME(A/v,<sp/>B)`.</highlight></codeline>
<codeline lineno="4550"><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2],<sp/>[3,<sp/>4]])</highlight></codeline>
<codeline lineno="4551"><highlight class="comment">//$=<sp/>A<sp/>NAME<sp/>2.5</highlight></codeline>
<codeline lineno="4552"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="4553"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*A<sp/>=<sp/>(ml_array_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="4554"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/>return<sp/>(ml_value_t<sp/>*)A;<sp/>\</highlight></codeline>
<codeline lineno="4555"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Format<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/>return<sp/>ml_error(&quot;TypeError&quot;,<sp/>&quot;Invalid<sp/>types<sp/>for<sp/>array<sp/>operation&quot;);<sp/>\</highlight></codeline>
<codeline lineno="4556"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>B<sp/>=<sp/>ml_real_value(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="4557"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Degree<sp/>=<sp/>A-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="4558"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_F64,<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="4559"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);<sp/>\</highlight></codeline>
<codeline lineno="4560"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>*Values<sp/>=<sp/>(double<sp/>*)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4561"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(double);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>FN(*Values,<sp/>B);<sp/>\</highlight></codeline>
<codeline lineno="4562"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)C;<sp/>\</highlight></codeline>
<codeline lineno="4563"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="4564"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="4565"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLRealT,<sp/>MLArrayT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4566"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="4567"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="4568"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="4569"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>:mini:`C`<sp/>where<sp/>each<sp/>:mini:`C/v<sp/>:=<sp/>NAME(A,<sp/>B/v)`.</highlight></codeline>
<codeline lineno="4570"><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([[1,<sp/>2],<sp/>[3,<sp/>4]])</highlight></codeline>
<codeline lineno="4571"><highlight class="comment">//$=<sp/>2.5<sp/>NAME<sp/>A</highlight></codeline>
<codeline lineno="4572"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="4573"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*A<sp/>=<sp/>(ml_array_t<sp/>*)Args[1];<sp/>\</highlight></codeline>
<codeline lineno="4574"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/>return<sp/>(ml_value_t<sp/>*)A;<sp/>\</highlight></codeline>
<codeline lineno="4575"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Format<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/>return<sp/>ml_error(&quot;TypeError&quot;,<sp/>&quot;Invalid<sp/>types<sp/>for<sp/>array<sp/>operation&quot;);<sp/>\</highlight></codeline>
<codeline lineno="4576"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>B<sp/>=<sp/>ml_real_value(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="4577"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Degree<sp/>=<sp/>A-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="4578"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_F64,<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="4579"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);<sp/>\</highlight></codeline>
<codeline lineno="4580"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>*Values<sp/>=<sp/>(double<sp/>*)C-&gt;Base.Value;<sp/>\</highlight></codeline>
<codeline lineno="4581"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/>sizeof(double);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>FN(B,<sp/>*Values);<sp/>\</highlight></codeline>
<codeline lineno="4582"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)C;<sp/>\</highlight></codeline>
<codeline lineno="4583"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4584"><highlight class="normal"></highlight></codeline>
<codeline lineno="4585"><highlight class="normal">ML_ARITH_METHOD_MINMAX(min,<sp/>MIN)</highlight></codeline>
<codeline lineno="4586"><highlight class="normal">ML_ARITH_METHOD_MINMAX(max,<sp/>MAX)</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"></highlight></codeline>
<codeline lineno="4588"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4589"><highlight class="normal"></highlight></codeline>
<codeline lineno="4590"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;^&quot;</highlight><highlight class="normal">,<sp/>MLArrayMutableComplexT,<sp/>MLComplexT)<sp/>{</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A;</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/><sp/><sp/>complex_double<sp/>B<sp/>=<sp/>ml_complex_value(Args[1]);</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>A-&gt;Degree;</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_C64,<sp/>Degree);</highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);</highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/><sp/><sp/>complex_double<sp/>*Values<sp/>=<sp/>(complex_double<sp/>*)C-&gt;Base.Value;</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(complex_double);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>cpow(*Values,<sp/>B);</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="4600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"></highlight></codeline>
<codeline lineno="4602"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4603"><highlight class="normal"></highlight></codeline>
<codeline lineno="4604"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;^&quot;</highlight><highlight class="normal">,<sp/>MLArrayMutableRealT,<sp/>MLRealT)<sp/>{</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A;</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>B<sp/>=<sp/>ml_real_value(Args[1]);</highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>A-&gt;Degree;</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_F64,<sp/>Degree);</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>array_copy(C,<sp/>A);</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Values<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)C-&gt;Base.Value;</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DataSize<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Values)<sp/>*Values<sp/>=<sp/>pow(*Values,<sp/>B);</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="4614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"></highlight></codeline>
<codeline lineno="4616"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4617"><highlight class="normal"></highlight></codeline>
<codeline lineno="4618"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_COMPARE_METHOD_BASE(TITLE,<sp/>TITLE2,<sp/>OP)<sp/>\</highlight></codeline>
<codeline lineno="4619"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="4620"><highlight class="preprocessor">ML_METHOD(#OP,<sp/>MLArrayT,<sp/>MLIntegerT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4621"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="4622"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="4623"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="4624"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>:mini:`C`<sp/>where<sp/>each<sp/>:mini:`C/v<sp/>:=<sp/>if<sp/>A/v<sp/>OP<sp/>B<sp/>then<sp/>1<sp/>else<sp/>0<sp/>end`.</highlight></codeline>
<codeline lineno="4625"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="4626"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*A<sp/>=<sp/>(ml_array_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="4627"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/>return<sp/>(ml_value_t<sp/>*)A;<sp/>\</highlight></codeline>
<codeline lineno="4628"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>B<sp/>=<sp/>ml_integer_value_fast(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="4629"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Degree<sp/>=<sp/>A-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="4630"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_I8,<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="4631"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>DataSize<sp/>=<sp/>1;<sp/>\</highlight></codeline>
<codeline lineno="4632"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4633"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions[I].Stride<sp/>=<sp/>DataSize;<sp/>\</highlight></codeline>
<codeline lineno="4634"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Size<sp/>=<sp/>C-&gt;Dimensions[I].Size<sp/>=<sp/>A-&gt;Dimensions[I].Size;<sp/>\</highlight></codeline>
<codeline lineno="4635"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;<sp/>\</highlight></codeline>
<codeline lineno="4636"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4637"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>C-&gt;Base.Value<sp/>=<sp/>snew(DataSize);<sp/>\</highlight></codeline>
<codeline lineno="4638"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>compare_row_fn_t<sp/>Compare<sp/>=<sp/>Compare<sp/>##<sp/>TITLE<sp/>##<sp/>RowFns[A-&gt;Format<sp/>*<sp/>MAX_FORMATS<sp/>+<sp/>ML_ARRAY_FORMAT_I64];<sp/>\</highlight></codeline>
<codeline lineno="4639"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!Compare)<sp/>return<sp/>ml_error(&quot;ArrayError&quot;,<sp/>&quot;Unsupported<sp/>array<sp/>format<sp/>pair<sp/>(%s,<sp/>integer)&quot;,<sp/>A-&gt;Base.Type-&gt;Name);<sp/>\</highlight></codeline>
<codeline lineno="4640"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>compare_prefix(Compare,<sp/>C-&gt;Dimensions,<sp/>C-&gt;Base.Value,<sp/>Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions,<sp/>A-&gt;Base.Value,<sp/>0,<sp/>NULL,<sp/>(char<sp/>*)&amp;B);<sp/>\</highlight></codeline>
<codeline lineno="4641"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)C;<sp/>\</highlight></codeline>
<codeline lineno="4642"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="4643"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="4644"><highlight class="preprocessor">ML_METHOD(#OP,<sp/>MLIntegerT,<sp/>MLArrayT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4645"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="4646"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="4647"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="4648"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>:mini:`C`<sp/>where<sp/>each<sp/>:mini:`C/v<sp/>:=<sp/>if<sp/>A<sp/>OP<sp/>B/v<sp/>then<sp/>1<sp/>else<sp/>0<sp/>end`.</highlight></codeline>
<codeline lineno="4649"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="4650"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*A<sp/>=<sp/>(ml_array_t<sp/>*)Args[1];<sp/>\</highlight></codeline>
<codeline lineno="4651"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/>return<sp/>(ml_value_t<sp/>*)A;<sp/>\</highlight></codeline>
<codeline lineno="4652"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>B<sp/>=<sp/>ml_integer_value_fast(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="4653"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Degree<sp/>=<sp/>A-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="4654"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_I8,<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="4655"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>DataSize<sp/>=<sp/>1;<sp/>\</highlight></codeline>
<codeline lineno="4656"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4657"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions[I].Stride<sp/>=<sp/>DataSize;<sp/>\</highlight></codeline>
<codeline lineno="4658"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Size<sp/>=<sp/>C-&gt;Dimensions[I].Size<sp/>=<sp/>A-&gt;Dimensions[I].Size;<sp/>\</highlight></codeline>
<codeline lineno="4659"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;<sp/>\</highlight></codeline>
<codeline lineno="4660"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4661"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>C-&gt;Base.Value<sp/>=<sp/>snew(DataSize);<sp/>\</highlight></codeline>
<codeline lineno="4662"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>compare_row_fn_t<sp/>Compare<sp/>=<sp/>Compare<sp/>##<sp/>TITLE2<sp/>##<sp/>RowFns[A-&gt;Format<sp/>*<sp/>MAX_FORMATS<sp/>+<sp/>ML_ARRAY_FORMAT_I64];<sp/>\</highlight></codeline>
<codeline lineno="4663"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!Compare)<sp/>return<sp/>ml_error(&quot;ArrayError&quot;,<sp/>&quot;Unsupported<sp/>array<sp/>format<sp/>pair<sp/>(integer,<sp/>%s)&quot;,<sp/>A-&gt;Base.Type-&gt;Name);<sp/>\</highlight></codeline>
<codeline lineno="4664"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>compare_prefix(Compare,<sp/>C-&gt;Dimensions,<sp/>C-&gt;Base.Value,<sp/>Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions,<sp/>A-&gt;Base.Value,<sp/>0,<sp/>NULL,<sp/>(char<sp/>*)&amp;B);<sp/>\</highlight></codeline>
<codeline lineno="4665"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)C;<sp/>\</highlight></codeline>
<codeline lineno="4666"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="4667"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="4668"><highlight class="preprocessor">ML_METHOD(#OP,<sp/>MLArrayT,<sp/>MLRealT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4669"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="4670"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="4671"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="4672"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>:mini:`C`<sp/>where<sp/>each<sp/>:mini:`C/v<sp/>:=<sp/>if<sp/>A/v<sp/>OP<sp/>B<sp/>then<sp/>1<sp/>else<sp/>0<sp/>end`.</highlight></codeline>
<codeline lineno="4673"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="4674"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*A<sp/>=<sp/>(ml_array_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="4675"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/>return<sp/>(ml_value_t<sp/>*)A;<sp/>\</highlight></codeline>
<codeline lineno="4676"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>B<sp/>=<sp/>ml_real_value(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="4677"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Degree<sp/>=<sp/>A-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="4678"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_I8,<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="4679"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>DataSize<sp/>=<sp/>1;<sp/>\</highlight></codeline>
<codeline lineno="4680"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4681"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions[I].Stride<sp/>=<sp/>DataSize;<sp/>\</highlight></codeline>
<codeline lineno="4682"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Size<sp/>=<sp/>C-&gt;Dimensions[I].Size<sp/>=<sp/>A-&gt;Dimensions[I].Size;<sp/>\</highlight></codeline>
<codeline lineno="4683"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;<sp/>\</highlight></codeline>
<codeline lineno="4684"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4685"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>C-&gt;Base.Value<sp/>=<sp/>snew(DataSize);<sp/>\</highlight></codeline>
<codeline lineno="4686"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>compare_row_fn_t<sp/>Compare<sp/>=<sp/>Compare<sp/>##<sp/>TITLE<sp/>##<sp/>RowFns[A-&gt;Format<sp/>*<sp/>MAX_FORMATS<sp/>+<sp/>ML_ARRAY_FORMAT_F64];<sp/>\</highlight></codeline>
<codeline lineno="4687"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!Compare)<sp/>return<sp/>ml_error(&quot;ArrayError&quot;,<sp/>&quot;Unsupported<sp/>array<sp/>format<sp/>pair<sp/>(%s,<sp/>real)&quot;,<sp/>A-&gt;Base.Type-&gt;Name);<sp/>\</highlight></codeline>
<codeline lineno="4688"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>compare_prefix(Compare,<sp/>C-&gt;Dimensions,<sp/>C-&gt;Base.Value,<sp/>Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions,<sp/>A-&gt;Base.Value,<sp/>0,<sp/>NULL,<sp/>(char<sp/>*)&amp;B);<sp/>\</highlight></codeline>
<codeline lineno="4689"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)C;<sp/>\</highlight></codeline>
<codeline lineno="4690"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="4691"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="4692"><highlight class="preprocessor">ML_METHOD(#OP,<sp/>MLRealT,<sp/>MLArrayT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4693"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="4694"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="4695"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="4696"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>:mini:`C`<sp/>where<sp/>each<sp/>:mini:`C/v<sp/>:=<sp/>if<sp/>A<sp/>OP<sp/>B/v<sp/>then<sp/>1<sp/>else<sp/>0<sp/>end`.</highlight></codeline>
<codeline lineno="4697"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="4698"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*A<sp/>=<sp/>(ml_array_t<sp/>*)Args[1];<sp/>\</highlight></codeline>
<codeline lineno="4699"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/>return<sp/>(ml_value_t<sp/>*)A;<sp/>\</highlight></codeline>
<codeline lineno="4700"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>B<sp/>=<sp/>ml_real_value(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="4701"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Degree<sp/>=<sp/>A-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="4702"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_I8,<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="4703"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>DataSize<sp/>=<sp/>1;<sp/>\</highlight></codeline>
<codeline lineno="4704"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4705"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions[I].Stride<sp/>=<sp/>DataSize;<sp/>\</highlight></codeline>
<codeline lineno="4706"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Size<sp/>=<sp/>C-&gt;Dimensions[I].Size<sp/>=<sp/>A-&gt;Dimensions[I].Size;<sp/>\</highlight></codeline>
<codeline lineno="4707"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;<sp/>\</highlight></codeline>
<codeline lineno="4708"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4709"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>C-&gt;Base.Value<sp/>=<sp/>snew(DataSize);<sp/>\</highlight></codeline>
<codeline lineno="4710"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>compare_row_fn_t<sp/>Compare<sp/>=<sp/>Compare<sp/>##<sp/>TITLE2<sp/>##<sp/>RowFns[A-&gt;Format<sp/>*<sp/>MAX_FORMATS<sp/>+<sp/>ML_ARRAY_FORMAT_F64];<sp/>\</highlight></codeline>
<codeline lineno="4711"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!Compare)<sp/>return<sp/>ml_error(&quot;ArrayError&quot;,<sp/>&quot;Unsupported<sp/>array<sp/>format<sp/>pair<sp/>(real,<sp/>%s)&quot;,<sp/>A-&gt;Base.Type-&gt;Name);<sp/>\</highlight></codeline>
<codeline lineno="4712"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>compare_prefix(Compare,<sp/>C-&gt;Dimensions,<sp/>C-&gt;Base.Value,<sp/>Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions,<sp/>A-&gt;Base.Value,<sp/>0,<sp/>NULL,<sp/>(char<sp/>*)&amp;B);<sp/>\</highlight></codeline>
<codeline lineno="4713"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)C;<sp/>\</highlight></codeline>
<codeline lineno="4714"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="4715"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="4716"><highlight class="preprocessor">ML_METHOD(#OP,<sp/>MLArrayT,<sp/>MLAnyT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4717"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="4718"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="4719"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="4720"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>:mini:`C`<sp/>where<sp/>each<sp/>:mini:`C/v<sp/>:=<sp/>if<sp/>A/v<sp/>OP<sp/>B<sp/>then<sp/>1<sp/>else<sp/>0<sp/>end`.</highlight></codeline>
<codeline lineno="4721"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="4722"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*A<sp/>=<sp/>(ml_array_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="4723"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/>return<sp/>(ml_value_t<sp/>*)A;<sp/>\</highlight></codeline>
<codeline lineno="4724"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_value_t<sp/>*B<sp/>=<sp/>Args[1];<sp/>\</highlight></codeline>
<codeline lineno="4725"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Degree<sp/>=<sp/>A-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="4726"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_I8,<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="4727"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>DataSize<sp/>=<sp/>1;<sp/>\</highlight></codeline>
<codeline lineno="4728"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4729"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions[I].Stride<sp/>=<sp/>DataSize;<sp/>\</highlight></codeline>
<codeline lineno="4730"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Size<sp/>=<sp/>C-&gt;Dimensions[I].Size<sp/>=<sp/>A-&gt;Dimensions[I].Size;<sp/>\</highlight></codeline>
<codeline lineno="4731"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;<sp/>\</highlight></codeline>
<codeline lineno="4732"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4733"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>C-&gt;Base.Value<sp/>=<sp/>snew(DataSize);<sp/>\</highlight></codeline>
<codeline lineno="4734"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>compare_row_fn_t<sp/>Compare<sp/>=<sp/>Compare<sp/>##<sp/>TITLE<sp/>##<sp/>RowFns[A-&gt;Format<sp/>*<sp/>MAX_FORMATS<sp/>+<sp/>ML_ARRAY_FORMAT_ANY];<sp/>\</highlight></codeline>
<codeline lineno="4735"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!Compare)<sp/>return<sp/>ml_error(&quot;ArrayError&quot;,<sp/>&quot;Unsupported<sp/>array<sp/>format<sp/>pair<sp/>(%s,<sp/>any)&quot;,<sp/>A-&gt;Base.Type-&gt;Name);<sp/>\</highlight></codeline>
<codeline lineno="4736"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>compare_prefix(Compare,<sp/>C-&gt;Dimensions,<sp/>C-&gt;Base.Value,<sp/>Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions,<sp/>A-&gt;Base.Value,<sp/>0,<sp/>NULL,<sp/>(char<sp/>*)&amp;B);<sp/>\</highlight></codeline>
<codeline lineno="4737"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)C;<sp/>\</highlight></codeline>
<codeline lineno="4738"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="4739"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="4740"><highlight class="preprocessor">ML_METHOD(#OP,<sp/>MLAnyT,<sp/>MLArrayT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4741"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="4742"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="4743"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="4744"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>:mini:`C`<sp/>where<sp/>each<sp/>:mini:`C/v<sp/>:=<sp/>if<sp/>A<sp/>OP<sp/>B/v<sp/>then<sp/>1<sp/>else<sp/>0<sp/>end`.</highlight></codeline>
<codeline lineno="4745"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="4746"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*A<sp/>=<sp/>(ml_array_t<sp/>*)Args[1];<sp/>\</highlight></codeline>
<codeline lineno="4747"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/>return<sp/>(ml_value_t<sp/>*)A;<sp/>\</highlight></codeline>
<codeline lineno="4748"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_value_t<sp/>*B<sp/>=<sp/>Args[0];<sp/>\</highlight></codeline>
<codeline lineno="4749"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Degree<sp/>=<sp/>A-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="4750"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_I8,<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="4751"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>DataSize<sp/>=<sp/>1;<sp/>\</highlight></codeline>
<codeline lineno="4752"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4753"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions[I].Stride<sp/>=<sp/>DataSize;<sp/>\</highlight></codeline>
<codeline lineno="4754"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Size<sp/>=<sp/>C-&gt;Dimensions[I].Size<sp/>=<sp/>A-&gt;Dimensions[I].Size;<sp/>\</highlight></codeline>
<codeline lineno="4755"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;<sp/>\</highlight></codeline>
<codeline lineno="4756"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4757"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>C-&gt;Base.Value<sp/>=<sp/>snew(DataSize);<sp/>\</highlight></codeline>
<codeline lineno="4758"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>compare_row_fn_t<sp/>Compare<sp/>=<sp/>Compare<sp/>##<sp/>TITLE2<sp/>##<sp/>RowFns[A-&gt;Format<sp/>*<sp/>MAX_FORMATS<sp/>+<sp/>ML_ARRAY_FORMAT_ANY];<sp/>\</highlight></codeline>
<codeline lineno="4759"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!Compare)<sp/>return<sp/>ml_error(&quot;ArrayError&quot;,<sp/>&quot;Unsupported<sp/>array<sp/>format<sp/>pair<sp/>(any,<sp/>%s)&quot;,<sp/>A-&gt;Base.Type-&gt;Name);<sp/>\</highlight></codeline>
<codeline lineno="4760"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>compare_prefix(Compare,<sp/>C-&gt;Dimensions,<sp/>C-&gt;Base.Value,<sp/>Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions,<sp/>A-&gt;Base.Value,<sp/>0,<sp/>NULL,<sp/>(char<sp/>*)&amp;B);<sp/>\</highlight></codeline>
<codeline lineno="4761"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)C;<sp/>\</highlight></codeline>
<codeline lineno="4762"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4763"><highlight class="normal"></highlight></codeline>
<codeline lineno="4764"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4765"><highlight class="normal"></highlight></codeline>
<codeline lineno="4766"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_COMPARE_METHOD(TITLE,<sp/>TITLE2,<sp/>OP)<sp/>\</highlight></codeline>
<codeline lineno="4767"><highlight class="preprocessor">ML_COMPARE_METHOD_BASE(TITLE,<sp/>TITLE2,<sp/>OP)<sp/>\</highlight></codeline>
<codeline lineno="4768"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="4769"><highlight class="preprocessor">ML_METHOD(#OP,<sp/>MLArrayT,<sp/>MLComplexT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4770"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="4771"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="4772"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="4773"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>:mini:`C`<sp/>where<sp/>each<sp/>:mini:`C/v<sp/>:=<sp/>if<sp/>A/v<sp/>OP<sp/>B<sp/>then<sp/>1<sp/>else<sp/>0<sp/>end`.</highlight></codeline>
<codeline lineno="4774"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="4775"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*A<sp/>=<sp/>(ml_array_t<sp/>*)Args[0];<sp/>\</highlight></codeline>
<codeline lineno="4776"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/>return<sp/>(ml_value_t<sp/>*)A;<sp/>\</highlight></codeline>
<codeline lineno="4777"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Format<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/>return<sp/>ml_error(&quot;TypeError&quot;,<sp/>&quot;Invalid<sp/>types<sp/>for<sp/>array<sp/>operation&quot;);<sp/>\</highlight></codeline>
<codeline lineno="4778"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>complex<sp/>double<sp/>B<sp/>=<sp/>ml_complex_value(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="4779"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Degree<sp/>=<sp/>A-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="4780"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_I8,<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="4781"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>DataSize<sp/>=<sp/>1;<sp/>\</highlight></codeline>
<codeline lineno="4782"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4783"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions[I].Stride<sp/>=<sp/>DataSize;<sp/>\</highlight></codeline>
<codeline lineno="4784"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Size<sp/>=<sp/>C-&gt;Dimensions[I].Size<sp/>=<sp/>A-&gt;Dimensions[I].Size;<sp/>\</highlight></codeline>
<codeline lineno="4785"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;<sp/>\</highlight></codeline>
<codeline lineno="4786"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4787"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>C-&gt;Base.Value<sp/>=<sp/>snew(DataSize);<sp/>\</highlight></codeline>
<codeline lineno="4788"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>compare_row_fn_t<sp/>Compare<sp/>=<sp/>Compare<sp/>##<sp/>TITLE<sp/>##<sp/>RowFns[A-&gt;Format<sp/>*<sp/>MAX_FORMATS<sp/>+<sp/>ML_ARRAY_FORMAT_C64];<sp/>\</highlight></codeline>
<codeline lineno="4789"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!Compare)<sp/>return<sp/>ml_error(&quot;ArrayError&quot;,<sp/>&quot;Unsupported<sp/>array<sp/>format<sp/>pair<sp/>(%s,<sp/>complex)&quot;,<sp/>A-&gt;Base.Type-&gt;Name);<sp/>\</highlight></codeline>
<codeline lineno="4790"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>compare_prefix(Compare,<sp/>C-&gt;Dimensions,<sp/>C-&gt;Base.Value,<sp/>Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions,<sp/>A-&gt;Base.Value,<sp/>0,<sp/>NULL,<sp/>(char<sp/>*)&amp;B);<sp/>\</highlight></codeline>
<codeline lineno="4791"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)C;<sp/>\</highlight></codeline>
<codeline lineno="4792"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="4793"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="4794"><highlight class="preprocessor">ML_METHOD(#OP,<sp/>MLComplexT,<sp/>MLArrayT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4795"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="4796"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="4797"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="4798"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>:mini:`C`<sp/>where<sp/>each<sp/>:mini:`C/v<sp/>:=<sp/>if<sp/>A<sp/>OP<sp/>B/v<sp/>then<sp/>1<sp/>else<sp/>0<sp/>end`.</highlight></codeline>
<codeline lineno="4799"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="4800"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*A<sp/>=<sp/>(ml_array_t<sp/>*)Args[1];<sp/>\</highlight></codeline>
<codeline lineno="4801"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/>return<sp/>(ml_value_t<sp/>*)A;<sp/>\</highlight></codeline>
<codeline lineno="4802"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(A-&gt;Format<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/>return<sp/>ml_error(&quot;TypeError&quot;,<sp/>&quot;Invalid<sp/>types<sp/>for<sp/>array<sp/>operation&quot;);<sp/>\</highlight></codeline>
<codeline lineno="4803"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>complex<sp/>double<sp/>B<sp/>=<sp/>ml_complex_value(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="4804"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Degree<sp/>=<sp/>A-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="4805"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_array_t<sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_I8,<sp/>Degree);<sp/>\</highlight></codeline>
<codeline lineno="4806"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>DataSize<sp/>=<sp/>1;<sp/>\</highlight></codeline>
<codeline lineno="4807"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="4808"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions[I].Stride<sp/>=<sp/>DataSize;<sp/>\</highlight></codeline>
<codeline lineno="4809"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Size<sp/>=<sp/>C-&gt;Dimensions[I].Size<sp/>=<sp/>A-&gt;Dimensions[I].Size;<sp/>\</highlight></codeline>
<codeline lineno="4810"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;<sp/>\</highlight></codeline>
<codeline lineno="4811"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4812"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>C-&gt;Base.Value<sp/>=<sp/>snew(DataSize);<sp/>\</highlight></codeline>
<codeline lineno="4813"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>compare_row_fn_t<sp/>Compare<sp/>=<sp/>Compare<sp/>##<sp/>TITLE2<sp/>##<sp/>RowFns[A-&gt;Format<sp/>*<sp/>MAX_FORMATS<sp/>+<sp/>ML_ARRAY_FORMAT_C64];<sp/>\</highlight></codeline>
<codeline lineno="4814"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!Compare)<sp/>return<sp/>ml_error(&quot;ArrayError&quot;,<sp/>&quot;Unsupported<sp/>array<sp/>format<sp/>pair<sp/>(complex,<sp/>%s)&quot;,<sp/>A-&gt;Base.Type-&gt;Name);<sp/>\</highlight></codeline>
<codeline lineno="4815"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>compare_prefix(Compare,<sp/>C-&gt;Dimensions,<sp/>C-&gt;Base.Value,<sp/>Degree<sp/>-<sp/>1,<sp/>A-&gt;Dimensions,<sp/>A-&gt;Base.Value,<sp/>0,<sp/>NULL,<sp/>(char<sp/>*)&amp;B);<sp/>\</highlight></codeline>
<codeline lineno="4816"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)C;<sp/>\</highlight></codeline>
<codeline lineno="4817"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4818"><highlight class="normal"></highlight></codeline>
<codeline lineno="4819"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4820"><highlight class="normal"></highlight></codeline>
<codeline lineno="4821"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_COMPARE_METHOD(BASE,<sp/>BASE2,<sp/>OP)<sp/>\</highlight></codeline>
<codeline lineno="4822"><highlight class="preprocessor">ML_COMPARE_METHOD_BASE(BASE,<sp/>BASE2,<sp/>OP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4823"><highlight class="normal"></highlight></codeline>
<codeline lineno="4824"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4825"><highlight class="normal"></highlight></codeline>
<codeline lineno="4826"><highlight class="normal">ML_COMPARE_METHOD(Eq,<sp/>Eq,<sp/>=);</highlight></codeline>
<codeline lineno="4827"><highlight class="normal">ML_COMPARE_METHOD(Ne,<sp/>Ne,<sp/>!=);</highlight></codeline>
<codeline lineno="4828"><highlight class="normal">ML_COMPARE_METHOD(Lt,<sp/>Gt,<sp/>&lt;);</highlight></codeline>
<codeline lineno="4829"><highlight class="normal">ML_COMPARE_METHOD(Gt,<sp/>Lt,<sp/>&gt;);</highlight></codeline>
<codeline lineno="4830"><highlight class="normal">ML_COMPARE_METHOD(Le,<sp/>Ge,<sp/>&lt;=);</highlight></codeline>
<codeline lineno="4831"><highlight class="normal">ML_COMPARE_METHOD(Ge,<sp/>Le,<sp/>&gt;=);</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"></highlight></codeline>
<codeline lineno="4833"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ml_array_format_t<sp/>ml_array_of_type_guess(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/>ml_array_format_t<sp/>Format)<sp/>{</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_array_of_type_guess)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Value),<sp/>ml_array_of_type_guess);</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(function)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(Value,<sp/>Format);</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_ANY;</highlight></codeline>
<codeline lineno="4837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"></highlight></codeline>
<codeline lineno="4839"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ml_array_format_t<sp/>ML_TYPED_FN(ml_array_of_type_guess,<sp/>MLListT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/>ml_array_format_t<sp/>Format)<sp/>{</highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Value,<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ml_array_of_type_guess(Iter-&gt;Value,<sp/>Format);</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Format;</highlight></codeline>
<codeline lineno="4844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4845"><highlight class="normal"></highlight></codeline>
<codeline lineno="4846"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ml_array_format_t<sp/>ML_TYPED_FN(ml_array_of_type_guess,<sp/>MLTupleT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/>ml_array_format_t<sp/>Format)<sp/>{</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Tuple<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Tuple-&gt;Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ml_array_of_type_guess(Tuple-&gt;Values[I],<sp/>Format);</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Format;</highlight></codeline>
<codeline lineno="4852"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"></highlight></codeline>
<codeline lineno="4854"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ml_array_format_t<sp/>ML_TYPED_FN(ml_array_of_type_guess,<sp/>MLArrayT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/>ml_array_format_t<sp/>Format)<sp/>{</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Format<sp/>&lt;=<sp/>Array-&gt;Format)<sp/>Format<sp/>=<sp/>Array-&gt;Format;</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Format;</highlight></codeline>
<codeline lineno="4858"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"></highlight></codeline>
<codeline lineno="4860"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ml_array_format_t<sp/>ML_TYPED_FN(ml_array_of_type_guess,<sp/>MLIntegerT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/>ml_array_format_t<sp/>Format)<sp/>{</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Format<sp/>&lt;<sp/>ML_ARRAY_FORMAT_I64)<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I64;</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Format;</highlight></codeline>
<codeline lineno="4863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"></highlight></codeline>
<codeline lineno="4865"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ml_array_format_t<sp/>ML_TYPED_FN(ml_array_of_type_guess,<sp/>MLRealT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/>ml_array_format_t<sp/>Format)<sp/>{</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Format<sp/>&lt;<sp/>ML_ARRAY_FORMAT_F64)<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_F64;</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Format;</highlight></codeline>
<codeline lineno="4868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"></highlight></codeline>
<codeline lineno="4870"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4871"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ml_array_format_t<sp/>ML_TYPED_FN(ml_array_of_type_guess,<sp/>MLComplexT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/>ml_array_format_t<sp/>Format)<sp/>{</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Format<sp/>&lt;<sp/>ML_ARRAY_FORMAT_C64)<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_C64;</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Format;</highlight></codeline>
<codeline lineno="4874"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4876"><highlight class="normal"></highlight></codeline>
<codeline lineno="4877"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ml_array_format_t<sp/>ML_TYPED_FN(ml_array_of_type_guess,<sp/>MLIntegerRangeT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/>ml_array_format_t<sp/>Format)<sp/>{</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Format<sp/>&lt;<sp/>ML_ARRAY_FORMAT_I64)<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I64;</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Format;</highlight></codeline>
<codeline lineno="4880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"></highlight></codeline>
<codeline lineno="4882"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ml_array_format_t<sp/>ML_TYPED_FN(ml_array_of_type_guess,<sp/>MLRealRangeT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/>ml_array_format_t<sp/>Format)<sp/>{</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Format<sp/>&lt;<sp/>ML_ARRAY_FORMAT_F64)<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_F64;</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Format;</highlight></codeline>
<codeline lineno="4885"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"></highlight></codeline>
<codeline lineno="4887"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*ml_array_of_create(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree,<sp/>ml_array_format_t<sp/>Format)<sp/>{</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_array_of_create)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Value),<sp/>ml_array_of_create);</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(function)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(Value,<sp/>Degree,<sp/>Format);</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array<sp/>=<sp/>ml_array_alloc(Format,<sp/>Degree);</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree)<sp/>{</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Dimensions[Degree<sp/>-<sp/>1].Size<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Dimensions[Degree<sp/>-<sp/>1].Stride<sp/>=<sp/>MLArraySizes[Format];</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Array;</highlight></codeline>
<codeline lineno="4896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"></highlight></codeline>
<codeline lineno="4898"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*ML_TYPED_FN(ml_array_of_create,<sp/>MLListT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree,<sp/>ml_array_format_t<sp/>Format)<sp/>{</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>ml_list_length(Value);</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>dimension<sp/>in<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array<sp/>=<sp/>ml_array_of_create(ml_list_get(Value,<sp/>1),<sp/>Degree<sp/>+<sp/>1,<sp/>Format);</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Array-&gt;Base.Type<sp/>==<sp/>MLErrorT)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Array;</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/><sp/>Array-&gt;Dimensions[Degree].Size<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree<sp/>&lt;<sp/>Array-&gt;Degree<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Dimensions[Degree].Stride<sp/>=<sp/>Array-&gt;Dimensions[Degree<sp/>+<sp/>1].Size<sp/>*<sp/>Array-&gt;Dimensions[Degree<sp/>+<sp/>1].Stride;</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Array;</highlight></codeline>
<codeline lineno="4908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"></highlight></codeline>
<codeline lineno="4910"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*ML_TYPED_FN(ml_array_of_create,<sp/>MLTupleT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree,<sp/>ml_array_format_t<sp/>Format)<sp/>{</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>ml_tuple_size(Value);</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>dimension<sp/>in<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array<sp/>=<sp/>ml_array_of_create(ml_tuple_get(Value,<sp/>1),<sp/>Degree<sp/>+<sp/>1,<sp/>Format);</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Array-&gt;Base.Type<sp/>==<sp/>MLErrorT)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Array;</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/>Array-&gt;Dimensions[Degree].Size<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree<sp/>&lt;<sp/>Array-&gt;Degree<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Dimensions[Degree].Stride<sp/>=<sp/>Array-&gt;Dimensions[Degree<sp/>+<sp/>1].Size<sp/>*<sp/>Array-&gt;Dimensions[Degree<sp/>+<sp/>1].Stride;</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Array;</highlight></codeline>
<codeline lineno="4920"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"></highlight></codeline>
<codeline lineno="4922"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*ML_TYPED_FN(ml_array_of_create,<sp/>MLArrayT,<sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree,<sp/>ml_array_format_t<sp/>Format)<sp/>{</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array<sp/>=<sp/>ml_array_alloc(Format,<sp/>Degree<sp/>+<sp/>Value-&gt;Degree);</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Dimensions<sp/>=<sp/>Array-&gt;Dimensions<sp/>+<sp/>Degree;</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Stride<sp/>=<sp/>MLArraySizes[Format];</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Value-&gt;Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dimensions[I].Stride<sp/>=<sp/>Stride;</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Dimensions[I].Size<sp/>=<sp/>Value-&gt;Dimensions[I].Size;</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stride<sp/>*=<sp/>Size;</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Array;</highlight></codeline>
<codeline lineno="4932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"></highlight></codeline>
<codeline lineno="4934"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*ML_TYPED_FN(ml_array_of_create,<sp/>MLIntegerRangeT,<sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree,<sp/>ml_array_format_t<sp/>Format)<sp/>{</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Diff<sp/>=<sp/>Range-&gt;Limit<sp/>-<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Range-&gt;Step)<sp/>{</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Diff<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>Range-&gt;Step<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Diff<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>Range-&gt;Step<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Count<sp/>=<sp/>Diff<sp/>/<sp/>Range-&gt;Step<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Count)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>dimension<sp/>in<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array<sp/>=<sp/>ml_array_alloc(Format,<sp/>Degree<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Dimension<sp/>=<sp/>Array-&gt;Dimensions<sp/>+<sp/>Degree;</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/><sp/><sp/>Dimension-&gt;Stride<sp/>=<sp/>MLArraySizes[Format];</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/><sp/><sp/>Dimension-&gt;Size<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Array;</highlight></codeline>
<codeline lineno="4949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"></highlight></codeline>
<codeline lineno="4951"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*ML_TYPED_FN(ml_array_of_create,<sp/>MLRealRangeT,<sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree,<sp/>ml_array_format_t<sp/>Format)<sp/>{</highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>ml_real_range_count(Range);</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>dimension<sp/>in<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array<sp/>=<sp/>ml_array_alloc(Format,<sp/>Degree<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Dimension<sp/>=<sp/>Array-&gt;Dimensions<sp/>+<sp/>Degree;</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/>Dimension-&gt;Stride<sp/>=<sp/>MLArraySizes[Format];</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Array;</highlight></codeline>
<codeline lineno="4958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"></highlight></codeline>
<codeline lineno="4960"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_array_of_fill(ml_array_format_t<sp/>Format,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Dimension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_array_of_fill)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Value),<sp/>ml_array_of_fill);</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(function)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(Format,<sp/>Dimension,<sp/>Address,<sp/>Degree,<sp/>Value);</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Inconsistent<sp/>depth<sp/>in<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Format)<sp/>{</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_NONE:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:<sp/>*(uint8_t<sp/>*)Address<sp/>=<sp/>ml_integer_value(Value);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:<sp/>*(int8_t<sp/>*)Address<sp/>=<sp/>ml_integer_value(Value);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:<sp/>*(uint16_t<sp/>*)Address<sp/>=<sp/>ml_integer_value(Value);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:<sp/>*(int16_t<sp/>*)Address<sp/>=<sp/>ml_integer_value(Value);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:<sp/>*(uint32_t<sp/>*)Address<sp/>=<sp/>ml_integer_value(Value);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:<sp/>*(int32_t<sp/>*)Address<sp/>=<sp/>ml_integer_value(Value);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:<sp/>*(uint64_t<sp/>*)Address<sp/>=<sp/>ml_integer_value(Value);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:<sp/>*(int64_t<sp/>*)Address<sp/>=<sp/>ml_integer_value(Value);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:<sp/>*(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)Address<sp/>=<sp/>ml_real_value(Value);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:<sp/>*(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)Address<sp/>=<sp/>ml_real_value(Value);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:<sp/>*(complex_float<sp/>*)Address<sp/>=<sp/>ml_complex_value(Value);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:<sp/>*(complex_double<sp/>*)Address<sp/>=<sp/>ml_complex_value(Value);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_ANY:<sp/>*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)Address<sp/>=<sp/>Value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4983"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"></highlight></codeline>
<codeline lineno="4985"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_array_of_fill,<sp/>MLListT,<sp/>ml_array_format_t<sp/>Format,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Dimension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Inconsistent<sp/>depth<sp/>in<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_list_length(Value)<sp/>!=<sp/>Dimension-&gt;Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Inconsistent<sp/>lengths<sp/>in<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Value,<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error<sp/>=<sp/>ml_array_of_fill(Format,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address,<sp/>Degree<sp/>-<sp/>1,<sp/>Iter-&gt;Value);</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4994"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"></highlight></codeline>
<codeline lineno="4996"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_array_of_fill,<sp/>MLTupleT,<sp/>ml_array_format_t<sp/>Format,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Dimension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Inconsistent<sp/>depth<sp/>in<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_tuple_size(Value)<sp/>!=<sp/>Dimension-&gt;Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Inconsistent<sp/>lengths<sp/>in<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Tuple<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Tuple-&gt;Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error<sp/>=<sp/>ml_array_of_fill(Format,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address,<sp/>Degree<sp/>-<sp/>1,<sp/>Tuple-&gt;Values[I]);</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"></highlight></codeline>
<codeline lineno="5008"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_array_of_fill,<sp/>MLArrayT,<sp/>ml_array_format_t<sp/>Format,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Dimension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Degree<sp/>!=<sp/>Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Incompatible<sp/>assignment<sp/>(%d)&quot;</highlight><highlight class="normal">,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Degree;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Dimension[I].Size<sp/>!=<sp/>Source-&gt;Dimensions[I].Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Incompatible<sp/>assignment<sp/>(%d)&quot;</highlight><highlight class="normal">,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/><sp/><sp/>update_row_fn_t<sp/>Update<sp/>=<sp/>UpdateSetRowFns[Format<sp/>*<sp/>MAX_FORMATS<sp/>+<sp/>Source-&gt;Format];</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/><sp/><sp/>update_array(Update,<sp/>Dimension,<sp/>Address,<sp/>Degree,<sp/>Source-&gt;Dimensions,<sp/>Source-&gt;Base.Value);</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5017"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"></highlight></codeline>
<codeline lineno="5019"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_array_of_fill,<sp/>MLIntegerRangeT,<sp/>ml_array_format_t<sp/>Format,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Dimension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree,<sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range)<sp/>{</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Inconsistent<sp/>depth<sp/>in<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Diff<sp/>=<sp/>Range-&gt;Limit<sp/>-<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Range-&gt;Step)<sp/>{</highlight></codeline>
<codeline lineno="5024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Count<sp/>=<sp/>Dimension-&gt;Size;</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Diff<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>Range-&gt;Step<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Inconsistent<sp/>lengths<sp/>in<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Diff<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>Range-&gt;Step<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Inconsistent<sp/>lengths<sp/>in<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Count<sp/>=<sp/>Diff<sp/>/<sp/>Range-&gt;Step<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>&lt;<sp/>Dimension-&gt;Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Inconsistent<sp/>lengths<sp/>in<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>&gt;<sp/>Dimension-&gt;Size)<sp/>Count<sp/>=<sp/>Dimension-&gt;Size;</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Value<sp/>=<sp/>Range-&gt;Start,<sp/>Step<sp/>=<sp/>Range-&gt;Step;</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Format)<sp/>{</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_NONE:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:<sp/>{</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(uint8_t<sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5044"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:<sp/>{</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(int8_t<sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:<sp/>{</highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(uint16_t<sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:<sp/>{</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(int16_t<sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:<sp/>{</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(uint32_t<sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:<sp/>{</highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(int32_t<sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5084"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:<sp/>{</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(uint64_t<sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5092"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:<sp/>{</highlight></codeline>
<codeline lineno="5094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(int64_t<sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:<sp/>{</highlight></codeline>
<codeline lineno="5102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:<sp/>{</highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:<sp/>{</highlight></codeline>
<codeline lineno="5119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(complex_float<sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:<sp/>{</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(complex_double<sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_ANY:<sp/>{</highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)Address<sp/>=<sp/>ml_integer(Value);</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"></highlight></codeline>
<codeline lineno="5147"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_array_of_fill,<sp/>MLRealRangeT,<sp/>ml_array_format_t<sp/>Format,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Dimension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree,<sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range)<sp/>{</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Inconsistent<sp/>depth<sp/>in<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>ml_real_range_count(Range);</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>!=<sp/>Dimension-&gt;Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Inconsistent<sp/>lengths<sp/>in<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Value<sp/>=<sp/>Range-&gt;Start,<sp/>Step<sp/>=<sp/>Range-&gt;Step;</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Format)<sp/>{</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_NONE:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:<sp/>{</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(uint8_t<sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:<sp/>{</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(int8_t<sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:<sp/>{</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(uint16_t<sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:<sp/>{</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(int16_t<sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:<sp/>{</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(uint32_t<sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:<sp/>{</highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(int32_t<sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:<sp/>{</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(uint64_t<sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5207" refid="structml__array__apply__state__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:<sp/>{</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(int64_t<sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:<sp/>{</highlight></codeline>
<codeline lineno="5219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:<sp/>{</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:<sp/>{</highlight></codeline>
<codeline lineno="5236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(complex_float<sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:<sp/>{</highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(complex_double<sp/>*)Address<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="5246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_ANY:<sp/>{</highlight></codeline>
<codeline lineno="5253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)Address<sp/>=<sp/>ml_integer(Value);</highlight></codeline>
<codeline lineno="5255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>Step;</highlight></codeline>
<codeline lineno="5256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"></highlight></codeline>
<codeline lineno="5264"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_array_of_fn(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Source<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_array_format_t<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_NONE;</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLTypeT);</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ml_array_format((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[0]);</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Format<sp/>==<sp/>ML_ARRAY_FORMAT_NONE)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>type<sp/>for<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Source<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ml_array_of_type_guess(Args[0],<sp/>ML_ARRAY_FORMAT_NONE);</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array<sp/>=<sp/>ml_array_of_create(Source,<sp/>0,<sp/>Format);</highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Array-&gt;Base.Type<sp/>==<sp/>MLErrorT)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Array;</highlight></codeline>
<codeline lineno="5278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>Array-&gt;Degree;</highlight></codeline>
<codeline lineno="5279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Dimensions<sp/>=<sp/>Array-&gt;Dimensions;</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Dimensions-&gt;Size<sp/>*<sp/>Dimensions-&gt;Stride;</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Address<sp/>=<sp/>Array-&gt;Base.Value<sp/>=<sp/>array_alloc(Format,<sp/>Size);</highlight></codeline>
<codeline lineno="5282"><highlight class="normal"><sp/><sp/><sp/><sp/>Array-&gt;Base.Length<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="5283"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error<sp/>=<sp/>ml_array_of_fill(Array-&gt;Format,<sp/>Dimensions,<sp/>Address,<sp/>Degree,<sp/>Source);</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error<sp/>?:<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Array;</highlight></codeline>
<codeline lineno="5285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"></highlight></codeline>
<codeline lineno="5287"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;copy&quot;</highlight><highlight class="normal">,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="5288"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5289"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>new<sp/>array<sp/>with<sp/>the<sp/>same<sp/>values<sp/>of<sp/>:mini:`Array`<sp/>but<sp/>not<sp/>sharing<sp/>the<sp/>underlying<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="5292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Degree<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Source;</highlight></codeline>
<codeline lineno="5293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(Source-&gt;Format,<sp/>Source-&gt;Degree);</highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/><sp/><sp/>array_copy(Target,<sp/>Source);</highlight></codeline>
<codeline lineno="5295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="5296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5297"><highlight class="normal"></highlight></codeline>
<codeline lineno="5298"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;copy&quot;</highlight><highlight class="normal">,<sp/>MLVisitorT,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref><sp/>*Visitor<sp/>=<sp/>(<ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Degree<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Source;</highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(Source-&gt;Format,<sp/>Source-&gt;Degree);</highlight></codeline>
<codeline lineno="5303"><highlight class="normal"><sp/><sp/><sp/><sp/>inthash_insert(Visitor-&gt;Cache,<sp/>(uintptr_t)Source,<sp/>Target);</highlight></codeline>
<codeline lineno="5304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Format<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/>{</highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_copy(Target,<sp/>Source);</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Use<sp/>Visitor<sp/>to<sp/>make<sp/>a<sp/>copy<sp/>of<sp/>each<sp/>value<sp/>in<sp/>Target.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_copy(Target,<sp/>Source);</highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="5311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"></highlight></codeline>
<codeline lineno="5313"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;const&quot;</highlight><highlight class="normal">,<sp/>MLVisitorT,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref><sp/>*Visitor<sp/>=<sp/>(<ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Degree<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Source;</highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(Source-&gt;Format,<sp/>Source-&gt;Degree);</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Target-&gt;Degree)<sp/>{</highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>Target-&gt;Base.Type<sp/>=<sp/>MLVectorTypes[Target-&gt;Format];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/>Target-&gt;Base.Type<sp/>=<sp/>MLMatrixTypes[Target-&gt;Format];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>Target-&gt;Base.Type<sp/>=<sp/>MLArrayTypes[Target-&gt;Format];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5323"><highlight class="normal"><sp/><sp/><sp/><sp/>inthash_insert(Visitor-&gt;Cache,<sp/>(uintptr_t)Source,<sp/>Target);</highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Format<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/>{</highlight></codeline>
<codeline lineno="5325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_copy(Target,<sp/>Source);</highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Use<sp/>Visitor<sp/>to<sp/>make<sp/>a<sp/>copy<sp/>of<sp/>each<sp/>value<sp/>in<sp/>Target.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_copy(Target,<sp/>Source);</highlight></codeline>
<codeline lineno="5329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="5331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5332"><highlight class="normal"></highlight></codeline>
<codeline lineno="5333"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5334"><highlight class="comment">ML_METHOD(&quot;$&quot;,<sp/>MLListT)<sp/>{</highlight></codeline>
<codeline lineno="5335"><highlight class="comment">//&lt;List</highlight></codeline>
<codeline lineno="5336"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="5337"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>with<sp/>the<sp/>contents<sp/>of<sp/>:mini:`List`.</highlight></codeline>
<codeline lineno="5338"><highlight class="comment">}</highlight></codeline>
<codeline lineno="5339"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5340"><highlight class="normal"></highlight></codeline>
<codeline lineno="5341"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;^&quot;</highlight><highlight class="normal">,<sp/>MLListT)<sp/>{</highlight></codeline>
<codeline lineno="5342"><highlight class="normal"></highlight><highlight class="comment">//&lt;List</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5343"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>with<sp/>the<sp/>contents<sp/>of<sp/>:mini:`List`,<sp/>transposed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Source<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_array_format_t<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_NONE;</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/><sp/><sp/>Format<sp/>=<sp/>ml_array_of_type_guess(Args[0],<sp/>ML_ARRAY_FORMAT_NONE);</highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array<sp/>=<sp/>ml_array_of_create(Source,<sp/>1,<sp/>Format);</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Array-&gt;Base.Type<sp/>==<sp/>MLErrorT)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Array;</highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>Array-&gt;Degree;</highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Dimensions<sp/>=<sp/>Array-&gt;Dimensions;</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Array-&gt;Degree;<sp/>++I)<sp/>Dimensions[I<sp/>-<sp/>1]<sp/>=<sp/>Dimensions[I];</highlight></codeline>
<codeline lineno="5353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Dimensions-&gt;Size<sp/>*<sp/>Dimensions-&gt;Stride;</highlight></codeline>
<codeline lineno="5354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Address<sp/>=<sp/>Array-&gt;Base.Value<sp/>=<sp/>array_alloc(Format,<sp/>Size);</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error<sp/>=<sp/>ml_array_of_fill(Array-&gt;Format,<sp/>Dimensions,<sp/>Address,<sp/>Degree<sp/>-<sp/>1,<sp/>Source);</highlight></codeline>
<codeline lineno="5356" refid="structml__array__update__state__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/>Array-&gt;Dimensions[Degree<sp/>-<sp/>1].Size<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error<sp/>?:<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Array;</highlight></codeline>
<codeline lineno="5358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5359"><highlight class="normal"></highlight></codeline>
<codeline lineno="5360"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Values;</highlight></codeline>
<codeline lineno="5364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int8_t<sp/>*I8;</highlight></codeline>
<codeline lineno="5365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*U8;</highlight></codeline>
<codeline lineno="5366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/>*I16;</highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>*U16;</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>*I32;</highlight></codeline>
<codeline lineno="5369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*U32;</highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>*I64;</highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>*U64;</highlight></codeline>
<codeline lineno="5372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*F32;</highlight></codeline>
<codeline lineno="5373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*F64;</highlight></codeline>
<codeline lineno="5374"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex_float<sp/>*C32;</highlight></codeline>
<codeline lineno="5376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex_double<sp/>*C64;</highlight></codeline>
<codeline lineno="5377"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Any;</highlight></codeline>
<codeline lineno="5379"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5380"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function;</highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Array;</highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[1];</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Remaining;</highlight></codeline>
<codeline lineno="5384"><highlight class="normal">}<sp/><ref refid="structml__array__apply__state__t" kindref="compound">ml_array_apply_state_t</ref>;</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"></highlight></codeline>
<codeline lineno="5386"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARRAY_APPLY(NAME,<sp/>CTYPE,<sp/>TO_VAL,<sp/>TO_NUM)<sp/>\</highlight></codeline>
<codeline lineno="5387"><highlight class="preprocessor">static<sp/>void<sp/>ml_array_apply_<sp/>##<sp/>CTYPE(ml_array_apply_state_t<sp/>*State,<sp/>ml_value_t<sp/>*Value)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5388"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);<sp/>\</highlight></codeline>
<codeline lineno="5389"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>*State-&gt;NAME++<sp/>=<sp/>TO_NUM(Value);<sp/>\</highlight></codeline>
<codeline lineno="5390"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(--State-&gt;Remaining)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5391"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>TO_VAL(*State-&gt;NAME);<sp/>\</highlight></codeline>
<codeline lineno="5392"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_call(State,<sp/>State-&gt;Function,<sp/>1,<sp/>State-&gt;Args);<sp/>\</highlight></codeline>
<codeline lineno="5393"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5394"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State-&gt;Array);<sp/>\</highlight></codeline>
<codeline lineno="5395"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5396"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5397"><highlight class="normal"></highlight></codeline>
<codeline lineno="5398"><highlight class="normal">ARRAY_APPLY(U8,<sp/>uint8_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5399"><highlight class="normal">ARRAY_APPLY(I8,<sp/>int8_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5400"><highlight class="normal">ARRAY_APPLY(U16,<sp/>uint16_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5401"><highlight class="normal">ARRAY_APPLY(I16,<sp/>int16_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5402"><highlight class="normal">ARRAY_APPLY(U32,<sp/>uint32_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5403"><highlight class="normal">ARRAY_APPLY(I32,<sp/>int32_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5404"><highlight class="normal">ARRAY_APPLY(U64,<sp/>uint64_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5405"><highlight class="normal">ARRAY_APPLY(I64,<sp/>int64_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5406"><highlight class="normal">ARRAY_APPLY(F32,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>ml_real,<sp/>ml_real_value);</highlight></codeline>
<codeline lineno="5407"><highlight class="normal">ARRAY_APPLY(F64,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>ml_real,<sp/>ml_real_value);</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"></highlight></codeline>
<codeline lineno="5409"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5410"><highlight class="normal"></highlight></codeline>
<codeline lineno="5411"><highlight class="normal">ARRAY_APPLY(C32,<sp/>complex_float,<sp/>ml_complex,<sp/>ml_complex_value);</highlight></codeline>
<codeline lineno="5412"><highlight class="normal">ARRAY_APPLY(C64,<sp/>complex_double,<sp/>ml_complex,<sp/>ml_complex_value);</highlight></codeline>
<codeline lineno="5413"><highlight class="normal"></highlight></codeline>
<codeline lineno="5414"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5415"><highlight class="normal"></highlight></codeline>
<codeline lineno="5416"><highlight class="normal">ARRAY_APPLY(Any,<sp/><ref refid="structml__value__t" kindref="compound">any</ref>,<sp/>,<sp/>);</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"></highlight></codeline>
<codeline lineno="5418"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;copy&quot;</highlight><highlight class="normal">,<sp/>MLArrayT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5420"><highlight class="normal"></highlight><highlight class="comment">//&lt;Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5421"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5422"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>new<sp/>array<sp/>with<sp/>the<sp/>results<sp/>of<sp/>applying<sp/>:mini:`Function`<sp/>to<sp/>each<sp/>value<sp/>of<sp/>:mini:`Array`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>A-&gt;Degree;</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree<sp/>==<sp/>-1)<sp/>ML_RETURN(A);</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*C<sp/>=<sp/>ml_array_alloc(A-&gt;Format,<sp/>Degree);</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Remaining<sp/>=<sp/>array_copy(C,<sp/>A)<sp/>/<sp/>MLArraySizes[C-&gt;Format];</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Remaining<sp/>==<sp/>0)<sp/>ML_RETURN(C);</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__apply__state__t" kindref="compound">ml_array_apply_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__array__apply__state__t" kindref="compound">ml_array_apply_state_t</ref>);</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="5431"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>State-&gt;Function<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="5433"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Remaining<sp/>=<sp/>Remaining;</highlight></codeline>
<codeline lineno="5434"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values<sp/>=<sp/>C-&gt;Base.Value;</highlight></codeline>
<codeline lineno="5435"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Array<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="5436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(C-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="5437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:<sp/>{</highlight></codeline>
<codeline lineno="5438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_apply_uint8_t;</highlight></codeline>
<codeline lineno="5439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*State-&gt;U8);</highlight></codeline>
<codeline lineno="5440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:<sp/>{</highlight></codeline>
<codeline lineno="5443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_apply_int8_t;</highlight></codeline>
<codeline lineno="5444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*State-&gt;I8);</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:<sp/>{</highlight></codeline>
<codeline lineno="5448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_apply_uint16_t;</highlight></codeline>
<codeline lineno="5449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*State-&gt;U16);</highlight></codeline>
<codeline lineno="5450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5451"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:<sp/>{</highlight></codeline>
<codeline lineno="5453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_apply_int16_t;</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*State-&gt;I16);</highlight></codeline>
<codeline lineno="5455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:<sp/>{</highlight></codeline>
<codeline lineno="5458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_apply_uint32_t;</highlight></codeline>
<codeline lineno="5459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*State-&gt;U32);</highlight></codeline>
<codeline lineno="5460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:<sp/>{</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_apply_int32_t;</highlight></codeline>
<codeline lineno="5464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*State-&gt;I32);</highlight></codeline>
<codeline lineno="5465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:<sp/>{</highlight></codeline>
<codeline lineno="5468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_apply_uint64_t;</highlight></codeline>
<codeline lineno="5469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*State-&gt;U64);</highlight></codeline>
<codeline lineno="5470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5471"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:<sp/>{</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_apply_int64_t;</highlight></codeline>
<codeline lineno="5474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*State-&gt;I64);</highlight></codeline>
<codeline lineno="5475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:<sp/>{</highlight></codeline>
<codeline lineno="5478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_apply_float;</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_real(*State-&gt;F32);</highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:<sp/>{</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_apply_double;</highlight></codeline>
<codeline lineno="5484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_real(*State-&gt;F64);</highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:<sp/>{</highlight></codeline>
<codeline lineno="5489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_apply_complex_float;</highlight></codeline>
<codeline lineno="5490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_complex(*State-&gt;C32);</highlight></codeline>
<codeline lineno="5491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:<sp/>{</highlight></codeline>
<codeline lineno="5494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_apply_complex_double;</highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_complex(*State-&gt;C64);</highlight></codeline>
<codeline lineno="5496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_ANY:<sp/>{</highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_apply_any;</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>*State-&gt;Any;</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="5507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5508"><highlight class="normal"></highlight></codeline>
<codeline lineno="5509"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5510" refid="structml__array__where__state__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="5511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Address;</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function;</highlight></codeline>
<codeline lineno="5513"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array;</highlight></codeline>
<codeline lineno="5514"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[1];</highlight></codeline>
<codeline lineno="5515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree;</highlight></codeline>
<codeline lineno="5516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Indices[];</highlight></codeline>
<codeline lineno="5517"><highlight class="normal">}<sp/><ref refid="structml__array__update__state__t" kindref="compound">ml_array_update_state_t</ref>;</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"></highlight></codeline>
<codeline lineno="5519"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARRAY_UPDATE(CTYPE,<sp/>TO_VAL,<sp/>TO_NUM)<sp/>\</highlight></codeline>
<codeline lineno="5520"><highlight class="preprocessor">static<sp/>void<sp/>ml_array_update_<sp/>##<sp/>CTYPE(ml_array_update_state_t<sp/>*State,<sp/>ml_value_t<sp/>*Value)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5521"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);<sp/>\</highlight></codeline>
<codeline lineno="5522"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>*(CTYPE<sp/>*)State-&gt;Address<sp/>=<sp/>TO_NUM(Value);<sp/>\</highlight></codeline>
<codeline lineno="5523"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>State-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="5524"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>State-&gt;Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5525"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_dimension_t<sp/>*Dimension<sp/>=<sp/>State-&gt;Array-&gt;Dimensions<sp/>+<sp/>I;<sp/>\</highlight></codeline>
<codeline lineno="5526"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Index<sp/>=<sp/>Indices[I];<sp/>\</highlight></codeline>
<codeline lineno="5527"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Index<sp/>+<sp/>1<sp/>&lt;<sp/>Dimension-&gt;Size)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5528"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5529"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>+=<sp/>(Dimension-&gt;Indices[Index<sp/>+<sp/>1]<sp/>-<sp/>Dimension-&gt;Indices[Index])<sp/>*<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="5530"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5531"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>+=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="5532"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5533"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Indices[I]<sp/>=<sp/>Index<sp/>+<sp/>1;<sp/>\</highlight></codeline>
<codeline lineno="5534"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>TO_VAL(*(CTYPE<sp/>*)State-&gt;Address);<sp/>\</highlight></codeline>
<codeline lineno="5535"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_call(State,<sp/>State-&gt;Function,<sp/>1,<sp/>State-&gt;Args);<sp/>\</highlight></codeline>
<codeline lineno="5536"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5537"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5538"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>-=<sp/>(Dimension-&gt;Indices[Index]<sp/>-<sp/>Dimension-&gt;Indices[0])<sp/>*<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="5539"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5540"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>-=<sp/>Index<sp/>*<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="5541"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5542"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Indices[I]<sp/>=<sp/>0;<sp/>\</highlight></codeline>
<codeline lineno="5543"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5544"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5545"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State-&gt;Array);<sp/>\</highlight></codeline>
<codeline lineno="5546"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5547"><highlight class="normal"></highlight></codeline>
<codeline lineno="5548"><highlight class="normal">ARRAY_UPDATE(uint8_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5549"><highlight class="normal">ARRAY_UPDATE(int8_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5550"><highlight class="normal">ARRAY_UPDATE(uint16_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5551"><highlight class="normal">ARRAY_UPDATE(int16_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5552"><highlight class="normal">ARRAY_UPDATE(uint32_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5553"><highlight class="normal">ARRAY_UPDATE(int32_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5554"><highlight class="normal">ARRAY_UPDATE(uint64_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5555"><highlight class="normal">ARRAY_UPDATE(int64_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5556"><highlight class="normal">ARRAY_UPDATE(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>ml_real,<sp/>ml_real_value);</highlight></codeline>
<codeline lineno="5557"><highlight class="normal">ARRAY_UPDATE(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>ml_real,<sp/>ml_real_value);</highlight></codeline>
<codeline lineno="5558"><highlight class="normal"></highlight></codeline>
<codeline lineno="5559"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5560"><highlight class="normal"></highlight></codeline>
<codeline lineno="5561"><highlight class="normal">ARRAY_UPDATE(complex_float,<sp/>ml_complex,<sp/>ml_complex_value);</highlight></codeline>
<codeline lineno="5562"><highlight class="normal">ARRAY_UPDATE(complex_double,<sp/>ml_complex,<sp/>ml_complex_value);</highlight></codeline>
<codeline lineno="5563"><highlight class="normal"></highlight></codeline>
<codeline lineno="5564"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5565"><highlight class="normal"></highlight></codeline>
<codeline lineno="5566"><highlight class="normal">ARRAY_UPDATE(<ref refid="structml__value__t" kindref="compound">any</ref>,<sp/>,<sp/>);</highlight></codeline>
<codeline lineno="5567"><highlight class="normal"></highlight></codeline>
<codeline lineno="5568"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;update&quot;</highlight><highlight class="normal">,<sp/>MLArrayMutableT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="5569"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5570"><highlight class="normal"></highlight><highlight class="comment">//&lt;Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5571"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5572"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>values<sp/>in<sp/>:mini:`Array`<sp/>in<sp/>place<sp/>by<sp/>applying<sp/>:mini:`Function`<sp/>to<sp/>each<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5573"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="5574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>A-&gt;Degree;</highlight></codeline>
<codeline lineno="5575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree<sp/>==<sp/>-1)<sp/>ML_RETURN(A);</highlight></codeline>
<codeline lineno="5576"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__update__state__t" kindref="compound">ml_array_update_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__array__update__state__t" kindref="compound">ml_array_update_state_t</ref>,<sp/>Degree,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5577"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="5579"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>State-&gt;Function<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Array<sp/>=<sp/>A;</highlight></codeline>
<codeline lineno="5581"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Degree<sp/>=<sp/>Degree;</highlight></codeline>
<codeline lineno="5582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Address<sp/>=<sp/>A-&gt;Base.Value;</highlight></codeline>
<codeline lineno="5583"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Dimension<sp/>=<sp/>A-&gt;Dimensions;</highlight></codeline>
<codeline lineno="5584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Degree;<sp/>++I,<sp/>++Dimension)<sp/>{</highlight></codeline>
<codeline lineno="5585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Dimension-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="5586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Indices[0]<sp/>*<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5588"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5589"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>=<sp/>Address;</highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(A-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:<sp/>{</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_update_uint8_t;</highlight></codeline>
<codeline lineno="5593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*(uint8_t<sp/>*)Address);</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5595"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:<sp/>{</highlight></codeline>
<codeline lineno="5597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_update_int8_t;</highlight></codeline>
<codeline lineno="5598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*(int8_t<sp/>*)Address);</highlight></codeline>
<codeline lineno="5599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5600"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:<sp/>{</highlight></codeline>
<codeline lineno="5602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_update_uint16_t;</highlight></codeline>
<codeline lineno="5603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*(uint16_t<sp/>*)Address);</highlight></codeline>
<codeline lineno="5604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5605"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:<sp/>{</highlight></codeline>
<codeline lineno="5607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_update_int16_t;</highlight></codeline>
<codeline lineno="5608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*(int16_t<sp/>*)Address);</highlight></codeline>
<codeline lineno="5609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:<sp/>{</highlight></codeline>
<codeline lineno="5612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_update_uint32_t;</highlight></codeline>
<codeline lineno="5613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*(uint32_t<sp/>*)Address);</highlight></codeline>
<codeline lineno="5614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5615"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:<sp/>{</highlight></codeline>
<codeline lineno="5617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_update_int32_t;</highlight></codeline>
<codeline lineno="5618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*(int32_t<sp/>*)Address);</highlight></codeline>
<codeline lineno="5619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:<sp/>{</highlight></codeline>
<codeline lineno="5622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_update_uint64_t;</highlight></codeline>
<codeline lineno="5623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*(uint64_t<sp/>*)Address);</highlight></codeline>
<codeline lineno="5624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:<sp/>{</highlight></codeline>
<codeline lineno="5627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_update_int64_t;</highlight></codeline>
<codeline lineno="5628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*(int64_t<sp/>*)Address);</highlight></codeline>
<codeline lineno="5629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5630"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:<sp/>{</highlight></codeline>
<codeline lineno="5632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_update_float;</highlight></codeline>
<codeline lineno="5633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_real(*(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)Address);</highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:<sp/>{</highlight></codeline>
<codeline lineno="5637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_update_double;</highlight></codeline>
<codeline lineno="5638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_real(*(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)Address);</highlight></codeline>
<codeline lineno="5639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5640"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5641"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:<sp/>{</highlight></codeline>
<codeline lineno="5643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_update_complex_float;</highlight></codeline>
<codeline lineno="5644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_complex(*(complex_float<sp/>*)Address);</highlight></codeline>
<codeline lineno="5645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:<sp/>{</highlight></codeline>
<codeline lineno="5648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_update_complex_double;</highlight></codeline>
<codeline lineno="5649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_complex(*(complex_double<sp/>*)Address);</highlight></codeline>
<codeline lineno="5650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5651"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5652"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_ANY:<sp/>{</highlight></codeline>
<codeline lineno="5654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_update_any;</highlight></codeline>
<codeline lineno="5655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)Address;</highlight></codeline>
<codeline lineno="5656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5657"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5659"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="5661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5662"><highlight class="normal"></highlight></codeline>
<codeline lineno="5663"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5664"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="5665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Address;</highlight></codeline>
<codeline lineno="5666"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function;</highlight></codeline>
<codeline lineno="5667"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array;</highlight></codeline>
<codeline lineno="5668"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[1];</highlight></codeline>
<codeline lineno="5669"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result;</highlight></codeline>
<codeline lineno="5670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree;</highlight></codeline>
<codeline lineno="5671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Indices[];</highlight></codeline>
<codeline lineno="5672"><highlight class="normal">}<sp/><ref refid="structml__array__where__state__t" kindref="compound">ml_array_where_state_t</ref>;</highlight></codeline>
<codeline lineno="5673"><highlight class="normal"></highlight></codeline>
<codeline lineno="5674"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARRAY_WHERE(CTYPE,<sp/>TO_VAL,<sp/>TO_NUM)<sp/>\</highlight></codeline>
<codeline lineno="5675"><highlight class="preprocessor">static<sp/>void<sp/>ml_array_where_<sp/>##<sp/>CTYPE(ml_array_where_state_t<sp/>*State,<sp/>ml_value_t<sp/>*Value)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5676"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);<sp/>\</highlight></codeline>
<codeline lineno="5677"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Value<sp/>!=<sp/>MLNil)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5678" refid="structml__array__where__nonzero__t" refkind="compound"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Degree<sp/>=<sp/>State-&gt;Array-&gt;Degree;<sp/>\</highlight></codeline>
<codeline lineno="5679"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Degree<sp/>&gt;<sp/>1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5680"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_value_t<sp/>*Index<sp/>=<sp/>ml_tuple(Degree);<sp/>\</highlight></codeline>
<codeline lineno="5681"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>J<sp/>=<sp/>1;<sp/>J<sp/>&lt;<sp/>Degree;<sp/>++J)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5682"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((ml_tuple_t<sp/>*)Index)-&gt;Values[J]<sp/>=<sp/>ml_integer(State-&gt;Indices[J]<sp/>+<sp/>1);<sp/>\</highlight></codeline>
<codeline lineno="5683"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5684"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Index,<sp/>1,<sp/>ml_integer(State-&gt;Indices[0]<sp/>+<sp/>1));<sp/>\</highlight></codeline>
<codeline lineno="5685"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(State-&gt;Result,<sp/>Index);<sp/>\</highlight></codeline>
<codeline lineno="5686"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5687"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(State-&gt;Result,<sp/>ml_integer(State-&gt;Indices[0]<sp/>+<sp/>1));<sp/>\</highlight></codeline>
<codeline lineno="5688"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5689"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5690"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>State-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="5691"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>State-&gt;Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5692"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_dimension_t<sp/>*Dimension<sp/>=<sp/>State-&gt;Array-&gt;Dimensions<sp/>+<sp/>I;<sp/>\</highlight></codeline>
<codeline lineno="5693"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Index<sp/>=<sp/>Indices[I];<sp/>\</highlight></codeline>
<codeline lineno="5694"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Index<sp/>+<sp/>1<sp/>&lt;<sp/>Dimension-&gt;Size)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5695"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5696"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>+=<sp/>(Dimension-&gt;Indices[Index<sp/>+<sp/>1]<sp/>-<sp/>Dimension-&gt;Indices[Index])<sp/>*<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="5697"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5698"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>+=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="5699"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5700"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Indices[I]<sp/>=<sp/>Index<sp/>+<sp/>1;<sp/>\</highlight></codeline>
<codeline lineno="5701"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>TO_VAL(*(CTYPE<sp/>*)State-&gt;Address);<sp/>\</highlight></codeline>
<codeline lineno="5702"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_call(State,<sp/>State-&gt;Function,<sp/>1,<sp/>State-&gt;Args);<sp/>\</highlight></codeline>
<codeline lineno="5703"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5704"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5705"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>-=<sp/>(Dimension-&gt;Indices[Index]<sp/>-<sp/>Dimension-&gt;Indices[0])<sp/>*<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="5706"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5707"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>-=<sp/>Index<sp/>*<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="5708"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5709"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Indices[I]<sp/>=<sp/>0;<sp/>\</highlight></codeline>
<codeline lineno="5710"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5711"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5712"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State-&gt;Result);<sp/>\</highlight></codeline>
<codeline lineno="5713"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5714"><highlight class="normal"></highlight></codeline>
<codeline lineno="5715"><highlight class="normal">ARRAY_WHERE(uint8_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5716"><highlight class="normal">ARRAY_WHERE(int8_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5717"><highlight class="normal">ARRAY_WHERE(uint16_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5718"><highlight class="normal">ARRAY_WHERE(int16_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5719"><highlight class="normal">ARRAY_WHERE(uint32_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5720"><highlight class="normal">ARRAY_WHERE(int32_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5721"><highlight class="normal">ARRAY_WHERE(uint64_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5722"><highlight class="normal">ARRAY_WHERE(int64_t,<sp/>ml_integer,<sp/>ml_integer_value);</highlight></codeline>
<codeline lineno="5723"><highlight class="normal">ARRAY_WHERE(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>ml_real,<sp/>ml_real_value);</highlight></codeline>
<codeline lineno="5724"><highlight class="normal">ARRAY_WHERE(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>ml_real,<sp/>ml_real_value);</highlight></codeline>
<codeline lineno="5725"><highlight class="normal"></highlight></codeline>
<codeline lineno="5726"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5727"><highlight class="normal"></highlight></codeline>
<codeline lineno="5728"><highlight class="normal">ARRAY_WHERE(complex_float,<sp/>ml_complex,<sp/>ml_complex_value);</highlight></codeline>
<codeline lineno="5729"><highlight class="normal">ARRAY_WHERE(complex_double,<sp/>ml_complex,<sp/>ml_complex_value);</highlight></codeline>
<codeline lineno="5730"><highlight class="normal"></highlight></codeline>
<codeline lineno="5731"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5732"><highlight class="normal"></highlight></codeline>
<codeline lineno="5733"><highlight class="normal">ARRAY_WHERE(<ref refid="structml__value__t" kindref="compound">any</ref>,<sp/>,<sp/>);</highlight></codeline>
<codeline lineno="5734"><highlight class="normal"></highlight></codeline>
<codeline lineno="5735"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;where&quot;</highlight><highlight class="normal">,<sp/>MLArrayT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="5736"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5737"><highlight class="normal"></highlight><highlight class="comment">//&lt;Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5738"><highlight class="normal"></highlight><highlight class="comment">//&gt;list[tuple]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5739"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>list<sp/>of<sp/>indices<sp/>:mini:`Array`<sp/>where<sp/>:mini:`Function(Array/i)`<sp/>returns<sp/>a<sp/>non-nil<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5740"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="5741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>A-&gt;Degree;</highlight></codeline>
<codeline lineno="5742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree<sp/>==<sp/>-1)<sp/>ML_RETURN(ml_list());</highlight></codeline>
<codeline lineno="5743"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__where__state__t" kindref="compound">ml_array_where_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__array__where__state__t" kindref="compound">ml_array_where_state_t</ref>,<sp/>Degree,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5744"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="5745"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="5746"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>State-&gt;Function<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="5747"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Result<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="5748"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Array<sp/>=<sp/>A;</highlight></codeline>
<codeline lineno="5749"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Degree<sp/>=<sp/>Degree;</highlight></codeline>
<codeline lineno="5750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Address<sp/>=<sp/>A-&gt;Base.Value;</highlight></codeline>
<codeline lineno="5751"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Dimension<sp/>=<sp/>A-&gt;Dimensions;</highlight></codeline>
<codeline lineno="5752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Degree;<sp/>++I,<sp/>++Dimension)<sp/>{</highlight></codeline>
<codeline lineno="5753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Dimension-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="5754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Dimension-&gt;Indices[0]<sp/>*<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="5755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5756"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5757"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Address<sp/>=<sp/>Address;</highlight></codeline>
<codeline lineno="5758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(A-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="5759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:<sp/>{</highlight></codeline>
<codeline lineno="5760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_where_uint8_t;</highlight></codeline>
<codeline lineno="5761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*(uint8_t<sp/>*)Address);</highlight></codeline>
<codeline lineno="5762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:<sp/>{</highlight></codeline>
<codeline lineno="5765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_where_int8_t;</highlight></codeline>
<codeline lineno="5766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*(int8_t<sp/>*)Address);</highlight></codeline>
<codeline lineno="5767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:<sp/>{</highlight></codeline>
<codeline lineno="5770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_where_uint16_t;</highlight></codeline>
<codeline lineno="5771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*(uint16_t<sp/>*)Address);</highlight></codeline>
<codeline lineno="5772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5773"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:<sp/>{</highlight></codeline>
<codeline lineno="5775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_where_int16_t;</highlight></codeline>
<codeline lineno="5776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*(int16_t<sp/>*)Address);</highlight></codeline>
<codeline lineno="5777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:<sp/>{</highlight></codeline>
<codeline lineno="5780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_where_uint32_t;</highlight></codeline>
<codeline lineno="5781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*(uint32_t<sp/>*)Address);</highlight></codeline>
<codeline lineno="5782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:<sp/>{</highlight></codeline>
<codeline lineno="5785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_where_int32_t;</highlight></codeline>
<codeline lineno="5786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*(int32_t<sp/>*)Address);</highlight></codeline>
<codeline lineno="5787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5788"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:<sp/>{</highlight></codeline>
<codeline lineno="5790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_where_uint64_t;</highlight></codeline>
<codeline lineno="5791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*(uint64_t<sp/>*)Address);</highlight></codeline>
<codeline lineno="5792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5793"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:<sp/>{</highlight></codeline>
<codeline lineno="5795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_where_int64_t;</highlight></codeline>
<codeline lineno="5796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_integer(*(int64_t<sp/>*)Address);</highlight></codeline>
<codeline lineno="5797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5798"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:<sp/>{</highlight></codeline>
<codeline lineno="5800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_where_float;</highlight></codeline>
<codeline lineno="5801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_real(*(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)Address);</highlight></codeline>
<codeline lineno="5802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5803"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:<sp/>{</highlight></codeline>
<codeline lineno="5805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_where_double;</highlight></codeline>
<codeline lineno="5806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_real(*(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)Address);</highlight></codeline>
<codeline lineno="5807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5808"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5809"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:<sp/>{</highlight></codeline>
<codeline lineno="5811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_where_complex_float;</highlight></codeline>
<codeline lineno="5812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_complex(*(complex_float<sp/>*)Address);</highlight></codeline>
<codeline lineno="5813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5814"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:<sp/>{</highlight></codeline>
<codeline lineno="5816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_where_complex_double;</highlight></codeline>
<codeline lineno="5817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_complex(*(complex_double<sp/>*)Address);</highlight></codeline>
<codeline lineno="5818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5819"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5820"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_ANY:<sp/>{</highlight></codeline>
<codeline lineno="5822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_array_where_any;</highlight></codeline>
<codeline lineno="5823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)Address;</highlight></codeline>
<codeline lineno="5824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5825"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5827"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="5829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5830"><highlight class="normal"></highlight></codeline>
<codeline lineno="5831"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5832"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result;</highlight></codeline>
<codeline lineno="5833"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Indices;</highlight></codeline>
<codeline lineno="5834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree;</highlight></codeline>
<codeline lineno="5835"><highlight class="normal">}<sp/><ref refid="structml__array__where__nonzero__t" kindref="compound">ml_array_where_nonzero_t</ref>;</highlight></codeline>
<codeline lineno="5836"><highlight class="normal"></highlight></codeline>
<codeline lineno="5837"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARRAY_WHERE_NONZERO(CTYPE,<sp/>ZERO)<sp/>\</highlight></codeline>
<codeline lineno="5838"><highlight class="preprocessor">static<sp/>void<sp/>ml_array_where_nonzero_<sp/>##<sp/>CTYPE(ml_array_where_nonzero_t<sp/>*Where,<sp/>void<sp/>*Address,<sp/>int<sp/>Degree,<sp/>ml_array_dimension_t<sp/>*Dimension)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5839"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Degree<sp/>==<sp/>Where-&gt;Degree)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5840"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Size<sp/>=<sp/>Dimension-&gt;Size;<sp/>\</highlight></codeline>
<codeline lineno="5841"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="5842"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5843"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="5844"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5845"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*(CTYPE<sp/>*)(Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride)<sp/>!=<sp/>ZERO)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5846"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_value_t<sp/>*Index<sp/>=<sp/>ml_tuple(Where-&gt;Degree);<sp/>\</highlight></codeline>
<codeline lineno="5847"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>J<sp/>=<sp/>0;<sp/>J<sp/>&lt;<sp/>Where-&gt;Degree<sp/>-<sp/>1;<sp/>++J)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5848"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((ml_tuple_t<sp/>*)Index)-&gt;Values[J]<sp/>=<sp/>Where-&gt;Indices[J];<sp/>\</highlight></codeline>
<codeline lineno="5849"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5850"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Index,<sp/>Where-&gt;Degree,<sp/>ml_integer(I<sp/>+<sp/>1));<sp/>\</highlight></codeline>
<codeline lineno="5851"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Where-&gt;Result,<sp/>Index);<sp/>\</highlight></codeline>
<codeline lineno="5852"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5853"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5854"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5855"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5856"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*(CTYPE<sp/>*)(Address<sp/>+<sp/>I<sp/>*<sp/>Stride)<sp/>!=<sp/>ZERO)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5857"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_value_t<sp/>*Index<sp/>=<sp/>ml_tuple(Where-&gt;Degree);<sp/>\</highlight></codeline>
<codeline lineno="5858"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>J<sp/>=<sp/>0;<sp/>J<sp/>&lt;<sp/>Where-&gt;Degree<sp/>-<sp/>1;<sp/>++J)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5859"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((ml_tuple_t<sp/>*)Index)-&gt;Values[J]<sp/>=<sp/>Where-&gt;Indices[J];<sp/>\</highlight></codeline>
<codeline lineno="5860"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5861"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Index,<sp/>Where-&gt;Degree,<sp/>ml_integer(I<sp/>+<sp/>1));<sp/>\</highlight></codeline>
<codeline lineno="5862"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Where-&gt;Result,<sp/>Index);<sp/>\</highlight></codeline>
<codeline lineno="5863"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5864"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5865"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5866"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5867"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Size<sp/>=<sp/>Dimension-&gt;Size;<sp/>\</highlight></codeline>
<codeline lineno="5868"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="5869"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5870"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;\</highlight></codeline>
<codeline lineno="5871"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5872"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Where-&gt;Indices[Degree<sp/>-<sp/>1]<sp/>=<sp/>ml_integer(I<sp/>+<sp/>1);<sp/>\</highlight></codeline>
<codeline lineno="5873"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero_<sp/>##<sp/>CTYPE(Where,<sp/>Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride,<sp/>Degree<sp/>+<sp/>1,<sp/>Dimension<sp/>+<sp/>1);<sp/>\</highlight></codeline>
<codeline lineno="5874"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5875"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5876"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5877"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Where-&gt;Indices[Degree<sp/>-<sp/>1]<sp/>=<sp/>ml_integer(I<sp/>+<sp/>1);<sp/>\</highlight></codeline>
<codeline lineno="5878"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero_<sp/>##<sp/>CTYPE(Where,<sp/>Address<sp/>+<sp/>I<sp/>*<sp/>Stride,<sp/>Degree<sp/>+<sp/>1,<sp/>Dimension<sp/>+<sp/>1);<sp/>\</highlight></codeline>
<codeline lineno="5879"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5880"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5881"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5882"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="5883"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="5884"><highlight class="preprocessor">static<sp/>void<sp/>ml_array_where_nonzero1_<sp/>##<sp/>CTYPE(ml_value_t<sp/>*Result,<sp/>void<sp/>*Address,<sp/>ml_array_dimension_t<sp/>*Dimension)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5885"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Size<sp/>=<sp/>Dimension-&gt;Size;<sp/>\</highlight></codeline>
<codeline lineno="5886"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="5887"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(Dimension-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5888"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="5889"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5890"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*(CTYPE<sp/>*)(Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride)<sp/>!=<sp/>ZERO)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5891"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Result,<sp/>ml_integer(I<sp/>+<sp/>1));<sp/>\</highlight></codeline>
<codeline lineno="5892"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5893"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5894"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5895"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5896"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*(CTYPE<sp/>*)(Address<sp/>+<sp/>I<sp/>*<sp/>Stride)<sp/>!=<sp/>ZERO)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="5897"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Result,<sp/>ml_integer(I<sp/>+<sp/>1));<sp/>\</highlight></codeline>
<codeline lineno="5898"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5899"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5900"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="5901"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5902"><highlight class="normal"></highlight></codeline>
<codeline lineno="5903"><highlight class="normal">ARRAY_WHERE_NONZERO(uint8_t,<sp/>0);</highlight></codeline>
<codeline lineno="5904"><highlight class="normal">ARRAY_WHERE_NONZERO(int8_t,<sp/>0);</highlight></codeline>
<codeline lineno="5905"><highlight class="normal">ARRAY_WHERE_NONZERO(uint16_t,<sp/>0);</highlight></codeline>
<codeline lineno="5906"><highlight class="normal">ARRAY_WHERE_NONZERO(int16_t,<sp/>0);</highlight></codeline>
<codeline lineno="5907"><highlight class="normal">ARRAY_WHERE_NONZERO(uint32_t,<sp/>0);</highlight></codeline>
<codeline lineno="5908"><highlight class="normal">ARRAY_WHERE_NONZERO(int32_t,<sp/>0);</highlight></codeline>
<codeline lineno="5909"><highlight class="normal">ARRAY_WHERE_NONZERO(uint64_t,<sp/>0);</highlight></codeline>
<codeline lineno="5910"><highlight class="normal">ARRAY_WHERE_NONZERO(int64_t,<sp/>0);</highlight></codeline>
<codeline lineno="5911"><highlight class="normal">ARRAY_WHERE_NONZERO(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="5912"><highlight class="normal">ARRAY_WHERE_NONZERO(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="5913"><highlight class="normal"></highlight></codeline>
<codeline lineno="5914"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5915"><highlight class="normal"></highlight></codeline>
<codeline lineno="5916"><highlight class="normal">ARRAY_WHERE_NONZERO(complex_float,<sp/>0);</highlight></codeline>
<codeline lineno="5917"><highlight class="normal">ARRAY_WHERE_NONZERO(complex_double,<sp/>0);</highlight></codeline>
<codeline lineno="5918"><highlight class="normal"></highlight></codeline>
<codeline lineno="5919"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5920"><highlight class="normal"></highlight></codeline>
<codeline lineno="5921"><highlight class="normal">ARRAY_WHERE_NONZERO(<ref refid="structml__value__t" kindref="compound">any</ref>,<sp/>MLNil);</highlight></codeline>
<codeline lineno="5922"><highlight class="normal"></highlight></codeline>
<codeline lineno="5923"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;where&quot;</highlight><highlight class="normal">,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="5924"><highlight class="normal"></highlight><highlight class="comment">//&lt;Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5925"><highlight class="normal"></highlight><highlight class="comment">//&gt;list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5926"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>list<sp/>of<sp/>non-zero<sp/>indices<sp/>of<sp/>:mini:`Array`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5927"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="5928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_list();</highlight></codeline>
<codeline lineno="5929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Degree<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="5930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="5931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(A-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="5932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:<sp/>{</highlight></codeline>
<codeline lineno="5933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero1_uint8_t(Result,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="5934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:<sp/>{</highlight></codeline>
<codeline lineno="5937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero1_int8_t(Result,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="5938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:<sp/>{</highlight></codeline>
<codeline lineno="5941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero1_uint16_t(Result,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="5942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:<sp/>{</highlight></codeline>
<codeline lineno="5945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero1_int16_t(Result,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="5946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:<sp/>{</highlight></codeline>
<codeline lineno="5949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero1_uint32_t(Result,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="5950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:<sp/>{</highlight></codeline>
<codeline lineno="5953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero1_int32_t(Result,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="5954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:<sp/>{</highlight></codeline>
<codeline lineno="5957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero1_uint64_t(Result,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="5958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:<sp/>{</highlight></codeline>
<codeline lineno="5961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero1_int64_t(Result,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="5962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:<sp/>{</highlight></codeline>
<codeline lineno="5965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero1_float(Result,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="5966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:<sp/>{</highlight></codeline>
<codeline lineno="5969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero1_double(Result,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="5970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5972"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:<sp/>{</highlight></codeline>
<codeline lineno="5974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero1_complex_float(Result,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="5975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:<sp/>{</highlight></codeline>
<codeline lineno="5978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero1_complex_double(Result,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="5979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5981"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_ANY:<sp/>{</highlight></codeline>
<codeline lineno="5983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero1_any(Result,<sp/>A-&gt;Base.Value,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="5984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="5989"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__where__nonzero__t" kindref="compound">ml_array_where_nonzero_t</ref><sp/>Where[1];</highlight></codeline>
<codeline lineno="5991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>Where-&gt;Degree<sp/>=<sp/>A-&gt;Degree;</highlight></codeline>
<codeline lineno="5992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Indices[Degree];</highlight></codeline>
<codeline lineno="5993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Where-&gt;Indices<sp/>=<sp/>Indices;</highlight></codeline>
<codeline lineno="5994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Where-&gt;Result<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="5995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(A-&gt;Format)<sp/>{</highlight></codeline>
<codeline lineno="5996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U8:<sp/>{</highlight></codeline>
<codeline lineno="5997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero_uint8_t(Where,<sp/>A-&gt;Base.Value,<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="5998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I8:<sp/>{</highlight></codeline>
<codeline lineno="6001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero_int8_t(Where,<sp/>A-&gt;Base.Value,<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="6002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U16:<sp/>{</highlight></codeline>
<codeline lineno="6005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero_uint16_t(Where,<sp/>A-&gt;Base.Value,<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="6006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I16:<sp/>{</highlight></codeline>
<codeline lineno="6009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero_int16_t(Where,<sp/>A-&gt;Base.Value,<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="6010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U32:<sp/>{</highlight></codeline>
<codeline lineno="6013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero_uint32_t(Where,<sp/>A-&gt;Base.Value,<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="6014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I32:<sp/>{</highlight></codeline>
<codeline lineno="6017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero_int32_t(Where,<sp/>A-&gt;Base.Value,<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="6018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_U64:<sp/>{</highlight></codeline>
<codeline lineno="6021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero_uint64_t(Where,<sp/>A-&gt;Base.Value,<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="6022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_I64:<sp/>{</highlight></codeline>
<codeline lineno="6025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero_int64_t(Where,<sp/>A-&gt;Base.Value,<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="6026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F32:<sp/>{</highlight></codeline>
<codeline lineno="6029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero_float(Where,<sp/>A-&gt;Base.Value,<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="6030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_F64:<sp/>{</highlight></codeline>
<codeline lineno="6033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero_double(Where,<sp/>A-&gt;Base.Value,<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="6034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6036"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C32:<sp/>{</highlight></codeline>
<codeline lineno="6038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero_complex_float(Where,<sp/>A-&gt;Base.Value,<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="6039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_C64:<sp/>{</highlight></codeline>
<codeline lineno="6042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero_complex_double(Where,<sp/>A-&gt;Base.Value,<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="6043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6045"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_ARRAY_FORMAT_ANY:<sp/>{</highlight></codeline>
<codeline lineno="6047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_where_nonzero_any(Where,<sp/>A-&gt;Base.Value,<sp/>1,<sp/>A-&gt;Dimensions);</highlight></codeline>
<codeline lineno="6048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Where-&gt;Result;</highlight></codeline>
<codeline lineno="6053"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6054"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6055"><highlight class="normal"></highlight></codeline>
<codeline lineno="6056"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ARRAY_GETTER_IMPL(CTYPE,<sp/>ATYPE)<sp/>\</highlight></codeline>
<codeline lineno="6057"><highlight class="preprocessor">static<sp/>CTYPE<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_<sp/>##<sp/>ATYPE(void<sp/>*Data)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6058"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>(CTYPE)(*(ATYPE<sp/>*)Data);<sp/>\</highlight></codeline>
<codeline lineno="6059"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6060"><highlight class="normal"></highlight></codeline>
<codeline lineno="6061"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ARRAY_GETTERS_IMPL_BASE(CTYPE,<sp/>FROM_VAL)<sp/>\</highlight></codeline>
<codeline lineno="6062"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="6063"><highlight class="preprocessor">typedef<sp/>CTYPE<sp/>(*ml_array_getter_<sp/>##<sp/>CTYPE)(void<sp/>*Data);<sp/>\</highlight></codeline>
<codeline lineno="6064"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="6065"><highlight class="preprocessor">ML_ARRAY_GETTER_IMPL(CTYPE,<sp/>uint8_t)<sp/>\</highlight></codeline>
<codeline lineno="6066"><highlight class="preprocessor">ML_ARRAY_GETTER_IMPL(CTYPE,<sp/>int8_t)<sp/>\</highlight></codeline>
<codeline lineno="6067"><highlight class="preprocessor">ML_ARRAY_GETTER_IMPL(CTYPE,<sp/>uint16_t)<sp/>\</highlight></codeline>
<codeline lineno="6068"><highlight class="preprocessor">ML_ARRAY_GETTER_IMPL(CTYPE,<sp/>int16_t)<sp/>\</highlight></codeline>
<codeline lineno="6069"><highlight class="preprocessor">ML_ARRAY_GETTER_IMPL(CTYPE,<sp/>uint32_t)<sp/>\</highlight></codeline>
<codeline lineno="6070"><highlight class="preprocessor">ML_ARRAY_GETTER_IMPL(CTYPE,<sp/>int32_t)<sp/>\</highlight></codeline>
<codeline lineno="6071"><highlight class="preprocessor">ML_ARRAY_GETTER_IMPL(CTYPE,<sp/>uint64_t)<sp/>\</highlight></codeline>
<codeline lineno="6072"><highlight class="preprocessor">ML_ARRAY_GETTER_IMPL(CTYPE,<sp/>int64_t)<sp/>\</highlight></codeline>
<codeline lineno="6073"><highlight class="preprocessor">ML_ARRAY_GETTER_IMPL(CTYPE,<sp/>float)<sp/>\</highlight></codeline>
<codeline lineno="6074"><highlight class="preprocessor">ML_ARRAY_GETTER_IMPL(CTYPE,<sp/>double)<sp/>\</highlight></codeline>
<codeline lineno="6075"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="6076"><highlight class="preprocessor">static<sp/>CTYPE<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_<sp/>##<sp/>any(void<sp/>*Data)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6077"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>FROM_VAL(*(ml_value_t<sp/>**)Data);<sp/>\</highlight></codeline>
<codeline lineno="6078"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6079"><highlight class="normal"></highlight></codeline>
<codeline lineno="6080"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6081"><highlight class="normal"></highlight></codeline>
<codeline lineno="6082"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ARRAY_GETTERS_IMPL(CTYPE,<sp/>FROM_VAL)<sp/>\</highlight></codeline>
<codeline lineno="6083"><highlight class="preprocessor">ML_ARRAY_GETTERS_IMPL_BASE(CTYPE,<sp/>FROM_VAL)<sp/>\</highlight></codeline>
<codeline lineno="6084"><highlight class="preprocessor">ML_ARRAY_GETTER_IMPL(CTYPE,<sp/>complex_float)<sp/>\</highlight></codeline>
<codeline lineno="6085"><highlight class="preprocessor">ML_ARRAY_GETTER_IMPL(CTYPE,<sp/>complex_double)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6086"><highlight class="normal"></highlight></codeline>
<codeline lineno="6087"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6088"><highlight class="normal"></highlight></codeline>
<codeline lineno="6089"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ARRAY_GETTERS_IMPL(CTYPE,<sp/>FROM_VAL)<sp/>ML_ARRAY_GETTERS_IMPL_BASE(CTYPE,<sp/>FROM_VAL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6090"><highlight class="normal"></highlight></codeline>
<codeline lineno="6091"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6092"><highlight class="normal"></highlight></codeline>
<codeline lineno="6093"><highlight class="normal">ML_ARRAY_GETTERS_IMPL(uint8_t,<sp/>ml_integer_value)</highlight></codeline>
<codeline lineno="6094"><highlight class="normal">ML_ARRAY_GETTERS_IMPL(int8_t,<sp/>ml_integer_value)</highlight></codeline>
<codeline lineno="6095"><highlight class="normal">ML_ARRAY_GETTERS_IMPL(uint16_t,<sp/>ml_integer_value)</highlight></codeline>
<codeline lineno="6096"><highlight class="normal">ML_ARRAY_GETTERS_IMPL(int16_t,<sp/>ml_integer_value)</highlight></codeline>
<codeline lineno="6097"><highlight class="normal">ML_ARRAY_GETTERS_IMPL(uint32_t,<sp/>ml_integer_value)</highlight></codeline>
<codeline lineno="6098"><highlight class="normal">ML_ARRAY_GETTERS_IMPL(int32_t,<sp/>ml_integer_value)</highlight></codeline>
<codeline lineno="6099"><highlight class="normal">ML_ARRAY_GETTERS_IMPL(uint64_t,<sp/>ml_integer_value)</highlight></codeline>
<codeline lineno="6100"><highlight class="normal">ML_ARRAY_GETTERS_IMPL(int64_t,<sp/>ml_integer_value)</highlight></codeline>
<codeline lineno="6101"><highlight class="normal">ML_ARRAY_GETTERS_IMPL(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>ml_real_value)</highlight></codeline>
<codeline lineno="6102"><highlight class="normal">ML_ARRAY_GETTERS_IMPL(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>ml_real_value)</highlight></codeline>
<codeline lineno="6103"><highlight class="normal"></highlight></codeline>
<codeline lineno="6104"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6105"><highlight class="normal"></highlight></codeline>
<codeline lineno="6106"><highlight class="normal">ML_ARRAY_GETTERS_IMPL(complex_float,<sp/>ml_complex_value)</highlight></codeline>
<codeline lineno="6107"><highlight class="normal">ML_ARRAY_GETTERS_IMPL(complex_double,<sp/>ml_complex_value)</highlight></codeline>
<codeline lineno="6108"><highlight class="normal"></highlight></codeline>
<codeline lineno="6109"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6110"><highlight class="normal"></highlight></codeline>
<codeline lineno="6111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ARRAY_GETTER_ANY_IMPL(TO_VAL,<sp/>ATYPE)<sp/>\</highlight></codeline>
<codeline lineno="6112"><highlight class="preprocessor">static<sp/>any<sp/>ml_array_getter_any_<sp/>##<sp/>ATYPE(void<sp/>*Data)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>TO_VAL(*(ATYPE<sp/>*)Data);<sp/>\</highlight></codeline>
<codeline lineno="6114"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6115"><highlight class="normal"></highlight></codeline>
<codeline lineno="6116"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">any</ref><sp/>(*ml_array_getter_any)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data);</highlight></codeline>
<codeline lineno="6117"><highlight class="normal"></highlight></codeline>
<codeline lineno="6118"><highlight class="normal">ML_ARRAY_GETTER_ANY_IMPL(ml_integer,<sp/>uint8_t)</highlight></codeline>
<codeline lineno="6119"><highlight class="normal">ML_ARRAY_GETTER_ANY_IMPL(ml_integer,<sp/>int8_t)</highlight></codeline>
<codeline lineno="6120"><highlight class="normal">ML_ARRAY_GETTER_ANY_IMPL(ml_integer,<sp/>uint16_t)</highlight></codeline>
<codeline lineno="6121"><highlight class="normal">ML_ARRAY_GETTER_ANY_IMPL(ml_integer,<sp/>int16_t)</highlight></codeline>
<codeline lineno="6122"><highlight class="normal">ML_ARRAY_GETTER_ANY_IMPL(ml_integer,<sp/>uint32_t)</highlight></codeline>
<codeline lineno="6123"><highlight class="normal">ML_ARRAY_GETTER_ANY_IMPL(ml_integer,<sp/>int32_t)</highlight></codeline>
<codeline lineno="6124"><highlight class="normal">ML_ARRAY_GETTER_ANY_IMPL(ml_integer,<sp/>uint64_t)</highlight></codeline>
<codeline lineno="6125"><highlight class="normal">ML_ARRAY_GETTER_ANY_IMPL(ml_integer,<sp/>int64_t)</highlight></codeline>
<codeline lineno="6126"><highlight class="normal">ML_ARRAY_GETTER_ANY_IMPL(ml_real,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6127"><highlight class="normal">ML_ARRAY_GETTER_ANY_IMPL(ml_real,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6128"><highlight class="normal"></highlight></codeline>
<codeline lineno="6129"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6130"><highlight class="normal"></highlight></codeline>
<codeline lineno="6131"><highlight class="normal">ML_ARRAY_GETTER_ANY_IMPL(ml_complex,<sp/>complex_float)</highlight></codeline>
<codeline lineno="6132"><highlight class="normal">ML_ARRAY_GETTER_ANY_IMPL(ml_complex,<sp/>complex_double)</highlight></codeline>
<codeline lineno="6133"><highlight class="normal"></highlight></codeline>
<codeline lineno="6134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6135"><highlight class="normal"></highlight></codeline>
<codeline lineno="6136"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_array_getter_any_any(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data)<sp/>{</highlight></codeline>
<codeline lineno="6137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)Data;</highlight></codeline>
<codeline lineno="6138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6139"><highlight class="normal"></highlight></codeline>
<codeline lineno="6140"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6141"><highlight class="normal"></highlight></codeline>
<codeline lineno="6142"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ARRAY_GETTER_DECLS(NAME,<sp/>CTYPE)<sp/>\</highlight></codeline>
<codeline lineno="6143"><highlight class="preprocessor">static<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>MLArrayGetters<sp/>##<sp/>NAME[]<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U8]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_uint8_t,<sp/>\</highlight></codeline>
<codeline lineno="6145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I8]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_int8_t,<sp/>\</highlight></codeline>
<codeline lineno="6146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U16]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_uint16_t,<sp/>\</highlight></codeline>
<codeline lineno="6147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I16]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_int16_t,<sp/>\</highlight></codeline>
<codeline lineno="6148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U32]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_uint32_t,<sp/>\</highlight></codeline>
<codeline lineno="6149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I32]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_int32_t,<sp/>\</highlight></codeline>
<codeline lineno="6150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U64]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_uint64_t,<sp/>\</highlight></codeline>
<codeline lineno="6151"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I64]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_int64_t,<sp/>\</highlight></codeline>
<codeline lineno="6152"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_F32]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_float,<sp/>\</highlight></codeline>
<codeline lineno="6153"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_F64]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_double,<sp/>\</highlight></codeline>
<codeline lineno="6154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_C32]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_complex_float,<sp/>\</highlight></codeline>
<codeline lineno="6155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_C64]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_complex_double,<sp/>\</highlight></codeline>
<codeline lineno="6156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_ANY]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_any,<sp/>\</highlight></codeline>
<codeline lineno="6157"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6158"><highlight class="normal"></highlight></codeline>
<codeline lineno="6159"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6160"><highlight class="normal"></highlight></codeline>
<codeline lineno="6161"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ARRAY_GETTER_DECLS(NAME,<sp/>CTYPE)<sp/>\</highlight></codeline>
<codeline lineno="6162"><highlight class="preprocessor">static<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>MLArrayGetters<sp/>##<sp/>NAME[]<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6163"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I8]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_int8_t,<sp/>\</highlight></codeline>
<codeline lineno="6164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U8]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_uint8_t,<sp/>\</highlight></codeline>
<codeline lineno="6165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I16]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_int16_t,<sp/>\</highlight></codeline>
<codeline lineno="6166"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U16]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_uint16_t,<sp/>\</highlight></codeline>
<codeline lineno="6167"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I32]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_int32_t,<sp/>\</highlight></codeline>
<codeline lineno="6168"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U32]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_uint32_t,<sp/>\</highlight></codeline>
<codeline lineno="6169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I64]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_int64_t,<sp/>\</highlight></codeline>
<codeline lineno="6170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U64]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_uint64_t,<sp/>\</highlight></codeline>
<codeline lineno="6171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_F32]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_float,<sp/>\</highlight></codeline>
<codeline lineno="6172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_F64]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_double,<sp/>\</highlight></codeline>
<codeline lineno="6173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_ANY]<sp/>=<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>##<sp/>_any,<sp/>\</highlight></codeline>
<codeline lineno="6174"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6175"><highlight class="normal"></highlight></codeline>
<codeline lineno="6176"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6177"><highlight class="normal"></highlight></codeline>
<codeline lineno="6178"><highlight class="normal">ML_ARRAY_GETTER_DECLS(UInt8,<sp/>uint8_t);</highlight></codeline>
<codeline lineno="6179"><highlight class="normal">ML_ARRAY_GETTER_DECLS(Int8,<sp/>int8_t);</highlight></codeline>
<codeline lineno="6180"><highlight class="normal">ML_ARRAY_GETTER_DECLS(UInt16,<sp/>uint16_t);</highlight></codeline>
<codeline lineno="6181"><highlight class="normal">ML_ARRAY_GETTER_DECLS(Int16,<sp/>int16_t);</highlight></codeline>
<codeline lineno="6182"><highlight class="normal">ML_ARRAY_GETTER_DECLS(UInt32,<sp/>uint32_t);</highlight></codeline>
<codeline lineno="6183"><highlight class="normal">ML_ARRAY_GETTER_DECLS(Int32,<sp/>int32_t);</highlight></codeline>
<codeline lineno="6184"><highlight class="normal">ML_ARRAY_GETTER_DECLS(UInt64,<sp/>uint64_t);</highlight></codeline>
<codeline lineno="6185"><highlight class="normal">ML_ARRAY_GETTER_DECLS(Int64,<sp/>int64_t);</highlight></codeline>
<codeline lineno="6186"><highlight class="normal">ML_ARRAY_GETTER_DECLS(Float32,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6187"><highlight class="normal">ML_ARRAY_GETTER_DECLS(Float64,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6188"><highlight class="normal"></highlight></codeline>
<codeline lineno="6189"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6190"><highlight class="normal"></highlight></codeline>
<codeline lineno="6191"><highlight class="normal">ML_ARRAY_GETTER_DECLS(Complex32,<sp/>complex_float);</highlight></codeline>
<codeline lineno="6192"><highlight class="normal">ML_ARRAY_GETTER_DECLS(Complex64,<sp/>complex_double);</highlight></codeline>
<codeline lineno="6193"><highlight class="normal"></highlight></codeline>
<codeline lineno="6194"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6195"><highlight class="normal"></highlight></codeline>
<codeline lineno="6196"><highlight class="normal">ML_ARRAY_GETTER_DECLS(Any,<sp/><ref refid="structml__value__t" kindref="compound">any</ref>);</highlight></codeline>
<codeline lineno="6197"><highlight class="normal"></highlight></codeline>
<codeline lineno="6198"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**MLArrayGetters[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="6199"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U8]<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)MLArrayGettersUInt8,</highlight></codeline>
<codeline lineno="6200"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I8]<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)MLArrayGettersInt8,</highlight></codeline>
<codeline lineno="6201"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U16]<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)MLArrayGettersUInt16,</highlight></codeline>
<codeline lineno="6202"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I16]<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)MLArrayGettersInt16,</highlight></codeline>
<codeline lineno="6203"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U32]<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)MLArrayGettersUInt32,</highlight></codeline>
<codeline lineno="6204"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I32]<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)MLArrayGettersInt32,</highlight></codeline>
<codeline lineno="6205"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U64]<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)MLArrayGettersUInt64,</highlight></codeline>
<codeline lineno="6206"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I64]<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)MLArrayGettersInt64,</highlight></codeline>
<codeline lineno="6207"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_F32]<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)MLArrayGettersFloat32,</highlight></codeline>
<codeline lineno="6208"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_F64]<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)MLArrayGettersFloat64,</highlight></codeline>
<codeline lineno="6209"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6210"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_C32]<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)MLArrayGettersComplex32,</highlight></codeline>
<codeline lineno="6211"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_C64]<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)MLArrayGettersComplex64,</highlight></codeline>
<codeline lineno="6212"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6213"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_ANY]<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)MLArrayGettersAny</highlight></codeline>
<codeline lineno="6214"><highlight class="normal">};</highlight></codeline>
<codeline lineno="6215"><highlight class="normal"></highlight></codeline>
<codeline lineno="6216"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ARRAY_DOT(CTYPE)<sp/>\</highlight></codeline>
<codeline lineno="6217"><highlight class="preprocessor">static<sp/>void<sp/>ml_array_dot_<sp/>##<sp/>CTYPE(<sp/>\</highlight></codeline>
<codeline lineno="6218"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>*DataA,<sp/>ml_array_dimension_t<sp/>*DimA,<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>GetterA,<sp/>\</highlight></codeline>
<codeline lineno="6219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>*DataB,<sp/>ml_array_dimension_t<sp/>*DimB,<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>GetterB,<sp/>\</highlight></codeline>
<codeline lineno="6220"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CTYPE<sp/>*DataC<sp/>\</highlight></codeline>
<codeline lineno="6221"><highlight class="preprocessor">)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6222"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CTYPE<sp/>Sum<sp/>=<sp/>0;<sp/>\</highlight></codeline>
<codeline lineno="6223"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Size<sp/>=<sp/>DimA-&gt;Size;<sp/>\</highlight></codeline>
<codeline lineno="6224"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>StrideA<sp/>=<sp/>DimA-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="6225"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>StrideB<sp/>=<sp/>DimB-&gt;Stride;<sp/>\</highlight></codeline>
<codeline lineno="6226"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(DimA-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6227"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*IndicesA<sp/>=<sp/>DimA-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="6228"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(DimB-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6229"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*IndicesB<sp/>=<sp/>DimB-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="6230"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>ValueA<sp/>=<sp/>GetterA(DataA<sp/>+<sp/>IndicesA[I]<sp/>*<sp/>StrideA);<sp/>\</highlight></codeline>
<codeline lineno="6232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>ValueB<sp/>=<sp/>GetterB(DataB<sp/>+<sp/>IndicesB[I]<sp/>*<sp/>StrideB);<sp/>\</highlight></codeline>
<codeline lineno="6233"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sum<sp/>+=<sp/>ValueA<sp/>*<sp/>ValueB;<sp/>\</highlight></codeline>
<codeline lineno="6234"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="6235"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6236"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6237"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>ValueA<sp/>=<sp/>GetterA(DataA<sp/>+<sp/>IndicesA[I]<sp/>*<sp/>StrideA);<sp/>\</highlight></codeline>
<codeline lineno="6238"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>ValueB<sp/>=<sp/>GetterB(DataB);<sp/>\</highlight></codeline>
<codeline lineno="6239"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sum<sp/>+=<sp/>ValueA<sp/>*<sp/>ValueB;<sp/>\</highlight></codeline>
<codeline lineno="6240"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataB<sp/>+=<sp/>StrideB;<sp/>\</highlight></codeline>
<codeline lineno="6241"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="6242"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="6243"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6244"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(DimB-&gt;Indices)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6245"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>*IndicesB<sp/>=<sp/>DimB-&gt;Indices;<sp/>\</highlight></codeline>
<codeline lineno="6246"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6247"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>ValueA<sp/>=<sp/>GetterA(DataA);<sp/>\</highlight></codeline>
<codeline lineno="6248"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>ValueB<sp/>=<sp/>GetterB(DataB<sp/>+<sp/>IndicesB[I]<sp/>*<sp/>StrideB);<sp/>\</highlight></codeline>
<codeline lineno="6249"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sum<sp/>+=<sp/>ValueA<sp/>*<sp/>ValueB;<sp/>\</highlight></codeline>
<codeline lineno="6250"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataA<sp/>+=<sp/>StrideA;<sp/>\</highlight></codeline>
<codeline lineno="6251"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="6252"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6253"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6254"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>ValueA<sp/>=<sp/>GetterA(DataA);<sp/>\</highlight></codeline>
<codeline lineno="6255"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTYPE<sp/>ValueB<sp/>=<sp/>GetterB(DataB);<sp/>\</highlight></codeline>
<codeline lineno="6256"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sum<sp/>+=<sp/>ValueA<sp/>*<sp/>ValueB;<sp/>\</highlight></codeline>
<codeline lineno="6257"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataA<sp/>+=<sp/>StrideA;<sp/>\</highlight></codeline>
<codeline lineno="6258"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataB<sp/>+=<sp/>StrideB;<sp/>\</highlight></codeline>
<codeline lineno="6259"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="6260"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="6261"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="6262"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>*DataC<sp/>=<sp/>Sum;<sp/>\</highlight></codeline>
<codeline lineno="6263"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6264"><highlight class="normal"></highlight></codeline>
<codeline lineno="6265"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_array_dot_any(</highlight></codeline>
<codeline lineno="6266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*DataA,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*DimA,<sp/>ml_array_getter_any<sp/>GetterA,</highlight></codeline>
<codeline lineno="6267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*DataB,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*DimB,<sp/>ml_array_getter_any<sp/>GetterB,</highlight></codeline>
<codeline lineno="6268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**DataC</highlight></codeline>
<codeline lineno="6269"><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[3]<sp/>=<sp/>{MLNil,<sp/>MLNil,<sp/>MLNil};</highlight></codeline>
<codeline lineno="6271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>DimA-&gt;Size;</highlight></codeline>
<codeline lineno="6272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StrideA<sp/>=<sp/>DimA-&gt;Stride;</highlight></codeline>
<codeline lineno="6273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StrideB<sp/>=<sp/>DimB-&gt;Stride;</highlight></codeline>
<codeline lineno="6274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(DimA-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="6275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*IndicesA<sp/>=<sp/>DimA-&gt;Indices;</highlight></codeline>
<codeline lineno="6276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(DimB-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="6277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*IndicesB<sp/>=<sp/>DimB-&gt;Indices;</highlight></codeline>
<codeline lineno="6278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>GetterA(DataA<sp/>+<sp/>IndicesA[0]<sp/>*<sp/>StrideA);</highlight></codeline>
<codeline lineno="6279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>GetterB(DataB<sp/>+<sp/>IndicesB[0]<sp/>*<sp/>StrideB);</highlight></codeline>
<codeline lineno="6280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>ml_simple_call(MulMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="6281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="6282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>GetterA(DataA<sp/>+<sp/>IndicesA[I]<sp/>*<sp/>StrideA);</highlight></codeline>
<codeline lineno="6283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[2]<sp/>=<sp/>GetterB(DataB<sp/>+<sp/>IndicesB[I]<sp/>*<sp/>StrideB);</highlight></codeline>
<codeline lineno="6284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>ml_simple_call(MulMethod,<sp/>2,<sp/>Args<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="6285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>ml_simple_call(AddMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="6286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>GetterA(DataA<sp/>+<sp/>IndicesA[0]<sp/>*<sp/>StrideA);</highlight></codeline>
<codeline lineno="6289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>GetterB(DataB);</highlight></codeline>
<codeline lineno="6290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>ml_simple_call(MulMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="6291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="6292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataB<sp/>+=<sp/>StrideB;</highlight></codeline>
<codeline lineno="6293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>GetterA(DataA<sp/>+<sp/>IndicesA[I]<sp/>*<sp/>StrideA);</highlight></codeline>
<codeline lineno="6294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[2]<sp/>=<sp/>GetterB(DataB);</highlight></codeline>
<codeline lineno="6295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>ml_simple_call(MulMethod,<sp/>2,<sp/>Args<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="6296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>ml_simple_call(AddMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="6297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6299"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(DimB-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="6301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*IndicesB<sp/>=<sp/>DimB-&gt;Indices;</highlight></codeline>
<codeline lineno="6302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>GetterA(DataA);</highlight></codeline>
<codeline lineno="6303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>GetterB(DataB<sp/>+<sp/>IndicesB[0]<sp/>*<sp/>StrideB);</highlight></codeline>
<codeline lineno="6304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>ml_simple_call(MulMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="6305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="6306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataA<sp/>+=<sp/>StrideA;</highlight></codeline>
<codeline lineno="6307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>GetterA(DataA);</highlight></codeline>
<codeline lineno="6308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[2]<sp/>=<sp/>GetterB(DataB<sp/>+<sp/>IndicesB[I]<sp/>*<sp/>StrideB);</highlight></codeline>
<codeline lineno="6309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>ml_simple_call(MulMethod,<sp/>2,<sp/>Args<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="6310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>ml_simple_call(AddMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="6311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>GetterA(DataA);</highlight></codeline>
<codeline lineno="6314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>GetterB(DataB);</highlight></codeline>
<codeline lineno="6315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>ml_simple_call(MulMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="6316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="6317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataA<sp/>+=<sp/>StrideA;</highlight></codeline>
<codeline lineno="6318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataB<sp/>+=<sp/>StrideB;</highlight></codeline>
<codeline lineno="6319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>GetterA(DataA);</highlight></codeline>
<codeline lineno="6320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[2]<sp/>=<sp/>GetterB(DataB);</highlight></codeline>
<codeline lineno="6321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>ml_simple_call(MulMethod,<sp/>2,<sp/>Args<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="6322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>ml_simple_call(AddMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="6323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6326"><highlight class="normal"><sp/><sp/><sp/><sp/>*DataC<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="6327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6328"><highlight class="normal"></highlight></codeline>
<codeline lineno="6329"><highlight class="normal">ML_ARRAY_DOT(uint8_t);</highlight></codeline>
<codeline lineno="6330"><highlight class="normal">ML_ARRAY_DOT(int8_t);</highlight></codeline>
<codeline lineno="6331"><highlight class="normal">ML_ARRAY_DOT(uint16_t);</highlight></codeline>
<codeline lineno="6332"><highlight class="normal">ML_ARRAY_DOT(int16_t);</highlight></codeline>
<codeline lineno="6333"><highlight class="normal">ML_ARRAY_DOT(uint32_t);</highlight></codeline>
<codeline lineno="6334"><highlight class="normal">ML_ARRAY_DOT(int32_t);</highlight></codeline>
<codeline lineno="6335"><highlight class="normal">ML_ARRAY_DOT(uint64_t);</highlight></codeline>
<codeline lineno="6336"><highlight class="normal">ML_ARRAY_DOT(int64_t);</highlight></codeline>
<codeline lineno="6337"><highlight class="normal">ML_ARRAY_DOT(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6338"><highlight class="normal">ML_ARRAY_DOT(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6339"><highlight class="normal"></highlight></codeline>
<codeline lineno="6340"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6341"><highlight class="normal"></highlight></codeline>
<codeline lineno="6342"><highlight class="normal">ML_ARRAY_DOT(complex_float);</highlight></codeline>
<codeline lineno="6343"><highlight class="normal">ML_ARRAY_DOT(complex_double);</highlight></codeline>
<codeline lineno="6344"><highlight class="normal"></highlight></codeline>
<codeline lineno="6345"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6346"><highlight class="normal"></highlight></codeline>
<codeline lineno="6347"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*ml_array_dot_fn)(</highlight></codeline>
<codeline lineno="6348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*DataA,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*DimA,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetterA,</highlight></codeline>
<codeline lineno="6349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*DataB,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*DimB,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetterB,</highlight></codeline>
<codeline lineno="6350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*DataC</highlight></codeline>
<codeline lineno="6351"><highlight class="normal">);</highlight></codeline>
<codeline lineno="6352"><highlight class="normal"></highlight></codeline>
<codeline lineno="6353"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_array_dot_fill(</highlight></codeline>
<codeline lineno="6354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*DataA,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*DimA,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetterA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DegreeA,</highlight></codeline>
<codeline lineno="6355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*DataB,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*DimB,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetterB,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DegreeB,</highlight></codeline>
<codeline lineno="6356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*DataC,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*DimC,<sp/>ml_array_dot_fn<sp/>DotFn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DegreeC</highlight></codeline>
<codeline lineno="6357"><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(DegreeA<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="6359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StrideA<sp/>=<sp/>DimA-&gt;Stride;</highlight></codeline>
<codeline lineno="6360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StrideC<sp/>=<sp/>DimC-&gt;Stride;</highlight></codeline>
<codeline lineno="6361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(DimA-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="6362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices<sp/>=<sp/>DimA-&gt;Indices;</highlight></codeline>
<codeline lineno="6363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>DimA-&gt;Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="6364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_dot_fill(</highlight></codeline>
<codeline lineno="6365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataA<sp/>+<sp/>(Indices[I])<sp/>*<sp/>StrideA,<sp/>DimA<sp/>+<sp/>1,<sp/>GetterA,<sp/>DegreeA<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="6366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataB,<sp/>DimB,<sp/>GetterB,<sp/>DegreeB,</highlight></codeline>
<codeline lineno="6367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataC,<sp/>DimC<sp/>+<sp/>1,<sp/>DotFn,<sp/>DegreeC<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="6368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="6369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataC<sp/>+=<sp/>StrideC;</highlight></codeline>
<codeline lineno="6370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DimA-&gt;Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="6373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_dot_fill(</highlight></codeline>
<codeline lineno="6374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataA,<sp/>DimA<sp/>+<sp/>1,<sp/>GetterA,<sp/>DegreeA<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="6375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataB,<sp/>DimB,<sp/>GetterB,<sp/>DegreeB,</highlight></codeline>
<codeline lineno="6376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataC,<sp/>DimC<sp/>+<sp/>1,<sp/>DotFn,<sp/>DegreeC<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="6377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="6378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataA<sp/>+=<sp/>StrideA;</highlight></codeline>
<codeline lineno="6379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataC<sp/>+=<sp/>StrideC;</highlight></codeline>
<codeline lineno="6380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6382"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(DegreeB<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="6383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StrideB<sp/>=<sp/>DimB-&gt;Stride;</highlight></codeline>
<codeline lineno="6384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StrideC<sp/>=<sp/>(DimC<sp/>+<sp/>DegreeC<sp/>-<sp/>1)-&gt;Stride;</highlight></codeline>
<codeline lineno="6385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(DimB-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="6386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices<sp/>=<sp/>DimB-&gt;Indices;</highlight></codeline>
<codeline lineno="6387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>DimB-&gt;Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="6388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_dot_fill(</highlight></codeline>
<codeline lineno="6389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataA,<sp/>DimA,<sp/>GetterA,<sp/>DegreeA,</highlight></codeline>
<codeline lineno="6390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataB<sp/>+<sp/>(Indices[I])<sp/>*<sp/>StrideB,<sp/>DimB<sp/>-<sp/>1,<sp/>GetterB,<sp/>DegreeB<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="6391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataC,<sp/>DimC,<sp/>DotFn,<sp/>DegreeC<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="6392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="6393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataC<sp/>+=<sp/>StrideC;</highlight></codeline>
<codeline lineno="6394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DimB-&gt;Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="6397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_dot_fill(</highlight></codeline>
<codeline lineno="6398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataA,<sp/>DimA,<sp/>GetterA,<sp/>DegreeA,</highlight></codeline>
<codeline lineno="6399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataB,<sp/>DimB<sp/>-<sp/>1,<sp/>GetterB,<sp/>DegreeB<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="6400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataC,<sp/>DimC,<sp/>DotFn,<sp/>DegreeC<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="6401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="6402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataB<sp/>+=<sp/>StrideB;</highlight></codeline>
<codeline lineno="6403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataC<sp/>+=<sp/>StrideC;</highlight></codeline>
<codeline lineno="6404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6406"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DotFn(DataA,<sp/>DimA,<sp/>GetterA,<sp/>DataB,<sp/>DimB,<sp/>GetterB,<sp/>DataC);</highlight></codeline>
<codeline lineno="6408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6410"><highlight class="normal"></highlight></codeline>
<codeline lineno="6411"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ARRAY_INFIX_SETTER(NAME,<sp/>OP,<sp/>CTYPE)<sp/>\</highlight></codeline>
<codeline lineno="6412"><highlight class="preprocessor">static<sp/>void<sp/>ml_array_infix_set_<sp/>##<sp/>NAME<sp/>##<sp/>_<sp/>##<sp/>CTYPE(void<sp/>*DataA,<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>GetterA,<sp/>void<sp/>*DataB,<sp/>ml_array_getter_<sp/>##<sp/>CTYPE<sp/>GetterB,<sp/>void<sp/>*DataC)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6413"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>*(CTYPE<sp/>*)DataC<sp/>=<sp/>GetterA(DataA)<sp/>OP<sp/>GetterB(DataB);<sp/>\</highlight></codeline>
<codeline lineno="6414"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6415"><highlight class="normal"></highlight></codeline>
<codeline lineno="6416"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ARRAY_INFIX_SETTERS_BASE(NAME,<sp/>OP,<sp/>METHOD)<sp/>\</highlight></codeline>
<codeline lineno="6417"><highlight class="preprocessor">ML_ARRAY_INFIX_SETTER(NAME,<sp/>OP,<sp/>uint8_t)<sp/>\</highlight></codeline>
<codeline lineno="6418"><highlight class="preprocessor">ML_ARRAY_INFIX_SETTER(NAME,<sp/>OP,<sp/>int8_t)<sp/>\</highlight></codeline>
<codeline lineno="6419"><highlight class="preprocessor">ML_ARRAY_INFIX_SETTER(NAME,<sp/>OP,<sp/>uint16_t)<sp/>\</highlight></codeline>
<codeline lineno="6420"><highlight class="preprocessor">ML_ARRAY_INFIX_SETTER(NAME,<sp/>OP,<sp/>int16_t)<sp/>\</highlight></codeline>
<codeline lineno="6421"><highlight class="preprocessor">ML_ARRAY_INFIX_SETTER(NAME,<sp/>OP,<sp/>uint32_t)<sp/>\</highlight></codeline>
<codeline lineno="6422"><highlight class="preprocessor">ML_ARRAY_INFIX_SETTER(NAME,<sp/>OP,<sp/>int32_t)<sp/>\</highlight></codeline>
<codeline lineno="6423"><highlight class="preprocessor">ML_ARRAY_INFIX_SETTER(NAME,<sp/>OP,<sp/>uint64_t)<sp/>\</highlight></codeline>
<codeline lineno="6424"><highlight class="preprocessor">ML_ARRAY_INFIX_SETTER(NAME,<sp/>OP,<sp/>int64_t)<sp/>\</highlight></codeline>
<codeline lineno="6425"><highlight class="preprocessor">ML_ARRAY_INFIX_SETTER(NAME,<sp/>OP,<sp/>float)<sp/>\</highlight></codeline>
<codeline lineno="6426"><highlight class="preprocessor">ML_ARRAY_INFIX_SETTER(NAME,<sp/>OP,<sp/>double)<sp/>\</highlight></codeline>
<codeline lineno="6427"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="6428"><highlight class="preprocessor">static<sp/>void<sp/>ml_array_infix_set_<sp/>##<sp/>NAME<sp/>##<sp/>_any(void<sp/>*DataA,<sp/>ml_array_getter_any<sp/>GetterA,<sp/>void<sp/>*DataB,<sp/>ml_array_getter_any<sp/>GetterB,<sp/>void<sp/>*DataC)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6429"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_value_t<sp/>*Args[2]<sp/>=<sp/>{GetterA(DataA),<sp/>GetterB(DataB)};<sp/>\</highlight></codeline>
<codeline lineno="6430"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>*(ml_value_t<sp/>**)DataC<sp/>=<sp/>ml_simple_call(METHOD,<sp/>2,<sp/>Args);<sp/>\</highlight></codeline>
<codeline lineno="6431"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6432"><highlight class="normal"></highlight></codeline>
<codeline lineno="6433"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6434"><highlight class="normal"></highlight></codeline>
<codeline lineno="6435"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ARRAY_INFIX_SETTERS(NAME,<sp/>OP,<sp/>METHOD)<sp/>\</highlight></codeline>
<codeline lineno="6436"><highlight class="preprocessor">ML_ARRAY_INFIX_SETTERS_BASE(NAME,<sp/>OP,<sp/>METHOD)<sp/>\</highlight></codeline>
<codeline lineno="6437"><highlight class="preprocessor">ML_ARRAY_INFIX_SETTER(NAME,<sp/>OP,<sp/>complex_float)<sp/>\</highlight></codeline>
<codeline lineno="6438"><highlight class="preprocessor">ML_ARRAY_INFIX_SETTER(NAME,<sp/>OP,<sp/>complex_double)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6439"><highlight class="normal"></highlight></codeline>
<codeline lineno="6440"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6441"><highlight class="normal"></highlight></codeline>
<codeline lineno="6442"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ARRAY_INFIX_SETTERS(NAME,<sp/>OP,<sp/>METHOD)<sp/>ML_ARRAY_INFIX_SETTERS_BASE(NAME,<sp/>OP,<sp/>METHOD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6443"><highlight class="normal"></highlight></codeline>
<codeline lineno="6444"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6445"><highlight class="normal"></highlight></codeline>
<codeline lineno="6446"><highlight class="normal">ML_ARRAY_INFIX_SETTERS(add,<sp/>+,<sp/>AddMethod)</highlight></codeline>
<codeline lineno="6447"><highlight class="normal">ML_ARRAY_INFIX_SETTERS(sub,<sp/>-,<sp/>SubMethod)</highlight></codeline>
<codeline lineno="6448"><highlight class="normal">ML_ARRAY_INFIX_SETTERS(mul,<sp/>*,<sp/>MulMethod)</highlight></codeline>
<codeline lineno="6449"><highlight class="normal">ML_ARRAY_INFIX_SETTERS(div,<sp/>/,<sp/>DivMethod)</highlight></codeline>
<codeline lineno="6450"><highlight class="normal"></highlight></codeline>
<codeline lineno="6451"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*ml_array_infix_set_fn)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*DataA,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetterA,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*DataB,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetterB,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*DataC);</highlight></codeline>
<codeline lineno="6452"><highlight class="normal"></highlight></codeline>
<codeline lineno="6453"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_array_infix_fill(</highlight></codeline>
<codeline lineno="6454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*DataA,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*DimA,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetterA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DegreeA,</highlight></codeline>
<codeline lineno="6455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*DataB,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*DimB,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetterB,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DegreeB,</highlight></codeline>
<codeline lineno="6456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*DataC,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*DimC,<sp/>ml_array_infix_set_fn<sp/>InfixSetFn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DegreeC</highlight></codeline>
<codeline lineno="6457"><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(DegreeA<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StrideA<sp/>=<sp/>DimA-&gt;Stride;</highlight></codeline>
<codeline lineno="6460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StrideC<sp/>=<sp/>DimC-&gt;Stride;</highlight></codeline>
<codeline lineno="6461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(DimA-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="6462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices<sp/>=<sp/>DimA-&gt;Indices;</highlight></codeline>
<codeline lineno="6463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>DimA-&gt;Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="6464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_infix_fill(</highlight></codeline>
<codeline lineno="6465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataA<sp/>+<sp/>(Indices[I])<sp/>*<sp/>StrideA,<sp/>DimA<sp/>+<sp/>1,<sp/>GetterA,<sp/>DegreeA<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="6466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataB,<sp/>DimB,<sp/>GetterB,<sp/>DegreeB,</highlight></codeline>
<codeline lineno="6467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataC,<sp/>DimC<sp/>+<sp/>1,<sp/>InfixSetFn,<sp/>DegreeC<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="6468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="6469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataC<sp/>+=<sp/>StrideC;</highlight></codeline>
<codeline lineno="6470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DimA-&gt;Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="6473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_infix_fill(</highlight></codeline>
<codeline lineno="6474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataA,<sp/>DimA<sp/>+<sp/>1,<sp/>GetterA,<sp/>DegreeA<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="6475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataB,<sp/>DimB,<sp/>GetterB,<sp/>DegreeB,</highlight></codeline>
<codeline lineno="6476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataC,<sp/>DimC<sp/>+<sp/>1,<sp/>InfixSetFn,<sp/>DegreeC<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="6477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="6478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataA<sp/>+=<sp/>StrideA;</highlight></codeline>
<codeline lineno="6479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataC<sp/>+=<sp/>StrideC;</highlight></codeline>
<codeline lineno="6480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6482"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(DegreeB<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StrideB<sp/>=<sp/>DimB-&gt;Stride;</highlight></codeline>
<codeline lineno="6484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StrideC<sp/>=<sp/>(DimC<sp/>+<sp/>DegreeC<sp/>-<sp/>1)-&gt;Stride;</highlight></codeline>
<codeline lineno="6485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(DimB-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="6486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices<sp/>=<sp/>DimB-&gt;Indices;</highlight></codeline>
<codeline lineno="6487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>DimB-&gt;Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="6488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_infix_fill(</highlight></codeline>
<codeline lineno="6489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataA,<sp/>DimA,<sp/>GetterA,<sp/>DegreeA,</highlight></codeline>
<codeline lineno="6490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataB<sp/>+<sp/>(Indices[I])<sp/>*<sp/>StrideB,<sp/>DimB<sp/>-<sp/>1,<sp/>GetterB,<sp/>DegreeB<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="6491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataC,<sp/>DimC,<sp/>InfixSetFn,<sp/>DegreeC<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="6492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="6493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataC<sp/>+=<sp/>StrideC;</highlight></codeline>
<codeline lineno="6494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DimB-&gt;Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="6497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_infix_fill(</highlight></codeline>
<codeline lineno="6498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataA,<sp/>DimA,<sp/>GetterA,<sp/>DegreeA,</highlight></codeline>
<codeline lineno="6499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataB,<sp/>DimB<sp/>-<sp/>1,<sp/>GetterB,<sp/>DegreeB<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="6500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataC,<sp/>DimC,<sp/>InfixSetFn,<sp/>DegreeC<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="6501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="6502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataB<sp/>+=<sp/>StrideB;</highlight></codeline>
<codeline lineno="6503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataC<sp/>+=<sp/>StrideC;</highlight></codeline>
<codeline lineno="6504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6506"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InfixSetFn(DataA,<sp/>GetterA,<sp/>DataB,<sp/>GetterB,<sp/>DataC);</highlight></codeline>
<codeline lineno="6508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6510"><highlight class="normal"></highlight></codeline>
<codeline lineno="6511"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6512"><highlight class="normal"></highlight></codeline>
<codeline lineno="6513"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ARRAY_INFIX_FNS(NAME,<sp/>KIND)<sp/>\</highlight></codeline>
<codeline lineno="6514"><highlight class="preprocessor">static<sp/>ml_array_infix_set_fn<sp/>MLArrayInfix<sp/>##<sp/>NAME<sp/>##<sp/>Fns[]<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6515"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U8]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_uint8_t,<sp/>\</highlight></codeline>
<codeline lineno="6516"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I8]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_int8_t,<sp/>\</highlight></codeline>
<codeline lineno="6517"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U16]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_uint16_t,<sp/>\</highlight></codeline>
<codeline lineno="6518"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I16]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_int16_t,<sp/>\</highlight></codeline>
<codeline lineno="6519"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U32]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_uint32_t,<sp/>\</highlight></codeline>
<codeline lineno="6520"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I32]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_int32_t,<sp/>\</highlight></codeline>
<codeline lineno="6521"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U64]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_uint64_t,<sp/>\</highlight></codeline>
<codeline lineno="6522"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I64]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_int64_t,<sp/>\</highlight></codeline>
<codeline lineno="6523"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_F32]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_float,<sp/>\</highlight></codeline>
<codeline lineno="6524"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_F64]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_double,<sp/>\</highlight></codeline>
<codeline lineno="6525"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_C32]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_complex_float,<sp/>\</highlight></codeline>
<codeline lineno="6526"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_C64]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_complex_double,\</highlight></codeline>
<codeline lineno="6527"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_ANY]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_any<sp/>\</highlight></codeline>
<codeline lineno="6528"><highlight class="preprocessor">};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6529"><highlight class="normal"></highlight></codeline>
<codeline lineno="6530"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6531"><highlight class="normal"></highlight></codeline>
<codeline lineno="6532"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ARRAY_INFIX_FNS(NAME,<sp/>KIND)<sp/>\</highlight></codeline>
<codeline lineno="6533"><highlight class="preprocessor">static<sp/>ml_array_infix_set_fn<sp/>MLArrayInfix<sp/>##<sp/>NAME<sp/>##<sp/>Fns[]<sp/>=<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="6534"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I8]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_int8_t,<sp/>\</highlight></codeline>
<codeline lineno="6535"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U8]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_uint8_t,<sp/>\</highlight></codeline>
<codeline lineno="6536"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I16]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_int16_t,<sp/>\</highlight></codeline>
<codeline lineno="6537"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U16]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_uint16_t,<sp/>\</highlight></codeline>
<codeline lineno="6538"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I32]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_int32_t,<sp/>\</highlight></codeline>
<codeline lineno="6539"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U32]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_uint32_t,<sp/>\</highlight></codeline>
<codeline lineno="6540"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I64]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_int64_t,<sp/>\</highlight></codeline>
<codeline lineno="6541"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U64]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_uint64_t,\</highlight></codeline>
<codeline lineno="6542"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_F32]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_float,<sp/>\</highlight></codeline>
<codeline lineno="6543"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_F64]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_double,<sp/>\</highlight></codeline>
<codeline lineno="6544"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_ANY]<sp/>=<sp/>(ml_array_infix_set_fn)ml_array_infix_set_<sp/>##<sp/>KIND<sp/>##<sp/>_any<sp/>\</highlight></codeline>
<codeline lineno="6545"><highlight class="preprocessor">};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6546"><highlight class="normal"></highlight></codeline>
<codeline lineno="6547"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6548"><highlight class="normal"></highlight></codeline>
<codeline lineno="6549"><highlight class="normal">ML_ARRAY_INFIX_FNS(Add,<sp/>add)</highlight></codeline>
<codeline lineno="6550"><highlight class="normal">ML_ARRAY_INFIX_FNS(Sub,<sp/>sub)</highlight></codeline>
<codeline lineno="6551"><highlight class="normal">ML_ARRAY_INFIX_FNS(Mul,<sp/>mul)</highlight></codeline>
<codeline lineno="6552"><highlight class="normal">ML_ARRAY_INFIX_FNS(Div,<sp/>div)</highlight></codeline>
<codeline lineno="6553"><highlight class="normal"></highlight></codeline>
<codeline lineno="6554"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ml_array_dot_fn<sp/>MLArrayDotFns[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="6555"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U8]<sp/>=<sp/>(ml_array_dot_fn)ml_array_dot_uint8_t,</highlight></codeline>
<codeline lineno="6556"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I8]<sp/>=<sp/>(ml_array_dot_fn)ml_array_dot_int8_t,</highlight></codeline>
<codeline lineno="6557"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U16]<sp/>=<sp/>(ml_array_dot_fn)ml_array_dot_uint16_t,</highlight></codeline>
<codeline lineno="6558"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I16]<sp/>=<sp/>(ml_array_dot_fn)ml_array_dot_int16_t,</highlight></codeline>
<codeline lineno="6559"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U32]<sp/>=<sp/>(ml_array_dot_fn)ml_array_dot_uint32_t,</highlight></codeline>
<codeline lineno="6560"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I32]<sp/>=<sp/>(ml_array_dot_fn)ml_array_dot_int32_t,</highlight></codeline>
<codeline lineno="6561"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U64]<sp/>=<sp/>(ml_array_dot_fn)ml_array_dot_uint64_t,</highlight></codeline>
<codeline lineno="6562"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I64]<sp/>=<sp/>(ml_array_dot_fn)ml_array_dot_int64_t,</highlight></codeline>
<codeline lineno="6563"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_F32]<sp/>=<sp/>(ml_array_dot_fn)ml_array_dot_float,</highlight></codeline>
<codeline lineno="6564"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_F64]<sp/>=<sp/>(ml_array_dot_fn)ml_array_dot_double,</highlight></codeline>
<codeline lineno="6565"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6566"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_C32]<sp/>=<sp/>(ml_array_dot_fn)ml_array_dot_complex_float,</highlight></codeline>
<codeline lineno="6567"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_C64]<sp/>=<sp/>(ml_array_dot_fn)ml_array_dot_complex_double,</highlight></codeline>
<codeline lineno="6568"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6569"><highlight class="normal"><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_ANY]<sp/>=<sp/>(ml_array_dot_fn)ml_array_dot_any</highlight></codeline>
<codeline lineno="6570"><highlight class="normal">};</highlight></codeline>
<codeline lineno="6571"><highlight class="normal"></highlight></codeline>
<codeline lineno="6572"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">,<sp/>MLArrayT,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="6573"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6574"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6575"><highlight class="normal"></highlight><highlight class="comment">//&gt;array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6576"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>inner<sp/>product<sp/>of<sp/>:mini:`A`<sp/>and<sp/>:mini:`B`.<sp/>The<sp/>last<sp/>dimension<sp/>of<sp/>:mini:`A`<sp/>and<sp/>the<sp/>first<sp/>dimension<sp/>of<sp/>:mini:`B`<sp/>must<sp/>match,<sp/>skipping<sp/>any<sp/>dimensions<sp/>of<sp/>size<sp/>:mini:`1`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A;</highlight></codeline>
<codeline lineno="6579"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="6580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(B-&gt;Degree<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="6581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DegreeA<sp/>=<sp/>A-&gt;Degree;</highlight></codeline>
<codeline lineno="6582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DegreeB<sp/>=<sp/>B-&gt;Degree;</highlight></codeline>
<codeline lineno="6583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!DegreeA<sp/>||<sp/>!DegreeB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ShapeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*DimA<sp/>=<sp/>A-&gt;Dimensions;</highlight></codeline>
<codeline lineno="6585"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*DimB<sp/>=<sp/>B-&gt;Dimensions;</highlight></codeline>
<codeline lineno="6586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SizeA<sp/>=<sp/>DimA[DegreeA<sp/>-<sp/>1].Size;</highlight></codeline>
<codeline lineno="6587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SizeB<sp/>=<sp/>DimB[0].Size;</highlight></codeline>
<codeline lineno="6588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>DegreeA<sp/>+<sp/>DegreeB<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="6589"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_array_format_t<sp/>Format<sp/>=<sp/>MAX(A-&gt;Format,<sp/>B-&gt;Format);</highlight></codeline>
<codeline lineno="6590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Degree)<sp/>{</highlight></codeline>
<codeline lineno="6591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SizeA<sp/>!=<sp/>SizeB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ShapeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Incompatible<sp/>arrays&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Format<sp/>&lt;=<sp/>ML_ARRAY_FORMAT_F64)<sp/>{</highlight></codeline>
<codeline lineno="6593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetterA<sp/>=<sp/>MLArrayGetters[ML_ARRAY_FORMAT_F64][A-&gt;Format];</highlight></codeline>
<codeline lineno="6594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetterB<sp/>=<sp/>MLArrayGetters[ML_ARRAY_FORMAT_F64][B-&gt;Format];</highlight></codeline>
<codeline lineno="6595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_dot_fn<sp/>DotFn<sp/>=<sp/>MLArrayDotFns[ML_ARRAY_FORMAT_F64];</highlight></codeline>
<codeline lineno="6596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Dot;</highlight></codeline>
<codeline lineno="6597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DotFn(</highlight></codeline>
<codeline lineno="6598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A-&gt;Base.Value,<sp/>DimA,<sp/>GetterA,</highlight></codeline>
<codeline lineno="6599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Base.Value,<sp/>DimB<sp/>+<sp/>(DegreeB<sp/>-<sp/>1),<sp/>GetterB,</highlight></codeline>
<codeline lineno="6600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Dot</highlight></codeline>
<codeline lineno="6601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="6602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(Dot);</highlight></codeline>
<codeline lineno="6603"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Format<sp/>&lt;=<sp/>ML_ARRAY_FORMAT_C64)<sp/>{</highlight></codeline>
<codeline lineno="6605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetterA<sp/>=<sp/>MLArrayGetters[ML_ARRAY_FORMAT_C64][A-&gt;Format];</highlight></codeline>
<codeline lineno="6606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetterB<sp/>=<sp/>MLArrayGetters[ML_ARRAY_FORMAT_C64][B-&gt;Format];</highlight></codeline>
<codeline lineno="6607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_dot_fn<sp/>DotFn<sp/>=<sp/>MLArrayDotFns[ML_ARRAY_FORMAT_C64];</highlight></codeline>
<codeline lineno="6608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex_double<sp/>Dot;</highlight></codeline>
<codeline lineno="6609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DotFn(</highlight></codeline>
<codeline lineno="6610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A-&gt;Base.Value,<sp/>DimA,<sp/>GetterA,</highlight></codeline>
<codeline lineno="6611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Base.Value,<sp/>DimB<sp/>+<sp/>(DegreeB<sp/>-<sp/>1),<sp/>GetterB,</highlight></codeline>
<codeline lineno="6612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Dot</highlight></codeline>
<codeline lineno="6613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="6614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(Dot);</highlight></codeline>
<codeline lineno="6615"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetterA<sp/>=<sp/>MLArrayGetters[ML_ARRAY_FORMAT_ANY][A-&gt;Format];</highlight></codeline>
<codeline lineno="6618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetterB<sp/>=<sp/>MLArrayGetters[ML_ARRAY_FORMAT_ANY][B-&gt;Format];</highlight></codeline>
<codeline lineno="6619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_dot_fn<sp/>DotFn<sp/>=<sp/>MLArrayDotFns[ML_ARRAY_FORMAT_ANY];</highlight></codeline>
<codeline lineno="6620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Dot;</highlight></codeline>
<codeline lineno="6621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DotFn(</highlight></codeline>
<codeline lineno="6622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A-&gt;Base.Value,<sp/>DimA,<sp/>GetterA,</highlight></codeline>
<codeline lineno="6623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Base.Value,<sp/>DimB<sp/>+<sp/>(DegreeB<sp/>-<sp/>1),<sp/>GetterB,</highlight></codeline>
<codeline lineno="6624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Dot</highlight></codeline>
<codeline lineno="6625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="6626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Dot;</highlight></codeline>
<codeline lineno="6627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UseProd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SizeA<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="6631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UseProd<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="6632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DegreeA<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="6633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SizeB<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="6634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DegreeB<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="6635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DimB<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="6636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Degree<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="6638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6639"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SizeB<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="6640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UseProd<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="6641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DegreeB<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="6642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DimB<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="6643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Degree<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="6644"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SizeA<sp/>!=<sp/>SizeB)<sp/>{</highlight></codeline>
<codeline lineno="6645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ShapeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Incompatible<sp/>arrays&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6647"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*C<sp/>=<sp/>ml_array_alloc(Format,<sp/>Degree);</highlight></codeline>
<codeline lineno="6648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>MLArraySizes[C-&gt;Format];</highlight></codeline>
<codeline lineno="6649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(UseProd)<sp/>{</highlight></codeline>
<codeline lineno="6650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Base<sp/>=<sp/>DegreeA;</highlight></codeline>
<codeline lineno="6651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DegreeB;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="6652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions[Base<sp/>+<sp/>I].Stride<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="6653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>C-&gt;Dimensions[Base<sp/>+<sp/>I].Size<sp/>=<sp/>DimB[I].Size;</highlight></codeline>
<codeline lineno="6654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;</highlight></codeline>
<codeline lineno="6655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DegreeA;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="6657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions[I].Stride<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="6658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>C-&gt;Dimensions[I].Size<sp/>=<sp/>DimA[I].Size;</highlight></codeline>
<codeline lineno="6659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;</highlight></codeline>
<codeline lineno="6660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6661"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Base<sp/>=<sp/>DegreeA<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="6663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DegreeB;<sp/>--I<sp/>&gt;=<sp/>1;)<sp/>{</highlight></codeline>
<codeline lineno="6664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions[Base<sp/>+<sp/>I].Stride<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="6665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>C-&gt;Dimensions[Base<sp/>+<sp/>I].Size<sp/>=<sp/>DimB[I].Size;</highlight></codeline>
<codeline lineno="6666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;</highlight></codeline>
<codeline lineno="6667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DegreeA<sp/>-<sp/>1;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="6669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions[I].Stride<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="6670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>C-&gt;Dimensions[I].Size<sp/>=<sp/>DimA[I].Size;</highlight></codeline>
<codeline lineno="6671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;</highlight></codeline>
<codeline lineno="6672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6673"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6674"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Base.Value<sp/>=<sp/>array_alloc(Format,<sp/>DataSize);</highlight></codeline>
<codeline lineno="6675"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Base.Length<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="6676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(UseProd)<sp/>{</highlight></codeline>
<codeline lineno="6677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetterA<sp/>=<sp/>MLArrayGetters[C-&gt;Format][A-&gt;Format];</highlight></codeline>
<codeline lineno="6678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetterB<sp/>=<sp/>MLArrayGetters[C-&gt;Format][B-&gt;Format];</highlight></codeline>
<codeline lineno="6679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_infix_set_fn<sp/>InfixSetFn<sp/>=<sp/>MLArrayInfixMulFns[C-&gt;Format];</highlight></codeline>
<codeline lineno="6680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_infix_fill(</highlight></codeline>
<codeline lineno="6681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A-&gt;Base.Value,<sp/>DimA,<sp/>GetterA,<sp/>DegreeA,</highlight></codeline>
<codeline lineno="6682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Base.Value,<sp/>DimB<sp/>+<sp/>(DegreeB<sp/>-<sp/>1),<sp/>GetterB,<sp/>DegreeB,</highlight></codeline>
<codeline lineno="6683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Base.Value,<sp/>C-&gt;Dimensions,<sp/>InfixSetFn,<sp/>C-&gt;Degree</highlight></codeline>
<codeline lineno="6684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="6685"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetterA<sp/>=<sp/>MLArrayGetters[C-&gt;Format][A-&gt;Format];</highlight></codeline>
<codeline lineno="6687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetterB<sp/>=<sp/>MLArrayGetters[C-&gt;Format][B-&gt;Format];</highlight></codeline>
<codeline lineno="6688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_dot_fn<sp/>DotFn<sp/>=<sp/>MLArrayDotFns[C-&gt;Format];</highlight></codeline>
<codeline lineno="6689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_dot_fill(</highlight></codeline>
<codeline lineno="6690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A-&gt;Base.Value,<sp/>DimA,<sp/>GetterA,<sp/>DegreeA,</highlight></codeline>
<codeline lineno="6691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Base.Value,<sp/>DimB<sp/>+<sp/>(DegreeB<sp/>-<sp/>1),<sp/>GetterB,<sp/>DegreeB,</highlight></codeline>
<codeline lineno="6692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Base.Value,<sp/>C-&gt;Dimensions,<sp/>DotFn,<sp/>C-&gt;Degree</highlight></codeline>
<codeline lineno="6693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="6694"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="6696"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6697"><highlight class="normal"></highlight></codeline>
<codeline lineno="6698"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal">,<sp/>MLMatrixT,<sp/>MLVectorT)<sp/>{</highlight></codeline>
<codeline lineno="6699"><highlight class="normal"></highlight><highlight class="comment">//&lt;T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6700"><highlight class="normal"></highlight><highlight class="comment">//&lt;X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6701"><highlight class="normal"></highlight><highlight class="comment">//&gt;vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6702"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`X`<sp/>transformed<sp/>by<sp/>:mini:`T`.<sp/>:mini:`T`<sp/>must<sp/>be<sp/>a<sp/>:mini:`N`<sp/>|times|<sp/>:mini:`N`<sp/>matrix<sp/>and<sp/>:mini:`X`<sp/>a<sp/>vector<sp/>of<sp/>size<sp/>:mini:`N<sp/>-<sp/>1`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6703"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6704"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="6705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>A-&gt;Dimensions[0].Size;</highlight></codeline>
<codeline lineno="6706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>!=<sp/>A-&gt;Dimensions[1].Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ShapeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Square<sp/>matrix<sp/>required&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>!=<sp/>B-&gt;Dimensions-&gt;Size<sp/>+<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ShapeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>vector<sp/>size<sp/>for<sp/>transformation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6708"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_array_format_t<sp/>Format<sp/>=<sp/>MAX(A-&gt;Format,<sp/>B-&gt;Format);</highlight></codeline>
<codeline lineno="6709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Format<sp/>&lt;=<sp/>ML_ARRAY_FORMAT_F64)<sp/>{</highlight></codeline>
<codeline lineno="6710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Projection[N],<sp/>*Result<sp/>=<sp/>anew(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>N);</highlight></codeline>
<codeline lineno="6711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_getter_double<sp/>GetterB<sp/>=<sp/>MLArrayGetters[ML_ARRAY_FORMAT_F64][B-&gt;Format];</highlight></codeline>
<codeline lineno="6712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*BData<sp/>=<sp/>B-&gt;Base.Value;</highlight></codeline>
<codeline lineno="6713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride<sp/>=<sp/>B-&gt;Dimensions-&gt;Stride,<sp/>*Indices<sp/>=<sp/>B-&gt;Dimensions-&gt;Indices;</highlight></codeline>
<codeline lineno="6714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Indices)<sp/>{</highlight></codeline>
<codeline lineno="6715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N<sp/>-<sp/>1;<sp/>++I)<sp/>Projection[I]<sp/>=<sp/>GetterB(BData<sp/>+<sp/>Stride<sp/>*<sp/>Indices[I]);</highlight></codeline>
<codeline lineno="6716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N<sp/>-<sp/>1;<sp/>++I)<sp/>Projection[I]<sp/>=<sp/>GetterB(BData<sp/>+<sp/>Stride<sp/>*<sp/>I);</highlight></codeline>
<codeline lineno="6718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Projection[N<sp/>-<sp/>1]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="6720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetterA<sp/>=<sp/>MLArrayGetters[ML_ARRAY_FORMAT_F64][A-&gt;Format];</highlight></codeline>
<codeline lineno="6721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_dot_fn<sp/>DotFn<sp/>=<sp/>MLArrayDotFns[ML_ARRAY_FORMAT_F64];</highlight></codeline>
<codeline lineno="6722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>Dimension<sp/>=<sp/>{N,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double),<sp/>NULL};</highlight></codeline>
<codeline lineno="6723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_dot_fill(</highlight></codeline>
<codeline lineno="6724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A-&gt;Base.Value,<sp/>A-&gt;Dimensions,<sp/>GetterA,<sp/>2,</highlight></codeline>
<codeline lineno="6725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Projection,<sp/>&amp;Dimension,<sp/>ml_array_getter_double_double,<sp/>1,</highlight></codeline>
<codeline lineno="6726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result,<sp/>&amp;Dimension,<sp/>DotFn,<sp/>1</highlight></codeline>
<codeline lineno="6727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="6728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Scale<sp/>=<sp/>Result[N<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="6729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N<sp/>-<sp/>1;<sp/>++I)<sp/>Result[I]<sp/>/=<sp/>Scale;</highlight></codeline>
<codeline lineno="6730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_F64,<sp/>1);</highlight></codeline>
<codeline lineno="6731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Base.Value<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Result;</highlight></codeline>
<codeline lineno="6732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions-&gt;Size<sp/>=<sp/>N<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="6733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions-&gt;Stride<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double);</highlight></codeline>
<codeline lineno="6734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="6735"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6736"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Format<sp/>&lt;=<sp/>ML_ARRAY_FORMAT_C64)<sp/>{</highlight></codeline>
<codeline lineno="6737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Projection[N],<sp/>*Result<sp/>=<sp/>anew(complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>N);</highlight></codeline>
<codeline lineno="6738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_getter_complex_double<sp/>GetterB<sp/>=<sp/>MLArrayGetters[ML_ARRAY_FORMAT_C64][B-&gt;Format];</highlight></codeline>
<codeline lineno="6739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*BData<sp/>=<sp/>B-&gt;Base.Value;</highlight></codeline>
<codeline lineno="6740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride<sp/>=<sp/>B-&gt;Dimensions-&gt;Stride,<sp/>*Indices<sp/>=<sp/>B-&gt;Dimensions-&gt;Indices;</highlight></codeline>
<codeline lineno="6741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Indices)<sp/>{</highlight></codeline>
<codeline lineno="6742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N<sp/>-<sp/>1;<sp/>++I)<sp/>Projection[I]<sp/>=<sp/>GetterB(BData<sp/>+<sp/>Stride<sp/>*<sp/>Indices[I]);</highlight></codeline>
<codeline lineno="6743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N<sp/>-<sp/>1;<sp/>++I)<sp/>Projection[I]<sp/>=<sp/>GetterB(BData<sp/>+<sp/>Stride<sp/>*<sp/>I);</highlight></codeline>
<codeline lineno="6745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Projection[N<sp/>-<sp/>1]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="6747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetterA<sp/>=<sp/>MLArrayGetters[ML_ARRAY_FORMAT_C64][A-&gt;Format];</highlight></codeline>
<codeline lineno="6748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_dot_fn<sp/>DotFn<sp/>=<sp/>MLArrayDotFns[ML_ARRAY_FORMAT_C64];</highlight></codeline>
<codeline lineno="6749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>Dimension<sp/>=<sp/>{N,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(complex<sp/>double),<sp/>NULL};</highlight></codeline>
<codeline lineno="6750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_dot_fill(</highlight></codeline>
<codeline lineno="6751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A-&gt;Base.Value,<sp/>A-&gt;Dimensions,<sp/>GetterA,<sp/>2,</highlight></codeline>
<codeline lineno="6752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Projection,<sp/>&amp;Dimension,<sp/>ml_array_getter_complex_double_complex_double,<sp/>1,</highlight></codeline>
<codeline lineno="6753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result,<sp/>&amp;Dimension,<sp/>DotFn,<sp/>1</highlight></codeline>
<codeline lineno="6754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="6755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Scale<sp/>=<sp/>Result[N<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="6756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N<sp/>-<sp/>1;<sp/>++I)<sp/>Result[I]<sp/>/=<sp/>Scale;</highlight></codeline>
<codeline lineno="6757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_C64,<sp/>1);</highlight></codeline>
<codeline lineno="6758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Base.Value<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Result;</highlight></codeline>
<codeline lineno="6759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions-&gt;Size<sp/>=<sp/>N<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="6760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions-&gt;Stride<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(complex<sp/>double);</highlight></codeline>
<codeline lineno="6761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="6762"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6763"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Projection[N],<sp/>**Result<sp/>=<sp/>anew(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*,<sp/>N);</highlight></codeline>
<codeline lineno="6765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_getter_any<sp/>GetterB<sp/>=<sp/>MLArrayGetters[ML_ARRAY_FORMAT_ANY][B-&gt;Format];</highlight></codeline>
<codeline lineno="6766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*BData<sp/>=<sp/>B-&gt;Base.Value;</highlight></codeline>
<codeline lineno="6767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride<sp/>=<sp/>B-&gt;Dimensions-&gt;Stride,<sp/>*Indices<sp/>=<sp/>B-&gt;Dimensions-&gt;Indices;</highlight></codeline>
<codeline lineno="6768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Indices)<sp/>{</highlight></codeline>
<codeline lineno="6769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N<sp/>-<sp/>1;<sp/>++I)<sp/>Projection[I]<sp/>=<sp/>GetterB(BData<sp/>+<sp/>Stride<sp/>*<sp/>Indices[I]);</highlight></codeline>
<codeline lineno="6770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N<sp/>-<sp/>1;<sp/>++I)<sp/>Projection[I]<sp/>=<sp/>GetterB(BData<sp/>+<sp/>Stride<sp/>*<sp/>I);</highlight></codeline>
<codeline lineno="6772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Projection[N<sp/>-<sp/>1]<sp/>=<sp/>ml_real(1);</highlight></codeline>
<codeline lineno="6774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetterA<sp/>=<sp/>MLArrayGetters[ML_ARRAY_FORMAT_ANY][A-&gt;Format];</highlight></codeline>
<codeline lineno="6775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_dot_fn<sp/>DotFn<sp/>=<sp/>MLArrayDotFns[ML_ARRAY_FORMAT_ANY];</highlight></codeline>
<codeline lineno="6776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>Dimension<sp/>=<sp/>{N,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*),<sp/>NULL};</highlight></codeline>
<codeline lineno="6777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_dot_fill(</highlight></codeline>
<codeline lineno="6778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A-&gt;Base.Value,<sp/>A-&gt;Dimensions,<sp/>GetterA,<sp/>2,</highlight></codeline>
<codeline lineno="6779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Projection,<sp/>&amp;Dimension,<sp/>ml_array_getter_any_any,<sp/>1,</highlight></codeline>
<codeline lineno="6780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result,<sp/>&amp;Dimension,<sp/>DotFn,<sp/>1</highlight></codeline>
<codeline lineno="6781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="6782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Scale<sp/>=<sp/>Result[N<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="6783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N<sp/>-<sp/>1;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="6784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args2[2]<sp/>=<sp/>{Result[I],<sp/>Scale};</highlight></codeline>
<codeline lineno="6785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result[I]<sp/>=<sp/>ml_simple_call(DivMethod,<sp/>2,<sp/>Args2);</highlight></codeline>
<codeline lineno="6786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*C<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_ANY,<sp/>1);</highlight></codeline>
<codeline lineno="6788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Base.Value<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Result;</highlight></codeline>
<codeline lineno="6789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions-&gt;Size<sp/>=<sp/>N<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="6790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions-&gt;Stride<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="6791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="6792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6794"><highlight class="normal"></highlight></codeline>
<codeline lineno="6795"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_array_pairwise_infix(ml_array_infix_set_fn<sp/>*InfixSetFns,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="6796"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Degree<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A;</highlight></codeline>
<codeline lineno="6798"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="6799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(B-&gt;Degree<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="6800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DegreeA<sp/>=<sp/>A-&gt;Degree;</highlight></codeline>
<codeline lineno="6801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DegreeB<sp/>=<sp/>B-&gt;Degree;</highlight></codeline>
<codeline lineno="6802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!DegreeA<sp/>||<sp/>!DegreeB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ShapeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6803"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*DimA<sp/>=<sp/>A-&gt;Dimensions;</highlight></codeline>
<codeline lineno="6804"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*DimB<sp/>=<sp/>B-&gt;Dimensions;</highlight></codeline>
<codeline lineno="6805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>DegreeA<sp/>+<sp/>DegreeB;</highlight></codeline>
<codeline lineno="6806"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_array_format_t<sp/>Format<sp/>=<sp/>MAX(A-&gt;Format,<sp/>B-&gt;Format);</highlight></codeline>
<codeline lineno="6807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InfixSetFns<sp/>==<sp/>MLArrayInfixDivFns)<sp/>Format<sp/>=<sp/>MAX(Format,<sp/>ML_ARRAY_FORMAT_F64);</highlight></codeline>
<codeline lineno="6808"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*C<sp/>=<sp/>ml_array_alloc(Format,<sp/>Degree);</highlight></codeline>
<codeline lineno="6809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DataSize<sp/>=<sp/>MLArraySizes[C-&gt;Format];</highlight></codeline>
<codeline lineno="6810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Base<sp/>=<sp/>DegreeA;</highlight></codeline>
<codeline lineno="6811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DegreeB;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="6812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions[Base<sp/>+<sp/>I].Stride<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="6813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>C-&gt;Dimensions[Base<sp/>+<sp/>I].Size<sp/>=<sp/>DimB[I].Size;</highlight></codeline>
<codeline lineno="6814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;</highlight></codeline>
<codeline lineno="6815"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>DegreeA;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="6817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Dimensions[I].Stride<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="6818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>C-&gt;Dimensions[I].Size<sp/>=<sp/>DimA[I].Size;</highlight></codeline>
<codeline lineno="6819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataSize<sp/>*=<sp/>Size;</highlight></codeline>
<codeline lineno="6820"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6821"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Base.Value<sp/>=<sp/>array_alloc(Format,<sp/>DataSize);</highlight></codeline>
<codeline lineno="6822"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Base.Length<sp/>=<sp/>DataSize;</highlight></codeline>
<codeline lineno="6823"><highlight class="normal"></highlight></codeline>
<codeline lineno="6824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetterA<sp/>=<sp/>MLArrayGetters[C-&gt;Format][A-&gt;Format];</highlight></codeline>
<codeline lineno="6825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*GetterB<sp/>=<sp/>MLArrayGetters[C-&gt;Format][B-&gt;Format];</highlight></codeline>
<codeline lineno="6826"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_array_infix_set_fn<sp/>InfixSetFn<sp/>=<sp/>InfixSetFns[C-&gt;Format];</highlight></codeline>
<codeline lineno="6827"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_array_infix_fill(</highlight></codeline>
<codeline lineno="6828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A-&gt;Base.Value,<sp/>DimA,<sp/>GetterA,<sp/>DegreeA,</highlight></codeline>
<codeline lineno="6829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Base.Value,<sp/>DimB<sp/>+<sp/>(DegreeB<sp/>-<sp/>1),<sp/>GetterB,<sp/>DegreeB,</highlight></codeline>
<codeline lineno="6830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Base.Value,<sp/>C-&gt;Dimensions,<sp/>InfixSetFn,<sp/>C-&gt;Degree</highlight></codeline>
<codeline lineno="6831"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="6832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="6833"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6834"><highlight class="normal"></highlight></codeline>
<codeline lineno="6835"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ARRAY_PAIRWISE(NAME,<sp/>OP)<sp/>\</highlight></codeline>
<codeline lineno="6836"><highlight class="preprocessor"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6837"><highlight class="comment">ML_METHOD(NAME,<sp/>MLArrayT,<sp/>MLArrayT)<sp/>{</highlight></codeline>
<codeline lineno="6838"><highlight class="comment">//&lt;A</highlight></codeline>
<codeline lineno="6839"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="6840"><highlight class="comment">//&gt;array</highlight></codeline>
<codeline lineno="6841"><highlight class="comment">//<sp/>Returns<sp/>an<sp/>array<sp/>with<sp/>:mini:`A/i<sp/>OP<sp/>B/j`<sp/>for<sp/>each<sp/>pair<sp/>of<sp/>elements<sp/>of<sp/>:mini:`A`<sp/>and<sp/>:mini:`B`.<sp/>The<sp/>result<sp/>will<sp/>have<sp/>shape<sp/>:mini:`A:shape<sp/>+<sp/>B:shape`.</highlight></codeline>
<codeline lineno="6842"><highlight class="comment">//</highlight></codeline>
<codeline lineno="6843"><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([1,<sp/>8,<sp/>3])</highlight></codeline>
<codeline lineno="6844"><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>array([[7,<sp/>2],<sp/>[4,<sp/>11]])</highlight></codeline>
<codeline lineno="6845"><highlight class="comment">//$=<sp/>A:shape</highlight></codeline>
<codeline lineno="6846"><highlight class="comment">//$=<sp/>B:shape</highlight></codeline>
<codeline lineno="6847"><highlight class="comment">//$=<sp/>let<sp/>C<sp/>:=<sp/>A<sp/>OPOP<sp/>B</highlight></codeline>
<codeline lineno="6848"><highlight class="comment">//$=<sp/>C:shape</highlight></codeline>
<codeline lineno="6849"><highlight class="comment">}</highlight></codeline>
<codeline lineno="6850"><highlight class="comment">*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6851"><highlight class="normal"></highlight></codeline>
<codeline lineno="6852"><highlight class="normal">ML_ARRAY_PAIRWISE(</highlight><highlight class="stringliteral">&quot;++&quot;</highlight><highlight class="normal">,<sp/>+)</highlight></codeline>
<codeline lineno="6853"><highlight class="normal">ML_ARRAY_PAIRWISE(&quot;--&quot;,<sp/>-)</highlight></codeline>
<codeline lineno="6854"><highlight class="normal">ML_ARRAY_PAIRWISE(&quot;**&quot;,<sp/>*)</highlight></codeline>
<codeline lineno="6855"><highlight class="normal">ML_ARRAY_PAIRWISE(&quot;</highlight><highlight class="comment">//&quot;,<sp/>/)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6856"><highlight class="normal"></highlight></codeline>
<codeline lineno="6857"><highlight class="normal">static<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_lu_decomp_real(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**A,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*P,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N)<sp/>{</highlight></codeline>
<codeline lineno="6858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;=<sp/>N;<sp/>++I)<sp/>P[I]<sp/>=<sp/>I;</highlight></codeline>
<codeline lineno="6859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="6860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MaxA<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IMax<sp/>=<sp/>I;</highlight></codeline>
<codeline lineno="6862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>I;<sp/>K<sp/>&lt;<sp/>N;<sp/>++K)<sp/>{</highlight></codeline>
<codeline lineno="6863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>AbsA<sp/>=<sp/>fabs(A[K][I]);</highlight></codeline>
<codeline lineno="6864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AbsA<sp/>&gt;<sp/>MaxA)<sp/>{</highlight></codeline>
<codeline lineno="6865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MaxA<sp/>=<sp/>AbsA;</highlight></codeline>
<codeline lineno="6866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMax<sp/>=<sp/>K;</highlight></codeline>
<codeline lineno="6867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MaxA<sp/>&lt;<sp/>DBL_EPSILON)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="6870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IMax<sp/>!=<sp/>I)<sp/>{</highlight></codeline>
<codeline lineno="6871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>P[I];</highlight></codeline>
<codeline lineno="6872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P[I]<sp/>=<sp/>P[IMax];</highlight></codeline>
<codeline lineno="6873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P[IMax]<sp/>=<sp/>J;</highlight></codeline>
<codeline lineno="6874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*B<sp/>=<sp/>A[I];</highlight></codeline>
<codeline lineno="6875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[I]<sp/>=<sp/>A[IMax];</highlight></codeline>
<codeline lineno="6876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[IMax]<sp/>=<sp/>B;</highlight></codeline>
<codeline lineno="6877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P[N]++;</highlight></codeline>
<codeline lineno="6878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>I<sp/>+<sp/>1;<sp/>J<sp/>&lt;<sp/>N;<sp/>++J)<sp/>{</highlight></codeline>
<codeline lineno="6880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[J][I]<sp/>/=<sp/>A[I][I];</highlight></codeline>
<codeline lineno="6881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>I<sp/>+<sp/>1;<sp/>K<sp/>&lt;<sp/>N;<sp/>++K)<sp/>{</highlight></codeline>
<codeline lineno="6882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[J][K]<sp/>-=<sp/>A[J][I]<sp/>*<sp/>A[I][K];</highlight></codeline>
<codeline lineno="6883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6885"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="6887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6888"><highlight class="normal"></highlight></codeline>
<codeline lineno="6889"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6890"><highlight class="normal"></highlight></codeline>
<codeline lineno="6891"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_lu_decomp_complex(complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**A,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*P,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N)<sp/>{</highlight></codeline>
<codeline lineno="6892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;=<sp/>N;<sp/>++I)<sp/>P[I]<sp/>=<sp/>I;</highlight></codeline>
<codeline lineno="6893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="6894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MaxA<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IMax<sp/>=<sp/>I;</highlight></codeline>
<codeline lineno="6896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>I;<sp/>K<sp/>&lt;<sp/>N;<sp/>++K)<sp/>{</highlight></codeline>
<codeline lineno="6897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>AbsA<sp/>=<sp/>cabs(A[K][I]);</highlight></codeline>
<codeline lineno="6898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AbsA<sp/>&gt;<sp/>MaxA)<sp/>{</highlight></codeline>
<codeline lineno="6899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MaxA<sp/>=<sp/>AbsA;</highlight></codeline>
<codeline lineno="6900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMax<sp/>=<sp/>K;</highlight></codeline>
<codeline lineno="6901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MaxA<sp/>&lt;<sp/>DBL_EPSILON)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="6904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IMax<sp/>!=<sp/>I)<sp/>{</highlight></codeline>
<codeline lineno="6905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>P[I];</highlight></codeline>
<codeline lineno="6906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P[I]<sp/>=<sp/>P[IMax];</highlight></codeline>
<codeline lineno="6907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P[IMax]<sp/>=<sp/>J;</highlight></codeline>
<codeline lineno="6908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*B<sp/>=<sp/>A[I];</highlight></codeline>
<codeline lineno="6909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[I]<sp/>=<sp/>A[IMax];</highlight></codeline>
<codeline lineno="6910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[IMax]<sp/>=<sp/>B;</highlight></codeline>
<codeline lineno="6911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P[N]++;</highlight></codeline>
<codeline lineno="6912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>I<sp/>+<sp/>1;<sp/>J<sp/>&lt;<sp/>N;<sp/>++J)<sp/>{</highlight></codeline>
<codeline lineno="6914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[J][I]<sp/>/=<sp/>A[I][I];</highlight></codeline>
<codeline lineno="6915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>I<sp/>+<sp/>1;<sp/>K<sp/>&lt;<sp/>N;<sp/>++K)<sp/>{</highlight></codeline>
<codeline lineno="6916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[J][K]<sp/>-=<sp/>A[J][I]<sp/>*<sp/>A[I][K];</highlight></codeline>
<codeline lineno="6917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6919"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="6921"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6922"><highlight class="normal"></highlight></codeline>
<codeline lineno="6923"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6924"><highlight class="normal"></highlight></codeline>
<codeline lineno="6925"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;\\&quot;</highlight><highlight class="normal">,<sp/>MLMatrixT)<sp/>{</highlight></codeline>
<codeline lineno="6926"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6927"><highlight class="normal"></highlight><highlight class="comment">//&gt;matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6928"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>inverse<sp/>of<sp/>:mini:`A`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6929"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>Source-&gt;Dimensions[0].Size;</highlight></codeline>
<codeline lineno="6931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>!=<sp/>Source-&gt;Dimensions[1].Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ShapeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Square<sp/>matrix<sp/>required&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Format<sp/>&lt;=<sp/>ML_ARRAY_FORMAT_F64)<sp/>{</highlight></codeline>
<codeline lineno="6933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Inv<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_F64,<sp/>2);</highlight></codeline>
<codeline lineno="6934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_copy(Inv,<sp/>Source);</highlight></codeline>
<codeline lineno="6935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride<sp/>=<sp/>Inv-&gt;Dimensions-&gt;Stride;</highlight></codeline>
<codeline lineno="6936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*A[N];</highlight></codeline>
<codeline lineno="6937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Data<sp/>=<sp/>Inv-&gt;Base.Value;</highlight></codeline>
<codeline lineno="6938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="6939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[I]<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)Data;</highlight></codeline>
<codeline lineno="6940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data<sp/>+=<sp/>Stride;</highlight></codeline>
<codeline lineno="6941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*P<sp/>=<sp/>anew(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>N<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="6943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_lu_decomp_real(A,<sp/>P,<sp/>N))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Matrix<sp/>is<sp/>degenerate&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*IA[N];</highlight></codeline>
<codeline lineno="6945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*InvData<sp/>=<sp/>IA[0]<sp/>=<sp/>anew(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>N<sp/>*<sp/>N);</highlight></codeline>
<codeline lineno="6946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>IA[I]<sp/>=<sp/>IA[I<sp/>-<sp/>1]<sp/>+<sp/>N;</highlight></codeline>
<codeline lineno="6947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>0;<sp/>J<sp/>&lt;<sp/>N;<sp/>++J)<sp/>{</highlight></codeline>
<codeline lineno="6948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="6949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IA[I][J]<sp/>=<sp/>P[I]<sp/>==<sp/>J;</highlight></codeline>
<codeline lineno="6950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>0;<sp/>K<sp/>&lt;<sp/>I;<sp/>++K)<sp/>{</highlight></codeline>
<codeline lineno="6951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IA[I][J]<sp/>-=<sp/>A[I][K]<sp/>*<sp/>IA[K][J];</highlight></codeline>
<codeline lineno="6952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>N<sp/>-<sp/>1;<sp/>I<sp/>&gt;=<sp/>0;<sp/>--I)<sp/>{</highlight></codeline>
<codeline lineno="6955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>I<sp/>+<sp/>1;<sp/>K<sp/>&lt;<sp/>N;<sp/>++K)<sp/>{</highlight></codeline>
<codeline lineno="6956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IA[I][J]<sp/>-=<sp/>A[I][K]<sp/>*<sp/>IA[K][J];</highlight></codeline>
<codeline lineno="6957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IA[I][J]<sp/>/=<sp/>A[I][I];</highlight></codeline>
<codeline lineno="6959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inv-&gt;Base.Value<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)InvData;</highlight></codeline>
<codeline lineno="6962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Inv;</highlight></codeline>
<codeline lineno="6963"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6964"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Format<sp/>&lt;=<sp/>ML_ARRAY_FORMAT_C64)<sp/>{</highlight></codeline>
<codeline lineno="6965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Inv<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_C64,<sp/>2);</highlight></codeline>
<codeline lineno="6966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_copy(Inv,<sp/>Source);</highlight></codeline>
<codeline lineno="6967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>Inv-&gt;Dimensions-&gt;Size;</highlight></codeline>
<codeline lineno="6968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride<sp/>=<sp/>Inv-&gt;Dimensions-&gt;Stride;</highlight></codeline>
<codeline lineno="6969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*A[N];</highlight></codeline>
<codeline lineno="6970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Data<sp/>=<sp/>Inv-&gt;Base.Value;</highlight></codeline>
<codeline lineno="6971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="6972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[I]<sp/>=<sp/>(complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)Data;</highlight></codeline>
<codeline lineno="6973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data<sp/>+=<sp/>Stride;</highlight></codeline>
<codeline lineno="6974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*P<sp/>=<sp/>anew(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>N<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="6976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_lu_decomp_complex(A,<sp/>P,<sp/>N))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Matrix<sp/>is<sp/>degenerate&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*IA[N];</highlight></codeline>
<codeline lineno="6978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*InvData<sp/>=<sp/>IA[0]<sp/>=<sp/>anew(complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>N<sp/>*<sp/>N);</highlight></codeline>
<codeline lineno="6979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>IA[I]<sp/>=<sp/>IA[I<sp/>-<sp/>1]<sp/>+<sp/>N;</highlight></codeline>
<codeline lineno="6980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>0;<sp/>J<sp/>&lt;<sp/>N;<sp/>++J)<sp/>{</highlight></codeline>
<codeline lineno="6981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="6982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IA[I][J]<sp/>=<sp/>P[I]<sp/>==<sp/>J;</highlight></codeline>
<codeline lineno="6983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>0;<sp/>K<sp/>&lt;<sp/>I;<sp/>++K)<sp/>{</highlight></codeline>
<codeline lineno="6984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IA[I][J]<sp/>-=<sp/>A[I][K]<sp/>*<sp/>IA[K][J];</highlight></codeline>
<codeline lineno="6985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>N<sp/>-<sp/>1;<sp/>I<sp/>&gt;=<sp/>0;<sp/>--I)<sp/>{</highlight></codeline>
<codeline lineno="6988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>I<sp/>+<sp/>1;<sp/>K<sp/>&lt;<sp/>N;<sp/>++K)<sp/>{</highlight></codeline>
<codeline lineno="6989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IA[I][J]<sp/>-=<sp/>A[I][K]<sp/>*<sp/>IA[K][J];</highlight></codeline>
<codeline lineno="6990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IA[I][J]<sp/>/=<sp/>A[I][I];</highlight></codeline>
<codeline lineno="6992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inv-&gt;Base.Value<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)InvData;</highlight></codeline>
<codeline lineno="6995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Inv;</highlight></codeline>
<codeline lineno="6996"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6997"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>array<sp/>type<sp/>for<sp/>operation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6999"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7001"><highlight class="normal"></highlight></codeline>
<codeline lineno="7002"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;\\&quot;</highlight><highlight class="normal">,<sp/>MLMatrixT,<sp/>MLVectorT)<sp/>{</highlight></codeline>
<codeline lineno="7003"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7004"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7005"><highlight class="normal"></highlight><highlight class="comment">//&gt;vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7006"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>solution<sp/>:mini:`X`<sp/>of<sp/>:mini:`A<sp/>.<sp/>X<sp/>=<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7007"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="7008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>Source-&gt;Dimensions[0].Size;</highlight></codeline>
<codeline lineno="7009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>!=<sp/>Source-&gt;Dimensions[1].Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ShapeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Square<sp/>matrix<sp/>required&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7010"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="7011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(B-&gt;Dimensions-&gt;Size<sp/>!=<sp/>N)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Matrix<sp/>and<sp/>vector<sp/>sizes<sp/>do<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7012"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_array_format_t<sp/>Format<sp/>=<sp/>MAX(Source-&gt;Format,<sp/>B-&gt;Format);</highlight></codeline>
<codeline lineno="7013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Format<sp/>&lt;=<sp/>ML_ARRAY_FORMAT_F64)<sp/>{</highlight></codeline>
<codeline lineno="7014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Tmp<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_F64,<sp/>2);</highlight></codeline>
<codeline lineno="7015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_copy(Tmp,<sp/>Source);</highlight></codeline>
<codeline lineno="7016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride<sp/>=<sp/>Tmp-&gt;Dimensions-&gt;Stride;</highlight></codeline>
<codeline lineno="7017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*A[N];</highlight></codeline>
<codeline lineno="7018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Data<sp/>=<sp/>Tmp-&gt;Base.Value;</highlight></codeline>
<codeline lineno="7019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[I]<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)Data;</highlight></codeline>
<codeline lineno="7021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data<sp/>+=<sp/>Stride;</highlight></codeline>
<codeline lineno="7022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*P<sp/>=<sp/>anew(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>N<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="7024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_lu_decomp_real(A,<sp/>P,<sp/>N))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Matrix<sp/>is<sp/>degenerate&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Sol<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_F64,<sp/>1);</highlight></codeline>
<codeline lineno="7026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_copy(Sol,<sp/>B);</highlight></codeline>
<codeline lineno="7027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>X[N],<sp/>*SolData<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)Sol-&gt;Base.Value;</highlight></codeline>
<codeline lineno="7028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X[I]<sp/>=<sp/>SolData[P[I]];</highlight></codeline>
<codeline lineno="7030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>0;<sp/>K<sp/>&lt;<sp/>I;<sp/>++K)<sp/>{</highlight></codeline>
<codeline lineno="7031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X[I]<sp/>-=<sp/>A[I][K]<sp/>*<sp/>X[K];</highlight></codeline>
<codeline lineno="7032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>N<sp/>-<sp/>1;<sp/>I<sp/>&gt;=<sp/>0;<sp/>--I)<sp/>{</highlight></codeline>
<codeline lineno="7035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>I<sp/>+<sp/>1;<sp/>K<sp/>&lt;<sp/>N;<sp/>++K)<sp/>{</highlight></codeline>
<codeline lineno="7036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X[I]<sp/>-=<sp/>A[I][K]<sp/>*<sp/>X[K];</highlight></codeline>
<codeline lineno="7037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X[I]<sp/>/=<sp/>A[I][I];</highlight></codeline>
<codeline lineno="7039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Sol-&gt;Base.Value,<sp/>X,<sp/>N<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Sol;</highlight></codeline>
<codeline lineno="7042"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7043"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Format<sp/>&lt;=<sp/>ML_ARRAY_FORMAT_C64)<sp/>{</highlight></codeline>
<codeline lineno="7044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Tmp<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_C64,<sp/>2);</highlight></codeline>
<codeline lineno="7045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_copy(Tmp,<sp/>Source);</highlight></codeline>
<codeline lineno="7046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride<sp/>=<sp/>Tmp-&gt;Dimensions-&gt;Stride;</highlight></codeline>
<codeline lineno="7047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*A[N];</highlight></codeline>
<codeline lineno="7048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Data<sp/>=<sp/>Tmp-&gt;Base.Value;</highlight></codeline>
<codeline lineno="7049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[I]<sp/>=<sp/>(complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)Data;</highlight></codeline>
<codeline lineno="7051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data<sp/>+=<sp/>Stride;</highlight></codeline>
<codeline lineno="7052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*P<sp/>=<sp/>anew(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>N<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="7054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_lu_decomp_complex(A,<sp/>P,<sp/>N))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Matrix<sp/>is<sp/>degenerate&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Sol<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_C64,<sp/>1);</highlight></codeline>
<codeline lineno="7056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_copy(Sol,<sp/>B);</highlight></codeline>
<codeline lineno="7057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>X[N],<sp/>*SolData<sp/>=<sp/>(complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)Sol-&gt;Base.Value;</highlight></codeline>
<codeline lineno="7058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X[I]<sp/>=<sp/>SolData[P[I]];</highlight></codeline>
<codeline lineno="7060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>0;<sp/>K<sp/>&lt;<sp/>I;<sp/>++K)<sp/>{</highlight></codeline>
<codeline lineno="7061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X[I]<sp/>-=<sp/>A[I][K]<sp/>*<sp/>X[K];</highlight></codeline>
<codeline lineno="7062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>N<sp/>-<sp/>1;<sp/>I<sp/>&gt;=<sp/>0;<sp/>--I)<sp/>{</highlight></codeline>
<codeline lineno="7065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>I<sp/>+<sp/>1;<sp/>K<sp/>&lt;<sp/>N;<sp/>++K)<sp/>{</highlight></codeline>
<codeline lineno="7066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X[I]<sp/>-=<sp/>A[I][K]<sp/>*<sp/>X[K];</highlight></codeline>
<codeline lineno="7067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X[I]<sp/>/=<sp/>A[I][I];</highlight></codeline>
<codeline lineno="7069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Sol-&gt;Base.Value,<sp/>X,<sp/>N<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="7071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Sol;</highlight></codeline>
<codeline lineno="7072"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7073"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>array<sp/>type<sp/>for<sp/>operation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7075"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7076"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7077"><highlight class="normal"></highlight></codeline>
<codeline lineno="7078"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*determinant2(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*M,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Rows,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Cols)<sp/>{</highlight></codeline>
<codeline lineno="7079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Row<sp/>=<sp/>M-&gt;Base.Value;</highlight></codeline>
<codeline lineno="7080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(M-&gt;Dimensions[0].Indices)<sp/>{</highlight></codeline>
<codeline lineno="7081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Row<sp/>+=<sp/>M-&gt;Dimensions[0].Indices[Rows[0]]<sp/>*<sp/>M-&gt;Dimensions[0].Stride;</highlight></codeline>
<codeline lineno="7082"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Row<sp/>+=<sp/>Rows[0]<sp/>*<sp/>M-&gt;Dimensions[0].Stride;</highlight></codeline>
<codeline lineno="7084"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7085"><highlight class="normal"><sp/><sp/><sp/><sp/>++Rows;</highlight></codeline>
<codeline lineno="7086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--N<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(M-&gt;Dimensions[1].Indices)<sp/>{</highlight></codeline>
<codeline lineno="7088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)(Row<sp/>+<sp/>M-&gt;Dimensions[1].Indices[Cols[0]]<sp/>*<sp/>M-&gt;Dimensions[1].Stride);</highlight></codeline>
<codeline lineno="7089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)(Row<sp/>+<sp/>Cols[0]<sp/>*<sp/>M-&gt;Dimensions[1].Stride);</highlight></codeline>
<codeline lineno="7091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7092"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Cols2[N];</highlight></codeline>
<codeline lineno="7094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>Cols2[I]<sp/>=<sp/>Cols[I<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="7095"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[3];</highlight></codeline>
<codeline lineno="7096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(M-&gt;Dimensions[1].Indices)<sp/>{</highlight></codeline>
<codeline lineno="7097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)(Row<sp/>+<sp/>M-&gt;Dimensions[1].Indices[Cols[0]]<sp/>*<sp/>M-&gt;Dimensions[1].Stride);</highlight></codeline>
<codeline lineno="7098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>determinant2(M,<sp/>N,<sp/>Rows,<sp/>Cols2);</highlight></codeline>
<codeline lineno="7099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>ml_simple_call(MulMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="7100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Cols2[I]<sp/>=<sp/>Cols[I];</highlight></codeline>
<codeline lineno="7102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)(Row<sp/>+<sp/>M-&gt;Dimensions[1].Indices[Cols[I<sp/>+<sp/>1]]<sp/>*<sp/>M-&gt;Dimensions[1].Stride);</highlight></codeline>
<codeline lineno="7103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[2]<sp/>=<sp/>determinant2(M,<sp/>N,<sp/>Rows,<sp/>Cols2);</highlight></codeline>
<codeline lineno="7104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>ml_simple_call(MulMethod,<sp/>2,<sp/>Args<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="7105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>ml_simple_call(I<sp/>%<sp/>2<sp/>?<sp/>AddMethod<sp/>:<sp/>SubMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="7106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7107"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)(Row<sp/>+<sp/>Cols[0]<sp/>*<sp/>M-&gt;Dimensions[1].Stride);</highlight></codeline>
<codeline lineno="7109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>determinant2(M,<sp/>N,<sp/>Rows,<sp/>Cols2);</highlight></codeline>
<codeline lineno="7110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>ml_simple_call(MulMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="7111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Cols2[I]<sp/>=<sp/>Cols[I];</highlight></codeline>
<codeline lineno="7113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)(Row<sp/>+<sp/>Cols[I<sp/>+<sp/>1]<sp/>*<sp/>M-&gt;Dimensions[1].Stride);</highlight></codeline>
<codeline lineno="7114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[2]<sp/>=<sp/>determinant2(M,<sp/>N,<sp/>Rows,<sp/>Cols2);</highlight></codeline>
<codeline lineno="7115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>ml_simple_call(MulMethod,<sp/>2,<sp/>Args<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="7116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>ml_simple_call(I<sp/>%<sp/>2<sp/>?<sp/>AddMethod<sp/>:<sp/>SubMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="7117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="7120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7121"><highlight class="normal"></highlight></codeline>
<codeline lineno="7122"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;det&quot;</highlight><highlight class="normal">,<sp/>MLMatrixT)<sp/>{</highlight></codeline>
<codeline lineno="7123"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7124"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>determinant<sp/>of<sp/>:mini:`A`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="7127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>Source-&gt;Dimensions[0].Size;</highlight></codeline>
<codeline lineno="7128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>!=<sp/>Source-&gt;Dimensions[1].Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ShapeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Square<sp/>matrix<sp/>required&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Format<sp/>&lt;=<sp/>ML_ARRAY_FORMAT_F64)<sp/>{</highlight></codeline>
<codeline lineno="7130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Tmp<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_F64,<sp/>2);</highlight></codeline>
<codeline lineno="7131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_copy(Tmp,<sp/>Source);</highlight></codeline>
<codeline lineno="7132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride<sp/>=<sp/>Tmp-&gt;Dimensions-&gt;Stride;</highlight></codeline>
<codeline lineno="7133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*A[N];</highlight></codeline>
<codeline lineno="7134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Data<sp/>=<sp/>Tmp-&gt;Base.Value;</highlight></codeline>
<codeline lineno="7135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[I]<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)Data;</highlight></codeline>
<codeline lineno="7137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data<sp/>+=<sp/>Stride;</highlight></codeline>
<codeline lineno="7138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*P<sp/>=<sp/>anew(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>N<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="7140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_lu_decomp_real(A,<sp/>P,<sp/>N))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(0);</highlight></codeline>
<codeline lineno="7141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Det<sp/>=<sp/>A[0][0];</highlight></codeline>
<codeline lineno="7142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>Det<sp/>*=<sp/>A[I][I];</highlight></codeline>
<codeline lineno="7143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((P[N]<sp/>-<sp/>N)<sp/>%<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="7144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(-Det);</highlight></codeline>
<codeline lineno="7145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(Det);</highlight></codeline>
<codeline lineno="7147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7148"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7149"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Format<sp/>&lt;=<sp/>ML_ARRAY_FORMAT_C64)<sp/>{</highlight></codeline>
<codeline lineno="7150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Tmp<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_C64,<sp/>2);</highlight></codeline>
<codeline lineno="7151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array_copy(Tmp,<sp/>Source);</highlight></codeline>
<codeline lineno="7152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride<sp/>=<sp/>Tmp-&gt;Dimensions-&gt;Stride;</highlight></codeline>
<codeline lineno="7153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*A[N];</highlight></codeline>
<codeline lineno="7154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Data<sp/>=<sp/>Tmp-&gt;Base.Value;</highlight></codeline>
<codeline lineno="7155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[I]<sp/>=<sp/>(complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)Data;</highlight></codeline>
<codeline lineno="7157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data<sp/>+=<sp/>Stride;</highlight></codeline>
<codeline lineno="7158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*P<sp/>=<sp/>anew(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>N<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="7160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_lu_decomp_complex(A,<sp/>P,<sp/>N))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(0);</highlight></codeline>
<codeline lineno="7161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Det<sp/>=<sp/>A[0][0];</highlight></codeline>
<codeline lineno="7162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>Det<sp/>*=<sp/>A[I][I];</highlight></codeline>
<codeline lineno="7163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((P[N]<sp/>-<sp/>N)<sp/>%<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="7164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(-Det);</highlight></codeline>
<codeline lineno="7165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(Det);</highlight></codeline>
<codeline lineno="7167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7169"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Format<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/>{</highlight></codeline>
<codeline lineno="7170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Rows[N],<sp/>Cols[N];</highlight></codeline>
<codeline lineno="7171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>Rows[I]<sp/>=<sp/>Cols[I]<sp/>=<sp/>I;</highlight></codeline>
<codeline lineno="7172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>determinant2(Source,<sp/>N,<sp/>Rows,<sp/>Cols);</highlight></codeline>
<codeline lineno="7173"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>array<sp/>type<sp/>for<sp/>operation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7177"><highlight class="normal"></highlight></codeline>
<codeline lineno="7178"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;tr&quot;</highlight><highlight class="normal">,<sp/>MLMatrixT)<sp/>{</highlight></codeline>
<codeline lineno="7179"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7180"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>trace<sp/>of<sp/>:mini:`A`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="7183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>Source-&gt;Dimensions[0].Size;</highlight></codeline>
<codeline lineno="7184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>!=<sp/>Source-&gt;Dimensions[1].Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ShapeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Square<sp/>matrix<sp/>required&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Format<sp/>&lt;=<sp/>ML_ARRAY_FORMAT_F64)<sp/>{</highlight></codeline>
<codeline lineno="7186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Trace<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Data<sp/>=<sp/>Source-&gt;Base.Value;</highlight></codeline>
<codeline lineno="7188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_getter_double<sp/>get<sp/>=<sp/>MLArrayGettersFloat64[Source-&gt;Format];</highlight></codeline>
<codeline lineno="7189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride0<sp/>=<sp/>Source-&gt;Dimensions[0].Stride;</highlight></codeline>
<codeline lineno="7190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride1<sp/>=<sp/>Source-&gt;Dimensions[1].Stride;</highlight></codeline>
<codeline lineno="7191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Dimensions[0].Indices)<sp/>{</highlight></codeline>
<codeline lineno="7192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices0<sp/>=<sp/>Source-&gt;Dimensions[0].Indices;</highlight></codeline>
<codeline lineno="7193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Dimensions[1].Indices)<sp/>{</highlight></codeline>
<codeline lineno="7194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices1<sp/>=<sp/>Source-&gt;Dimensions[1].Indices;</highlight></codeline>
<codeline lineno="7195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Trace<sp/>+=<sp/>get(Data<sp/>+<sp/>(Indices0[I]<sp/>*<sp/>Stride0)<sp/>+<sp/>(Indices1[I]<sp/>*<sp/>Stride1));</highlight></codeline>
<codeline lineno="7197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Trace<sp/>+=<sp/>get(Data<sp/>+<sp/>(Indices0[I]<sp/>*<sp/>Stride0)<sp/>+<sp/>(I<sp/>*<sp/>Stride1));</highlight></codeline>
<codeline lineno="7201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Dimensions[1].Indices)<sp/>{</highlight></codeline>
<codeline lineno="7204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices1<sp/>=<sp/>Source-&gt;Dimensions[1].Indices;</highlight></codeline>
<codeline lineno="7205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Trace<sp/>+=<sp/>get(Data<sp/>+<sp/>(I<sp/>*<sp/>Stride0)<sp/>+<sp/>(Indices1[I]<sp/>*<sp/>Stride1));</highlight></codeline>
<codeline lineno="7207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Trace<sp/>+=<sp/>get(Data<sp/>+<sp/>(I<sp/>*<sp/>Stride0)<sp/>+<sp/>(I<sp/>*<sp/>Stride1));</highlight></codeline>
<codeline lineno="7211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(Trace);</highlight></codeline>
<codeline lineno="7214"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7215"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Format<sp/>&lt;=<sp/>ML_ARRAY_FORMAT_C64)<sp/>{</highlight></codeline>
<codeline lineno="7216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Trace<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Data<sp/>=<sp/>Source-&gt;Base.Value;</highlight></codeline>
<codeline lineno="7218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_getter_complex_double<sp/>get<sp/>=<sp/>MLArrayGettersComplex64[Source-&gt;Format];</highlight></codeline>
<codeline lineno="7219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride0<sp/>=<sp/>Source-&gt;Dimensions[0].Stride;</highlight></codeline>
<codeline lineno="7220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride1<sp/>=<sp/>Source-&gt;Dimensions[1].Stride;</highlight></codeline>
<codeline lineno="7221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Dimensions[0].Indices)<sp/>{</highlight></codeline>
<codeline lineno="7222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices0<sp/>=<sp/>Source-&gt;Dimensions[0].Indices;</highlight></codeline>
<codeline lineno="7223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Dimensions[1].Indices)<sp/>{</highlight></codeline>
<codeline lineno="7224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices1<sp/>=<sp/>Source-&gt;Dimensions[1].Indices;</highlight></codeline>
<codeline lineno="7225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Trace<sp/>+=<sp/>get(Data<sp/>+<sp/>(Indices0[I]<sp/>*<sp/>Stride0)<sp/>+<sp/>(Indices1[I]<sp/>*<sp/>Stride1));</highlight></codeline>
<codeline lineno="7227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Trace<sp/>+=<sp/>get(Data<sp/>+<sp/>(Indices0[I]<sp/>*<sp/>Stride0)<sp/>+<sp/>(I<sp/>*<sp/>Stride1));</highlight></codeline>
<codeline lineno="7231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Dimensions[1].Indices)<sp/>{</highlight></codeline>
<codeline lineno="7234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices1<sp/>=<sp/>Source-&gt;Dimensions[1].Indices;</highlight></codeline>
<codeline lineno="7235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Trace<sp/>+=<sp/>get(Data<sp/>+<sp/>(I<sp/>*<sp/>Stride0)<sp/>+<sp/>(Indices1[I]<sp/>*<sp/>Stride1));</highlight></codeline>
<codeline lineno="7237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Trace<sp/>+=<sp/>get(Data<sp/>+<sp/>(I<sp/>*<sp/>Stride0)<sp/>+<sp/>(I<sp/>*<sp/>Stride1));</highlight></codeline>
<codeline lineno="7241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(Trace);</highlight></codeline>
<codeline lineno="7244"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7245"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Format<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/>{</highlight></codeline>
<codeline lineno="7246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args2[2];</highlight></codeline>
<codeline lineno="7247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Data<sp/>=<sp/>Source-&gt;Base.Value;</highlight></codeline>
<codeline lineno="7248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride0<sp/>=<sp/>Source-&gt;Dimensions[0].Stride;</highlight></codeline>
<codeline lineno="7249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride1<sp/>=<sp/>Source-&gt;Dimensions[1].Stride;</highlight></codeline>
<codeline lineno="7250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Dimensions[0].Indices)<sp/>{</highlight></codeline>
<codeline lineno="7251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices0<sp/>=<sp/>Source-&gt;Dimensions[0].Indices;</highlight></codeline>
<codeline lineno="7252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Dimensions[1].Indices)<sp/>{</highlight></codeline>
<codeline lineno="7253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices1<sp/>=<sp/>Source-&gt;Dimensions[1].Indices;</highlight></codeline>
<codeline lineno="7254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args2[0]<sp/>=<sp/>*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)(Data<sp/>+<sp/>(Indices0[0]<sp/>*<sp/>Stride0)<sp/>+<sp/>(Indices1[0]<sp/>*<sp/>Stride1));</highlight></codeline>
<codeline lineno="7255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args2[1]<sp/>=<sp/>*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)(Data<sp/>+<sp/>(Indices0[I]<sp/>*<sp/>Stride0)<sp/>+<sp/>(Indices1[I]<sp/>*<sp/>Stride1));</highlight></codeline>
<codeline lineno="7257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args2[0]<sp/>=<sp/>ml_simple_call(AddMethod,<sp/>2,<sp/>Args2);</highlight></codeline>
<codeline lineno="7258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args2[0]<sp/>=<sp/>*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)(Data<sp/>+<sp/>(Indices0[0]<sp/>*<sp/>Stride0)<sp/>+<sp/>(0<sp/>*<sp/>Stride1));</highlight></codeline>
<codeline lineno="7261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args2[1]<sp/>=<sp/>*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)(Data<sp/>+<sp/>(Indices0[I]<sp/>*<sp/>Stride0)<sp/>+<sp/>(I<sp/>*<sp/>Stride1));</highlight></codeline>
<codeline lineno="7263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args2[0]<sp/>=<sp/>ml_simple_call(AddMethod,<sp/>2,<sp/>Args2);</highlight></codeline>
<codeline lineno="7264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source-&gt;Dimensions[1].Indices)<sp/>{</highlight></codeline>
<codeline lineno="7267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices1<sp/>=<sp/>Source-&gt;Dimensions[1].Indices;</highlight></codeline>
<codeline lineno="7268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args2[0]<sp/>=<sp/>*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)(Data<sp/>+<sp/>(0<sp/>*<sp/>Stride0)<sp/>+<sp/>(Indices1[0]<sp/>*<sp/>Stride1));</highlight></codeline>
<codeline lineno="7269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args2[1]<sp/>=<sp/>*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)(Data<sp/>+<sp/>(I<sp/>*<sp/>Stride0)<sp/>+<sp/>(Indices1[I]<sp/>*<sp/>Stride1));</highlight></codeline>
<codeline lineno="7271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args2[0]<sp/>=<sp/>ml_simple_call(AddMethod,<sp/>2,<sp/>Args2);</highlight></codeline>
<codeline lineno="7272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args2[0]<sp/>=<sp/>*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)(Data<sp/>+<sp/>(0<sp/>*<sp/>Stride0)<sp/>+<sp/>(0<sp/>*<sp/>Stride1));</highlight></codeline>
<codeline lineno="7275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args2[1]<sp/>=<sp/>*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)(Data<sp/>+<sp/>(I<sp/>*<sp/>Stride0)<sp/>+<sp/>(I<sp/>*<sp/>Stride1));</highlight></codeline>
<codeline lineno="7277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args2[0]<sp/>=<sp/>ml_simple_call(AddMethod,<sp/>2,<sp/>Args2);</highlight></codeline>
<codeline lineno="7278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args2[0];</highlight></codeline>
<codeline lineno="7281"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ArrayError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>array<sp/>type<sp/>for<sp/>operation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7285"><highlight class="normal"></highlight></codeline>
<codeline lineno="7286"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;softmax&quot;</highlight><highlight class="normal">,<sp/>MLVectorMutableRealT)<sp/>{</highlight></codeline>
<codeline lineno="7287"><highlight class="normal"></highlight><highlight class="comment">//&lt;Vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7288"><highlight class="normal"></highlight><highlight class="comment">//&gt;vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`softmax(Vector)`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7290"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>array([1,<sp/>4.2,<sp/>0.6,<sp/>1.23,<sp/>4.3,<sp/>1.2,<sp/>2.5])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7291"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>A:softmax</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="7293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>A-&gt;Dimensions[0].Size;</highlight></codeline>
<codeline lineno="7294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*B<sp/>=<sp/>ml_array(ML_ARRAY_FORMAT_F64,<sp/>1,<sp/>N);</highlight></codeline>
<codeline lineno="7295"><highlight class="normal"><sp/><sp/><sp/><sp/>array_copy(B,<sp/>A);</highlight></codeline>
<codeline lineno="7296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Values<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)B-&gt;Base.Value;</highlight></codeline>
<codeline lineno="7297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M<sp/>=<sp/>-INFINITY;</highlight></codeline>
<codeline lineno="7298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(M<sp/>&lt;<sp/>Values[I])<sp/>M<sp/>=<sp/>Values[I];</highlight></codeline>
<codeline lineno="7299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Sum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="7300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>Sum<sp/>+=<sp/>exp(Values[I]<sp/>-<sp/>M);</highlight></codeline>
<codeline lineno="7301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C<sp/>=<sp/>M<sp/>+<sp/>log(Sum);</highlight></codeline>
<codeline lineno="7302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>Values[I]<sp/>=<sp/>exp(Values[I]<sp/>-<sp/>C);</highlight></codeline>
<codeline lineno="7303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="7304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7305"><highlight class="normal"></highlight></codeline>
<codeline lineno="7306"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_CBOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7307"><highlight class="normal"></highlight></codeline>
<codeline lineno="7308"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_cbor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7309"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;minicbor/minicbor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7310"><highlight class="normal"></highlight></codeline>
<codeline lineno="7311"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_write_array_typed(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>FlatSize,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Dimension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Address,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer)<sp/>{</highlight></codeline>
<codeline lineno="7312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_raw(Writer,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Address,<sp/>FlatSize);</highlight></codeline>
<codeline lineno="7314"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="7316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Dimension-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="7317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;</highlight></codeline>
<codeline lineno="7318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_array_typed(Degree<sp/>-<sp/>1,<sp/>FlatSize,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride,<sp/>Writer);</highlight></codeline>
<codeline lineno="7320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Dimension-&gt;Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="7323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_array_typed(Degree<sp/>-<sp/>1,<sp/>FlatSize,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address,<sp/>Writer);</highlight></codeline>
<codeline lineno="7324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;</highlight></codeline>
<codeline lineno="7325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7329"><highlight class="normal"></highlight></codeline>
<codeline lineno="7330"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cbor_write_array_any(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree,<sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Dimension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Address,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer)<sp/>{</highlight></codeline>
<codeline lineno="7331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write(Writer,<sp/>*(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)Address);</highlight></codeline>
<codeline lineno="7333"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride<sp/>=<sp/>Dimension-&gt;Stride;</highlight></codeline>
<codeline lineno="7335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Dimension-&gt;Indices)<sp/>{</highlight></codeline>
<codeline lineno="7336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Indices<sp/>=<sp/>Dimension-&gt;Indices;</highlight></codeline>
<codeline lineno="7337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Dimension-&gt;Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_array_any(Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address<sp/>+<sp/>Indices[I]<sp/>*<sp/>Stride,<sp/>Writer);</highlight></codeline>
<codeline lineno="7339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Dimension-&gt;Size;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="7342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_array_any(Degree<sp/>-<sp/>1,<sp/>Dimension<sp/>+<sp/>1,<sp/>Address,<sp/>Writer);</highlight></codeline>
<codeline lineno="7343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Stride;</highlight></codeline>
<codeline lineno="7344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7348"><highlight class="normal"></highlight></codeline>
<codeline lineno="7349"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLArrayT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array)<sp/>{</highlight></codeline>
<codeline lineno="7350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint64_t<sp/>Tags[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="7351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U8]<sp/>=<sp/>64,</highlight></codeline>
<codeline lineno="7352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I8]<sp/>=<sp/>72,</highlight></codeline>
<codeline lineno="7353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U16]<sp/>=<sp/>69,</highlight></codeline>
<codeline lineno="7354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I16]<sp/>=<sp/>77,</highlight></codeline>
<codeline lineno="7355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U32]<sp/>=<sp/>70,</highlight></codeline>
<codeline lineno="7356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I32]<sp/>=<sp/>78,</highlight></codeline>
<codeline lineno="7357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_U64]<sp/>=<sp/>71,</highlight></codeline>
<codeline lineno="7358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_I64]<sp/>=<sp/>79,</highlight></codeline>
<codeline lineno="7359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_F32]<sp/>=<sp/>85,</highlight></codeline>
<codeline lineno="7360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[ML_ARRAY_FORMAT_F64]<sp/>=<sp/>86</highlight></codeline>
<codeline lineno="7361"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Array-&gt;Degree<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="7363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_simple(Writer,<sp/>CBOR_SIMPLE_NULL);</highlight></codeline>
<codeline lineno="7364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Array-&gt;Degree<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="7367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_tag(Writer,<sp/>40);</highlight></codeline>
<codeline lineno="7368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_array(Writer,<sp/>2);</highlight></codeline>
<codeline lineno="7369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_array(Writer,<sp/>Array-&gt;Degree);</highlight></codeline>
<codeline lineno="7370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Array-&gt;Degree;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_integer(Writer,<sp/>Array-&gt;Dimensions[I].Size);</highlight></codeline>
<codeline lineno="7372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Array-&gt;Format<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/>{</highlight></codeline>
<codeline lineno="7375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="7376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Array-&gt;Degree;<sp/>++I)<sp/>Size<sp/>*=<sp/>Array-&gt;Dimensions[I].Size;</highlight></codeline>
<codeline lineno="7377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_tag(Writer,<sp/>41);</highlight></codeline>
<codeline lineno="7378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_array(Writer,<sp/>Size);</highlight></codeline>
<codeline lineno="7379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_array_any(Array-&gt;Degree,<sp/>Array-&gt;Dimensions,<sp/>Array-&gt;Base.Value,<sp/>Writer);</highlight></codeline>
<codeline lineno="7380"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>MLArraySizes[Array-&gt;Format];</highlight></codeline>
<codeline lineno="7382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FlatDegree<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="7383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>FlatSize<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="7384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Array-&gt;Degree;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="7385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FlatDegree<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Array-&gt;Dimensions[I].Indices)<sp/>{</highlight></codeline>
<codeline lineno="7387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlatDegree<sp/>=<sp/>I;</highlight></codeline>
<codeline lineno="7388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Array-&gt;Dimensions[I].Stride<sp/>!=<sp/>Size)<sp/>{</highlight></codeline>
<codeline lineno="7389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlatDegree<sp/>=<sp/>I;</highlight></codeline>
<codeline lineno="7390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlatSize<sp/>=<sp/>Size<sp/>*<sp/>Array-&gt;Dimensions[I].Size;</highlight></codeline>
<codeline lineno="7392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Size<sp/>*=<sp/>Array-&gt;Dimensions[I].Size;</highlight></codeline>
<codeline lineno="7395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7396"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Array-&gt;Format<sp/>==<sp/>ML_ARRAY_FORMAT_C32)<sp/>{</highlight></codeline>
<codeline lineno="7398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_tag(Writer,<sp/>ML_CBOR_TAG_OBJECT);</highlight></codeline>
<codeline lineno="7399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_array(Writer,<sp/>2);</highlight></codeline>
<codeline lineno="7400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_string(Writer,<sp/>16);</highlight></codeline>
<codeline lineno="7401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_raw(Writer,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;array::complex32&quot;</highlight><highlight class="normal">,<sp/>16);</highlight></codeline>
<codeline lineno="7402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Array-&gt;Format<sp/>==<sp/>ML_ARRAY_FORMAT_C64)<sp/>{</highlight></codeline>
<codeline lineno="7403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_tag(Writer,<sp/>ML_CBOR_TAG_OBJECT);</highlight></codeline>
<codeline lineno="7404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_array(Writer,<sp/>2);</highlight></codeline>
<codeline lineno="7405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_string(Writer,<sp/>16);</highlight></codeline>
<codeline lineno="7406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_raw(Writer,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;array::complex64&quot;</highlight><highlight class="normal">,<sp/>16);</highlight></codeline>
<codeline lineno="7407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_tag(Writer,<sp/>Tags[Array-&gt;Format]);</highlight></codeline>
<codeline lineno="7409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7410"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_tag(Writer,<sp/>Tags[Array-&gt;Format]);</highlight></codeline>
<codeline lineno="7412"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_bytes(Writer,<sp/>Size);</highlight></codeline>
<codeline lineno="7414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_cbor_write_array_typed(FlatDegree,<sp/>FlatSize,<sp/>Array-&gt;Dimensions,<sp/>Array-&gt;Base.Value,<sp/>Writer);</highlight></codeline>
<codeline lineno="7415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7417"><highlight class="normal"></highlight></codeline>
<codeline lineno="7418"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cbor_read_multi_array_fn(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="7419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Value,<sp/>MLListT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TagError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Array<sp/>requires<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_list_length(Value)<sp/>!=<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CborError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>multi-dimensional<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Dimensions<sp/>=<sp/>ml_list_get(Value,<sp/>1);</highlight></codeline>
<codeline lineno="7422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Dimensions,<sp/>MLListT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CborError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>multi-dimensional<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*)ml_list_get(Value,<sp/>2);</highlight></codeline>
<codeline lineno="7424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is((<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Source,<sp/>MLArrayT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CborError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>multi-dimensional<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7425"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Target<sp/>=<sp/>ml_array_alloc(Source-&gt;Format,<sp/>ml_list_length(Dimensions));</highlight></codeline>
<codeline lineno="7426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__dimension__t" kindref="compound">ml_array_dimension_t</ref><sp/>*Dimension<sp/>=<sp/>Target-&gt;Dimensions<sp/>+<sp/>Target-&gt;Degree;</highlight></codeline>
<codeline lineno="7427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Stride<sp/>=<sp/>MLArraySizes[Source-&gt;Format];</highlight></codeline>
<codeline lineno="7428"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LIST_REVERSE(Dimensions,<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="7429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Dimension;</highlight></codeline>
<codeline lineno="7430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dimension-&gt;Stride<sp/>=<sp/>Stride;</highlight></codeline>
<codeline lineno="7431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Dimension-&gt;Size<sp/>=<sp/>ml_integer_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="7432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stride<sp/>*=<sp/>Size;</highlight></codeline>
<codeline lineno="7433"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Stride<sp/>!=<sp/>Source-&gt;Base.Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CborError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>multi-dimensional<sp/>array&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7435"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Base.Length<sp/>=<sp/>Stride;</highlight></codeline>
<codeline lineno="7436"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Base.Value<sp/>=<sp/>Source-&gt;Base.Value;</highlight></codeline>
<codeline lineno="7437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Target;</highlight></codeline>
<codeline lineno="7438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7439"><highlight class="normal"></highlight></codeline>
<codeline lineno="7440"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cbor_read_typed_array_fn(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/>ml_array_format_t<sp/>Format)<sp/>{</highlight></codeline>
<codeline lineno="7441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Value,<sp/>MLAddressT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TagError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Array<sp/>requires<sp/>bytes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="7443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ItemSize<sp/>=<sp/>MLArraySizes[Format];</highlight></codeline>
<codeline lineno="7444"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array<sp/>=<sp/>ml_array_alloc(Format,<sp/>1);</highlight></codeline>
<codeline lineno="7445"><highlight class="normal"><sp/><sp/><sp/><sp/>Array-&gt;Dimensions[0].Size<sp/>=<sp/>Buffer-&gt;Length<sp/>/<sp/>ItemSize;</highlight></codeline>
<codeline lineno="7446"><highlight class="normal"><sp/><sp/><sp/><sp/>Array-&gt;Dimensions[0].Stride<sp/>=<sp/>ItemSize;</highlight></codeline>
<codeline lineno="7447"><highlight class="normal"><sp/><sp/><sp/><sp/>Array-&gt;Base.Length<sp/>=<sp/>Buffer-&gt;Length;</highlight></codeline>
<codeline lineno="7448"><highlight class="normal"><sp/><sp/><sp/><sp/>Array-&gt;Base.Value<sp/>=<sp/>Buffer-&gt;Value;</highlight></codeline>
<codeline lineno="7449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Array;</highlight></codeline>
<codeline lineno="7450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7451"><highlight class="normal"></highlight></codeline>
<codeline lineno="7452"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CBOR_READ_TYPED_ARRAY(TYPE,<sp/>FORMAT)<sp/>\</highlight></codeline>
<codeline lineno="7453"><highlight class="preprocessor">static<sp/>ml_value_t<sp/>*ml_cbor_read_<sp/>##<sp/>TYPE<sp/>##<sp/>_array_fn(ml_cbor_reader_t<sp/>*Reader,<sp/>ml_value_t<sp/>*Value)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="7454"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>ml_cbor_read_typed_array_fn(Value,<sp/>ML_ARRAY_FORMAT_<sp/>##<sp/>FORMAT);<sp/>\</highlight></codeline>
<codeline lineno="7455"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7456"><highlight class="normal"></highlight></codeline>
<codeline lineno="7457"><highlight class="normal">ML_CBOR_READ_TYPED_ARRAY(uint8,<sp/>U8)</highlight></codeline>
<codeline lineno="7458"><highlight class="normal">ML_CBOR_READ_TYPED_ARRAY(int8,<sp/>I8)</highlight></codeline>
<codeline lineno="7459"><highlight class="normal">ML_CBOR_READ_TYPED_ARRAY(uint16,<sp/>U16)</highlight></codeline>
<codeline lineno="7460"><highlight class="normal">ML_CBOR_READ_TYPED_ARRAY(int16,<sp/>I16)</highlight></codeline>
<codeline lineno="7461"><highlight class="normal">ML_CBOR_READ_TYPED_ARRAY(uint32,<sp/>U32)</highlight></codeline>
<codeline lineno="7462"><highlight class="normal">ML_CBOR_READ_TYPED_ARRAY(int32,<sp/>I32)</highlight></codeline>
<codeline lineno="7463"><highlight class="normal">ML_CBOR_READ_TYPED_ARRAY(uint64,<sp/>U64)</highlight></codeline>
<codeline lineno="7464"><highlight class="normal">ML_CBOR_READ_TYPED_ARRAY(int64,<sp/>I64)</highlight></codeline>
<codeline lineno="7465"><highlight class="normal">ML_CBOR_READ_TYPED_ARRAY(float32,<sp/>F32)</highlight></codeline>
<codeline lineno="7466"><highlight class="normal">ML_CBOR_READ_TYPED_ARRAY(float64,<sp/>F64)</highlight></codeline>
<codeline lineno="7467"><highlight class="normal"></highlight></codeline>
<codeline lineno="7468"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cbor_read_any_array_fn(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="7469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Value,<sp/>MLListT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TagError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Array<sp/>requires<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>ml_list_length(Value);</highlight></codeline>
<codeline lineno="7471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array<sp/>=<sp/>ml_array_alloc(ML_ARRAY_FORMAT_ANY,<sp/>1);</highlight></codeline>
<codeline lineno="7472"><highlight class="normal"><sp/><sp/><sp/><sp/>Array-&gt;Dimensions[0].Size<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="7473"><highlight class="normal"><sp/><sp/><sp/><sp/>Array-&gt;Dimensions[0].Stride<sp/>=<sp/>MLArraySizes[ML_ARRAY_FORMAT_ANY];</highlight></codeline>
<codeline lineno="7474"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Values<sp/>=<sp/>anew(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*,<sp/>Size);</highlight></codeline>
<codeline lineno="7475"><highlight class="normal"><sp/><sp/><sp/><sp/>Array-&gt;Base.Length<sp/>=<sp/>Size<sp/>*<sp/>MLArraySizes[ML_ARRAY_FORMAT_ANY];</highlight></codeline>
<codeline lineno="7476"><highlight class="normal"><sp/><sp/><sp/><sp/>Array-&gt;Base.Value<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Values;</highlight></codeline>
<codeline lineno="7477"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Value,<sp/>Iter)<sp/>*Values++<sp/>=<sp/>Iter-&gt;Value;</highlight></codeline>
<codeline lineno="7478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Array;</highlight></codeline>
<codeline lineno="7479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7480"><highlight class="normal"></highlight></codeline>
<codeline lineno="7481"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7482"><highlight class="normal"></highlight></codeline>
<codeline lineno="7483"><highlight class="normal">ML_FUNCTION(MLCborReadComplex32)<sp/>{</highlight></codeline>
<codeline lineno="7485"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="7486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_cbor_read_typed_array_fn(Args[0],<sp/>ML_ARRAY_FORMAT_C32);</highlight></codeline>
<codeline lineno="7487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7488"><highlight class="normal"></highlight></codeline>
<codeline lineno="7489"><highlight class="normal">ML_FUNCTION(MLCborReadComplex64)<sp/>{</highlight></codeline>
<codeline lineno="7491"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="7492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_cbor_read_typed_array_fn(Args[0],<sp/>ML_ARRAY_FORMAT_C64);</highlight></codeline>
<codeline lineno="7493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7494"><highlight class="normal"></highlight></codeline>
<codeline lineno="7495"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7496"><highlight class="normal"></highlight></codeline>
<codeline lineno="7497"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7498"><highlight class="normal"></highlight></codeline>
<codeline lineno="7499"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_array_init(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Globals)<sp/>{</highlight></codeline>
<codeline lineno="7500"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_array_init.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7501"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;set&quot;</highlight><highlight class="normal">,<sp/>UpdateSetRowFns,<sp/>update_array_fn,<sp/>MLArrayMutableT,<sp/>MLArrayMutableT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7502"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;add&quot;</highlight><highlight class="normal">,<sp/>UpdateAddRowFns,<sp/>update_array_fn,<sp/>MLArrayMutableT,<sp/>MLArrayMutableT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7503"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;mul&quot;</highlight><highlight class="normal">,<sp/>UpdateMulRowFns,<sp/>update_array_fn,<sp/>MLArrayMutableT,<sp/>MLArrayMutableT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7504"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;sub&quot;</highlight><highlight class="normal">,<sp/>UpdateSubRowFns,<sp/>update_array_fn,<sp/>MLArrayMutableT,<sp/>MLArrayMutableT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7505"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;div&quot;</highlight><highlight class="normal">,<sp/>UpdateDivRowFns,<sp/>update_array_fn,<sp/>MLArrayMutableT,<sp/>MLArrayMutableT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7506"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,<sp/>UpdateAddRowFns,<sp/>array_infix_fn,<sp/>MLArrayMutableT,<sp/>MLArrayMutableT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7507"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/>UpdateMulRowFns,<sp/>array_infix_fn,<sp/>MLArrayMutableT,<sp/>MLArrayMutableT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7508"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/>UpdateSubRowFns,<sp/>array_infix_fn,<sp/>MLArrayMutableT,<sp/>MLArrayMutableT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7509"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>UpdateDivRowFns,<sp/>array_infix_fn,<sp/>MLArrayMutableT,<sp/>MLArrayMutableT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7510"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;/\\&quot;</highlight><highlight class="normal">,<sp/>UpdateAndRowFns,<sp/>array_infix_fn,<sp/>MLArrayMutableT,<sp/>MLArrayMutableT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7511"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;\\/&quot;</highlight><highlight class="normal">,<sp/>UpdateOrRowFns,<sp/>array_infix_fn,<sp/>MLArrayMutableT,<sp/>MLArrayMutableT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7512"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;&gt;&lt;&quot;</highlight><highlight class="normal">,<sp/>UpdateXorRowFns,<sp/>array_infix_fn,<sp/>MLArrayMutableT,<sp/>MLArrayMutableT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7513"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;min&quot;</highlight><highlight class="normal">,<sp/>UpdateMinRowFns,<sp/>array_infix_fn,<sp/>MLArrayMutableT,<sp/>MLArrayMutableT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7514"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;max&quot;</highlight><highlight class="normal">,<sp/>UpdateMaxRowFns,<sp/>array_infix_fn,<sp/>MLArrayMutableT,<sp/>MLArrayMutableT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7515"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">,<sp/>CompareEqRowFns,<sp/>compare_array_fn,<sp/>MLArrayT,<sp/>MLArrayT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7516"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;!=&quot;</highlight><highlight class="normal">,<sp/>CompareNeRowFns,<sp/>compare_array_fn,<sp/>MLArrayT,<sp/>MLArrayT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7517"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">,<sp/>CompareLtRowFns,<sp/>compare_array_fn,<sp/>MLArrayT,<sp/>MLArrayT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7518"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">,<sp/>CompareGtRowFns,<sp/>compare_array_fn,<sp/>MLArrayT,<sp/>MLArrayT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7519"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;&lt;=&quot;</highlight><highlight class="normal">,<sp/>CompareLeRowFns,<sp/>compare_array_fn,<sp/>MLArrayT,<sp/>MLArrayT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7520"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;&gt;=&quot;</highlight><highlight class="normal">,<sp/>CompareGeRowFns,<sp/>compare_array_fn,<sp/>MLArrayT,<sp/>MLArrayT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7521"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;++&quot;</highlight><highlight class="normal">,<sp/>MLArrayInfixAddFns,<sp/>(ml_callback_t)ml_array_pairwise_infix,<sp/>MLArrayT,<sp/>MLArrayT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7522"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;**&quot;</highlight><highlight class="normal">,<sp/>MLArrayInfixMulFns,<sp/>(ml_callback_t)ml_array_pairwise_infix,<sp/>MLArrayT,<sp/>MLArrayT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7523"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">,<sp/>MLArrayInfixSubFns,<sp/>(ml_callback_t)ml_array_pairwise_infix,<sp/>MLArrayT,<sp/>MLArrayT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7524"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;//&quot;</highlight><highlight class="normal">,<sp/>MLArrayInfixDivFns,<sp/>(ml_callback_t)ml_array_pairwise_infix,<sp/>MLArrayT,<sp/>MLArrayT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7525"><highlight class="normal"></highlight></codeline>
<codeline lineno="7526"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(AbsMethod,<sp/>labs,<sp/>(ml_callback_t)array_math_integer_fn,<sp/>MLArrayMutableIntegerT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7527"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(SquareMethod,<sp/>isquare,<sp/>(ml_callback_t)array_math_integer_fn,<sp/>MLArrayMutableIntegerT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7528"><highlight class="normal"></highlight></codeline>
<codeline lineno="7529"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(AcosMethod,<sp/>acos,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7530"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(AsinMethod,<sp/>asin,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7531"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(AtanMethod,<sp/>atan,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7532"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(CeilMethod,<sp/>ceil,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7533"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(CosMethod,<sp/>cos,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7534"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(CoshMethod,<sp/>cosh,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7535"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(ExpMethod,<sp/>exp,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7536"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(AbsMethod,<sp/>fabs,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7537"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(FloorMethod,<sp/>floor,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7538"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(LogMethod,<sp/>log,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7539"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(Log10Method,<sp/>log10,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7540"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(LogitMethod,<sp/>logit,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7541"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(SinMethod,<sp/>sin,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7542"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(SinhMethod,<sp/>sinh,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7543"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(SqrtMethod,<sp/>sqrt,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7544"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(SquareMethod,<sp/>square,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7545"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(TanMethod,<sp/>tan,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7546"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(TanhMethod,<sp/>tanh,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7547"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(ErfMethod,<sp/>erf,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7548"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(ErfcMethod,<sp/>erfc,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7549"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(GammaMethod,<sp/>gamma,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7550"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(AcoshMethod,<sp/>acosh,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7551"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(AsinhMethod,<sp/>asinh,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7552"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(AtanhMethod,<sp/>atanh,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7553"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(CbrtMethod,<sp/>cbrt,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7554"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(Expm1Method,<sp/>expm1,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7555"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(Log1pMethod,<sp/>log1p,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7556"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(RoundMethod,<sp/>round,<sp/>(ml_callback_t)array_math_real_fn,<sp/>MLArrayMutableRealT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7557"><highlight class="normal"></highlight></codeline>
<codeline lineno="7558"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7559"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(AcosMethod,<sp/>cacos,<sp/>(ml_callback_t)array_math_complex_fn,<sp/>MLArrayMutableComplexT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7560"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(AsinMethod,<sp/>casin,<sp/>(ml_callback_t)array_math_complex_fn,<sp/>MLArrayMutableComplexT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7561"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(AtanMethod,<sp/>catan,<sp/>(ml_callback_t)array_math_complex_fn,<sp/>MLArrayMutableComplexT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7562"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(CosMethod,<sp/>ccos,<sp/>(ml_callback_t)array_math_complex_fn,<sp/>MLArrayMutableComplexT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7563"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(CoshMethod,<sp/>ccosh,<sp/>(ml_callback_t)array_math_complex_fn,<sp/>MLArrayMutableComplexT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7564"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(ExpMethod,<sp/>cexp,<sp/>(ml_callback_t)array_math_complex_fn,<sp/>MLArrayMutableComplexT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7565"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(AbsMethod,<sp/>cabs,<sp/>(ml_callback_t)array_math_complex_fn,<sp/>MLArrayMutableComplexT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7566"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(LogMethod,<sp/>clog,<sp/>(ml_callback_t)array_math_complex_fn,<sp/>MLArrayMutableComplexT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7567"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(Log10Method,<sp/>clog10,<sp/>(ml_callback_t)array_math_complex_fn,<sp/>MLArrayMutableComplexT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7568"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(SinMethod,<sp/>csin,<sp/>(ml_callback_t)array_math_complex_fn,<sp/>MLArrayMutableComplexT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7569"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(SinhMethod,<sp/>csinh,<sp/>(ml_callback_t)array_math_complex_fn,<sp/>MLArrayMutableComplexT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7570"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(SqrtMethod,<sp/>csqrt,<sp/>(ml_callback_t)array_math_complex_fn,<sp/>MLArrayMutableComplexT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7571"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(SquareMethod,<sp/>csquare,<sp/>(ml_callback_t)array_math_complex_fn,<sp/>MLArrayMutableComplexT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7572"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(TanMethod,<sp/>ctan,<sp/>(ml_callback_t)array_math_complex_fn,<sp/>MLArrayMutableComplexT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7573"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(TanhMethod,<sp/>ctanh,<sp/>(ml_callback_t)array_math_complex_fn,<sp/>MLArrayMutableComplexT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7574"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(AcoshMethod,<sp/>cacosh,<sp/>(ml_callback_t)array_math_complex_fn,<sp/>MLArrayMutableComplexT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7575"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(AsinhMethod,<sp/>casinh,<sp/>(ml_callback_t)array_math_complex_fn,<sp/>MLArrayMutableComplexT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7576"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(AtanhMethod,<sp/>catanh,<sp/>(ml_callback_t)array_math_complex_fn,<sp/>MLArrayMutableComplexT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7577"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(ConjMethod,<sp/>conj,<sp/>(ml_callback_t)array_math_complex_fn,<sp/>MLArrayMutableComplexT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7578"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(AbsMethod,<sp/>cabs,<sp/>(ml_callback_t)array_math_complex_real_fn,<sp/>MLArrayMutableComplexT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7579"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(ArgMethod,<sp/>carg,<sp/>(ml_callback_t)array_math_complex_real_fn,<sp/>MLArrayMutableComplexT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7580"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7581"><highlight class="normal"></highlight></codeline>
<codeline lineno="7582"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_definev(ml_method(</highlight><highlight class="stringliteral">&quot;$&quot;</highlight><highlight class="normal">),<sp/>MLArrayT-&gt;Constructor,<sp/>0,<sp/>MLListT,<sp/>NULL);</highlight></codeline>
<codeline lineno="7583"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLArrayT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;new&quot;</highlight><highlight class="normal">,<sp/>MLArrayNew);</highlight></codeline>
<codeline lineno="7584"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLArrayT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;wrap&quot;</highlight><highlight class="normal">,<sp/>MLArrayWrap);</highlight></codeline>
<codeline lineno="7585"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLArrayT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;cat&quot;</highlight><highlight class="normal">,<sp/>MLArrayCat);</highlight></codeline>
<codeline lineno="7586"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLArrayT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;hcat&quot;</highlight><highlight class="normal">,<sp/>MLArrayHCat);</highlight></codeline>
<codeline lineno="7587"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLArrayT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;vcat&quot;</highlight><highlight class="normal">,<sp/>MLArrayVCat);</highlight></codeline>
<codeline lineno="7588"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLArrayT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;nil&quot;</highlight><highlight class="normal">,<sp/>MLArrayNil);</highlight></codeline>
<codeline lineno="7589"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLArrayT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;any&quot;</highlight><highlight class="normal">,<sp/>MLArrayAnyT);</highlight></codeline>
<codeline lineno="7590"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLArrayT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;uint8&quot;</highlight><highlight class="normal">,<sp/>MLArrayUInt8T);</highlight></codeline>
<codeline lineno="7591"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLArrayT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;int8&quot;</highlight><highlight class="normal">,<sp/>MLArrayInt8T);</highlight></codeline>
<codeline lineno="7592"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLArrayT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;uint16&quot;</highlight><highlight class="normal">,<sp/>MLArrayUInt16T);</highlight></codeline>
<codeline lineno="7593"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLArrayT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;int16&quot;</highlight><highlight class="normal">,<sp/>MLArrayInt16T);</highlight></codeline>
<codeline lineno="7594"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLArrayT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;uint32&quot;</highlight><highlight class="normal">,<sp/>MLArrayUInt32T);</highlight></codeline>
<codeline lineno="7595"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLArrayT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;int32&quot;</highlight><highlight class="normal">,<sp/>MLArrayInt32T);</highlight></codeline>
<codeline lineno="7596"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLArrayT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;uint64&quot;</highlight><highlight class="normal">,<sp/>MLArrayUInt64T);</highlight></codeline>
<codeline lineno="7597"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLArrayT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;int64&quot;</highlight><highlight class="normal">,<sp/>MLArrayInt64T);</highlight></codeline>
<codeline lineno="7598"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLArrayT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;float32&quot;</highlight><highlight class="normal">,<sp/>MLArrayFloat32T);</highlight></codeline>
<codeline lineno="7599"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLArrayT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;float64&quot;</highlight><highlight class="normal">,<sp/>MLArrayFloat64T);</highlight></codeline>
<codeline lineno="7600"><highlight class="normal"></highlight></codeline>
<codeline lineno="7601"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLVectorT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;any&quot;</highlight><highlight class="normal">,<sp/>MLVectorAnyT);</highlight></codeline>
<codeline lineno="7602"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLVectorT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;uint8&quot;</highlight><highlight class="normal">,<sp/>MLVectorUInt8T);</highlight></codeline>
<codeline lineno="7603"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLVectorT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;int8&quot;</highlight><highlight class="normal">,<sp/>MLVectorInt8T);</highlight></codeline>
<codeline lineno="7604"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLVectorT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;uint16&quot;</highlight><highlight class="normal">,<sp/>MLVectorUInt16T);</highlight></codeline>
<codeline lineno="7605"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLVectorT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;int16&quot;</highlight><highlight class="normal">,<sp/>MLVectorInt16T);</highlight></codeline>
<codeline lineno="7606"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLVectorT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;uint32&quot;</highlight><highlight class="normal">,<sp/>MLVectorUInt32T);</highlight></codeline>
<codeline lineno="7607"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLVectorT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;int32&quot;</highlight><highlight class="normal">,<sp/>MLVectorInt32T);</highlight></codeline>
<codeline lineno="7608"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLVectorT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;uint64&quot;</highlight><highlight class="normal">,<sp/>MLVectorUInt64T);</highlight></codeline>
<codeline lineno="7609"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLVectorT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;int64&quot;</highlight><highlight class="normal">,<sp/>MLVectorInt64T);</highlight></codeline>
<codeline lineno="7610"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLVectorT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;float32&quot;</highlight><highlight class="normal">,<sp/>MLVectorFloat32T);</highlight></codeline>
<codeline lineno="7611"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLVectorT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;float64&quot;</highlight><highlight class="normal">,<sp/>MLVectorFloat64T);</highlight></codeline>
<codeline lineno="7612"><highlight class="normal"></highlight></codeline>
<codeline lineno="7613"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLMatrixT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;any&quot;</highlight><highlight class="normal">,<sp/>MLMatrixAnyT);</highlight></codeline>
<codeline lineno="7614"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLMatrixT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;uint8&quot;</highlight><highlight class="normal">,<sp/>MLMatrixUInt8T);</highlight></codeline>
<codeline lineno="7615"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLMatrixT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;int8&quot;</highlight><highlight class="normal">,<sp/>MLMatrixInt8T);</highlight></codeline>
<codeline lineno="7616"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLMatrixT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;uint16&quot;</highlight><highlight class="normal">,<sp/>MLMatrixUInt16T);</highlight></codeline>
<codeline lineno="7617"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLMatrixT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;int16&quot;</highlight><highlight class="normal">,<sp/>MLMatrixInt16T);</highlight></codeline>
<codeline lineno="7618"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLMatrixT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;uint32&quot;</highlight><highlight class="normal">,<sp/>MLMatrixUInt32T);</highlight></codeline>
<codeline lineno="7619"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLMatrixT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;int32&quot;</highlight><highlight class="normal">,<sp/>MLMatrixInt32T);</highlight></codeline>
<codeline lineno="7620"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLMatrixT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;uint64&quot;</highlight><highlight class="normal">,<sp/>MLMatrixUInt64T);</highlight></codeline>
<codeline lineno="7621"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLMatrixT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;int64&quot;</highlight><highlight class="normal">,<sp/>MLMatrixInt64T);</highlight></codeline>
<codeline lineno="7622"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLMatrixT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;float32&quot;</highlight><highlight class="normal">,<sp/>MLMatrixFloat32T);</highlight></codeline>
<codeline lineno="7623"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLMatrixT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;float64&quot;</highlight><highlight class="normal">,<sp/>MLMatrixFloat64T);</highlight></codeline>
<codeline lineno="7624"><highlight class="normal"></highlight></codeline>
<codeline lineno="7625"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7626"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLArrayT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;complex32&quot;</highlight><highlight class="normal">,<sp/>MLArrayComplex32T);</highlight></codeline>
<codeline lineno="7627"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLArrayT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;complex64&quot;</highlight><highlight class="normal">,<sp/>MLArrayComplex64T);</highlight></codeline>
<codeline lineno="7628"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLVectorT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;complex32&quot;</highlight><highlight class="normal">,<sp/>MLVectorComplex32T);</highlight></codeline>
<codeline lineno="7629"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLVectorT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;complex64&quot;</highlight><highlight class="normal">,<sp/>MLVectorComplex64T);</highlight></codeline>
<codeline lineno="7630"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLMatrixT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;complex32&quot;</highlight><highlight class="normal">,<sp/>MLMatrixComplex32T);</highlight></codeline>
<codeline lineno="7631"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLMatrixT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;complex64&quot;</highlight><highlight class="normal">,<sp/>MLMatrixComplex64T);</highlight></codeline>
<codeline lineno="7632"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Globals)<sp/>{</highlight></codeline>
<codeline lineno="7634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">,<sp/>MLArrayT);</highlight></codeline>
<codeline lineno="7635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;vector&quot;</highlight><highlight class="normal">,<sp/>MLVectorT);</highlight></codeline>
<codeline lineno="7636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;matrix&quot;</highlight><highlight class="normal">,<sp/>MLMatrixT);</highlight></codeline>
<codeline lineno="7637"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7638"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_CBOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7639"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_tag(ML_CBOR_TAG_MULTI_ARRAY,<sp/>ml_cbor_read_multi_array_fn);</highlight></codeline>
<codeline lineno="7640"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_tag(ML_CBOR_TAG_ARRAY_ANY,<sp/>ml_cbor_read_any_array_fn);</highlight></codeline>
<codeline lineno="7641"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_tag(ML_CBOR_TAG_ARRAY_UINT8,<sp/>ml_cbor_read_uint8_array_fn);</highlight></codeline>
<codeline lineno="7642"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_tag(ML_CBOR_TAG_ARRAY_INT8,<sp/>ml_cbor_read_int8_array_fn);</highlight></codeline>
<codeline lineno="7643"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_tag(ML_CBOR_TAG_ARRAY_UINT16_LE,<sp/>ml_cbor_read_uint16_array_fn);</highlight></codeline>
<codeline lineno="7644"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_tag(ML_CBOR_TAG_ARRAY_INT16_LE,<sp/>ml_cbor_read_int16_array_fn);</highlight></codeline>
<codeline lineno="7645"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_tag(ML_CBOR_TAG_ARRAY_UINT32_LE,<sp/>ml_cbor_read_uint32_array_fn);</highlight></codeline>
<codeline lineno="7646"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_tag(ML_CBOR_TAG_ARRAY_INT32_LE,<sp/>ml_cbor_read_int32_array_fn);</highlight></codeline>
<codeline lineno="7647"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_tag(ML_CBOR_TAG_ARRAY_UINT64_LE,<sp/>ml_cbor_read_uint64_array_fn);</highlight></codeline>
<codeline lineno="7648"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_tag(ML_CBOR_TAG_ARRAY_INT64_LE,<sp/>ml_cbor_read_int64_array_fn);</highlight></codeline>
<codeline lineno="7649"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_tag(ML_CBOR_TAG_ARRAY_FLOAT32_LE,<sp/>ml_cbor_read_float32_array_fn);</highlight></codeline>
<codeline lineno="7650"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_tag(ML_CBOR_TAG_ARRAY_FLOAT64_LE,<sp/>ml_cbor_read_float64_array_fn);</highlight></codeline>
<codeline lineno="7651"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7652"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_object(</highlight><highlight class="stringliteral">&quot;array::complex32&quot;</highlight><highlight class="normal">,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLCborReadComplex32);</highlight></codeline>
<codeline lineno="7653"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_object(</highlight><highlight class="stringliteral">&quot;array::complex64&quot;</highlight><highlight class="normal">,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLCborReadComplex64);</highlight></codeline>
<codeline lineno="7654"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7655"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">,<sp/>MLArrayT);</highlight></codeline>
<codeline lineno="7656"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;vector&quot;</highlight><highlight class="normal">,<sp/>MLVectorT);</highlight></codeline>
<codeline lineno="7657"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;matrix&quot;</highlight><highlight class="normal">,<sp/>MLMatrixT);</highlight></codeline>
<codeline lineno="7658"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7659"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ml_array.c"/>
  </compounddef>
</doxygen>
