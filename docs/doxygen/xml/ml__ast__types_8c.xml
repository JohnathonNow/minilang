<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__ast__types_8c" kind="file" language="C++">
    <compoundname>ml_ast_types.c</compoundname>
    <includes refid="ml__object_8h" local="yes">ml_object.h</includes>
    <includedby refid="ml__ast_8c" local="yes">src/ml_ast.c</includedby>
    <incdepgraph>
      <node id="9">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_ast_types.c</label>
        <link refid="ml__ast__types_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ml_object.h</label>
        <link refid="ml__object_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="12">
        <label>ml_config.h</label>
      </node>
      <node id="6">
        <label>stdarg.h</label>
      </node>
      <node id="11">
        <label>stdint.h</label>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
      <node id="10">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
      <node id="7">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="ml__ast__types_8c_1aa72ae8ed7ece870dde4db19256c90e82" prot="public" static="yes" mutable="no">
        <type><ref refid="structml__module__t" kindref="compound">ml_module_t</ref></type>
        <definition>ml_module_t Ast[1]</definition>
        <argsstring>[1]</argsstring>
        <name>Ast</name>
        <initializer>= {{MLModuleT, &quot;ast&quot;, {STRINGMAP_INIT}}}</initializer>
        <briefdescription>
<para>ast </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="5" column="20" bodyfile="src/ml_ast_types.c" bodystart="5" bodyend="5"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__ast__types_8c_1a03d85f486a5d7f08c2a22da030fe9e98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstExprT,(), &quot;ast::expr&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstExprT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;ast::expr&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="7" column="1" declfile="src/ml_ast_types.c" declline="7" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a56e088488d33e8dbba3052524cd07190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;source&quot;, AstExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;source&quot;</type>
        </param>
        <param>
          <type>AstExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="15" column="1" declfile="src/ml_ast_types.c" declline="15" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a90568ef9db04c38f2fcc9f2461dab3c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;startline&quot;, AstExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;startline&quot;</type>
        </param>
        <param>
          <type>AstExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="17" column="1" declfile="src/ml_ast_types.c" declline="17" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a5ea8ac3b283f66825cf1e765d6f6a9fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;endline&quot;, AstExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;endline&quot;</type>
        </param>
        <param>
          <type>AstExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="19" column="1" declfile="src/ml_ast_types.c" declline="19" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1acf453748a5cb071cac7daf9b76478a87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;data&quot;, AstExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;data&quot;</type>
        </param>
        <param>
          <type>AstExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="21" column="1" declfile="src/ml_ast_types.c" declline="21" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1ad26e2b5f4d4c37fc78b20cb827ae0b5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstIfExprT,(AstExprT), &quot;ast::expr::if&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstIfExprT</type>
        </param>
        <param>
          <type>(AstExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::if&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="23" column="1" declfile="src/ml_ast_types.c" declline="23" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a675c663288e48f7830dc41f018e11561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;cases&quot;, AstIfExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;cases&quot;</type>
        </param>
        <param>
          <type>AstIfExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="30" column="1" declfile="src/ml_ast_types.c" declline="30" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1afe24072295778549de53d728e20eccfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;else&quot;, AstIfExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;else&quot;</type>
        </param>
        <param>
          <type>AstIfExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="32" column="1" declfile="src/ml_ast_types.c" declline="32" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a104e0787a19d31914ec0f8d7b1f046b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstFunExprT,(AstExprT), &quot;ast::expr::fun&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstFunExprT</type>
        </param>
        <param>
          <type>(AstExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::fun&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="34" column="1" declfile="src/ml_ast_types.c" declline="34" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1af9087cdad991b4352f0bfba6b773ab33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;name&quot;, AstFunExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;name&quot;</type>
        </param>
        <param>
          <type>AstFunExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="43" column="1" declfile="src/ml_ast_types.c" declline="43" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a12d0e715434b53b081536cd7b32aea53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;params&quot;, AstFunExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;params&quot;</type>
        </param>
        <param>
          <type>AstFunExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="45" column="1" declfile="src/ml_ast_types.c" declline="45" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1ab3096b0d85d575a8349071ca09cfa710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;body&quot;, AstFunExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;body&quot;</type>
        </param>
        <param>
          <type>AstFunExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="47" column="1" declfile="src/ml_ast_types.c" declline="47" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a0dc64e1f7cac96583819c69ff373e271" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;returntype&quot;, AstFunExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;returntype&quot;</type>
        </param>
        <param>
          <type>AstFunExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="49" column="1" declfile="src/ml_ast_types.c" declline="49" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a2be68167a26aab9d1e538d89d9a2368d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstForExprT,(AstExprT), &quot;ast::expr::for&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstForExprT</type>
        </param>
        <param>
          <type>(AstExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::for&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="51" column="1" declfile="src/ml_ast_types.c" declline="51" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1aad2e358ebd2fe157e61530d0929501ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;key&quot;, AstForExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;key&quot;</type>
        </param>
        <param>
          <type>AstForExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="62" column="1" declfile="src/ml_ast_types.c" declline="62" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a13e36de0961491e5789abb28e186a6be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;local&quot;, AstForExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;local&quot;</type>
        </param>
        <param>
          <type>AstForExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="64" column="1" declfile="src/ml_ast_types.c" declline="64" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a61817e45810e5b2cf876388be707b76a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;sequence&quot;, AstForExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;sequence&quot;</type>
        </param>
        <param>
          <type>AstForExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="66" column="1" declfile="src/ml_ast_types.c" declline="66" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a62a88655e15f232f767ef81faa45fbb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;body&quot;, AstForExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;body&quot;</type>
        </param>
        <param>
          <type>AstForExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="68" column="1" declfile="src/ml_ast_types.c" declline="68" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1ac7ab4a142846f5df290ba40e2669d765" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;name&quot;, AstForExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;name&quot;</type>
        </param>
        <param>
          <type>AstForExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="70" column="1" declfile="src/ml_ast_types.c" declline="70" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a4cfb12c44d7f91697b3b902426ee7f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;unpack&quot;, AstForExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;unpack&quot;</type>
        </param>
        <param>
          <type>AstForExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="72" column="1" declfile="src/ml_ast_types.c" declline="72" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a8302c32cb04b6f4e4b37778fceb228c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstValueExprT,(AstExprT), &quot;ast::expr::value&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstValueExprT</type>
        </param>
        <param>
          <type>(AstExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::value&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="74" column="1" declfile="src/ml_ast_types.c" declline="74" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1ab3a94805bcd33eeb23d906e823050787" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;value&quot;, AstValueExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;value&quot;</type>
        </param>
        <param>
          <type>AstValueExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="80" column="1" declfile="src/ml_ast_types.c" declline="80" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a90e69ce4057bd4a22dc04232dd85b01a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstSubstExprT,(AstExprT), &quot;ast::expr::subst&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstSubstExprT</type>
        </param>
        <param>
          <type>(AstExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::subst&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="82" column="1" declfile="src/ml_ast_types.c" declline="82" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1aee7b837f82194a38278fb1bd08722f14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstIdentExprT,(AstExprT), &quot;ast::expr::ident&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstIdentExprT</type>
        </param>
        <param>
          <type>(AstExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::ident&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="87" column="1" declfile="src/ml_ast_types.c" declline="87" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a7744eebdaa4e5908d2f68b9778b04e95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;ident&quot;, AstIdentExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;ident&quot;</type>
        </param>
        <param>
          <type>AstIdentExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="93" column="1" declfile="src/ml_ast_types.c" declline="93" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a5b38e33984d9c5768430f77cff1d334f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstLocalExprT,(AstExprT), &quot;ast::expr::local&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstLocalExprT</type>
        </param>
        <param>
          <type>(AstExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::local&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="95" column="1" declfile="src/ml_ast_types.c" declline="95" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a3dad24942f52684e3741630c612458ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;local&quot;, AstLocalExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;local&quot;</type>
        </param>
        <param>
          <type>AstLocalExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="103" column="1" declfile="src/ml_ast_types.c" declline="103" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1ae88ebd743d7459ac68400db831e10dad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;child&quot;, AstLocalExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;child&quot;</type>
        </param>
        <param>
          <type>AstLocalExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="105" column="1" declfile="src/ml_ast_types.c" declline="105" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1ac95dac363bc60ad0f35649c45b5e9105" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;count&quot;, AstLocalExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;count&quot;</type>
        </param>
        <param>
          <type>AstLocalExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="107" column="1" declfile="src/ml_ast_types.c" declline="107" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1abcce99cf5db25705add592e9b6f7e686" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstBlockExprT,(AstExprT), &quot;ast::expr::block&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstBlockExprT</type>
        </param>
        <param>
          <type>(AstExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::block&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="109" column="1" declfile="src/ml_ast_types.c" declline="109" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a40e6165b30a9590c305938ab03c1297b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;vars&quot;, AstBlockExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;vars&quot;</type>
        </param>
        <param>
          <type>AstBlockExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="124" column="1" declfile="src/ml_ast_types.c" declline="124" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a8b5f2f99b58add861e55712f88f1e2b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;lets&quot;, AstBlockExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;lets&quot;</type>
        </param>
        <param>
          <type>AstBlockExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="126" column="1" declfile="src/ml_ast_types.c" declline="126" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a21626db496da668599485435b8262911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;defs&quot;, AstBlockExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;defs&quot;</type>
        </param>
        <param>
          <type>AstBlockExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="128" column="1" declfile="src/ml_ast_types.c" declline="128" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a3608205321c1f8285b7198bfa558024d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;child&quot;, AstBlockExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;child&quot;</type>
        </param>
        <param>
          <type>AstBlockExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="130" column="1" declfile="src/ml_ast_types.c" declline="130" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a263db64ddd19191703d6f4c0c3fb9928" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;catchbody&quot;, AstBlockExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;catchbody&quot;</type>
        </param>
        <param>
          <type>AstBlockExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="132" column="1" declfile="src/ml_ast_types.c" declline="132" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1adf90c528dfc94c6df319f24e095c55a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;must&quot;, AstBlockExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;must&quot;</type>
        </param>
        <param>
          <type>AstBlockExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="134" column="1" declfile="src/ml_ast_types.c" declline="134" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1acc7b3a2aae3356d7fe3115ac474acc92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;catchident&quot;, AstBlockExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;catchident&quot;</type>
        </param>
        <param>
          <type>AstBlockExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="136" column="1" declfile="src/ml_ast_types.c" declline="136" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1ace7c6d9b182b4b8216698f64d0516264" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;numvars&quot;, AstBlockExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;numvars&quot;</type>
        </param>
        <param>
          <type>AstBlockExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="138" column="1" declfile="src/ml_ast_types.c" declline="138" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1ac8b96b5ea94ea43b5986851807e9a7c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;numlets&quot;, AstBlockExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;numlets&quot;</type>
        </param>
        <param>
          <type>AstBlockExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="140" column="1" declfile="src/ml_ast_types.c" declline="140" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a3f06dfe5efeefd5b7b7247e1693ef93d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;numdefs&quot;, AstBlockExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;numdefs&quot;</type>
        </param>
        <param>
          <type>AstBlockExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="142" column="1" declfile="src/ml_ast_types.c" declline="142" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1adef263c666beeb6077660d60be30a799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstStringExprT,(AstExprT), &quot;ast::expr::string&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstStringExprT</type>
        </param>
        <param>
          <type>(AstExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::string&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="144" column="1" declfile="src/ml_ast_types.c" declline="144" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a13855caac3a912d499c6e5be9b3d259b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;parts&quot;, AstStringExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;parts&quot;</type>
        </param>
        <param>
          <type>AstStringExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="150" column="1" declfile="src/ml_ast_types.c" declline="150" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a985c63afa6558600494512fcd7c5614f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstScopedExprT,(AstExprT), &quot;ast::expr::scoped&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstScopedExprT</type>
        </param>
        <param>
          <type>(AstExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::scoped&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="152" column="1" declfile="src/ml_ast_types.c" declline="152" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1ac1ca8ee5147b8cdf770fd98b82905b00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstParentExprT,(AstExprT), &quot;ast::expr::parent&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstParentExprT</type>
        </param>
        <param>
          <type>(AstExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::parent&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="157" column="1" declfile="src/ml_ast_types.c" declline="157" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a1f6d64863b91e9366d42958742d2307c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;child&quot;, AstParentExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;child&quot;</type>
        </param>
        <param>
          <type>AstParentExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="164" column="1" declfile="src/ml_ast_types.c" declline="164" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1acf8d5fa61f476a0eefa30637f3b2a8ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;name&quot;, AstParentExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;name&quot;</type>
        </param>
        <param>
          <type>AstParentExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="166" column="1" declfile="src/ml_ast_types.c" declline="166" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a25ada502446af627110030c8606cdf17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstDefaultExprT,(AstExprT), &quot;ast::expr::default&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstDefaultExprT</type>
        </param>
        <param>
          <type>(AstExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::default&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="168" column="1" declfile="src/ml_ast_types.c" declline="168" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1af70e007bc7e2892d0b94750bff463245" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;child&quot;, AstDefaultExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;child&quot;</type>
        </param>
        <param>
          <type>AstDefaultExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="176" column="1" declfile="src/ml_ast_types.c" declline="176" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1abcbb7b97620fd0543a94c4f406ed670a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;index&quot;, AstDefaultExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;index&quot;</type>
        </param>
        <param>
          <type>AstDefaultExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="178" column="1" declfile="src/ml_ast_types.c" declline="178" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a0464d33bb02d747e3a992ddde1c3bcec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;flags&quot;, AstDefaultExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;flags&quot;</type>
        </param>
        <param>
          <type>AstDefaultExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="180" column="1" declfile="src/ml_ast_types.c" declline="180" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a04ebedb6a442f5883f9419f4dda8dcd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstIfConfigExprT,(AstExprT), &quot;ast::expr::ifconfig&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstIfConfigExprT</type>
        </param>
        <param>
          <type>(AstExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::ifconfig&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="182" column="1" declfile="src/ml_ast_types.c" declline="182" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a7116b089a8970eaf9aead4b914677334" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;child&quot;, AstIfConfigExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;child&quot;</type>
        </param>
        <param>
          <type>AstIfConfigExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="189" column="1" declfile="src/ml_ast_types.c" declline="189" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a9885e297f1dcac7cc2350024ac3c0cd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;config&quot;, AstIfConfigExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;config&quot;</type>
        </param>
        <param>
          <type>AstIfConfigExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="191" column="1" declfile="src/ml_ast_types.c" declline="191" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1af09b2e7606a67a8f22c9d0d78935be43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstParentValueExprT,(AstExprT), &quot;ast::expr::parentvalue&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstParentValueExprT</type>
        </param>
        <param>
          <type>(AstExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::parentvalue&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="193" column="1" declfile="src/ml_ast_types.c" declline="193" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1adc142a62dc25d1887d7ed5199dc05cc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;child&quot;, AstParentValueExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;child&quot;</type>
        </param>
        <param>
          <type>AstParentValueExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="200" column="1" declfile="src/ml_ast_types.c" declline="200" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1aa4988dca6e0f6cc731ea96c2cf55e4c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;value&quot;, AstParentValueExprT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;value&quot;</type>
        </param>
        <param>
          <type>AstParentValueExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="202" column="1" declfile="src/ml_ast_types.c" declline="202" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a49eb1b0d924e126bdeb38a57770b9190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstAndExprT,(AstParentExprT), &quot;ast::expr::and&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstAndExprT</type>
        </param>
        <param>
          <type>(AstParentExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::and&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="204" column="1" declfile="src/ml_ast_types.c" declline="204" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a726e674dbb723cb5b05be2500c6997d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstAssignExprT,(AstParentExprT), &quot;ast::expr::assign&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstAssignExprT</type>
        </param>
        <param>
          <type>(AstParentExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::assign&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="209" column="1" declfile="src/ml_ast_types.c" declline="209" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1afadc16ec4b663035db4dae7076b9296d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstBlankExprT,(AstExprT), &quot;ast::expr::blank&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstBlankExprT</type>
        </param>
        <param>
          <type>(AstExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::blank&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="214" column="1" declfile="src/ml_ast_types.c" declline="214" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a0c2a9a85e0c06f0245cd996aa75408e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstCallExprT,(AstParentExprT), &quot;ast::expr::call&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstCallExprT</type>
        </param>
        <param>
          <type>(AstParentExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::call&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="219" column="1" declfile="src/ml_ast_types.c" declline="219" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a7a85fb6f9b92abcb7469ffd94294b276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstConstCallExprT,(AstParentValueExprT), &quot;ast::expr::constcall&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstConstCallExprT</type>
        </param>
        <param>
          <type>(AstParentValueExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::constcall&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="224" column="1" declfile="src/ml_ast_types.c" declline="224" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1aaca70deb8aa28255cd405067aa4a7e54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstDebugExprT,(AstParentExprT), &quot;ast::expr::debug&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstDebugExprT</type>
        </param>
        <param>
          <type>(AstParentExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::debug&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="229" column="1" declfile="src/ml_ast_types.c" declline="229" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a45dace12c7079c6b41ea1631a758df96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstDefExprT,(AstLocalExprT), &quot;ast::expr::def&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstDefExprT</type>
        </param>
        <param>
          <type>(AstLocalExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::def&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="234" column="1" declfile="src/ml_ast_types.c" declline="234" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a19b8064477640cf496246f8d04a038a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstDefInExprT,(AstLocalExprT), &quot;ast::expr::defin&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstDefInExprT</type>
        </param>
        <param>
          <type>(AstLocalExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::defin&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="239" column="1" declfile="src/ml_ast_types.c" declline="239" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a323710139e5707fa29adf5c1c8ce8af7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstDefUnpackExprT,(AstLocalExprT), &quot;ast::expr::defunpack&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstDefUnpackExprT</type>
        </param>
        <param>
          <type>(AstLocalExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::defunpack&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="244" column="1" declfile="src/ml_ast_types.c" declline="244" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1ac6f1adaea6155333e2ebfe9c64e81bf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstDefineExprT,(AstIdentExprT), &quot;ast::expr::define&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstDefineExprT</type>
        </param>
        <param>
          <type>(AstIdentExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::define&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="249" column="1" declfile="src/ml_ast_types.c" declline="249" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a1cceadcc9adeb23f72b85e202e9a3bd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstDelegateExprT,(AstParentExprT), &quot;ast::expr::delegate&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstDelegateExprT</type>
        </param>
        <param>
          <type>(AstParentExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::delegate&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="254" column="1" declfile="src/ml_ast_types.c" declline="254" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1aa52df4068fbe7467e503600cf7401f47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstEachExprT,(AstParentExprT), &quot;ast::expr::each&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstEachExprT</type>
        </param>
        <param>
          <type>(AstParentExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::each&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="259" column="1" declfile="src/ml_ast_types.c" declline="259" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a1446d193e60dac4f0331da70daaf6aa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstExitExprT,(AstParentExprT), &quot;ast::expr::exit&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstExitExprT</type>
        </param>
        <param>
          <type>(AstParentExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::exit&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="264" column="1" declfile="src/ml_ast_types.c" declline="264" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a53f73c3257ffef9d32b7b616697053cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstGuardExprT,(AstParentExprT), &quot;ast::expr::guard&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstGuardExprT</type>
        </param>
        <param>
          <type>(AstParentExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::guard&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="269" column="1" declfile="src/ml_ast_types.c" declline="269" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1aeaa1c2ec08e4bbabff56ebf847b755f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstInlineExprT,(AstParentExprT), &quot;ast::expr::inline&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstInlineExprT</type>
        </param>
        <param>
          <type>(AstParentExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::inline&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="274" column="1" declfile="src/ml_ast_types.c" declline="274" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a28128d61dca450f063cc6e6639782dc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstItExprT,(AstExprT), &quot;ast::expr::it&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstItExprT</type>
        </param>
        <param>
          <type>(AstExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::it&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="279" column="1" declfile="src/ml_ast_types.c" declline="279" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a6e2845f986f4839fbf95692bb563350a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstLetExprT,(AstLocalExprT), &quot;ast::expr::let&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstLetExprT</type>
        </param>
        <param>
          <type>(AstLocalExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::let&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="284" column="1" declfile="src/ml_ast_types.c" declline="284" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a5a8b2ed12c98d77f4ae7b9e0f673e665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstLetInExprT,(AstLocalExprT), &quot;ast::expr::letin&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstLetInExprT</type>
        </param>
        <param>
          <type>(AstLocalExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::letin&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="289" column="1" declfile="src/ml_ast_types.c" declline="289" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a97cb99f06541deaec45b7dd1856db9b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstLetUnpackExprT,(AstLocalExprT), &quot;ast::expr::letunpack&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstLetUnpackExprT</type>
        </param>
        <param>
          <type>(AstLocalExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::letunpack&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="294" column="1" declfile="src/ml_ast_types.c" declline="294" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a41b672a842d5763364ef088621fbc1d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstListExprT,(AstParentExprT), &quot;ast::expr::list&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstListExprT</type>
        </param>
        <param>
          <type>(AstParentExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::list&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="299" column="1" declfile="src/ml_ast_types.c" declline="299" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a89aee4905785fa8dadbf6a1e03977336" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstLoopExprT,(AstParentExprT), &quot;ast::expr::loop&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstLoopExprT</type>
        </param>
        <param>
          <type>(AstParentExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::loop&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="304" column="1" declfile="src/ml_ast_types.c" declline="304" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a22dd074e1b6a523353aee5e5aaefb632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstMapExprT,(AstParentExprT), &quot;ast::expr::map&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstMapExprT</type>
        </param>
        <param>
          <type>(AstParentExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::map&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="309" column="1" declfile="src/ml_ast_types.c" declline="309" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a8d5c82be83c0eda2096d115890e5139e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstNextExprT,(AstParentExprT), &quot;ast::expr::next&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstNextExprT</type>
        </param>
        <param>
          <type>(AstParentExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::next&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="314" column="1" declfile="src/ml_ast_types.c" declline="314" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a7284b37cedd0f5d95f08d0b3860bf14a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstNilExprT,(AstExprT), &quot;ast::expr::nil&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstNilExprT</type>
        </param>
        <param>
          <type>(AstExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::nil&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="319" column="1" declfile="src/ml_ast_types.c" declline="319" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a87b7696b2038874a024ec2084459f4f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstNotExprT,(AstParentExprT), &quot;ast::expr::not&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstNotExprT</type>
        </param>
        <param>
          <type>(AstParentExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::not&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="324" column="1" declfile="src/ml_ast_types.c" declline="324" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a6c48e35e6ba8798f03377d56f936119d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstOldExprT,(AstExprT), &quot;ast::expr::old&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstOldExprT</type>
        </param>
        <param>
          <type>(AstExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::old&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="329" column="1" declfile="src/ml_ast_types.c" declline="329" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1ab3147f392689b4e4d5720099d3e40461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstOrExprT,(AstParentExprT), &quot;ast::expr::or&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstOrExprT</type>
        </param>
        <param>
          <type>(AstParentExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::or&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="334" column="1" declfile="src/ml_ast_types.c" declline="334" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1ade21b999f1a8418ff0543115d357a9fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstRefExprT,(AstLocalExprT), &quot;ast::expr::ref&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstRefExprT</type>
        </param>
        <param>
          <type>(AstLocalExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::ref&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="339" column="1" declfile="src/ml_ast_types.c" declline="339" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a6da9870bbd4f9c4f0c10433f36f1bf64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstRefInExprT,(AstLocalExprT), &quot;ast::expr::refin&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstRefInExprT</type>
        </param>
        <param>
          <type>(AstLocalExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::refin&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="344" column="1" declfile="src/ml_ast_types.c" declline="344" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a369b18d4b305f4058ea4ef0ce0584b86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstRefUnpackExprT,(AstLocalExprT), &quot;ast::expr::refunpack&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstRefUnpackExprT</type>
        </param>
        <param>
          <type>(AstLocalExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::refunpack&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="349" column="1" declfile="src/ml_ast_types.c" declline="349" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a040e962bdf69e52fc119f12c0b750407" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstRegisterExprT,(AstExprT), &quot;ast::expr::register&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstRegisterExprT</type>
        </param>
        <param>
          <type>(AstExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::register&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="354" column="1" declfile="src/ml_ast_types.c" declline="354" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a94ff19fcf333078ca04a6b1be7e77e89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstResolveExprT,(AstParentValueExprT), &quot;ast::expr::resolve&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstResolveExprT</type>
        </param>
        <param>
          <type>(AstParentValueExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::resolve&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="359" column="1" declfile="src/ml_ast_types.c" declline="359" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a6308138a82281c86df2059a6efa572ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstReturnExprT,(AstParentExprT), &quot;ast::expr::return&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstReturnExprT</type>
        </param>
        <param>
          <type>(AstParentExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::return&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="364" column="1" declfile="src/ml_ast_types.c" declline="364" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a221d57618056df58cd160c001e5f7d5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstSuspendExprT,(AstParentExprT), &quot;ast::expr::suspend&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstSuspendExprT</type>
        </param>
        <param>
          <type>(AstParentExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::suspend&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="369" column="1" declfile="src/ml_ast_types.c" declline="369" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a6e468215cfc3ee7f18ddf348831ea13b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstSwitchExprT,(AstParentExprT), &quot;ast::expr::switch&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstSwitchExprT</type>
        </param>
        <param>
          <type>(AstParentExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::switch&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="374" column="1" declfile="src/ml_ast_types.c" declline="374" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1ab0264ea5415cb5927cd833b085415868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstTupleExprT,(AstParentExprT), &quot;ast::expr::tuple&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstTupleExprT</type>
        </param>
        <param>
          <type>(AstParentExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::tuple&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="379" column="1" declfile="src/ml_ast_types.c" declline="379" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a7cd392a6818f663307e6e03abeacf52a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstUnknownExprT,(AstExprT), &quot;ast::expr::unknown&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstUnknownExprT</type>
        </param>
        <param>
          <type>(AstExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::unknown&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="384" column="1" declfile="src/ml_ast_types.c" declline="384" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1af4747452dc78ddb74bc82c9dd5cc160a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstVarExprT,(AstLocalExprT), &quot;ast::expr::var&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstVarExprT</type>
        </param>
        <param>
          <type>(AstLocalExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::var&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="389" column="1" declfile="src/ml_ast_types.c" declline="389" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1aa59652f4a1901a628eea462e81436d3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstVarInExprT,(AstLocalExprT), &quot;ast::expr::varin&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstVarInExprT</type>
        </param>
        <param>
          <type>(AstLocalExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::varin&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="394" column="1" declfile="src/ml_ast_types.c" declline="394" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a3e3e2bcf0afe6e1618e28ab0fc6cfc19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstVarTypeExprT,(AstLocalExprT), &quot;ast::expr::vartype&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstVarTypeExprT</type>
        </param>
        <param>
          <type>(AstLocalExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::vartype&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="399" column="1" declfile="src/ml_ast_types.c" declline="399" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1ad9b37df59b50196766559ac6e2958231" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstVarUnpackExprT,(AstLocalExprT), &quot;ast::expr::varunpack&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstVarUnpackExprT</type>
        </param>
        <param>
          <type>(AstLocalExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::varunpack&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="404" column="1" declfile="src/ml_ast_types.c" declline="404" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a00dbdc82c9eb2525b2cfea7446dea656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstWithExprT,(AstLocalExprT), &quot;ast::expr::with&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstWithExprT</type>
        </param>
        <param>
          <type>(AstLocalExprT)</type>
        </param>
        <param>
          <type>&quot;ast::expr::with&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="409" column="1" declfile="src/ml_ast_types.c" declline="409" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a1859089434eb50762459dd0f3df2fec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstLocalT,(), &quot;ast::local&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstLocalT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;ast::local&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="414" column="1" declfile="src/ml_ast_types.c" declline="414" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a4500b4e394a7920af34ceb0997d21bbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;ident&quot;, AstLocalT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;ident&quot;</type>
        </param>
        <param>
          <type>AstLocalT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="422" column="1" declfile="src/ml_ast_types.c" declline="422" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a563d88ed624ae567b45c37e62c90e89c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;line&quot;, AstLocalT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;line&quot;</type>
        </param>
        <param>
          <type>AstLocalT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="424" column="1" declfile="src/ml_ast_types.c" declline="424" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a9fc7300c7f46887c85393a958518cd82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;index&quot;, AstLocalT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;index&quot;</type>
        </param>
        <param>
          <type>AstLocalT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="426" column="1" declfile="src/ml_ast_types.c" declline="426" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1adecbd19d98342903dc08c310294911e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstParamT,(), &quot;ast::param&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstParamT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;ast::param&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="428" column="1" declfile="src/ml_ast_types.c" declline="428" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a52c892bfcd719479a2e041dc9903f5c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;ident&quot;, AstParamT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;ident&quot;</type>
        </param>
        <param>
          <type>AstParamT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="437" column="1" declfile="src/ml_ast_types.c" declline="437" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1ab608e748fec65c090cc71586e727c496" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;type&quot;, AstParamT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;type&quot;</type>
        </param>
        <param>
          <type>AstParamT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="439" column="1" declfile="src/ml_ast_types.c" declline="439" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a0f9da2ee00c770a9998d2633dd3f2af1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;line&quot;, AstParamT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;line&quot;</type>
        </param>
        <param>
          <type>AstParamT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="441" column="1" declfile="src/ml_ast_types.c" declline="441" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a07221454a98df53fcc42ea5504bdee1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;kind&quot;, AstParamT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;kind&quot;</type>
        </param>
        <param>
          <type>AstParamT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="443" column="1" declfile="src/ml_ast_types.c" declline="443" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1af9cc1bed7e7a49047fa0cae3d5975262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstStringPartT,(), &quot;ast::stringpart&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstStringPartT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;ast::stringpart&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="445" column="1" declfile="src/ml_ast_types.c" declline="445" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a77bcba5e20af8fa87ec7c011be1924da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;child&quot;, AstStringPartT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;child&quot;</type>
        </param>
        <param>
          <type>AstStringPartT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="454" column="1" declfile="src/ml_ast_types.c" declline="454" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a6cee031972c359c14cfcd6742ebd19e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;chars&quot;, AstStringPartT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;chars&quot;</type>
        </param>
        <param>
          <type>AstStringPartT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="456" column="1" declfile="src/ml_ast_types.c" declline="456" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a8ce1c3a3f51f4d5db13a9dc1dbd833b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;length&quot;, AstStringPartT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;length&quot;</type>
        </param>
        <param>
          <type>AstStringPartT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="458" column="1" declfile="src/ml_ast_types.c" declline="458" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a9c5606bb19377422e333175a8d8826a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;line&quot;, AstStringPartT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;line&quot;</type>
        </param>
        <param>
          <type>AstStringPartT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="460" column="1" declfile="src/ml_ast_types.c" declline="460" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a8dfbf510ed8a1d43834c81286a65585e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_CLASS</definition>
        <argsstring>(AstIfCaseT,(), &quot;ast::ifcase&quot;)</argsstring>
        <name>ML_CLASS</name>
        <param>
          <type>AstIfCaseT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;ast::ifcase&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="462" column="1" declfile="src/ml_ast_types.c" declline="462" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1aacc6c9189f6902ab3d08bf013bdf3fdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;condition&quot;, AstIfCaseT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;condition&quot;</type>
        </param>
        <param>
          <type>AstIfCaseT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="471" column="1" declfile="src/ml_ast_types.c" declline="471" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1aea7c396cc60e152abedbbe69eb7b7df9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;body&quot;, AstIfCaseT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;body&quot;</type>
        </param>
        <param>
          <type>AstIfCaseT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="473" column="1" declfile="src/ml_ast_types.c" declline="473" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1ac53cca263a6676d1a1b1fe171f989a68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;local&quot;, AstIfCaseT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;local&quot;</type>
        </param>
        <param>
          <type>AstIfCaseT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="475" column="1" declfile="src/ml_ast_types.c" declline="475" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1ac3be8a2d35e115fb22083de928b6400a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FIELD</definition>
        <argsstring>(&quot;token&quot;, AstIfCaseT)</argsstring>
        <name>ML_FIELD</name>
        <param>
          <type>&quot;token&quot;</type>
        </param>
        <param>
          <type>AstIfCaseT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="477" column="1" declfile="src/ml_ast_types.c" declline="477" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a92271a9b825b7a41ec5dc9641c72383c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_ast_types_init</definition>
        <argsstring>()</argsstring>
        <name>ml_ast_types_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="480" column="13" bodyfile="src/ml_ast_types.c" bodystart="480" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a3c287a3c59ba6f37c4d76eaa10f6dddd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * a_mlc_local_t</definition>
        <argsstring>(mlc_local_t *Struct)</argsstring>
        <name>a_mlc_local_t</name>
        <param>
          <type><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="544" column="19" bodyfile="src/ml_ast_types.c" bodystart="544" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1af180d4eff6299e2c551522676f5f9b76" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * l_mlc_local_t</definition>
        <argsstring>(mlc_local_t *Struct)</argsstring>
        <name>l_mlc_local_t</name>
        <param>
          <type><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="553" column="19" bodyfile="src/ml_ast_types.c" bodystart="553" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a1dd19c35fa9ef0e729819279b31fd34f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ln_mlc_local_t</definition>
        <argsstring>(mlc_local_t *Struct, int Count)</argsstring>
        <name>ln_mlc_local_t</name>
        <param>
          <type><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="562" column="19" bodyfile="src/ml_ast_types.c" bodystart="562" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a29b95662ea0da20a92ebfa9faed95eb3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * a_mlc_expr_t</definition>
        <argsstring>(ml_type_t *Class, mlc_expr_t *Struct)</argsstring>
        <name>a_mlc_expr_t</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="571" column="19" bodyfile="src/ml_ast_types.c" bodystart="571" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1aa9f1ec83836e6d4d6641582513df0fc4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * l_mlc_expr_t</definition>
        <argsstring>(mlc_expr_t *Struct)</argsstring>
        <name>l_mlc_expr_t</name>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="580" column="19" bodyfile="src/ml_ast_types.c" bodystart="580" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a2931802ec60146c2be2f651e7cfeb692" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * a_mlc_param_t</definition>
        <argsstring>(mlc_param_t *Struct)</argsstring>
        <name>a_mlc_param_t</name>
        <param>
          <type><ref refid="structmlc__param__t" kindref="compound">mlc_param_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="589" column="19" bodyfile="src/ml_ast_types.c" bodystart="589" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1acbb6e253d4711da9569a239739cfd432" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * l_mlc_param_t</definition>
        <argsstring>(mlc_param_t *Struct)</argsstring>
        <name>l_mlc_param_t</name>
        <param>
          <type><ref refid="structmlc__param__t" kindref="compound">mlc_param_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="599" column="19" bodyfile="src/ml_ast_types.c" bodystart="599" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a90c92dd65a761a40f6098c6e5ad7fb35" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * a_mlc_string_part_t</definition>
        <argsstring>(mlc_string_part_t *Struct)</argsstring>
        <name>a_mlc_string_part_t</name>
        <param>
          <type><ref refid="structmlc__string__part__t" kindref="compound">mlc_string_part_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="608" column="19" bodyfile="src/ml_ast_types.c" bodystart="608" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a719f7a2df7e362ea4bba3fe31e684a2a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * l_mlc_string_part_t</definition>
        <argsstring>(mlc_string_part_t *Struct)</argsstring>
        <name>l_mlc_string_part_t</name>
        <param>
          <type><ref refid="structmlc__string__part__t" kindref="compound">mlc_string_part_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="615" column="19" bodyfile="src/ml_ast_types.c" bodystart="615" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a43367451126bab6519304fe4abdd9087" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * a_mlc_if_case_t</definition>
        <argsstring>(mlc_if_case_t *Struct)</argsstring>
        <name>a_mlc_if_case_t</name>
        <param>
          <type><ref refid="structmlc__if__case__t" kindref="compound">mlc_if_case_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="624" column="19" bodyfile="src/ml_ast_types.c" bodystart="624" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a0b2cff278970443373719b17d54b2d19" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * l_mlc_if_case_t</definition>
        <argsstring>(mlc_if_case_t *Struct)</argsstring>
        <name>l_mlc_if_case_t</name>
        <param>
          <type><ref refid="structmlc__if__case__t" kindref="compound">mlc_if_case_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="634" column="19" bodyfile="src/ml_ast_types.c" bodystart="634" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a2841f7fa28087ed5812452c424d751ac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * a_mlc_ident_expr_t</definition>
        <argsstring>(ml_type_t *Class, mlc_ident_expr_t *Struct)</argsstring>
        <name>a_mlc_ident_expr_t</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="structmlc__ident__expr__t" kindref="compound">mlc_ident_expr_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="643" column="19" bodyfile="src/ml_ast_types.c" bodystart="643" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a02f3d04c3db857ddb8f29f45335fc39f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * a_mlc_fun_expr_t</definition>
        <argsstring>(ml_type_t *Class, mlc_fun_expr_t *Struct)</argsstring>
        <name>a_mlc_fun_expr_t</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="structmlc__fun__expr__t" kindref="compound">mlc_fun_expr_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="653" column="19" bodyfile="src/ml_ast_types.c" bodystart="653" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1af04b78d3aa2c994813f5760bddfbcf76" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * a_mlc_default_expr_t</definition>
        <argsstring>(ml_type_t *Class, mlc_default_expr_t *Struct)</argsstring>
        <name>a_mlc_default_expr_t</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="structmlc__default__expr__t" kindref="compound">mlc_default_expr_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="666" column="19" bodyfile="src/ml_ast_types.c" bodystart="666" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a5805e4d5bc93637e98fa64b6a28f963e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * a_mlc_string_expr_t</definition>
        <argsstring>(ml_type_t *Class, mlc_string_expr_t *Struct)</argsstring>
        <name>a_mlc_string_expr_t</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="structmlc__string__expr__t" kindref="compound">mlc_string_expr_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="678" column="19" bodyfile="src/ml_ast_types.c" bodystart="678" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1afb407de202d74287e011d71e4c6e7844" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * a_mlc_parent_value_expr_t</definition>
        <argsstring>(ml_type_t *Class, mlc_parent_value_expr_t *Struct)</argsstring>
        <name>a_mlc_parent_value_expr_t</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__value__expr__t" kindref="compound">mlc_parent_value_expr_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="688" column="19" bodyfile="src/ml_ast_types.c" bodystart="688" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a4191dd4e9f8c42719b2bf95c9e687983" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * a_mlc_block_expr_t</definition>
        <argsstring>(ml_type_t *Class, mlc_block_expr_t *Struct)</argsstring>
        <name>a_mlc_block_expr_t</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="structmlc__block__expr__t" kindref="compound">mlc_block_expr_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="699" column="19" bodyfile="src/ml_ast_types.c" bodystart="699" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a39f730e251e4eb3d922afa1b1dc7b206" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * a_mlc_for_expr_t</definition>
        <argsstring>(ml_type_t *Class, mlc_for_expr_t *Struct)</argsstring>
        <name>a_mlc_for_expr_t</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="structmlc__for__expr__t" kindref="compound">mlc_for_expr_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="718" column="19" bodyfile="src/ml_ast_types.c" bodystart="718" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a4336bee0b250243a87b4f12e02345cd2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * a_mlc_local_expr_t</definition>
        <argsstring>(ml_type_t *Class, mlc_local_expr_t *Struct)</argsstring>
        <name>a_mlc_local_expr_t</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="733" column="19" bodyfile="src/ml_ast_types.c" bodystart="733" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1af4972bd310f7c11ec7abd3f3a04bac82" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * a_mlc_if_config_expr_t</definition>
        <argsstring>(ml_type_t *Class, mlc_if_config_expr_t *Struct)</argsstring>
        <name>a_mlc_if_config_expr_t</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="structmlc__if__config__expr__t" kindref="compound">mlc_if_config_expr_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="745" column="19" bodyfile="src/ml_ast_types.c" bodystart="745" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a52ec79e114230e00fc0cdb2f2dac8b22" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * a_mlc_parent_expr_t</definition>
        <argsstring>(ml_type_t *Class, mlc_parent_expr_t *Struct)</argsstring>
        <name>a_mlc_parent_expr_t</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="756" column="19" bodyfile="src/ml_ast_types.c" bodystart="756" bodyend="765"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a480d7f164b2adce5c31ab63e2fc438fd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * a_mlc_if_expr_t</definition>
        <argsstring>(ml_type_t *Class, mlc_if_expr_t *Struct)</argsstring>
        <name>a_mlc_if_expr_t</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="structmlc__if__expr__t" kindref="compound">mlc_if_expr_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="767" column="19" bodyfile="src/ml_ast_types.c" bodystart="767" bodyend="776"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a43fb5c607e7429adb080c928c5bc3bca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * a_mlc_value_expr_t</definition>
        <argsstring>(ml_type_t *Class, mlc_value_expr_t *Struct)</argsstring>
        <name>a_mlc_value_expr_t</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="structmlc__value__expr__t" kindref="compound">mlc_value_expr_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="778" column="19" bodyfile="src/ml_ast_types.c" bodystart="778" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="ml__ast__types_8c_1a2ee514ce768d3a5765652fb99cd01308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * mlc_expr_describe</definition>
        <argsstring>(mlc_expr_t *Expr)</argsstring>
        <name>mlc_expr_describe</name>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_ast_types.c" line="788" column="12" bodyfile="src/ml_ast_types.c" bodystart="788" bodyend="846"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ml_object.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__module__t" kindref="compound">ml_module_t</ref><sp/>Ast[1]<sp/>=<sp/>{{MLModuleT,<sp/></highlight><highlight class="stringliteral">&quot;ast&quot;</highlight><highlight class="normal">,<sp/>{STRINGMAP_INIT}}};</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal">ML_CLASS(AstExprT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:source(Value:<sp/>ast::expr):<sp/>string`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:startline(Value:<sp/>ast::expr):<sp/>integer`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:endline(Value:<sp/>ast::expr):<sp/>integer`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">,<sp/>AstExprT);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;startline&quot;</highlight><highlight class="normal">,<sp/>AstExprT);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;endline&quot;</highlight><highlight class="normal">,<sp/>AstExprT);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">,<sp/>AstExprT);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">ML_CLASS(AstIfExprT,<sp/>(AstExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::if&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>:mini:`if`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:cases(Value:<sp/>ast::expr::if):<sp/>list[ast::ifcase]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:else(Value:<sp/>ast::expr::if):<sp/>list[ast::expr]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;cases&quot;</highlight><highlight class="normal">,<sp/>AstIfExprT);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;else&quot;</highlight><highlight class="normal">,<sp/>AstIfExprT);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">ML_CLASS(AstFunExprT,<sp/>(AstExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::fun&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::fun</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`fun`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:name(Value:<sp/>ast::expr::fun):<sp/>string`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:params(Value:<sp/>ast::expr::fun):<sp/>list[ast::param]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:body(Value:<sp/>ast::expr::fun):<sp/>list[ast::expr]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:returntype(Value:<sp/>ast::expr::fun):<sp/>list[ast::expr]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>AstFunExprT);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;params&quot;</highlight><highlight class="normal">,<sp/>AstFunExprT);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;body&quot;</highlight><highlight class="normal">,<sp/>AstFunExprT);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;returntype&quot;</highlight><highlight class="normal">,<sp/>AstFunExprT);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">ML_CLASS(AstForExprT,<sp/>(AstExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::for&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`for`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:key(Value:<sp/>ast::expr::for):<sp/>string`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:local(Value:<sp/>ast::expr::for):<sp/>list[ast::local]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:sequence(Value:<sp/>ast::expr::for):<sp/>list[ast::expr]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:body(Value:<sp/>ast::expr::for):<sp/>list[ast::expr]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:name(Value:<sp/>ast::expr::for):<sp/>string`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:unpack(Value:<sp/>ast::expr::for):<sp/>integer`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/>AstForExprT);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;local&quot;</highlight><highlight class="normal">,<sp/>AstForExprT);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;sequence&quot;</highlight><highlight class="normal">,<sp/>AstForExprT);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;body&quot;</highlight><highlight class="normal">,<sp/>AstForExprT);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>AstForExprT);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;unpack&quot;</highlight><highlight class="normal">,<sp/>AstForExprT);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">ML_CLASS(AstValueExprT,<sp/>(AstExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`value`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:value(Value:<sp/>ast::expr::value):<sp/>any`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>AstValueExprT);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">ML_CLASS(AstSubstExprT,<sp/>(AstExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::subst&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::subst</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`subst`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">ML_CLASS(AstIdentExprT,<sp/>(AstExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::ident&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::ident</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>:mini:`ident`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:ident(Value:<sp/>ast::expr::ident):<sp/>string`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;ident&quot;</highlight><highlight class="normal">,<sp/>AstIdentExprT);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">ML_CLASS(AstLocalExprT,<sp/>(AstExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::local&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::local</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`local`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:local(Value:<sp/>ast::expr::local):<sp/>list[ast::local]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:child(Value:<sp/>ast::expr::local):<sp/>list[ast::expr]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:count(Value:<sp/>ast::expr::local):<sp/>integer`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;local&quot;</highlight><highlight class="normal">,<sp/>AstLocalExprT);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;child&quot;</highlight><highlight class="normal">,<sp/>AstLocalExprT);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;count&quot;</highlight><highlight class="normal">,<sp/>AstLocalExprT);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">ML_CLASS(AstBlockExprT,<sp/>(AstExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::block&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`block`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:vars(Value:<sp/>ast::expr::block):<sp/>list[ast::local]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:lets(Value:<sp/>ast::expr::block):<sp/>list[ast::local]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:defs(Value:<sp/>ast::expr::block):<sp/>list[ast::local]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:child(Value:<sp/>ast::expr::block):<sp/>list[ast::expr]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:catchbody(Value:<sp/>ast::expr::block):<sp/>list[ast::expr]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:must(Value:<sp/>ast::expr::block):<sp/>list[ast::expr]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:catchident(Value:<sp/>ast::expr::block):<sp/>string`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:numvars(Value:<sp/>ast::expr::block):<sp/>integer`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:numlets(Value:<sp/>ast::expr::block):<sp/>integer`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:numdefs(Value:<sp/>ast::expr::block):<sp/>integer`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;vars&quot;</highlight><highlight class="normal">,<sp/>AstBlockExprT);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;lets&quot;</highlight><highlight class="normal">,<sp/>AstBlockExprT);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;defs&quot;</highlight><highlight class="normal">,<sp/>AstBlockExprT);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;child&quot;</highlight><highlight class="normal">,<sp/>AstBlockExprT);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;catchbody&quot;</highlight><highlight class="normal">,<sp/>AstBlockExprT);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;must&quot;</highlight><highlight class="normal">,<sp/>AstBlockExprT);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;catchident&quot;</highlight><highlight class="normal">,<sp/>AstBlockExprT);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;numvars&quot;</highlight><highlight class="normal">,<sp/>AstBlockExprT);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;numlets&quot;</highlight><highlight class="normal">,<sp/>AstBlockExprT);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;numdefs&quot;</highlight><highlight class="normal">,<sp/>AstBlockExprT);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">ML_CLASS(AstStringExprT,<sp/>(AstExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`string`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:parts(Value:<sp/>ast::expr::string):<sp/>list[ast::stringpart]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;parts&quot;</highlight><highlight class="normal">,<sp/>AstStringExprT);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">ML_CLASS(AstScopedExprT,<sp/>(AstExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::scoped&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::scoped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`scoped`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">ML_CLASS(AstParentExprT,<sp/>(AstExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::parent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`parent`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:child(Value:<sp/>ast::expr::parent):<sp/>list[ast::expr]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:name(Value:<sp/>ast::expr::parent):<sp/>string`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;child&quot;</highlight><highlight class="normal">,<sp/>AstParentExprT);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>AstParentExprT);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">ML_CLASS(AstDefaultExprT,<sp/>(AstExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::default&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`default`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:child(Value:<sp/>ast::expr::default):<sp/>list[ast::expr]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:index(Value:<sp/>ast::expr::default):<sp/>integer`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:flags(Value:<sp/>ast::expr::default):<sp/>integer`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;child&quot;</highlight><highlight class="normal">,<sp/>AstDefaultExprT);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;index&quot;</highlight><highlight class="normal">,<sp/>AstDefaultExprT);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;flags&quot;</highlight><highlight class="normal">,<sp/>AstDefaultExprT);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">ML_CLASS(AstIfConfigExprT,<sp/>(AstExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::ifconfig&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::ifconfig</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>:mini:`if`<sp/>:mini:`config`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:child(Value:<sp/>ast::expr::ifconfig):<sp/>list[ast::expr]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:config(Value:<sp/>ast::expr::ifconfig):<sp/>string`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;child&quot;</highlight><highlight class="normal">,<sp/>AstIfConfigExprT);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;config&quot;</highlight><highlight class="normal">,<sp/>AstIfConfigExprT);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">ML_CLASS(AstParentValueExprT,<sp/>(AstExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::parentvalue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::parentvalue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`parent`<sp/>:mini:`value`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:child(Value:<sp/>ast::expr::parentvalue):<sp/>list[ast::expr]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:value(Value:<sp/>ast::expr::parentvalue):<sp/>any`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;child&quot;</highlight><highlight class="normal">,<sp/>AstParentValueExprT);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>AstParentValueExprT);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">ML_CLASS(AstAndExprT,<sp/>(AstParentExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::and&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>:mini:`and`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal">ML_CLASS(AstAssignExprT,<sp/>(AstParentExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::assign&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::assign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>:mini:`assign`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">ML_CLASS(AstBlankExprT,<sp/>(AstExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::blank&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::blank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`blank`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">ML_CLASS(AstCallExprT,<sp/>(AstParentExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`call`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">ML_CLASS(AstConstCallExprT,<sp/>(AstParentValueExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::constcall&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::constcall</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`const`<sp/>:mini:`call`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal">ML_CLASS(AstDebugExprT,<sp/>(AstParentExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::debug&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`debug`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">ML_CLASS(AstDefExprT,<sp/>(AstLocalExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::def&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::def</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`def`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">ML_CLASS(AstDefInExprT,<sp/>(AstLocalExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::defin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::defin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`def`<sp/>:mini:`in`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal">ML_CLASS(AstDefUnpackExprT,<sp/>(AstLocalExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::defunpack&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::defunpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`def`<sp/>:mini:`unpack`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal">ML_CLASS(AstDefineExprT,<sp/>(AstIdentExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::define&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::define</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`define`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal">ML_CLASS(AstDelegateExprT,<sp/>(AstParentExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::delegate&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::delegate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`delegate`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal">ML_CLASS(AstEachExprT,<sp/>(AstParentExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::each&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>:mini:`each`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal">ML_CLASS(AstExitExprT,<sp/>(AstParentExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::exit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>:mini:`exit`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal">ML_CLASS(AstGuardExprT,<sp/>(AstParentExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::guard&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::guard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`guard`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">ML_CLASS(AstInlineExprT,<sp/>(AstParentExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::inline&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>:mini:`inline`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal">ML_CLASS(AstItExprT,<sp/>(AstExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::it&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>:mini:`it`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal">ML_CLASS(AstLetExprT,<sp/>(AstLocalExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::let&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::let</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`let`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal">ML_CLASS(AstLetInExprT,<sp/>(AstLocalExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::letin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::letin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`let`<sp/>:mini:`in`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal">ML_CLASS(AstLetUnpackExprT,<sp/>(AstLocalExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::letunpack&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::letunpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`let`<sp/>:mini:`unpack`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">ML_CLASS(AstListExprT,<sp/>(AstParentExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`list`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal">ML_CLASS(AstLoopExprT,<sp/>(AstParentExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::loop&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`loop`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">ML_CLASS(AstMapExprT,<sp/>(AstParentExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::map&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`map`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal">ML_CLASS(AstNextExprT,<sp/>(AstParentExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::next&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::next</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`next`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal">ML_CLASS(AstNilExprT,<sp/>(AstExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::nil&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`nil`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal">ML_CLASS(AstNotExprT,<sp/>(AstParentExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::not&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`not`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal">ML_CLASS(AstOldExprT,<sp/>(AstExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::old&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::old</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>:mini:`old`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal">ML_CLASS(AstOrExprT,<sp/>(AstParentExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::or&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>:mini:`or`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal">ML_CLASS(AstRefExprT,<sp/>(AstLocalExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::ref&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::ref</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`ref`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal">ML_CLASS(AstRefInExprT,<sp/>(AstLocalExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::refin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::refin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`ref`<sp/>:mini:`in`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal">ML_CLASS(AstRefUnpackExprT,<sp/>(AstLocalExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::refunpack&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::refunpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`ref`<sp/>:mini:`unpack`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal">ML_CLASS(AstRegisterExprT,<sp/>(AstExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::register&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::register</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`register`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">ML_CLASS(AstResolveExprT,<sp/>(AstParentValueExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::resolve&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::resolve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`resolve`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal">ML_CLASS(AstReturnExprT,<sp/>(AstParentExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::return&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`return`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal">ML_CLASS(AstSuspendExprT,<sp/>(AstParentExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::suspend&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::suspend</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`suspend`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal">ML_CLASS(AstSwitchExprT,<sp/>(AstParentExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::switch&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::switch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`switch`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal">ML_CLASS(AstTupleExprT,<sp/>(AstParentExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::tuple&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`tuple`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal">ML_CLASS(AstUnknownExprT,<sp/>(AstExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::unknown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::unknown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>:mini:`unknown`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">ML_CLASS(AstVarExprT,<sp/>(AstLocalExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::var&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::var</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`var`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal">ML_CLASS(AstVarInExprT,<sp/>(AstLocalExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::varin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::varin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`var`<sp/>:mini:`in`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal">ML_CLASS(AstVarTypeExprT,<sp/>(AstLocalExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::vartype&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::vartype</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`var`<sp/>:mini:`type`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal">ML_CLASS(AstVarUnpackExprT,<sp/>(AstLocalExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::varunpack&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::varunpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`var`<sp/>:mini:`unpack`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal">ML_CLASS(AstWithExprT,<sp/>(AstLocalExprT),<sp/></highlight><highlight class="stringliteral">&quot;ast::expr::with&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//@ast::expr::with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>:mini:`with`<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal">ML_CLASS(AstLocalT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;ast::local&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//@ast::local</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>local</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:ident(Value:<sp/>ast::local):<sp/>string`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:line(Value:<sp/>ast::local):<sp/>integer`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:index(Value:<sp/>ast::local):<sp/>integer`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;ident&quot;</highlight><highlight class="normal">,<sp/>AstLocalT);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;line&quot;</highlight><highlight class="normal">,<sp/>AstLocalT);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;index&quot;</highlight><highlight class="normal">,<sp/>AstLocalT);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal">ML_CLASS(AstParamT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;ast::param&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//@ast::param</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>param</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:ident(Value:<sp/>ast::param):<sp/>string`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:type(Value:<sp/>ast::param):<sp/>list[ast::expr]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:line(Value:<sp/>ast::param):<sp/>integer`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:kind(Value:<sp/>ast::param):<sp/>ast::paramkind`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;ident&quot;</highlight><highlight class="normal">,<sp/>AstParamT);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">,<sp/>AstParamT);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;line&quot;</highlight><highlight class="normal">,<sp/>AstParamT);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;kind&quot;</highlight><highlight class="normal">,<sp/>AstParamT);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal">ML_CLASS(AstStringPartT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;ast::stringpart&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="comment">//@ast::stringpart</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>string<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:child(Value:<sp/>ast::stringpart):<sp/>list[ast::expr]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:chars(Value:<sp/>ast::stringpart):<sp/>string`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:length(Value:<sp/>ast::stringpart):<sp/>integer`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:line(Value:<sp/>ast::stringpart):<sp/>integer`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;child&quot;</highlight><highlight class="normal">,<sp/>AstStringPartT);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;chars&quot;</highlight><highlight class="normal">,<sp/>AstStringPartT);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;length&quot;</highlight><highlight class="normal">,<sp/>AstStringPartT);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;line&quot;</highlight><highlight class="normal">,<sp/>AstStringPartT);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal">ML_CLASS(AstIfCaseT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;ast::ifcase&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">//@ast::ifcase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>if<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:condition(Value:<sp/>ast::ifcase):<sp/>list[ast::expr]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:body(Value:<sp/>ast::ifcase):<sp/>list[ast::expr]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:local(Value:<sp/>ast::ifcase):<sp/>list[ast::local]`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`:token(Value:<sp/>ast::ifcase):<sp/>integer`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;condition&quot;</highlight><highlight class="normal">,<sp/>AstIfCaseT);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;body&quot;</highlight><highlight class="normal">,<sp/>AstIfCaseT);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;local&quot;</highlight><highlight class="normal">,<sp/>AstIfCaseT);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal">ML_FIELD(</highlight><highlight class="stringliteral">&quot;token&quot;</highlight><highlight class="normal">,<sp/>AstIfCaseT);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_ast_types_init()<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Ast-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>AstExprT);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;if&quot;</highlight><highlight class="normal">,<sp/>AstIfExprT);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;fun&quot;</highlight><highlight class="normal">,<sp/>AstFunExprT);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;for&quot;</highlight><highlight class="normal">,<sp/>AstForExprT);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>AstValueExprT);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;subst&quot;</highlight><highlight class="normal">,<sp/>AstSubstExprT);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;ident&quot;</highlight><highlight class="normal">,<sp/>AstIdentExprT);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;local&quot;</highlight><highlight class="normal">,<sp/>AstLocalExprT);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;block&quot;</highlight><highlight class="normal">,<sp/>AstBlockExprT);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">,<sp/>AstStringExprT);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;scoped&quot;</highlight><highlight class="normal">,<sp/>AstScopedExprT);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;parent&quot;</highlight><highlight class="normal">,<sp/>AstParentExprT);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">,<sp/>AstDefaultExprT);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;ifconfig&quot;</highlight><highlight class="normal">,<sp/>AstIfConfigExprT);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;parentvalue&quot;</highlight><highlight class="normal">,<sp/>AstParentValueExprT);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;and&quot;</highlight><highlight class="normal">,<sp/>AstAndExprT);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;assign&quot;</highlight><highlight class="normal">,<sp/>AstAssignExprT);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;blank&quot;</highlight><highlight class="normal">,<sp/>AstBlankExprT);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;call&quot;</highlight><highlight class="normal">,<sp/>AstCallExprT);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;constcall&quot;</highlight><highlight class="normal">,<sp/>AstConstCallExprT);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;debug&quot;</highlight><highlight class="normal">,<sp/>AstDebugExprT);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;def&quot;</highlight><highlight class="normal">,<sp/>AstDefExprT);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;defin&quot;</highlight><highlight class="normal">,<sp/>AstDefInExprT);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;defunpack&quot;</highlight><highlight class="normal">,<sp/>AstDefUnpackExprT);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;define&quot;</highlight><highlight class="normal">,<sp/>AstDefineExprT);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;delegate&quot;</highlight><highlight class="normal">,<sp/>AstDelegateExprT);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;each&quot;</highlight><highlight class="normal">,<sp/>AstEachExprT);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;exit&quot;</highlight><highlight class="normal">,<sp/>AstExitExprT);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;guard&quot;</highlight><highlight class="normal">,<sp/>AstGuardExprT);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;inline&quot;</highlight><highlight class="normal">,<sp/>AstInlineExprT);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;it&quot;</highlight><highlight class="normal">,<sp/>AstItExprT);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;let&quot;</highlight><highlight class="normal">,<sp/>AstLetExprT);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;letin&quot;</highlight><highlight class="normal">,<sp/>AstLetInExprT);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;letunpack&quot;</highlight><highlight class="normal">,<sp/>AstLetUnpackExprT);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;list&quot;</highlight><highlight class="normal">,<sp/>AstListExprT);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;loop&quot;</highlight><highlight class="normal">,<sp/>AstLoopExprT);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;map&quot;</highlight><highlight class="normal">,<sp/>AstMapExprT);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;next&quot;</highlight><highlight class="normal">,<sp/>AstNextExprT);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;nil&quot;</highlight><highlight class="normal">,<sp/>AstNilExprT);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;not&quot;</highlight><highlight class="normal">,<sp/>AstNotExprT);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;old&quot;</highlight><highlight class="normal">,<sp/>AstOldExprT);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;or&quot;</highlight><highlight class="normal">,<sp/>AstOrExprT);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;ref&quot;</highlight><highlight class="normal">,<sp/>AstRefExprT);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;refin&quot;</highlight><highlight class="normal">,<sp/>AstRefInExprT);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;refunpack&quot;</highlight><highlight class="normal">,<sp/>AstRefUnpackExprT);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;register&quot;</highlight><highlight class="normal">,<sp/>AstRegisterExprT);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;resolve&quot;</highlight><highlight class="normal">,<sp/>AstResolveExprT);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;return&quot;</highlight><highlight class="normal">,<sp/>AstReturnExprT);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;suspend&quot;</highlight><highlight class="normal">,<sp/>AstSuspendExprT);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;switch&quot;</highlight><highlight class="normal">,<sp/>AstSwitchExprT);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;tuple&quot;</highlight><highlight class="normal">,<sp/>AstTupleExprT);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;unknown&quot;</highlight><highlight class="normal">,<sp/>AstUnknownExprT);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;var&quot;</highlight><highlight class="normal">,<sp/>AstVarExprT);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;varin&quot;</highlight><highlight class="normal">,<sp/>AstVarInExprT);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;vartype&quot;</highlight><highlight class="normal">,<sp/>AstVarTypeExprT);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;varunpack&quot;</highlight><highlight class="normal">,<sp/>AstVarUnpackExprT);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(AstExprT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;with&quot;</highlight><highlight class="normal">,<sp/>AstWithExprT);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Ast-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;local&quot;</highlight><highlight class="normal">,<sp/>AstLocalT);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Ast-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;param&quot;</highlight><highlight class="normal">,<sp/>AstParamT);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Ast-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;stringpart&quot;</highlight><highlight class="normal">,<sp/>AstStringPartT);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Ast-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;ifcase&quot;</highlight><highlight class="normal">,<sp/>AstIfCaseT);</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*a_mlc_local_t(<ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Struct)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Struct)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_object(AstLocalT,</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ident&quot;</highlight><highlight class="normal">,<sp/>Struct-&gt;Ident<sp/>?<sp/>ml_string(Struct-&gt;Ident,<sp/>-1)<sp/>:<sp/>MLNil,</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;line&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;Line),</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;index&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;Index),</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*l_mlc_local_t(<ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Struct)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Struct)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(List,<sp/>a_mlc_local_t(Struct));</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Struct<sp/>=<sp/>Struct-&gt;Next;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>List;</highlight></codeline>
<codeline lineno="560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ln_mlc_local_t(<ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Struct,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Count<sp/>?:<sp/>1;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(List,<sp/>a_mlc_local_t(Struct));</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Struct<sp/>=<sp/>Struct-&gt;Next;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>List;</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*a_mlc_expr_t(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Class,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Struct)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Struct)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_object(Class,</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">,<sp/>Struct-&gt;Source<sp/>?<sp/>ml_string(Struct-&gt;Source,<sp/>-1)<sp/>:<sp/>MLNil,</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;startline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;StartLine),</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;endline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;EndLine),</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*l_mlc_expr_t(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Struct)<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Struct)<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(List,<sp/>mlc_expr_describe(Struct));</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Struct<sp/>=<sp/>Struct-&gt;Next;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>List;</highlight></codeline>
<codeline lineno="587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*a_mlc_param_t(<ref refid="structmlc__param__t" kindref="compound">mlc_param_t</ref><sp/>*Struct)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Struct)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_object(AstParamT,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ident&quot;</highlight><highlight class="normal">,<sp/>Struct-&gt;Ident<sp/>?<sp/>ml_string(Struct-&gt;Ident,<sp/>-1)<sp/>:<sp/>MLNil,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">,<sp/>l_mlc_expr_t(Struct-&gt;Type),</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;line&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;Line),</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;kind&quot;</highlight><highlight class="normal">,<sp/>ml_enum_value(ParamKindT,<sp/>Struct-&gt;Kind),</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*l_mlc_param_t(<ref refid="structmlc__param__t" kindref="compound">mlc_param_t</ref><sp/>*Struct)<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Struct)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(List,<sp/>a_mlc_param_t(Struct));</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Struct<sp/>=<sp/>Struct-&gt;Next;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>List;</highlight></codeline>
<codeline lineno="606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*a_mlc_string_part_t(<ref refid="structmlc__string__part__t" kindref="compound">mlc_string_part_t</ref><sp/>*Struct)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Struct)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_object(AstStringPartT,</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>Struct-&gt;Length<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;chars&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;child&quot;</highlight><highlight class="normal">,<sp/>Struct-&gt;Length<sp/>?<sp/>ml_string(Struct-&gt;Chars,<sp/>-1)<sp/>:<sp/>l_mlc_expr_t(Struct-&gt;Child),</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*l_mlc_string_part_t(<ref refid="structmlc__string__part__t" kindref="compound">mlc_string_part_t</ref><sp/>*Struct)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Struct)<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(List,<sp/>a_mlc_string_part_t(Struct));</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Struct<sp/>=<sp/>Struct-&gt;Next;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>List;</highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*a_mlc_if_case_t(<ref refid="structmlc__if__case__t" kindref="compound">mlc_if_case_t</ref><sp/>*Struct)<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Struct)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_object(AstIfCaseT,</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;condition&quot;</highlight><highlight class="normal">,<sp/>l_mlc_expr_t(Struct-&gt;Condition),</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;body&quot;</highlight><highlight class="normal">,<sp/>l_mlc_expr_t(Struct-&gt;Body),</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;local&quot;</highlight><highlight class="normal">,<sp/>l_mlc_local_t(Struct-&gt;Local),</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;token&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;Token),</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*l_mlc_if_case_t(<ref refid="structmlc__if__case__t" kindref="compound">mlc_if_case_t</ref><sp/>*Struct)<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Struct)<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(List,<sp/>a_mlc_if_case_t(Struct));</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Struct<sp/>=<sp/>Struct-&gt;Next;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>List;</highlight></codeline>
<codeline lineno="641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*a_mlc_ident_expr_t(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Class,<sp/><ref refid="structmlc__ident__expr__t" kindref="compound">mlc_ident_expr_t</ref><sp/>*Struct)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Struct)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_object(Class,</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">,<sp/>ml_string(Struct-&gt;Source,<sp/>-1),</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;startline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;StartLine),</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;endline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;EndLine),</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ident&quot;</highlight><highlight class="normal">,<sp/>Struct-&gt;Ident<sp/>?<sp/>ml_string(Struct-&gt;Ident,<sp/>-1)<sp/>:<sp/>MLNil,</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="651"><highlight class="normal">}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*a_mlc_fun_expr_t(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Class,<sp/><ref refid="structmlc__fun__expr__t" kindref="compound">mlc_fun_expr_t</ref><sp/>*Struct)<sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Struct)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_object(Class,</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">,<sp/>ml_string(Struct-&gt;Source,<sp/>-1),</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;startline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;StartLine),</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;endline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;EndLine),</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>Struct-&gt;Name<sp/>?<sp/>ml_string(Struct-&gt;Name,<sp/>-1)<sp/>:<sp/>MLNil,</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;params&quot;</highlight><highlight class="normal">,<sp/>l_mlc_param_t(Struct-&gt;Params),</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;body&quot;</highlight><highlight class="normal">,<sp/>l_mlc_expr_t(Struct-&gt;Body),</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;returntype&quot;</highlight><highlight class="normal">,<sp/>l_mlc_expr_t(Struct-&gt;ReturnType),</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*a_mlc_default_expr_t(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Class,<sp/><ref refid="structmlc__default__expr__t" kindref="compound">mlc_default_expr_t</ref><sp/>*Struct)<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Struct)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_object(Class,</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">,<sp/>ml_string(Struct-&gt;Source,<sp/>-1),</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;startline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;StartLine),</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;endline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;EndLine),</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;child&quot;</highlight><highlight class="normal">,<sp/>l_mlc_expr_t(Struct-&gt;Child),</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;index&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;Index),</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;flags&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;Flags),</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*a_mlc_string_expr_t(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Class,<sp/><ref refid="structmlc__string__expr__t" kindref="compound">mlc_string_expr_t</ref><sp/>*Struct)<sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Struct)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_object(Class,</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">,<sp/>ml_string(Struct-&gt;Source,<sp/>-1),</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;startline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;StartLine),</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;endline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;EndLine),</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;parts&quot;</highlight><highlight class="normal">,<sp/>l_mlc_string_part_t(Struct-&gt;Parts),</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*a_mlc_parent_value_expr_t(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Class,<sp/><ref refid="structmlc__parent__value__expr__t" kindref="compound">mlc_parent_value_expr_t</ref><sp/>*Struct)<sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Struct)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_object(Class,</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">,<sp/>ml_string(Struct-&gt;Source,<sp/>-1),</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;startline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;StartLine),</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;endline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;EndLine),</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;child&quot;</highlight><highlight class="normal">,<sp/>l_mlc_expr_t(Struct-&gt;Child),</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>ml_ast_names(Struct-&gt;Value),</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*a_mlc_block_expr_t(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Class,<sp/><ref refid="structmlc__block__expr__t" kindref="compound">mlc_block_expr_t</ref><sp/>*Struct)<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Struct)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_object(Class,</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">,<sp/>ml_string(Struct-&gt;Source,<sp/>-1),</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;startline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;StartLine),</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;endline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;EndLine),</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;vars&quot;</highlight><highlight class="normal">,<sp/>l_mlc_local_t(Struct-&gt;Vars),</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;lets&quot;</highlight><highlight class="normal">,<sp/>l_mlc_local_t(Struct-&gt;Lets),</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;defs&quot;</highlight><highlight class="normal">,<sp/>l_mlc_local_t(Struct-&gt;Defs),</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;child&quot;</highlight><highlight class="normal">,<sp/>l_mlc_expr_t(Struct-&gt;Child),</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;catchbody&quot;</highlight><highlight class="normal">,<sp/>l_mlc_expr_t(Struct-&gt;CatchBody),</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;must&quot;</highlight><highlight class="normal">,<sp/>l_mlc_expr_t(Struct-&gt;Must),</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;catchident&quot;</highlight><highlight class="normal">,<sp/>Struct-&gt;CatchIdent<sp/>?<sp/>ml_string(Struct-&gt;CatchIdent,<sp/>-1)<sp/>:<sp/>MLNil,</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;numvars&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;NumVars),</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;numlets&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;NumLets),</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;numdefs&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;NumDefs),</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*a_mlc_for_expr_t(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Class,<sp/><ref refid="structmlc__for__expr__t" kindref="compound">mlc_for_expr_t</ref><sp/>*Struct)<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Struct)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_object(Class,</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">,<sp/>ml_string(Struct-&gt;Source,<sp/>-1),</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;startline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;StartLine),</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;endline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;EndLine),</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/>Struct-&gt;Key<sp/>?<sp/>ml_string(Struct-&gt;Key,<sp/>-1)<sp/>:<sp/>MLNil,</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;local&quot;</highlight><highlight class="normal">,<sp/>l_mlc_local_t(Struct-&gt;Local),</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sequence&quot;</highlight><highlight class="normal">,<sp/>l_mlc_expr_t(Struct-&gt;Sequence),</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;body&quot;</highlight><highlight class="normal">,<sp/>l_mlc_expr_t(Struct-&gt;Body),</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>Struct-&gt;Name<sp/>?<sp/>ml_string(Struct-&gt;Name,<sp/>-1)<sp/>:<sp/>MLNil,</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;unpack&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;Unpack),</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*a_mlc_local_expr_t(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Class,<sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Struct)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Struct)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_object(Class,</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">,<sp/>ml_string(Struct-&gt;Source,<sp/>-1),</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;startline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;StartLine),</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;endline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;EndLine),</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;local&quot;</highlight><highlight class="normal">,<sp/>ln_mlc_local_t(Struct-&gt;Local,<sp/>Struct-&gt;Count),</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;child&quot;</highlight><highlight class="normal">,<sp/>l_mlc_expr_t(Struct-&gt;Child),</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;count&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;Count),</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="743"><highlight class="normal">}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*a_mlc_if_config_expr_t(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Class,<sp/><ref refid="structmlc__if__config__expr__t" kindref="compound">mlc_if_config_expr_t</ref><sp/>*Struct)<sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Struct)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_object(Class,</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">,<sp/>ml_string(Struct-&gt;Source,<sp/>-1),</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;startline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;StartLine),</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;endline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;EndLine),</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;child&quot;</highlight><highlight class="normal">,<sp/>l_mlc_expr_t(Struct-&gt;Child),</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;config&quot;</highlight><highlight class="normal">,<sp/>Struct-&gt;Config<sp/>?<sp/>ml_string(Struct-&gt;Config,<sp/>-1)<sp/>:<sp/>MLNil,</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*a_mlc_parent_expr_t(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Class,<sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Struct)<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Struct)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_object(Class,</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">,<sp/>ml_string(Struct-&gt;Source,<sp/>-1),</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;startline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;StartLine),</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;endline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;EndLine),</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;child&quot;</highlight><highlight class="normal">,<sp/>l_mlc_expr_t(Struct-&gt;Child),</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>Struct-&gt;Name<sp/>?<sp/>ml_string(Struct-&gt;Name,<sp/>-1)<sp/>:<sp/>MLNil,</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*a_mlc_if_expr_t(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Class,<sp/><ref refid="structmlc__if__expr__t" kindref="compound">mlc_if_expr_t</ref><sp/>*Struct)<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Struct)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_object(Class,</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">,<sp/>ml_string(Struct-&gt;Source,<sp/>-1),</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;startline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;StartLine),</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;endline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;EndLine),</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;cases&quot;</highlight><highlight class="normal">,<sp/>l_mlc_if_case_t(Struct-&gt;Cases),</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;else&quot;</highlight><highlight class="normal">,<sp/>l_mlc_expr_t(Struct-&gt;Else),</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*a_mlc_value_expr_t(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Class,<sp/><ref refid="structmlc__value__expr__t" kindref="compound">mlc_value_expr_t</ref><sp/>*Struct)<sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Struct)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_object(Class,</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">,<sp/>ml_string(Struct-&gt;Source,<sp/>-1),</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;startline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;StartLine),</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;endline&quot;</highlight><highlight class="normal">,<sp/>ml_integer(Struct-&gt;EndLine),</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>ml_ast_names(Struct-&gt;Value),</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*mlc_expr_describe(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr)<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Expr)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(mlc_expr_type(Expr))<sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_AND:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_parent_expr_t(AstAndExprT,<sp/>(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_ASSIGN:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_parent_expr_t(AstAssignExprT,<sp/>(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_BLANK:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_expr_t(AstBlankExprT,<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_BLOCK:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_block_expr_t(AstBlockExprT,<sp/>(<ref refid="structmlc__block__expr__t" kindref="compound">mlc_block_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_CALL:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_parent_expr_t(AstCallExprT,<sp/>(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_CONST_CALL:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_parent_value_expr_t(AstConstCallExprT,<sp/>(<ref refid="structmlc__parent__value__expr__t" kindref="compound">mlc_parent_value_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_DEBUG:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_parent_expr_t(AstDebugExprT,<sp/>(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_DEF:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_local_expr_t(AstDefExprT,<sp/>(<ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_DEF_IN:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_local_expr_t(AstDefInExprT,<sp/>(<ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_DEF_UNPACK:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_local_expr_t(AstDefUnpackExprT,<sp/>(<ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_DEFAULT:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_default_expr_t(AstDefaultExprT,<sp/>(<ref refid="structmlc__default__expr__t" kindref="compound">mlc_default_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_DEFINE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_ident_expr_t(AstDefineExprT,<sp/>(<ref refid="structmlc__ident__expr__t" kindref="compound">mlc_ident_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_DELEGATE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_parent_expr_t(AstDelegateExprT,<sp/>(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_EACH:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_parent_expr_t(AstEachExprT,<sp/>(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_EXIT:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_parent_expr_t(AstExitExprT,<sp/>(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_FOR:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_for_expr_t(AstForExprT,<sp/>(<ref refid="structmlc__for__expr__t" kindref="compound">mlc_for_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_FUN:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_fun_expr_t(AstFunExprT,<sp/>(<ref refid="structmlc__fun__expr__t" kindref="compound">mlc_fun_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_GUARD:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_parent_expr_t(AstGuardExprT,<sp/>(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_IDENT:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_ident_expr_t(AstIdentExprT,<sp/>(<ref refid="structmlc__ident__expr__t" kindref="compound">mlc_ident_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_IF_CONFIG:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_if_config_expr_t(AstIfConfigExprT,<sp/>(<ref refid="structmlc__if__config__expr__t" kindref="compound">mlc_if_config_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_IF:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_if_expr_t(AstIfExprT,<sp/>(<ref refid="structmlc__if__expr__t" kindref="compound">mlc_if_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_INLINE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_parent_expr_t(AstInlineExprT,<sp/>(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_IT:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_expr_t(AstItExprT,<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_LET:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_local_expr_t(AstLetExprT,<sp/>(<ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_LET_IN:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_local_expr_t(AstLetInExprT,<sp/>(<ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_LET_UNPACK:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_local_expr_t(AstLetUnpackExprT,<sp/>(<ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_LIST:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_parent_expr_t(AstListExprT,<sp/>(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_LOOP:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_parent_expr_t(AstLoopExprT,<sp/>(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_MAP:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_parent_expr_t(AstMapExprT,<sp/>(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_NEXT:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_parent_expr_t(AstNextExprT,<sp/>(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_NIL:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_expr_t(AstNilExprT,<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_NOT:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_parent_expr_t(AstNotExprT,<sp/>(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_OLD:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_expr_t(AstOldExprT,<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_OR:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_parent_expr_t(AstOrExprT,<sp/>(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_REF:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_local_expr_t(AstRefExprT,<sp/>(<ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_REF_IN:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_local_expr_t(AstRefInExprT,<sp/>(<ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_REF_UNPACK:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_local_expr_t(AstRefUnpackExprT,<sp/>(<ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_REGISTER:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_expr_t(AstRegisterExprT,<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_RESOLVE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_parent_value_expr_t(AstResolveExprT,<sp/>(<ref refid="structmlc__parent__value__expr__t" kindref="compound">mlc_parent_value_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_RETURN:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_parent_expr_t(AstReturnExprT,<sp/>(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_SCOPED:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>expression<sp/>type:<sp/>scoped&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_STRING:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_string_expr_t(AstStringExprT,<sp/>(<ref refid="structmlc__string__expr__t" kindref="compound">mlc_string_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_SUBST:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>expression<sp/>type:<sp/>subst&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_SUSPEND:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_parent_expr_t(AstSuspendExprT,<sp/>(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_SWITCH:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_parent_expr_t(AstSwitchExprT,<sp/>(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_TUPLE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_parent_expr_t(AstTupleExprT,<sp/>(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_UNKNOWN:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_expr_t(AstUnknownExprT,<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_VALUE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_value_expr_t(AstValueExprT,<sp/>(<ref refid="structmlc__value__expr__t" kindref="compound">mlc_value_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_VAR:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_local_expr_t(AstVarExprT,<sp/>(<ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_VAR_IN:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_local_expr_t(AstVarInExprT,<sp/>(<ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_VAR_TYPE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_local_expr_t(AstVarTypeExprT,<sp/>(<ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_VAR_UNPACK:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_local_expr_t(AstVarUnpackExprT,<sp/>(<ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_EXPR_WITH:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a_mlc_local_expr_t(AstWithExprT,<sp/>(<ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>__builtin_unreachable();</highlight></codeline>
<codeline lineno="846"><highlight class="normal">}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/ml_ast_types.c"/>
  </compounddef>
</doxygen>
