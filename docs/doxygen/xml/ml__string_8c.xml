<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__string_8c" kind="file" language="C++">
    <compoundname>ml_string.c</compoundname>
    <includes refid="ml__string_8h" local="yes">ml_string.h</includes>
    <includes refid="minilang_8h" local="yes">minilang.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="no">inttypes.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">float.h</includes>
    <includes local="no">stdatomic.h</includes>
    <includes local="no">gc/gc_typed.h</includes>
    <includes local="no">locale.h</includes>
    <includes refid="ml__sequence_8h" local="yes">ml_sequence.h</includes>
    <includes local="no">regex.h</includes>
    <includes local="yes">ml_string_init.c</includes>
    <incdepgraph>
      <node id="14">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>ml_sequence.h</label>
        <link refid="ml__sequence_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_string.c</label>
        <link refid="ml__string_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ml_string.h</label>
        <link refid="ml__string_8h_source"/>
      </node>
      <node id="9">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="20">
        <label>ctype.h</label>
      </node>
      <node id="23">
        <label>float.h</label>
      </node>
      <node id="19">
        <label>gc/gc.h</label>
      </node>
      <node id="25">
        <label>gc/gc_typed.h</label>
      </node>
      <node id="21">
        <label>inttypes.h</label>
      </node>
      <node id="17">
        <label>limits.h</label>
      </node>
      <node id="26">
        <label>locale.h</label>
      </node>
      <node id="22">
        <label>math.h</label>
      </node>
      <node id="16">
        <label>ml_config.h</label>
      </node>
      <node id="29">
        <label>ml_string_init.c</label>
      </node>
      <node id="28">
        <label>regex.h</label>
      </node>
      <node id="7">
        <label>setjmp.h</label>
      </node>
      <node id="12">
        <label>stdarg.h</label>
      </node>
      <node id="24">
        <label>stdatomic.h</label>
      </node>
      <node id="15">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>stdio.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="11">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structml__string__state__t" prot="public">ml_string_state_t</innerclass>
    <innerclass refid="structml__string__iterator__t" prot="public">ml_string_iterator_t</innerclass>
    <innerclass refid="structml__regex__t" prot="public">ml_regex_t</innerclass>
    <innerclass refid="structml__str__replacement__state__t" prot="public">ml_str_replacement_state_t</innerclass>
    <innerclass refid="structml__fn__replace__state__t" prot="public">ml_fn_replace_state_t</innerclass>
    <innerclass refid="structml__string__switch__t" prot="public">ml_string_switch_t</innerclass>
    <innerclass refid="structml__stringbuffer__append__state__t" prot="public">ml_stringbuffer_append_state_t</innerclass>
    <innerclass refid="structml__write__state__t" prot="public">ml_write_state_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__string_8c_1aebec330325aff5cbc7d9c9248e2cae4a" prot="public" static="no">
        <name>ML_CATEGORY</name>
        <initializer>&quot;string&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="32" column="10" bodyfile="src/ml_string.c" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__string_8c_1af30c3e850a14a58cb30222b3886b7f97" prot="public" static="no">
        <name>ml_comp_method_address_address</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>ML_METHOD(#NAME, MLAddressT, MLAddressT) { \
/*!address
//&gt;address|nil
// Returns :mini:`Arg/2` if the bytes at :mini:`Arg/1` NAME the bytes at :mini:`Arg/2` and :mini:`nil` otherwise.
//$= &quot;Hello&quot; NAME &quot;World&quot;
//$= &quot;World&quot; NAME &quot;Hello&quot;
//$= &quot;Hello&quot; NAME &quot;Hello&quot;
//$= &quot;abcd&quot; NAME &quot;abc&quot;
//$= &quot;abc&quot; NAME &quot;abcd&quot;
*/\
	const char *AddressA = ml_address_value(Args[0]); \
	const char *AddressB = ml_address_value(Args[1]); \
	int LengthA = ml_address_length(Args[0]); \
	int LengthB = ml_address_length(Args[1]); \
	int Compare; \
	if (LengthA &lt; LengthB) { \
		Compare = memcmp(AddressA, AddressB, LengthA) ?: -1; \
	} else if (LengthA &gt; LengthB) { \
		Compare = memcmp(AddressA, AddressB, LengthB) ?: 1; \
	} else { \
		Compare = memcmp(AddressA, AddressB, LengthA); \
	} \
	return Compare SYMBOL 0 ? Args[1] : MLNil; \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="223" column="9" bodyfile="src/ml_string.c" bodystart="215" bodyend="231"/>
      </memberdef>
      <memberdef kind="define" id="ml__string_8c_1a6df1d22fb5f09eccc23b9f399670cfd7" prot="public" static="no">
        <name>STRINGIFY</name>
        <param><defname>x</defname></param>
        <initializer>#x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="788" column="9" bodyfile="src/ml_string.c" bodystart="780" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__string_8c_1a9063e80f8777300c93afde6e6f4c9cea" prot="public" static="no">
        <name>TOSTRING</name>
        <param><defname>x</defname></param>
        <initializer>STRINGIFY(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="789" column="9" bodyfile="src/ml_string.c" bodystart="781" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__string_8c_1a65789d69852ab46cc58bb2dd4259b451" prot="public" static="no">
        <name>ml_comp_method_string_string</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>ML_METHOD(#NAME, MLStringT, MLStringT) { \
/*&gt;string|nil
// Returns :mini:`Arg/2` if :mini:`Arg/1 NAME Arg/2` and :mini:`nil` otherwise.
//$= &quot;Hello&quot; NAME &quot;World&quot;
//$= &quot;World&quot; NAME &quot;Hello&quot;
//$= &quot;Hello&quot; NAME &quot;Hello&quot;
//$= &quot;abcd&quot; NAME &quot;abc&quot;
//$= &quot;abc&quot; NAME &quot;abcd&quot;
*/\
	const char *StringA = ml_string_value(Args[0]); \
	const char *StringB = ml_string_value(Args[1]); \
	int LengthA = ml_string_length(Args[0]); \
	int LengthB = ml_string_length(Args[1]); \
	int Compare; \
	if (LengthA &lt; LengthB) { \
		Compare = memcmp(StringA, StringB, LengthA) ?: -1; \
	} else if (LengthA &gt; LengthB) { \
		Compare = memcmp(StringA, StringB, LengthB) ?: 1; \
	} else { \
		Compare = memcmp(StringA, StringB, LengthA); \
	} \
	return Compare SYMBOL 0 ? Args[1] : MLNil; \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1756" column="9" bodyfile="src/ml_string.c" bodystart="1741" bodyend="1757"/>
      </memberdef>
      <memberdef kind="define" id="ml__string_8c_1a97224473593ed7213db8620dc2df2539" prot="public" static="no">
        <name>SWAP</name>
        <param><defname>A</defname></param>
        <param><defname>B</defname></param>
        <initializer>	{ \
	typeof(A) Temp = A; \
	A = B; \
	B = Temp; \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1839" column="9"/>
      </memberdef>
      <memberdef kind="define" id="ml__string_8c_1a33eac186897940e5fde86d5dee24e264" prot="public" static="no">
        <name>ml_comp_method_regex_regex</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>ML_METHOD(#NAME, MLRegexT, MLRegexT) { \
/*&gt;regex|nil
// Returns :mini:`Arg/2` if :mini:`Arg/1 NAME Arg/2` and :mini:`nil` otherwise.
//$= r&quot;[0-9]+&quot; NAME r&quot;[A-Za-z0-9_]+&quot;
//$= r&quot;[A-Za-z0-9_]+&quot; NAME r&quot;[0-9]+&quot;
//$= r&quot;[0-9]+&quot; NAME r&quot;[0-9]+&quot;
*/\
	const char *PatternA = ml_regex_pattern(Args[0]); \
	const char *PatternB = ml_regex_pattern(Args[1]); \
	int Compare = strcmp(PatternA, PatternB); \
	return Compare SYMBOL 0 ? Args[1] : MLNil; \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3666" column="9" bodyfile="src/ml_string.c" bodystart="3646" bodyend="3653"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ml__string_8c_1ad6e79cad1eb452566ed8b68870113d48" prot="public" static="no">
        <type>struct ml_regex_t</type>
        <definition>typedef struct ml_regex_t ml_regex_t</definition>
        <argsstring></argsstring>
        <name>ml_regex_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1156" column="25" bodyfile="src/ml_string.c" bodystart="1156" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="ml__string_8c_1a88950e1c1a38a4e9e24e3459d63971c5" prot="public" static="yes" mutable="no">
        <type><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref></type>
        <definition>ml_integer_t One[1]</definition>
        <argsstring>[1]</argsstring>
        <name>One</name>
        <initializer>= {{MLIntegerT, 1}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="178" column="21" bodyfile="src/ml_string.c" bodystart="178" bodyend="178"/>
      </memberdef>
      <memberdef kind="variable" id="ml__string_8c_1ad94b790e5962feb5a654b959502e7634" prot="public" static="yes" mutable="no">
        <type><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref></type>
        <definition>ml_integer_t NegOne[1]</definition>
        <argsstring>[1]</argsstring>
        <name>NegOne</name>
        <initializer>= {{MLIntegerT, -1}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="179" column="21" bodyfile="src/ml_string.c" bodystart="179" bodyend="179"/>
      </memberdef>
      <memberdef kind="variable" id="ml__string_8c_1a2a523802d8ecdcaff761efe547c417d0" prot="public" static="yes" mutable="no">
        <type><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref></type>
        <definition>ml_integer_t Zero[1]</definition>
        <argsstring>[1]</argsstring>
        <name>Zero</name>
        <initializer>= {{MLIntegerT, 0}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="180" column="21" bodyfile="src/ml_string.c" bodystart="180" bodyend="180"/>
      </memberdef>
      <memberdef kind="variable" id="ml__string_8c_1a6db227007ff810adcfc7c571b710f19e" prot="public" static="yes" mutable="no">
        <type>regex_t</type>
        <definition>regex_t IntFormat[1]</definition>
        <argsstring>[1]</argsstring>
        <name>IntFormat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="740" column="16" bodyfile="src/ml_string.c" bodystart="740" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ml__string_8c_1a215c79317413cd8c152d1a0886e3610c" prot="public" static="yes" mutable="no">
        <type>regex_t</type>
        <definition>regex_t LongFormat[1]</definition>
        <argsstring>[1]</argsstring>
        <name>LongFormat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="741" column="16" bodyfile="src/ml_string.c" bodystart="741" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ml__string_8c_1a4cc5b54a4e6855025aec564409490f8d" prot="public" static="yes" mutable="no">
        <type>regex_t</type>
        <definition>regex_t RealFormat[1]</definition>
        <argsstring>[1]</argsstring>
        <name>RealFormat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="742" column="16" bodyfile="src/ml_string.c" bodystart="742" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ml__string_8c_1a7741db54030777c886ca9358f81e4f73" prot="public" static="yes" mutable="no">
        <type>regex_t</type>
        <definition>regex_t StringFormat[1]</definition>
        <argsstring>[1]</argsstring>
        <name>StringFormat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1183" column="16" bodyfile="src/ml_string.c" bodystart="1183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ml__string_8c_1aa27f8682d0a47928785e805a7de4ba54" prot="public" static="yes" mutable="no">
        <type>GC_descr</type>
        <definition>GC_descr StringBufferDesc</definition>
        <argsstring></argsstring>
        <name>StringBufferDesc</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3899" column="17" bodyfile="src/ml_string.c" bodystart="3899" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ml__string_8c_1a2449d000af510f91c8febb816ee85387" prot="public" static="yes" mutable="no">
        <type><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref> *</type>
        <definition>ml_stringbuffer_node_t* StringBufferNodeCache</definition>
        <argsstring></argsstring>
        <name>StringBufferNodeCache</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3904" column="31" bodyfile="src/ml_string.c" bodystart="3904" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__string_8c_1a96b43635f2c027491ff62bf0412f91ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLAddressT,(), &quot;address&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLAddressT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;address&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="44" column="1" declfile="src/ml_string.c" declline="44" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a9b0e7744aef0c2822529be036ddfa17c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLAddressT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLAddressT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
<para>address </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>address</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="48" column="1" bodyfile="src/ml_string.c" bodystart="48" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a3b1ed4a6e4be810e0343fe93532159b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_address</definition>
        <argsstring>(const char *Value, int Length)</argsstring>
        <name>ml_address</name>
        <param>
          <type>const char *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="61" column="12" bodyfile="src/ml_string.c" bodystart="61" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ad1a1c0fffcee4aaa848c217233768c6e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ML_TYPED_FN</definition>
        <argsstring>(ml_value_is_constant, MLAddressT, ml_value_t *Value)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_value_is_constant</type>
        </param>
        <param>
          <type>MLAddressT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="69" column="12" bodyfile="src/ml_string.c" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a35c7b1f8c80f0a6a9bc8251ff380ec4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;size&quot;, MLAddressT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;size&quot;</type>
        </param>
        <param>
          <type>MLAddressT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>address</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="73" column="1" bodyfile="src/ml_string.c" bodystart="73" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a033b5495361697f878813c1ddee47aec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;length&quot;, MLAddressT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;length&quot;</type>
        </param>
        <param>
          <type>MLAddressT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>address</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="83" column="1" bodyfile="src/ml_string.c" bodystart="83" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a0471e8de340a41e9ac354a43e6d4618a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;@&quot;, MLAddressT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;@&quot;</type>
        </param>
        <param>
          <type>MLAddressT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>address</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="93" column="1" bodyfile="src/ml_string.c" bodystart="93" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1acc20bf12cc2f7caccf29a1c305b88ef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;@&quot;, MLAddressT, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;@&quot;</type>
        </param>
        <param>
          <type>MLAddressT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>address</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="112" column="1" bodyfile="src/ml_string.c" bodystart="112" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a52c09014ca64ca33045b18d6db8ab26b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;+&quot;, MLAddressT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;+&quot;</type>
        </param>
        <param>
          <type>MLAddressT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>address</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="134" column="1" bodyfile="src/ml_string.c" bodystart="134" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1adcfe554a7d80e8a54d19b6d20969a6d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&quot;, MLAddressT, MLAddressT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&quot;</type>
        </param>
        <param>
          <type>MLAddressT</type>
        </param>
        <param>
          <type>MLAddressT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>address</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="153" column="1" bodyfile="src/ml_string.c" bodystart="153" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a9c885a102b78255205c5ed264f5eacd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;&gt;&quot;, MLAddressT, MLAddressT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&lt;&gt;&quot;</type>
        </param>
        <param>
          <type>MLAddressT</type>
        </param>
        <param>
          <type>MLAddressT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>address</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="184" column="1" bodyfile="src/ml_string.c" bodystart="184" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a086bc3bf4a8f5bcc2fb67e46b91cca4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml_comp_method_address_address</definition>
        <argsstring>(=,==) ml_comp_method_address_address(!</argsstring>
        <name>ml_comp_method_address_address</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="233" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ad7f5f31ab68ced7f0c5f750918452b3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_buffer</definition>
        <argsstring>(char *Value, int Length)</argsstring>
        <name>ml_buffer</name>
        <param>
          <type>char *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="416" column="12" bodyfile="src/ml_string.c" bodystart="416" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a8d7eef760b3b33da9bd813037f9ece6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLBufferT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLBufferT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>buffer</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="424" column="1" bodyfile="src/ml_string.c" bodystart="424" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a64df357f223bff25c753d79bfe44f073" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLBufferT, MLAddressT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLBufferT</type>
        </param>
        <param>
          <type>MLAddressT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>buffer</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="440" column="1" bodyfile="src/ml_string.c" bodystart="440" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a4ddc0e5ba55bf3bb6221e33ac329674f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ML_TYPED_FN</definition>
        <argsstring>(ml_value_is_constant, MLBufferT, ml_value_t *Value)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_value_is_constant</type>
        </param>
        <param>
          <type>MLBufferT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="456" column="12" bodyfile="src/ml_string.c" bodystart="456" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ab3650c1b3150fb0cb50d551a65c13ce7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;copy&quot;, MLVisitorT, MLBufferT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;copy&quot;</type>
        </param>
        <param>
          <type>MLVisitorT</type>
        </param>
        <param>
          <type>MLBufferT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="460" column="1" bodyfile="src/ml_string.c" bodystart="460" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1abc3a2329359e48a6cda9ea4f2952e904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;const&quot;, MLVisitorT, MLBufferT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;const&quot;</type>
        </param>
        <param>
          <type>MLVisitorT</type>
        </param>
        <param>
          <type>MLBufferT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="467" column="1" bodyfile="src/ml_string.c" bodystart="467" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a9ea10e1e1fbdcc78cfd5f5c07764323a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;put8&quot;, MLBufferT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;put8&quot;</type>
        </param>
        <param>
          <type>MLBufferT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>buffer</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="474" column="1" bodyfile="src/ml_string.c" bodystart="474" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1af51c918ddc461ec1559ae3e9c93ae85c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;put16&quot;, MLBufferT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;put16&quot;</type>
        </param>
        <param>
          <type>MLBufferT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>buffer</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="487" column="1" bodyfile="src/ml_string.c" bodystart="487" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1aea50c74a57908edb5e1ff36900c4289d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;put32&quot;, MLBufferT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;put32&quot;</type>
        </param>
        <param>
          <type>MLBufferT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>buffer</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="500" column="1" bodyfile="src/ml_string.c" bodystart="500" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1adcc8cc1c8530ecc1ce21dcce802674a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;put64&quot;, MLBufferT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;put64&quot;</type>
        </param>
        <param>
          <type>MLBufferT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>buffer</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="513" column="1" bodyfile="src/ml_string.c" bodystart="513" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1acf83951ad13c3ddf4990e3c43147786f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;putf32&quot;, MLBufferT, MLRealT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;putf32&quot;</type>
        </param>
        <param>
          <type>MLBufferT</type>
        </param>
        <param>
          <type>MLRealT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>buffer</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="526" column="1" bodyfile="src/ml_string.c" bodystart="526" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a4aeb53e119f4e79fdf34d22f6185185c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;putf64&quot;, MLBufferT, MLRealT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;putf64&quot;</type>
        </param>
        <param>
          <type>MLBufferT</type>
        </param>
        <param>
          <type>MLRealT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>buffer</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="539" column="1" bodyfile="src/ml_string.c" bodystart="539" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a6843e2458108a5ea77c9bbb8a411a51c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;put&quot;, MLBufferT, MLAddressT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;put&quot;</type>
        </param>
        <param>
          <type>MLBufferT</type>
        </param>
        <param>
          <type>MLAddressT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>buffer</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="552" column="1" bodyfile="src/ml_string.c" bodystart="552" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ac5baad9a2a6503349d9917d53d01dd61" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>static long ml_string_hash</definition>
        <argsstring>(ml_string_t *String, ml_hash_chain_t *Chain)</argsstring>
        <name>ml_string_hash</name>
        <param>
          <type><ref refid="structml__string__t" kindref="compound">ml_string_t</ref> *</type>
          <declname>String</declname>
        </param>
        <param>
          <type><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref> *</type>
          <declname>Chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="566" column="13" bodyfile="src/ml_string.c" bodystart="566" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a826d7f943cfde23b8dd8f3dc58eed103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(AppendMethod, &quot;append&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>AppendMethod</type>
        </param>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="577" column="1" declfile="src/ml_string.c" declline="577" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a8e658f5a67530a5c9ad992cc728bf6f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_string_state_run</definition>
        <argsstring>(ml_string_state_t *State, ml_value_t *Result)</argsstring>
        <name>ml_string_state_run</name>
        <param>
          <type><ref refid="structml__string__state__t" kindref="compound">ml_string_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="586" column="13" bodyfile="src/ml_string.c" bodystart="586" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a8d64fc293cb34462024046e029b0f809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(MLString)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>MLString</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="593" column="1" bodyfile="src/ml_string.c" bodystart="593" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1afd45c07179ccf20b9a5d4358cc2f9d86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLStringT,(MLAddressT, MLSequenceT), &quot;string&quot;,.hash=(void *) ml_string_hash,.Constructor=(ml_value_t *) MLString,.NoInherit=1)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>(MLAddressT, MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;string&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>hash</declname>
          <defval>(void *) ml_string_hash</defval>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLString</defval>
        </param>
        <param>
          <type>.</type>
          <declname>NoInherit</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="616" column="1" declfile="src/ml_string.c" declline="616" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1abe52aa7c2f42a4b715a4b7d17c7e7713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLAddressT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLAddressT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>address</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="623" column="1" bodyfile="src/ml_string.c" bodystart="623" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a786e2f2bc4133f0ab328b47f53a04a5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GC_vasprintf</definition>
        <argsstring>(char **Ptr, const char *Format, va_list Args)</argsstring>
        <name>GC_vasprintf</name>
        <param>
          <type>char **</type>
          <declname>Ptr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="635" column="5" bodyfile="src/ml_string.c" bodystart="635" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a4ac292ebe9a8090428169bf43fb4509d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GC_asprintf</definition>
        <argsstring>(char **Ptr, const char *Format,...)</argsstring>
        <name>GC_asprintf</name>
        <param>
          <type>char **</type>
          <declname>Ptr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="644" column="5" bodyfile="src/ml_string.c" bodystart="644" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a28723f3e2811c3e525492d5b90f4fa2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_string</definition>
        <argsstring>(const char *Value, int Length)</argsstring>
        <name>ml_string</name>
        <param>
          <type>const char *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="652" column="12" bodyfile="src/ml_string.c" bodystart="652" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a67aa4c312865e7127a0aef81494ecbde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_string_copy</definition>
        <argsstring>(const char *Value, int Length)</argsstring>
        <name>ml_string_copy</name>
        <param>
          <type>const char *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="671" column="12" bodyfile="src/ml_string.c" bodystart="671" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a16e4aa052d93071cab25048ab0cd906f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_string_format</definition>
        <argsstring>(const char *Format,...)</argsstring>
        <name>ml_string_format</name>
        <param>
          <type>const char *</type>
          <declname>Format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="683" column="12" bodyfile="src/ml_string.c" bodystart="683" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a9b1699b8f22cae4212b245a79fa4e4d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLBooleanT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLBooleanT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>boolean</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="692" column="1" bodyfile="src/ml_string.c" bodystart="692" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a2456b804ddec36b60fbb135154a99e39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>number</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="707" column="1" bodyfile="src/ml_string.c" bodystart="707" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a698d900c02271b57fc7f234a446171da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>number</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="717" column="1" bodyfile="src/ml_string.c" bodystart="717" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1aa843124a76573b8e6cb3a5bb4497a510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLIntegerT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>number</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="744" column="1" bodyfile="src/ml_string.c" bodystart="744" bodyend="763"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a642eae9ebd2a87840809b39d519ac046" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLIntegerRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="765" column="1" bodyfile="src/ml_string.c" bodystart="765" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ad69083a8d97dd922530c470bda12ca77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLRealRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLRealRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="783" column="1" bodyfile="src/ml_string.c" bodystart="783" bodyend="792"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1adc48e89c2c6628e9707729fa11a58011" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLDoubleT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLDoubleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>number</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="794" column="1" bodyfile="src/ml_string.c" bodystart="794" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ac6a7d02be0db9307d275aad5eac8b9f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLDoubleT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLDoubleT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>number</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="804" column="1" bodyfile="src/ml_string.c" bodystart="804" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a9b58ef4a9373bc10212ef5f3dd4c4c11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLIntegerT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>number</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="891" column="1" bodyfile="src/ml_string.c" bodystart="891" bodyend="907"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a4edd40adb689a223dbf6c2f6d8ffd72e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLIntegerT, MLStringT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>number</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="909" column="1" bodyfile="src/ml_string.c" bodystart="909" bodyend="924"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a78fab9a6d402bdefe633e2951dbdf69c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLDoubleT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLDoubleT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="926" column="1" bodyfile="src/ml_string.c" bodystart="926" bodyend="937"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ae632452a198dad44fda930df83e9bd5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLRealT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLRealT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>number</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="939" column="1" bodyfile="src/ml_string.c" bodystart="939" bodyend="953"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1aa6f645f4326631487e2303a314b1f55c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLNumberT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLNumberT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>number</para>
        </inbodydescription>
        <location file="src/ml_string.c" line="1021" column="1" bodyfile="src/ml_string.c" bodystart="1021" bodyend="1081"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a2eefca833e869f96ba886ca549a515c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLStringIteratorT,(), &quot;string-iterator&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLStringIteratorT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;string-iterator&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1089" column="1" declfile="src/ml_string.c" declline="1089" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a8693b93e1502f3221635b00fdf7c7d9d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int utf8_is_continuation</definition>
        <argsstring>(char C)</argsstring>
        <name>utf8_is_continuation</name>
        <param>
          <type>char</type>
          <declname>C</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1092" column="12" bodyfile="src/ml_string.c" bodystart="1092" bodyend="1094"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ad02eacfe28b5cb28e1d3d7149b8c735e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t utf8_position</definition>
        <argsstring>(const char *P, const char *Q)</argsstring>
        <name>utf8_position</name>
        <param>
          <type>const char *</type>
          <declname>P</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1096" column="15" bodyfile="src/ml_string.c" bodystart="1096" bodyend="1103"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a46ac7549e2ca8b5bd50e9cebc683272c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t utf8_strlen</definition>
        <argsstring>(ml_value_t *S)</argsstring>
        <name>utf8_strlen</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>S</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1105" column="15" bodyfile="src/ml_string.c" bodystart="1105" bodyend="1108"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a9c66453b65e03acdc5a53e681211a3a1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void utf8_expand</definition>
        <argsstring>(const char *S, uint32_t *P)</argsstring>
        <name>utf8_expand</name>
        <param>
          <type>const char *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>P</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1110" column="13" bodyfile="src/ml_string.c" bodystart="1110" bodyend="1122"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ad5e3ed9a2edc89818a6efd7fc0271b81" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLStringIteratorT, ml_state_t *Caller, ml_string_iterator_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLStringIteratorT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__string__iterator__t" kindref="compound">ml_string_iterator_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1124" column="13" bodyfile="src/ml_string.c" bodystart="1124" bodyend="1133"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a7674f8c34a5cc0db14767c387bcf12c9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLStringIteratorT, ml_state_t *Caller, ml_string_iterator_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLStringIteratorT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__string__iterator__t" kindref="compound">ml_string_iterator_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1135" column="13" bodyfile="src/ml_string.c" bodystart="1135" bodyend="1137"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ab1093b179e0293f4500b548ce46277fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLStringIteratorT, ml_state_t *Caller, ml_string_iterator_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLStringIteratorT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__string__iterator__t" kindref="compound">ml_string_iterator_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1139" column="13" bodyfile="src/ml_string.c" bodystart="1139" bodyend="1141"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1aba493073c838b9f02eb141711262cee8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLStringT, ml_state_t *Caller, ml_value_t *String)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>String</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1143" column="13" bodyfile="src/ml_string.c" bodystart="1143" bodyend="1154"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a48e5c00827797f37b0d49bdb4fbd4e4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>regex_t *</type>
        <definition>regex_t * ml_regex_value</definition>
        <argsstring>(const ml_value_t *Value)</argsstring>
        <name>ml_regex_value</name>
        <param>
          <type>const <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1164" column="9" bodyfile="src/ml_string.c" bodystart="1164" bodyend="1167"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a04d01476989377384c0b43b5322fc9b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1169" column="1" bodyfile="src/ml_string.c" bodystart="1169" bodyend="1181"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a986e2a3009507daa315c89a2e69fe4e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLStringT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1185" column="1" bodyfile="src/ml_string.c" bodystart="1185" bodyend="1196"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1abf23035f811a6eb63e82360edb00444a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;length&quot;, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;length&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1198" column="1" bodyfile="src/ml_string.c" bodystart="1198" bodyend="1207"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a8bc9e89ab775af159bc3d84a6d30971e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;precount&quot;, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;precount&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1209" column="1" bodyfile="src/ml_string.c" bodystart="1209" bodyend="1218"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a42bb480a86a609c006354f3165afdb13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;count&quot;, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;count&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1220" column="1" bodyfile="src/ml_string.c" bodystart="1220" bodyend="1229"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a1edce09a14de50c4e2f9994927716e52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;code&quot;, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;code&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1231" column="1" bodyfile="src/ml_string.c" bodystart="1231" bodyend="1246"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a2b939ffbe44c23b24e84b6933834950d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;utf8&quot;, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;utf8&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1248" column="1" bodyfile="src/ml_string.c" bodystart="1248" bodyend="1266"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ac0a6f4e1fb35d6575e40b8dd431d6891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;lower&quot;, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;lower&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1309" column="1" bodyfile="src/ml_string.c" bodystart="1309" bodyend="1319"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a824bca207d61261ec8efd4f64e46605a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;upper&quot;, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;upper&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1321" column="1" bodyfile="src/ml_string.c" bodystart="1321" bodyend="1331"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1aec235d6802ca3e66d36dcd8750236c9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;title&quot;, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;title&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1333" column="1" bodyfile="src/ml_string.c" bodystart="1333" bodyend="1348"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a59c60329fe0b9beee5569511d42f0327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;[]&quot;, MLStringT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&quot;</type>
          <array>[]</array>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1458" column="1" bodyfile="src/ml_string.c" bodystart="1458" bodyend="1476"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a24903a31002c400647ad6039c146a0ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;[]&quot;, MLStringT, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&quot;</type>
          <array>[]</array>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1478" column="1" bodyfile="src/ml_string.c" bodystart="1478" bodyend="1504"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ab8d8dae7734a6685fe76e340aa07ceb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;[]&quot;, MLStringT, MLIntegerRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&quot;</type>
          <array>[]</array>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1506" column="1" bodyfile="src/ml_string.c" bodystart="1506" bodyend="1532"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a1bb04484d1ff4cf4348d36891c2ce58c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;limit&quot;, MLStringT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;limit&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1534" column="1" bodyfile="src/ml_string.c" bodystart="1534" bodyend="1553"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a9ddaf9b50d72f43ed34d337999ce6491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;offset&quot;, MLStringT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;offset&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1555" column="1" bodyfile="src/ml_string.c" bodystart="1555" bodyend="1574"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1acd4713ee37fb27fd50a6cc765aaaff81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;+&quot;, MLStringT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;+&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1576" column="1" bodyfile="src/ml_string.c" bodystart="1576" bodyend="1590"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a368107e7ecbdcd5c171c1f892f8c0d17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;*&quot;, MLIntegerT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;*&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1592" column="1" bodyfile="src/ml_string.c" bodystart="1592" bodyend="1604"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a6c1226c63e0f20c36efb59d6a04fb001" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;trim&quot;, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;trim&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1606" column="1" bodyfile="src/ml_string.c" bodystart="1606" bodyend="1617"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a64cb4deda8f735be0ca789ac1ebab41c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;trim&quot;, MLStringT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;trim&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1619" column="1" bodyfile="src/ml_string.c" bodystart="1619" bodyend="1634"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a8c01890ffc97e07a219bf4c64746cea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;ltrim&quot;, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;ltrim&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1636" column="1" bodyfile="src/ml_string.c" bodystart="1636" bodyend="1646"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a93807fcfce26a6f40f3c614c41dc4ec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;ltrim&quot;, MLStringT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;ltrim&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1648" column="1" bodyfile="src/ml_string.c" bodystart="1648" bodyend="1662"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a0b32494751236693e3bca538dc832a74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;rtrim&quot;, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;rtrim&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1664" column="1" bodyfile="src/ml_string.c" bodystart="1664" bodyend="1674"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ad201187910d154040dc2815ae618b2e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;rtrim&quot;, MLStringT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;rtrim&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1676" column="1" bodyfile="src/ml_string.c" bodystart="1676" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a7bb930f866f1e48562f207485d430b84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;reverse&quot;, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;reverse&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1692" column="1" bodyfile="src/ml_string.c" bodystart="1692" bodyend="1709"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a42c182b0b5eb8f27c443e918783b754a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;&gt;&quot;, MLStringT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&lt;&gt;&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1711" column="1" bodyfile="src/ml_string.c" bodystart="1711" bodyend="1739"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ad6c89e19c4ce0e20361670f7ca98e2ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml_comp_method_string_string</definition>
        <argsstring>(=,==) ml_comp_method_string_string(!</argsstring>
        <name>ml_comp_method_string_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="1759" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a9d161d37cdf598d66ffabc1d3c4cd673" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_str_replacement_next</definition>
        <argsstring>(ml_str_replacement_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_str_replacement_next</name>
        <param>
          <type><ref refid="structml__str__replacement__state__t" kindref="compound">ml_str_replacement_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3107" column="13" bodyfile="src/ml_string.c" bodystart="3107" bodyend="3186" declfile="src/ml_string.c" declline="3096" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ad993e4f267f800e4316c7daa92ce5340" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_str_replacement_func</definition>
        <argsstring>(ml_str_replacement_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_str_replacement_func</name>
        <param>
          <type><ref refid="structml__str__replacement__state__t" kindref="compound">ml_str_replacement_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3098" column="13" bodyfile="src/ml_string.c" bodystart="3098" bodyend="3105"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a9d704648f0199a008fdab2a07f17b52a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;replace&quot;, MLStringT, MLMapT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;replace&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLMapT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3188" column="1" bodyfile="src/ml_string.c" bodystart="3188" bodyend="3230"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1af73dce3ef0db06db9319ce43bcf732b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;replace2&quot;, MLStringT, MLMapT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;replace2&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLMapT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3232" column="1" bodyfile="src/ml_string.c" bodystart="3232" bodyend="3275"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a98e49b0f1ac282e9f7877501cf2e4443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;replace&quot;, MLStringT, MLRegexT, MLFunctionT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;replace&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLRegexT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3277" column="1" bodyfile="src/ml_string.c" bodystart="3277" bodyend="3297"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a43e85492ed7fc204f6f54c488245758d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;replace&quot;, MLStringT, MLIntegerT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;replace&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3299" column="1" bodyfile="src/ml_string.c" bodystart="3299" bodyend="3325"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a0914f25c35e14ef5a198939e30f3f15a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;replace&quot;, MLStringT, MLIntegerT, MLIntegerT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;replace&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3327" column="1" bodyfile="src/ml_string.c" bodystart="3327" bodyend="3362"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1af470399a9d98cc3af43aa7223cad5a69" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_fn_replace_run</definition>
        <argsstring>(ml_fn_replace_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_fn_replace_run</name>
        <param>
          <type><ref refid="structml__fn__replace__state__t" kindref="compound">ml_fn_replace_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3371" column="13" bodyfile="src/ml_string.c" bodystart="3371" bodyend="3376"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1adce21683a0cbbbec5add36ba0b42d7d6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_fn_replace_func</definition>
        <argsstring>(ml_fn_replace_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_fn_replace_func</name>
        <param>
          <type><ref refid="structml__fn__replace__state__t" kindref="compound">ml_fn_replace_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3378" column="13" bodyfile="src/ml_string.c" bodystart="3378" bodyend="3385"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a199b3cfd08920f80eeac3d08d21caaad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;replace&quot;, MLStringT, MLIntegerT, MLFunctionT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;replace&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3387" column="1" bodyfile="src/ml_string.c" bodystart="3387" bodyend="3419"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a37f532f403ea4bf0de6bf8a8eb12bf5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;replace&quot;, MLStringT, MLIntegerT, MLIntegerT, MLFunctionT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;replace&quot;</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3421" column="1" bodyfile="src/ml_string.c" bodystart="3421" bodyend="3460"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1acb57d71be62b687a1e2b96ee70816495" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLStringEscape)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLStringEscape</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3462" column="1" bodyfile="src/ml_string.c" bodystart="3462" bodyend="3507"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a12947b3eadf9cadc494f75ea158a3bde" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>static long ml_regex_hash</definition>
        <argsstring>(ml_regex_t *Regex, ml_hash_chain_t *Chain)</argsstring>
        <name>ml_regex_hash</name>
        <param>
          <type><ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref> *</type>
          <declname>Regex</declname>
        </param>
        <param>
          <type><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref> *</type>
          <declname>Chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3509" column="13" bodyfile="src/ml_string.c" bodystart="3509" bodyend="3514"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a22fae6f45b982198e8149b010491c143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLRegex)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLRegex</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3516" column="1" bodyfile="src/ml_string.c" bodystart="3516" bodyend="3529"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ab01703a2d3afede939d8ce09bfcb0d0d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_regex_call</definition>
        <argsstring>(ml_state_t *Caller, ml_regex_t *Value, int Count, ml_value_t **Args)</argsstring>
        <name>ml_regex_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3531" column="13" bodyfile="src/ml_string.c" bodystart="3531" bodyend="3566"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1adcab1ee9c81922f6425f89c46ef6a69e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLRegexT,(MLFunctionT), &quot;regex&quot;,.hash=(void *) ml_regex_hash,.call=(void *) ml_regex_call,.Constructor=(ml_value_t *) MLRegex)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLRegexT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;regex&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>hash</declname>
          <defval>(void *) ml_regex_hash</defval>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_regex_call</defval>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLRegex</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3568" column="1" declfile="src/ml_string.c" declline="3568" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a3402187e6e03ef0831df678a52fd80fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_regex</definition>
        <argsstring>(const char *Pattern, int Length)</argsstring>
        <name>ml_regex</name>
        <param>
          <type>const char *</type>
          <declname>Pattern</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3575" column="12" bodyfile="src/ml_string.c" bodystart="3575" bodyend="3591"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ab9240fca88af954ead9ad40775c01c1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_regexi</definition>
        <argsstring>(const char *Pattern0, int Length)</argsstring>
        <name>ml_regexi</name>
        <param>
          <type>const char *</type>
          <declname>Pattern0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3593" column="12" bodyfile="src/ml_string.c" bodystart="3593" bodyend="3611"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ae31093e95e89ed55faecc4c74f496931" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ml_regex_pattern</definition>
        <argsstring>(const ml_value_t *Value)</argsstring>
        <name>ml_regex_pattern</name>
        <param>
          <type>const <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3613" column="12" bodyfile="src/ml_string.c" bodystart="3613" bodyend="3616"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a32544a3efc3f22843af6253e988a39b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ML_TYPED_FN</definition>
        <argsstring>(ml_value_is_constant, MLRegexT, ml_value_t *Value)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_value_is_constant</type>
        </param>
        <param>
          <type>MLRegexT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3618" column="12" bodyfile="src/ml_string.c" bodystart="3618" bodyend="3620"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1aea45d3c95ca5084a7242ed7428a9cb18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;pattern&quot;, MLRegexT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;pattern&quot;</type>
        </param>
        <param>
          <type>MLRegexT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3622" column="1" bodyfile="src/ml_string.c" bodystart="3622" bodyend="3628"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a6f30bf20b46cb03aa8ff829256ca8c56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;&gt;&quot;, MLRegexT, MLRegexT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&lt;&gt;&quot;</type>
        </param>
        <param>
          <type>MLRegexT</type>
        </param>
        <param>
          <type>MLRegexT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3630" column="1" bodyfile="src/ml_string.c" bodystart="3630" bodyend="3644"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ad9100acdf72946096463c60780231534" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml_comp_method_regex_regex</definition>
        <argsstring>(=,==) ml_comp_method_regex_regex(!</argsstring>
        <name>ml_comp_method_regex_regex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3655" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a683378afd55df1830f9b2112d6e1c896" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_string_switch</definition>
        <argsstring>(ml_state_t *Caller, ml_string_switch_t *Switch, int Count, ml_value_t **Args)</argsstring>
        <name>ml_string_switch</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__string__switch__t" kindref="compound">ml_string_switch_t</ref> *</type>
          <declname>Switch</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3753" column="13" bodyfile="src/ml_string.c" bodystart="3753" bodyend="3781"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ada245158c229073b109c63bb723a0426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLStringSwitchT,(MLFunctionT), &quot;string-switch&quot;,.call=(void *) ml_string_switch)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLStringSwitchT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;string-switch&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_string_switch</defval>
          <briefdescription><para>internal </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3783" column="1" declfile="src/ml_string.c" declline="3783" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a00eeea690dc445d7276758ca421a1b0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION_INLINE</definition>
        <argsstring>(MLStringSwitch)</argsstring>
        <name>ML_FUNCTION_INLINE</name>
        <param>
          <type>MLStringSwitch</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3788" column="1" bodyfile="src/ml_string.c" bodystart="3788" bodyend="3828"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1af75217c0dc7bb3a1ab983bc16cd9b904" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_serialize, MLStringSwitchT, ml_string_switch_t *Switch)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_serialize</type>
        </param>
        <param>
          <type>MLStringSwitchT</type>
        </param>
        <param>
          <type><ref refid="structml__string__switch__t" kindref="compound">ml_string_switch_t</ref> *</type>
          <declname>Switch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3830" column="19" bodyfile="src/ml_string.c" bodystart="3830" bodyend="3846"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1aa41b09ee52637cb463ca397858a404f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_DESERIALIZER</definition>
        <argsstring>(&quot;string-switch&quot;)</argsstring>
        <name>ML_DESERIALIZER</name>
        <param>
          <type>&quot;string-switch&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3848" column="1" bodyfile="src/ml_string.c" bodystart="3848" bodyend="3873"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a9eaad83d27d77c00d4c3f0b2ae1fbdd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_stringbuffer</definition>
        <argsstring>()</argsstring>
        <name>ml_stringbuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3875" column="12" bodyfile="src/ml_string.c" bodystart="3875" bodyend="3879"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a5c708667b1c96dee5d9f760acd914720" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLStringBuffer)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLStringBuffer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3881" column="1" bodyfile="src/ml_string.c" bodystart="3881" bodyend="3886"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a425241b612befbe6e031bb549b5f21bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLStringBufferT,(), &quot;stringbuffer&quot;,.Constructor=(ml_value_t *) MLStringBuffer)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;stringbuffer&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLStringBuffer</defval>
          <briefdescription><para>internal </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3893" column="1" declfile="src/ml_string.c" declline="3893" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ac25ae0926b821e0436e893918ce9a7fd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref> *</type>
        <definition>static ml_stringbuffer_node_t * ml_stringbuffer_node</definition>
        <argsstring>()</argsstring>
        <name>ml_stringbuffer_node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3907" column="31" bodyfile="src/ml_string.c" bodystart="3907" bodyend="3927"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1acdb21d45f75e76fe9c5df7e9b7522526" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_stringbuffer_node_free</definition>
        <argsstring>(ml_stringbuffer_node_t *Node)</argsstring>
        <name>ml_stringbuffer_node_free</name>
        <param>
          <type><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref> *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3929" column="20" bodyfile="src/ml_string.c" bodystart="3929" bodyend="3939"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1abd3d3a7609b71a887b846ce5cda07777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ml_stringbuffer_reader</definition>
        <argsstring>(ml_stringbuffer_t *Buffer, size_t Length)</argsstring>
        <name>ml_stringbuffer_reader</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3941" column="8" bodyfile="src/ml_string.c" bodystart="3941" bodyend="3961"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a32ac71924bcbc14387fe015970e812a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * ml_stringbuffer_writer</definition>
        <argsstring>(ml_stringbuffer_t *Buffer, size_t Length)</argsstring>
        <name>ml_stringbuffer_writer</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3963" column="6" bodyfile="src/ml_string.c" bodystart="3963" bodyend="3973"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a127fd4df2e96d4e462e146120aad7f24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t ml_stringbuffer_write</definition>
        <argsstring>(ml_stringbuffer_t *Buffer, const char *String, size_t Length)</argsstring>
        <name>ml_stringbuffer_write</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>String</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3975" column="9" bodyfile="src/ml_string.c" bodystart="3975" bodyend="3991"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ab7dd54c669c3e7435b735a85d901d7e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t ml_stringbuffer_printf</definition>
        <argsstring>(ml_stringbuffer_t *Buffer, const char *Format,...)</argsstring>
        <name>ml_stringbuffer_printf</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="3993" column="9" bodyfile="src/ml_string.c" bodystart="3993" bodyend="4018"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1adb880c3b0e4c27873466bb3f6d531397" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_stringbuffer_put</definition>
        <argsstring>(ml_stringbuffer_t *Buffer, char Char)</argsstring>
        <name>ml_stringbuffer_put</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <param>
          <type>char</type>
          <declname>Char</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="4020" column="6" bodyfile="src/ml_string.c" bodystart="4020" bodyend="4030"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a091de766590ef18b48eeb64fdd39d936" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char ml_stringbuffer_last</definition>
        <argsstring>(ml_stringbuffer_t *Buffer)</argsstring>
        <name>ml_stringbuffer_last</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="4032" column="6" bodyfile="src/ml_string.c" bodystart="4032" bodyend="4042"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ab5a92246f9bb2db6106fb1943df8ec79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_stringbuffer_put32</definition>
        <argsstring>(ml_stringbuffer_t *Buffer, uint32_t Code)</argsstring>
        <name>ml_stringbuffer_put32</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="4044" column="6" bodyfile="src/ml_string.c" bodystart="4044" bodyend="4055"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a4c89923dd53c989139aa7ae8447a0475" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_stringbuffer_finish</definition>
        <argsstring>(ml_stringbuffer_t *Buffer, char *String)</argsstring>
        <name>ml_stringbuffer_finish</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>String</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="4057" column="13" bodyfile="src/ml_string.c" bodystart="4057" bodyend="4083"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1aea19c97adcacaf80d45e3bf9db19e9a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * ml_stringbuffer_get_string</definition>
        <argsstring>(ml_stringbuffer_t *Buffer)</argsstring>
        <name>ml_stringbuffer_get_string</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="4085" column="6" bodyfile="src/ml_string.c" bodystart="4085" bodyend="4090"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1ad59eb9838e7b8d5abc3ff0297c17cd0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * ml_stringbuffer_get_uncollectable</definition>
        <argsstring>(ml_stringbuffer_t *Buffer)</argsstring>
        <name>ml_stringbuffer_get_uncollectable</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="4092" column="6" bodyfile="src/ml_string.c" bodystart="4092" bodyend="4097"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1af5d81232a95c8fa73fbf2482a1d56f8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_stringbuffer_get_value</definition>
        <argsstring>(ml_stringbuffer_t *Buffer)</argsstring>
        <name>ml_stringbuffer_get_value</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="4099" column="12" bodyfile="src/ml_string.c" bodystart="4099" bodyend="4108"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a509bec1ed7f0104d0d39a721d8c47262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_stringbuffer_to_address</definition>
        <argsstring>(ml_stringbuffer_t *Buffer)</argsstring>
        <name>ml_stringbuffer_to_address</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="4110" column="12" bodyfile="src/ml_string.c" bodystart="4110" bodyend="4115"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a998ebd941547f7c8f2e1b0e6280e37e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_stringbuffer_to_buffer</definition>
        <argsstring>(ml_stringbuffer_t *Buffer)</argsstring>
        <name>ml_stringbuffer_to_buffer</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="4117" column="12" bodyfile="src/ml_string.c" bodystart="4117" bodyend="4122"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a61be36c94372f99de89f180edddf0f59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_stringbuffer_to_string</definition>
        <argsstring>(ml_stringbuffer_t *Buffer)</argsstring>
        <name>ml_stringbuffer_to_string</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="4124" column="12" bodyfile="src/ml_string.c" bodystart="4124" bodyend="4129"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a087a737dbe97ef0ac548fe2971fe09de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;rest&quot;, MLStringBufferT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;rest&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="4131" column="1" bodyfile="src/ml_string.c" bodystart="4131" bodyend="4141"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a8bedf6af4ae43dbee432623d9ded1952" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;get&quot;, MLStringBufferT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;get&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="4143" column="1" bodyfile="src/ml_string.c" bodystart="4143" bodyend="4156"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a3adaf94e70772d95bca00b35f70f87f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;length&quot;, MLStringBufferT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;length&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="4158" column="1" bodyfile="src/ml_string.c" bodystart="4158" bodyend="4167"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a8fa09a9f2e2f27846322376c158c4e9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ml_stringbuffer_drain</definition>
        <argsstring>(ml_stringbuffer_t *Buffer, void *Data, int(*callback)(void *, const char *, size_t))</argsstring>
        <name>ml_stringbuffer_drain</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>int(*)(void *, const char *, size_t)</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="4169" column="5" bodyfile="src/ml_string.c" bodystart="4169" bodyend="4201"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a7f8281b09ed06b5c88db0b178eb2967b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_stringbuffer_simple_append</definition>
        <argsstring>(ml_stringbuffer_t *Buffer, ml_value_t *Value)</argsstring>
        <name>ml_stringbuffer_simple_append</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="4203" column="12" bodyfile="src/ml_string.c" bodystart="4203" bodyend="4219"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a4f96ede426b286cc886015e3b342795b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_stringbuffer_append_run</definition>
        <argsstring>(ml_stringbuffer_append_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_stringbuffer_append_run</name>
        <param>
          <type><ref refid="structml__stringbuffer__append__state__t" kindref="compound">ml_stringbuffer_append_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="4227" column="13" bodyfile="src/ml_string.c" bodystart="4227" bodyend="4234"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a3d289fad4e03330ff3f938ef9a544953" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_stringbuffer_append</definition>
        <argsstring>(ml_state_t *Caller, ml_stringbuffer_t *Buffer, ml_value_t *Value)</argsstring>
        <name>ml_stringbuffer_append</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="4236" column="6" bodyfile="src/ml_string.c" bodystart="4236" bodyend="4255"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a949d6406b36a615d880dc8da7da3cb01" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_string_buffer_write_run</definition>
        <argsstring>(ml_write_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_string_buffer_write_run</name>
        <param>
          <type><ref refid="structml__write__state__t" kindref="compound">ml_write_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="4264" column="13" bodyfile="src/ml_string.c" bodystart="4264" bodyend="4269"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a6ad10797aaf5598e3b23d667bef05fa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODVX</definition>
        <argsstring>(&quot;write&quot;, MLStringBufferT, MLAnyT)</argsstring>
        <name>ML_METHODVX</name>
        <param>
          <type>&quot;write&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="4271" column="1" bodyfile="src/ml_string.c" bodystart="4271" bodyend="4289"/>
      </memberdef>
      <memberdef kind="function" id="ml__string_8c_1a12e8e8945dc82c8478f85df5daa01cc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_string_init</definition>
        <argsstring>()</argsstring>
        <name>ml_string_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_string.c" line="4291" column="6" bodyfile="src/ml_string.c" bodystart="4291" bodyend="4330"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ml_string.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;minilang.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;inttypes.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdatomic.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gc/gc_typed.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;locale.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_sequence.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tre/regex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;regex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_ICU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_object.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unicode/unorm2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unicode/ustring.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>I</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ML_CATEGORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;string&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Overview</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Strings<sp/>in<sp/>Minilang<sp/>can<sp/>contain<sp/>any<sp/>sequence<sp/>of<sp/>bytes,<sp/>including<sp/>:mini:`0`<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Index<sp/>and<sp/>find<sp/>methods<sp/>however<sp/>work<sp/>on<sp/>``UTF-8``<sp/>characters,<sp/>byte<sp/>sequences<sp/>that<sp/>are<sp/>not<sp/>valid<sp/>``UTF-8``<sp/>are<sp/>handled<sp/>gracefully<sp/>but<sp/>the<sp/>results<sp/>are<sp/>probably<sp/>not<sp/>very<sp/>useful.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Every<sp/>:mini:`string`<sp/>is<sp/>also<sp/>an<sp/>:mini:`address`<sp/>so<sp/>address<sp/>methods<sp/>can<sp/>also<sp/>be<sp/>used<sp/>to<sp/>work<sp/>at<sp/>the<sp/>byte<sp/>level<sp/>if<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Indexing<sp/>a<sp/>string<sp/>starts<sp/>at<sp/>:mini:`1`,<sp/>with<sp/>the<sp/>last<sp/>character<sp/>at<sp/>:mini:`String:length`.<sp/>Negative<sp/>indices<sp/>are<sp/>counted<sp/>form<sp/>the<sp/>end,<sp/>:mini:`-1`<sp/>is<sp/>the<sp/>last<sp/>character<sp/>and<sp/>:mini:`-String:length`<sp/>is<sp/>the<sp/>first<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>creating<sp/>a<sp/>substring,<sp/>the<sp/>first<sp/>index<sp/>is<sp/>inclusive<sp/>and<sp/>second<sp/>index<sp/>is<sp/>exclusive.<sp/>The<sp/>index<sp/>:mini:`0`<sp/>refers<sp/>to<sp/>just<sp/>beyond<sp/>the<sp/>last<sp/>character<sp/>and<sp/>can<sp/>be<sp/>used<sp/>to<sp/>take<sp/>a<sp/>substring<sp/>to<sp/>the<sp/>end<sp/>of<sp/>a<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">ML_TYPE(MLAddressT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;address&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="comment">//<sp/>An<sp/>address<sp/>represents<sp/>a<sp/>read-only<sp/>bounded<sp/>section<sp/>of<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">ML_METHOD(MLAddressT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//&gt;address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>address<sp/>view<sp/>of<sp/>:mini:`String`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>address(&quot;Hello<sp/>world!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>Address-&gt;Type<sp/>=<sp/>MLAddressT;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>Address-&gt;Value<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>Address-&gt;Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Address;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_address(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>Address-&gt;Type<sp/>=<sp/>MLAddressT;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>Address-&gt;Value<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Value;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>Address-&gt;Length<sp/>=<sp/>Length;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Address;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_value_is_constant,<sp/>MLAddressT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;size&quot;</highlight><highlight class="normal">,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="comment">//&lt;Address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>visible<sp/>at<sp/>:mini:`Address`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>address(&quot;Hello<sp/>world!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(ml_address_length(Args[0]));</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;length&quot;</highlight><highlight class="normal">,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="comment">//&lt;Address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>visible<sp/>at<sp/>:mini:`Address`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>address(&quot;Hello<sp/>world!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(ml_address_length(Args[0]));</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal">,<sp/>MLAddressT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="comment">//&lt;Address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//&lt;Length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//&gt;address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>same<sp/>address<sp/>as<sp/>:mini:`Address`,<sp/>limited<sp/>to<sp/>:mini:`Length`<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>address(&quot;Hello<sp/>world!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A<sp/>@<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&gt;<sp/>Address-&gt;Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SizeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Size<sp/>larger<sp/>than<sp/>buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Address<sp/>size<sp/>must<sp/>be<sp/>non-negative&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>Address2-&gt;Type<sp/>=<sp/>Address-&gt;Type;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>Address2-&gt;Value<sp/>=<sp/>Address-&gt;Value;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>Address2-&gt;Length<sp/>=<sp/>Length;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Address2;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal">,<sp/>MLAddressT,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="comment">//&lt;Address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//&lt;Offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//&lt;Length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//&gt;address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>address<sp/>at<sp/>offset<sp/>:mini:`Offset`<sp/>from<sp/>:mini:`Address`<sp/>limited<sp/>to<sp/>:mini:`Length`<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>address(&quot;Hello<sp/>world!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A<sp/>@<sp/>(4,<sp/>4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Offset<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_integer_value_fast(Args[2]);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Offset<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SizeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Offset<sp/>must<sp/>be<sp/>non-negative&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Address<sp/>size<sp/>must<sp/>be<sp/>non-negative&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Offset<sp/>+<sp/>Length<sp/>&gt;<sp/>Address-&gt;Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SizeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Offset<sp/>+<sp/>size<sp/>larger<sp/>than<sp/>buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>Address2-&gt;Type<sp/>=<sp/>Address-&gt;Type;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>Address2-&gt;Value<sp/>=<sp/>Address-&gt;Value<sp/>+<sp/>Offset;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>Address2-&gt;Length<sp/>=<sp/>Length;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Address2;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,<sp/>MLAddressT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="comment">//&lt;Address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//&lt;Offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//&gt;address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>address<sp/>at<sp/>offset<sp/>:mini:`Offset`<sp/>from<sp/>:mini:`Address`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>address(&quot;Hello<sp/>world!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A<sp/>+<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Offset<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Offset<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SizeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Offset<sp/>must<sp/>be<sp/>non-negative&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Offset<sp/>&gt;<sp/>Address-&gt;Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SizeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Offset<sp/>larger<sp/>than<sp/>buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>Address2-&gt;Type<sp/>=<sp/>Address-&gt;Type;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>Address2-&gt;Value<sp/>=<sp/>Address-&gt;Value<sp/>+<sp/>Offset;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>Address2-&gt;Length<sp/>=<sp/>Address-&gt;Length<sp/>-<sp/>Offset;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Address2;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/>MLAddressT,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="comment">//&lt;Address/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//&lt;Address/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>offset<sp/>from<sp/>:mini:`Address/2`<sp/>to<sp/>:mini:`Address/1`,<sp/>provided<sp/>:mini:`Address/2`<sp/>is<sp/>visible<sp/>to<sp/>:mini:`Address/1`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>A<sp/>:=<sp/>address(&quot;Hello<sp/>world!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>B<sp/>:=<sp/>A<sp/>+<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>B<sp/>-<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>address(&quot;world!\n&quot;)<sp/>-<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address1<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address2<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Offset<sp/>=<sp/>Address1-&gt;Value<sp/>-<sp/>Address2-&gt;Value;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Offset<sp/>&lt;<sp/>0<sp/>||<sp/>Offset<sp/>&gt;<sp/>Address2-&gt;Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Addresses<sp/>are<sp/>not<sp/>from<sp/>same<sp/>base&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Offset);</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_NANBOXING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NegOne<sp/>ml_int32(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>One<sp/>ml_int32(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Zero<sp/>ml_int32(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>One[1]<sp/>=<sp/>{{MLIntegerT,<sp/>1}};</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>NegOne[1]<sp/>=<sp/>{{MLIntegerT,<sp/>-1}};</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>Zero[1]<sp/>=<sp/>{{MLIntegerT,<sp/>0}};</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLAddressT,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compares<sp/>the<sp/>bytes<sp/>at<sp/>:mini:`A`<sp/>and<sp/>:mini:`B`<sp/>lexicographically<sp/>and<sp/>returns<sp/>:mini:`-1`,<sp/>:mini:`0`<sp/>or<sp/>:mini:`1`<sp/>respectively.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello&quot;<sp/>&lt;&gt;<sp/>&quot;World&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;World&quot;<sp/>&lt;&gt;<sp/>&quot;Hello&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello&quot;<sp/>&lt;&gt;<sp/>&quot;Hello&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;abcd&quot;<sp/>&lt;&gt;<sp/>&quot;abc&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;abc&quot;<sp/>&lt;&gt;<sp/>&quot;abcd&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*AddressA<sp/>=<sp/>ml_address_value(Args[0]);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*AddressB<sp/>=<sp/>ml_address_value(Args[1]);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LengthA<sp/>=<sp/>ml_address_length(Args[0]);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LengthB<sp/>=<sp/>ml_address_length(Args[1]);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LengthA<sp/>&lt;<sp/>LengthB)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Compare<sp/>=<sp/>memcmp(AddressA,<sp/>AddressB,<sp/>LengthA);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Compare<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)One;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)NegOne;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LengthA<sp/>&gt;<sp/>LengthB)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Compare<sp/>=<sp/>memcmp(AddressA,<sp/>AddressB,<sp/>LengthB);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Compare<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)NegOne;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)One;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Compare<sp/>=<sp/>memcmp(AddressA,<sp/>AddressB,<sp/>LengthA);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Compare<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)NegOne;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Compare<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)One;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Zero;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_comp_method_address_address(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLAddressT,<sp/>MLAddressT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="225"><highlight class="normal">\</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>char<sp/>*AddressA<sp/>=<sp/>ml_address_value(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>char<sp/>*AddressB<sp/>=<sp/>ml_address_value(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>LengthA<sp/>=<sp/>ml_address_length(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>LengthB<sp/>=<sp/>ml_address_length(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>Compare;<sp/>\</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(LengthA<sp/>&lt;<sp/>LengthB)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compare<sp/>=<sp/>memcmp(AddressA,<sp/>AddressB,<sp/>LengthA)<sp/>?:<sp/>-1;<sp/>\</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(LengthA<sp/>&gt;<sp/>LengthB)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compare<sp/>=<sp/>memcmp(AddressA,<sp/>AddressB,<sp/>LengthB)<sp/>?:<sp/>1;<sp/>\</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compare<sp/>=<sp/>memcmp(AddressA,<sp/>AddressB,<sp/>LengthA);<sp/>\</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Compare<sp/>SYMBOL<sp/>0<sp/>?<sp/>Args[1]<sp/>:<sp/>MLNil;<sp/>\</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">ml_comp_method_address_address(=,<sp/>==)</highlight></codeline>
<codeline lineno="242"><highlight class="normal">ml_comp_method_address_address(!=,<sp/>!=)</highlight></codeline>
<codeline lineno="243"><highlight class="normal">ml_comp_method_address_address(&lt;,<sp/>&lt;)</highlight></codeline>
<codeline lineno="244"><highlight class="normal">ml_comp_method_address_address(&gt;,<sp/>&gt;)</highlight></codeline>
<codeline lineno="245"><highlight class="normal">ml_comp_method_address_address(&lt;=,<sp/>&lt;=)</highlight></codeline>
<codeline lineno="246"><highlight class="normal">ml_comp_method_address_address(&gt;=,<sp/>&gt;=)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal">ML_METHOD(&quot;get8&quot;,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="comment">//&lt;Address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>signed<sp/>8-bit<sp/>value<sp/>at<sp/>:mini:`Address`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>address(&quot;Hello<sp/>world!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:get8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Address-&gt;Length<sp/>&lt;<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SizeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>bytes<sp/>to<sp/>read&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(*(int8_t<sp/>*)Address-&gt;Value);</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;get16&quot;</highlight><highlight class="normal">,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="comment">//&lt;Address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>signed<sp/>16-bit<sp/>value<sp/>at<sp/>:mini:`Address`.<sp/>Currently<sp/>follows<sp/>the<sp/>platform<sp/>endiness.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>address(&quot;Hello<sp/>world!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:get16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Address-&gt;Length<sp/>&lt;<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SizeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>bytes<sp/>to<sp/>read&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(*(int16_t<sp/>*)Address-&gt;Value);</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;get32&quot;</highlight><highlight class="normal">,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="comment">//&lt;Address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>signed<sp/>32-bit<sp/>value<sp/>at<sp/>:mini:`Address`.<sp/>Currently<sp/>follows<sp/>the<sp/>platform<sp/>endiness.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>address(&quot;Hello<sp/>world!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:get32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Address-&gt;Length<sp/>&lt;<sp/>4)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SizeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>bytes<sp/>to<sp/>read&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(*(int32_t<sp/>*)Address-&gt;Value);</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;get64&quot;</highlight><highlight class="normal">,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="comment">//&lt;Address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>signed<sp/>64-bit<sp/>value<sp/>at<sp/>:mini:`Address`.<sp/>Currently<sp/>follows<sp/>the<sp/>platform<sp/>endiness.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>address(&quot;Hello<sp/>world!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:get64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Address-&gt;Length<sp/>&lt;<sp/>8)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SizeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>bytes<sp/>to<sp/>read&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(*(int64_t<sp/>*)Address-&gt;Value);</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;getu8&quot;</highlight><highlight class="normal">,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="comment">//&lt;Address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>unsigned<sp/>8-bit<sp/>value<sp/>at<sp/>:mini:`Address`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>address(&quot;Hello<sp/>world!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:getu8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Address-&gt;Length<sp/>&lt;<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SizeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>bytes<sp/>to<sp/>read&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(*(uint8_t<sp/>*)Address-&gt;Value);</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;getu16&quot;</highlight><highlight class="normal">,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="comment">//&lt;Address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>unsigned<sp/>16-bit<sp/>value<sp/>at<sp/>:mini:`Address`.<sp/>Currently<sp/>follows<sp/>the<sp/>platform<sp/>endiness.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>address(&quot;Hello<sp/>world!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:getu16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Address-&gt;Length<sp/>&lt;<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SizeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>bytes<sp/>to<sp/>read&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(*(uint16_t<sp/>*)Address-&gt;Value);</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;getu32&quot;</highlight><highlight class="normal">,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="comment">//&lt;Address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>unsigned<sp/>32-bit<sp/>value<sp/>at<sp/>:mini:`Address`.<sp/>Currently<sp/>follows<sp/>the<sp/>platform<sp/>endiness.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>address(&quot;Hello<sp/>world!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:getu32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Address-&gt;Length<sp/>&lt;<sp/>4)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SizeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>bytes<sp/>to<sp/>read&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(*(uint32_t<sp/>*)Address-&gt;Value);</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;getu64&quot;</highlight><highlight class="normal">,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="comment">//&lt;Address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>unsigned<sp/>64-bit<sp/>value<sp/>at<sp/>:mini:`Address`.<sp/>Currently<sp/>follows<sp/>the<sp/>platform<sp/>endiness.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//<sp/>..<sp/>warning::</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Minilang<sp/>currently<sp/>uses<sp/>signed<sp/>64-bit<sp/>integers<sp/>so<sp/>this<sp/>method<sp/>will<sp/>produce<sp/>incorrect<sp/>results<sp/>if<sp/>the<sp/>actual<sp/>value<sp/>is<sp/>too<sp/>large<sp/>to<sp/>fit.<sp/>This<sp/>may<sp/>change<sp/>in<sp/>future<sp/>implementations<sp/>or<sp/>if<sp/>arbitrary<sp/>precision<sp/>integers<sp/>are<sp/>added<sp/>to<sp/>the<sp/>runtime.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>address(&quot;Hello<sp/>world!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:getu64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Address-&gt;Length<sp/>&lt;<sp/>8)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SizeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>bytes<sp/>to<sp/>read&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(*(uint64_t<sp/>*)Address-&gt;Value);</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;getf32&quot;</highlight><highlight class="normal">,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="comment">//&lt;Address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//&gt;real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>single<sp/>precision<sp/>floating<sp/>point<sp/>value<sp/>at<sp/>:mini:`Address`.<sp/>Currently<sp/>follows<sp/>the<sp/>platform<sp/>endiness.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>address(&quot;Hello<sp/>world!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:getf32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Address-&gt;Length<sp/>&lt;<sp/>4)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SizeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>bytes<sp/>to<sp/>read&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(*(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)Address-&gt;Value);</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;getf64&quot;</highlight><highlight class="normal">,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="comment">//&lt;Address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">//&gt;real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>double<sp/>precision<sp/>floating<sp/>point<sp/>value<sp/>at<sp/>:mini:`Address`.<sp/>Currently<sp/>follows<sp/>the<sp/>platform<sp/>endiness.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>address(&quot;Hello<sp/>world!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:getf64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Address-&gt;Length<sp/>&lt;<sp/>8)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SizeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>bytes<sp/>to<sp/>read&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(*(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)Address-&gt;Value);</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;gets&quot;</highlight><highlight class="normal">,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="comment">//&lt;Address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>string<sp/>consisting<sp/>of<sp/>the<sp/>bytes<sp/>at<sp/>:mini:`Address`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>address(&quot;Hello<sp/>world!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:gets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_address_length(Args[0]);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*String<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(String,<sp/>Address-&gt;Value,<sp/>Length);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>String[Length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(String,<sp/>Length);</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;gets&quot;</highlight><highlight class="normal">,<sp/>MLAddressT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="comment">//&lt;Address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">//&lt;Size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>string<sp/>consisting<sp/>of<sp/>the<sp/>first<sp/>:mini:`Size`<sp/>bytes<sp/>at<sp/>:mini:`Address`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>address(&quot;Hello<sp/>world!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:gets(5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&gt;<sp/>Address-&gt;Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SizeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>bytes<sp/>to<sp/>read&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*String<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(String,<sp/>Address-&gt;Value,<sp/>Length);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>String[Length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(String,<sp/>Length);</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;find&quot;</highlight><highlight class="normal">,<sp/>MLAddressT,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="comment">//&lt;Haystack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">//&lt;Needle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>offset<sp/>of<sp/>the<sp/>first<sp/>occurence<sp/>of<sp/>the<sp/>bytes<sp/>of<sp/>:mini:`Needle`<sp/>in<sp/>:mini:`Haystack`<sp/>or<sp/>:mini:`nil`<sp/>is<sp/>no<sp/>occurence<sp/>is<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>address(&quot;Hello<sp/>world!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:find(&quot;world&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A:find(&quot;other&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address1<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address2<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Find<sp/>=<sp/>memmem(Address1-&gt;Value,<sp/>Address1-&gt;Length,<sp/>Address2-&gt;Value,<sp/>Address2-&gt;Length);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Find)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Find<sp/>-<sp/>Address1-&gt;Value);</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">ML_TYPE(MLBufferT,<sp/>(MLAddressT),<sp/></highlight><highlight class="stringliteral">&quot;buffer&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="421"><highlight class="comment">//<sp/>A<sp/>buffer<sp/>represents<sp/>a<sp/>writable<sp/>bounded<sp/>section<sp/>of<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal">);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_buffer(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Buffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref>);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Type<sp/>=<sp/>MLBufferT;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Length<sp/>=<sp/>Length;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Buffer;</highlight></codeline>
<codeline lineno="430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal">ML_METHOD(MLBufferT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="comment">//@buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">//&lt;Length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">//&gt;buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allocates<sp/>a<sp/>new<sp/>buffer<sp/>with<sp/>:mini:`Length`<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>buffer(16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Size<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Buffer<sp/>size<sp/>must<sp/>be<sp/>non-negative&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Buffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref>);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Type<sp/>=<sp/>MLBufferT;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Length<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Value<sp/>=<sp/>snew(Size);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Buffer;</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal">ML_METHOD(MLBufferT,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="comment">//@buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">//&lt;Source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment">//&gt;buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allocates<sp/>a<sp/>new<sp/>buffer<sp/>with<sp/>the<sp/>same<sp/>size<sp/>and<sp/>initial<sp/>contents<sp/>as<sp/>:mini:`Source`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>buffer(&quot;Hello<sp/>world&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>ml_address_length(Args[0]);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Buffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref>);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Type<sp/>=<sp/>MLBufferT;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Length<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Value<sp/>=<sp/>snew(Size);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(Buffer-&gt;Value,<sp/>ml_address_value(Args[0]),<sp/>Size);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Buffer;</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_value_is_constant,<sp/>MLBufferT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;copy&quot;</highlight><highlight class="normal">,<sp/>MLVisitorT,<sp/>MLBufferT)<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>ml_buffer_length(Args[1]);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value<sp/>=<sp/>snew(Size);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(Value,<sp/>ml_buffer_value(Args[1]),<sp/>Size);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_buffer(Value,<sp/>Size);</highlight></codeline>
<codeline lineno="473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;const&quot;</highlight><highlight class="normal">,<sp/>MLVisitorT,<sp/>MLBufferT)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>ml_buffer_length(Args[1]);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value<sp/>=<sp/>snew(Size);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(Value,<sp/>ml_buffer_value(Args[1]),<sp/>Size);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_address(Value,<sp/>Size);</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;put8&quot;</highlight><highlight class="normal">,<sp/>MLBufferT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="comment">//&gt;buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Puts<sp/>:mini:`Value`<sp/>in<sp/>:mini:`Buffer`<sp/>as<sp/>an<sp/>8-bit<sp/>signed<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>buffer(1):put8(64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Buffer-&gt;Length<sp/>&lt;<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SizeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>space&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>*(int8_t<sp/>*)Buffer-&gt;Value<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;put16&quot;</highlight><highlight class="normal">,<sp/>MLBufferT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment">//&gt;buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Puts<sp/>:mini:`Value`<sp/>in<sp/>:mini:`Buffer`<sp/>as<sp/>an<sp/>16-bit<sp/>signed<sp/>value.<sp/>Currently<sp/>follows<sp/>the<sp/>platform<sp/>endiness.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>buffer(2):put16(12345)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Buffer-&gt;Length<sp/>&lt;<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SizeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>space&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>*(int16_t<sp/>*)Buffer-&gt;Value<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;put32&quot;</highlight><highlight class="normal">,<sp/>MLBufferT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="comment">//&gt;buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Puts<sp/>:mini:`Value`<sp/>in<sp/>:mini:`Buffer`<sp/>as<sp/>an<sp/>32-bit<sp/>signed<sp/>value.<sp/>Currently<sp/>follows<sp/>the<sp/>platform<sp/>endiness.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>buffer(4):put32(12345678)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Buffer-&gt;Length<sp/>&lt;<sp/>4)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SizeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>space&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>*(int32_t<sp/>*)Buffer-&gt;Value<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;put64&quot;</highlight><highlight class="normal">,<sp/>MLBufferT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment">//&gt;buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Puts<sp/>:mini:`Value`<sp/>in<sp/>:mini:`Buffer`<sp/>as<sp/>an<sp/>64-bit<sp/>signed<sp/>value.<sp/>Currently<sp/>follows<sp/>the<sp/>platform<sp/>endiness.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>buffer(8):put64(123456789123)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Buffer-&gt;Length<sp/>&lt;<sp/>8)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SizeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>space&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>*(int64_t<sp/>*)Buffer-&gt;Value<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;putf32&quot;</highlight><highlight class="normal">,<sp/>MLBufferT,<sp/>MLRealT)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="comment">//&gt;buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Puts<sp/>:mini:`Value`<sp/>in<sp/>:mini:`Buffer`<sp/>as<sp/>a<sp/>single<sp/>precision<sp/>floating<sp/>point<sp/>value.<sp/>Currently<sp/>follows<sp/>the<sp/>platform<sp/>endiness.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>buffer(4):putf32(1.23456789)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Buffer-&gt;Length<sp/>&lt;<sp/>4)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SizeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>space&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)Buffer-&gt;Value<sp/>=<sp/>ml_real_value(Args[1]);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;putf64&quot;</highlight><highlight class="normal">,<sp/>MLBufferT,<sp/>MLRealT)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="comment">//&gt;buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Puts<sp/>:mini:`Value`<sp/>in<sp/>:mini:`Buffer`<sp/>as<sp/>a<sp/>double<sp/>precision<sp/>floating<sp/>point<sp/>value.<sp/>Currently<sp/>follows<sp/>the<sp/>platform<sp/>endiness.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>buffer(8):putf64(1.23456789)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Buffer-&gt;Length<sp/>&lt;<sp/>8)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SizeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>space&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)Buffer-&gt;Value<sp/>=<sp/>ml_real_value(Args[1]);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;put&quot;</highlight><highlight class="normal">,<sp/>MLBufferT,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="comment">//&gt;buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Puts<sp/>the<sp/>bytes<sp/>of<sp/>:mini:`Value`<sp/>in<sp/>:mini:`Buffer`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>buffer(10):put(&quot;Hello\0\0\0\0\0&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Source<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Buffer-&gt;Length<sp/>&lt;<sp/>Source-&gt;Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SizeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>space&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(Buffer-&gt;Value,<sp/>Source-&gt;Value,<sp/>Source-&gt;Length);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ml_string_hash(<ref refid="structml__string__t" kindref="compound">ml_string_t</ref><sp/>*String,<sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Chain)<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Hash<sp/>=<sp/>String-&gt;Hash;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Hash)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hash<sp/>=<sp/>5381;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>String-&gt;Length;</highlight></codeline>
<codeline lineno="579" refid="structml__string__state__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*P<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)String-&gt;Value;<sp/>--Length<sp/>&gt;=<sp/>0;<sp/>++P)<sp/>Hash<sp/>=<sp/>((Hash<sp/>&lt;&lt;<sp/>5)<sp/>+<sp/>Hash)<sp/>+<sp/>P[0];</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String-&gt;Hash<sp/>=<sp/>Hash;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Hash;</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal">ML_METHOD_DECL(AppendMethod,<sp/></highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1];</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>Chain[1];</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[];</highlight></codeline>
<codeline lineno="592"><highlight class="normal">}<sp/><ref refid="structml__string__state__t" kindref="compound">ml_string_state_t</ref>;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_string_state_run(<ref refid="structml__string__state__t" kindref="compound">ml_string_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Chain-&gt;Index)<sp/>ml_stringbuffer_printf(State-&gt;Buffer,<sp/></highlight><highlight class="stringliteral">&quot;&lt;%d&quot;</highlight><highlight class="normal">,<sp/>State-&gt;Chain-&gt;Index);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_stringbuffer_get_value(State-&gt;Buffer));</highlight></codeline>
<codeline lineno="599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal">ML_FUNCTIONX(MLString)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="comment">//@string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>general<sp/>(type<sp/>name<sp/>only)<sp/>representation<sp/>of<sp/>:mini:`Value`<sp/>as<sp/>a<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>string(100)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>string(nil)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>string(&quot;Hello<sp/>world!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>string([1,<sp/>2,<sp/>3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Args[0],<sp/>MLStringT)<sp/>&amp;&amp;<sp/>Count<sp/>==<sp/>1)<sp/>ML_RETURN(Args[0]);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__string__state__t" kindref="compound">ml_string_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__string__state__t" kindref="compound">ml_string_state_t</ref>,<sp/>Count<sp/>+<sp/>1,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_string_state_run;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Chain-&gt;Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Buffer[0]<sp/>=<sp/>ML_STRINGBUFFER_INIT;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Buffer-&gt;Chain<sp/>=<sp/>State-&gt;Chain;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)State-&gt;Buffer;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(State-&gt;Args<sp/>+<sp/>1,<sp/>Args,<sp/>Count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*));</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>AppendMethod,<sp/>Count<sp/>+<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal">ML_TYPE(MLStringT,<sp/>(MLAddressT,<sp/>MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>string<sp/>of<sp/>characters<sp/>in<sp/>UTF-8<sp/>encoding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>.hash<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_string_hash,</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLString,</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>.NoInherit<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="629"><highlight class="normal">);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>the<sp/>contents<sp/>of<sp/>:mini:`Value`<sp/>to<sp/>:mini:`Buffer`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Address<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ml_stringbuffer_printf(Buffer,<sp/>&quot;#%&quot;<sp/>PRIxPTR<sp/>&quot;:%ld&quot;,<sp/>(uintptr_t)Address-&gt;Value,<sp/>Address-&gt;Length);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Address-&gt;Value,<sp/>Address-&gt;Length);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GC_vasprintf(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**Ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Format,<sp/>va_list<sp/>Args)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>Copy;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>va_copy(Copy,<sp/>Args);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Actual<sp/>=<sp/>vsnprintf(NULL,<sp/>0,<sp/>Format,<sp/>Args);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Output<sp/>=<sp/>*Ptr<sp/>=<sp/>GC_malloc_atomic(Actual);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>vsprintf(Output,<sp/>Format,<sp/>Copy);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Actual;</highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GC_asprintf(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**Ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Format,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>Args;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>Format);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Result<sp/>=<sp/>GC_vasprintf(Ptr,<sp/>Format,<sp/>Args);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>Value<sp/>?:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value[Length])<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Copy<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Copy,<sp/>Value,<sp/>Length);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copy[Length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>Copy;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Length<sp/>=<sp/>strlen(Value);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__string__t" kindref="compound">ml_string_t</ref><sp/>*String<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__string__t" kindref="compound">ml_string_t</ref>);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>String-&gt;Type<sp/>=<sp/>MLStringT;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>String-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>String-&gt;Length<sp/>=<sp/>Length;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)String;</highlight></codeline>
<codeline lineno="677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_string_copy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&lt;<sp/>0)<sp/>Length<sp/>=<sp/>Value<sp/>?<sp/>strlen(Value)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Copy<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(Copy,<sp/>Value,<sp/>Length);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>Copy[Length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__string__t" kindref="compound">ml_string_t</ref><sp/>*String<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__string__t" kindref="compound">ml_string_t</ref>);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>String-&gt;Type<sp/>=<sp/>MLStringT;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>String-&gt;Value<sp/>=<sp/>Copy;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>String-&gt;Length<sp/>=<sp/>Length;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)String;</highlight></codeline>
<codeline lineno="689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_string_format(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Format,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>Args;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>Format);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>GC_vasprintf(&amp;Value,<sp/>Format,<sp/>Args);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Value,<sp/>Length);</highlight></codeline>
<codeline lineno="698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLBooleanT)<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>:mini:`&quot;true&quot;`<sp/>or<sp/>:mini:`&quot;false&quot;`<sp/>to<sp/>:mini:`Buffer`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__boolean__t" kindref="compound">ml_boolean_t</ref><sp/>*Boolean<sp/>=<sp/>(<ref refid="structml__boolean__t" kindref="compound">ml_boolean_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Boolean-&gt;Value)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">,<sp/>5);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>:mini:`Value`<sp/>to<sp/>:mini:`Buffer`<sp/>in<sp/>base<sp/>:mini:`10`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;%ld&quot;</highlight><highlight class="normal">,<sp/>ml_integer_value_fast(Args[1]));</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="comment">//&lt;Base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>:mini:`Value`<sp/>to<sp/>:mini:`Buffer`<sp/>in<sp/>base<sp/>:mini:`Base`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Value<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Base<sp/>=<sp/>ml_integer_value_fast(Args[2]);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Base<sp/>&lt;<sp/>2<sp/>||<sp/>Base<sp/>&gt;<sp/>36)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>base&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Max<sp/>=<sp/>65;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Temp[Max<sp/>+<sp/>1],<sp/>*P<sp/>=<sp/>Temp<sp/>+<sp/>Max,<sp/>*Q<sp/>=<sp/>P;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>*P<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Neg<sp/>=<sp/>Value<sp/>&lt;<sp/>0<sp/>?<sp/>Value<sp/>:<sp/>-Value;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*--P<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</highlight><highlight class="normal">[-(Neg<sp/>%<sp/>Base)];</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Neg<sp/>/=<sp/>Base;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Neg);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>&lt;<sp/>0)<sp/>*--P<sp/>=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>P,<sp/>Q<sp/>-<sp/>P);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="746"><highlight class="normal">}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>regex_t<sp/>IntFormat[1];</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>regex_t<sp/>LongFormat[1];</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>regex_t<sp/>RealFormat[1];</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLIntegerT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment">//&lt;Format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>:mini:`Value`<sp/>to<sp/>:mini:`Buffer`<sp/>using<sp/>:mini:`Format`<sp/>as<sp/>a<sp/>(checked)<sp/>:c:`printf`<sp/>format<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Format<sp/>=<sp/>ml_string_value(Args[2]);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Value<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!regexec(IntFormat,<sp/>Format,<sp/>0,<sp/>NULL,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/>Format,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)Value);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!regexec(LongFormat,<sp/>Format,<sp/>0,<sp/>NULL,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/>Format,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)Value);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!regexec(RealFormat,<sp/>Format,<sp/>0,<sp/>NULL,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/>Format,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Value);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;FormatError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>format<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLIntegerRangeT)<sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>a<sp/>representation<sp/>of<sp/>:mini:`Value`<sp/>to<sp/>:mini:`Buffer`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Step<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;%ld<sp/>..<sp/>%ld<sp/>by<sp/>%ld&quot;</highlight><highlight class="normal">,<sp/>Range-&gt;Start,<sp/>Range-&gt;Limit,<sp/>Range-&gt;Step);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;%ld<sp/>..<sp/>%ld&quot;</highlight><highlight class="normal">,<sp/>Range-&gt;Start,<sp/>Range-&gt;Limit);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STRINGIFY(x)<sp/>#x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TOSTRING(x)<sp/>STRINGIFY(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLRealRangeT)<sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>a<sp/>representation<sp/>of<sp/>:mini:`Value`<sp/>to<sp/>:mini:`Buffer`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;%.&quot;</highlight><highlight class="normal"><sp/>TOSTRING(DBL_DIG)<sp/></highlight><highlight class="stringliteral">&quot;g<sp/>..<sp/>%.&quot;</highlight><highlight class="normal"><sp/>TOSTRING(DBL_DIG)<sp/></highlight><highlight class="stringliteral">&quot;g<sp/>by<sp/>%.&quot;</highlight><highlight class="normal"><sp/>TOSTRING(DBL_DIG)<sp/></highlight><highlight class="stringliteral">&quot;g&quot;</highlight><highlight class="normal">,<sp/>Range-&gt;Start,<sp/>Range-&gt;Limit,<sp/>Range-&gt;Step);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="800"><highlight class="normal">}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLDoubleT)<sp/>{</highlight></codeline>
<codeline lineno="804"><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>:mini:`Value`<sp/>to<sp/>:mini:`Buffer`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;%.&quot;</highlight><highlight class="normal"><sp/>TOSTRING(DBL_DIG)<sp/></highlight><highlight class="stringliteral">&quot;g&quot;</highlight><highlight class="normal">,<sp/>ml_double_value_fast(Args[1]));</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLDoubleT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="comment">//&lt;Format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>:mini:`Value`<sp/>to<sp/>:mini:`Buffer`<sp/>using<sp/>:mini:`Format`<sp/>as<sp/>a<sp/>(checked)<sp/>:c:`printf`<sp/>format<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Format<sp/>=<sp/>ml_string_value(Args[2]);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Value<sp/>=<sp/>ml_double_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!regexec(IntFormat,<sp/>Format,<sp/>0,<sp/>NULL,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/>Format,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)Value);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!regexec(LongFormat,<sp/>Format,<sp/>0,<sp/>NULL,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/>Format,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)Value);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!regexec(RealFormat,<sp/>Format,<sp/>0,<sp/>NULL,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/>Format,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)Value);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;FormatError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>format<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLComplexT)<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>:mini:`Value`<sp/>to<sp/>:mini:`Buffer`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Complex<sp/>=<sp/>ml_complex_value(Args[1]);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Real<sp/>=<sp/>creal(Complex);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Imag<sp/>=<sp/>cimag(Complex);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(Real)<sp/>&lt;=<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(Imag<sp/>-<sp/>1)<sp/>&lt;=<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(Imag)<sp/>&lt;=<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;%.&quot;</highlight><highlight class="normal"><sp/>TOSTRING(DBL_DIG)<sp/></highlight><highlight class="stringliteral">&quot;gi&quot;</highlight><highlight class="normal">,<sp/>Imag);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(Imag)<sp/>&lt;=<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;%.&quot;</highlight><highlight class="normal"><sp/>TOSTRING(DBL_DIG)<sp/></highlight><highlight class="stringliteral">&quot;g&quot;</highlight><highlight class="normal">,<sp/>Real);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Imag<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(Imag<sp/>+<sp/>1)<sp/>&lt;=<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;%.&quot;</highlight><highlight class="normal"><sp/>TOSTRING(DBL_DIG)<sp/></highlight><highlight class="stringliteral">&quot;g<sp/>-<sp/>i&quot;</highlight><highlight class="normal">,<sp/>Real);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;%.&quot;</highlight><highlight class="normal"><sp/>TOSTRING(DBL_DIG)<sp/></highlight><highlight class="stringliteral">&quot;g<sp/>-<sp/>%.&quot;</highlight><highlight class="normal"><sp/>TOSTRING(DBL_DIG)<sp/></highlight><highlight class="stringliteral">&quot;gi&quot;</highlight><highlight class="normal">,<sp/>Real,<sp/>-Imag);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(Imag<sp/>-<sp/>1)<sp/>&lt;=<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;%.&quot;</highlight><highlight class="normal"><sp/>TOSTRING(DBL_DIG)<sp/></highlight><highlight class="stringliteral">&quot;g<sp/>+<sp/>i&quot;</highlight><highlight class="normal">,<sp/>Real);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;%.&quot;</highlight><highlight class="normal"><sp/>TOSTRING(DBL_DIG)<sp/></highlight><highlight class="stringliteral">&quot;g<sp/>+<sp/>%.&quot;</highlight><highlight class="normal"><sp/>TOSTRING(DBL_DIG)<sp/></highlight><highlight class="stringliteral">&quot;gi&quot;</highlight><highlight class="normal">,<sp/>Real,<sp/>Imag);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLComplexT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="comment">//&lt;Format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>:mini:`Value`<sp/>to<sp/>:mini:`Buffer`<sp/>using<sp/>:mini:`Format`<sp/>as<sp/>a<sp/>(checked)<sp/>:c:`printf`<sp/>format<sp/>string<sp/>for<sp/>the<sp/>real<sp/>and<sp/>imaginary<sp/>components.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Format<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regexec(RealFormat,<sp/>Format,<sp/>0,<sp/>NULL,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;FormatError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>format<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Complex<sp/>=<sp/>ml_complex_value(Args[0]);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Real<sp/>=<sp/>creal(Complex);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Imag<sp/>=<sp/>cimag(Complex);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Imag<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Imag<sp/>=<sp/>-Imag;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/>Format,<sp/>Real);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/>Format,<sp/>Imag);</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/>Format,<sp/>Real);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/>Format,<sp/>Imag);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal">ML_METHOD(MLIntegerT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer|error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>base<sp/>:mini:`10`<sp/>integer<sp/>in<sp/>:mini:`String`<sp/>or<sp/>an<sp/>error<sp/>if<sp/>:mini:`String`<sp/>does<sp/>not<sp/>contain<sp/>a<sp/>valid<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>integer(&quot;123&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>integer(&quot;ABC&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Start[0])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>integer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Value<sp/>=<sp/>strtol(Start,<sp/>&amp;End,<sp/>10);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End<sp/>-<sp/>Start<sp/>==<sp/>ml_string_length(Args[0]))<sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Value);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>integer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal">}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal">ML_METHOD(MLIntegerT,<sp/>MLStringT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="919"><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="comment">//&lt;Base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer|error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>base<sp/>:mini:`Base`<sp/>integer<sp/>in<sp/>:mini:`String`<sp/>or<sp/>an<sp/>error<sp/>if<sp/>:mini:`String`<sp/>does<sp/>not<sp/>contain<sp/>a<sp/>valid<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Start[0])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>integer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Value<sp/>=<sp/>strtol(Start,<sp/>&amp;End,<sp/>ml_integer_value_fast(Args[1]));</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End<sp/>-<sp/>Start<sp/>==<sp/>ml_string_length(Args[0]))<sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Value);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>integer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal">ML_METHOD(MLDoubleT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Start[0])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>integer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Value<sp/>=<sp/>strtod(Start,<sp/>&amp;End);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End<sp/>-<sp/>Start<sp/>==<sp/>ml_string_length(Args[0]))<sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(Value);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>real&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="945"><highlight class="normal">}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal">ML_METHOD(MLRealT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="comment">//&gt;real|error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>real<sp/>number<sp/>in<sp/>:mini:`String`<sp/>or<sp/>an<sp/>error<sp/>if<sp/>:mini:`String`<sp/>does<sp/>not<sp/>contain<sp/>a<sp/>valid<sp/>real<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Start[0])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>integer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Value<sp/>=<sp/>strtod(Start,<sp/>&amp;End);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End<sp/>-<sp/>Start<sp/>==<sp/>ml_string_length(Args[0]))<sp/>{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(Value);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>real&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal">ML_METHOD(MLComplexT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="comment">//&gt;complex|error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>complex<sp/>number<sp/>in<sp/>:mini:`String`<sp/>or<sp/>an<sp/>error<sp/>if<sp/>:mini:`String`<sp/>does<sp/>not<sp/>contain<sp/>a<sp/>valid<sp/>complex<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Start;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++End<sp/>-<sp/>Start<sp/>!=<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(_Complex_I);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Integer<sp/>=<sp/>strtol(Start,<sp/>&amp;End,<sp/>10);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++End<sp/>-<sp/>Start<sp/>!=<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(Integer<sp/>*<sp/>_Complex_I);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End<sp/>-<sp/>Start<sp/>==<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(Integer);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Real<sp/>=<sp/>strtod(Start,<sp/>&amp;End);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++End<sp/>-<sp/>Start<sp/>!=<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(Real<sp/>*<sp/>_Complex_I);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End<sp/>-<sp/>Start<sp/>==<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(Real);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>++End;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++End;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>++End;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++End<sp/>-<sp/>Start<sp/>!=<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(Real<sp/>+<sp/>_Complex_I);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Imag<sp/>=<sp/>strtod(End,<sp/>&amp;End);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++End<sp/>-<sp/>Start<sp/>!=<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(Real<sp/>+<sp/>Imag<sp/>*<sp/>_Complex_I);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++End;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>++End;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++End<sp/>-<sp/>Start<sp/>!=<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(Real<sp/>-<sp/>_Complex_I);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Imag<sp/>=<sp/>strtod(End,<sp/>&amp;End);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++End<sp/>-<sp/>Start<sp/>!=<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(Real<sp/>-<sp/>Imag<sp/>*<sp/>_Complex_I);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal">ML_METHOD(MLNumberT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer|real|complex|error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>in<sp/>:mini:`String`<sp/>or<sp/>an<sp/>error<sp/>if<sp/>:mini:`String`<sp/>does<sp/>not<sp/>contain<sp/>a<sp/>valid<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Start;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++End<sp/>-<sp/>Start<sp/>!=<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(_Complex_I);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Integer<sp/>=<sp/>strtol(Start,<sp/>&amp;End,<sp/>10);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++End<sp/>-<sp/>Start<sp/>!=<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(Integer<sp/>*<sp/>_Complex_I);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End<sp/>-<sp/>Start<sp/>==<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Integer);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Real<sp/>=<sp/>strtod(Start,<sp/>&amp;End);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++End<sp/>-<sp/>Start<sp/>!=<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(Real<sp/>*<sp/>_Complex_I);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End<sp/>-<sp/>Start<sp/>==<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(Real);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>++End;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++End;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>++End;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++End<sp/>-<sp/>Start<sp/>!=<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(Real<sp/>+<sp/>_Complex_I);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Imag<sp/>=<sp/>strtod(End,<sp/>&amp;End);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++End<sp/>-<sp/>Start<sp/>!=<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(Real<sp/>+<sp/>Imag<sp/>*<sp/>_Complex_I);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++End;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>++End;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++End<sp/>-<sp/>Start<sp/>!=<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(Real<sp/>-<sp/>_Complex_I);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Imag<sp/>=<sp/>strtod(End,<sp/>&amp;End);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1083" refid="structml__string__iterator__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++End<sp/>-<sp/>Start<sp/>!=<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(Real<sp/>-<sp/>Imag<sp/>*<sp/>_Complex_I);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start,<sp/>*End;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal">}<sp/><ref refid="structml__string__iterator__t" kindref="compound">ml_string_iterator_t</ref>;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal">ML_TYPE(MLStringIteratorT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;string-iterator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>utf8_is_continuation(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>C)<sp/>{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(C<sp/>&amp;<sp/>0xC0)<sp/>==<sp/>0x80;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>utf8_position(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*P,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Q)<sp/>{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(P<sp/>!=<sp/>Q)<sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!utf8_is_continuation(*P))<sp/>++N;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++P;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>N;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>utf8_strlen(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*S)<sp/>{</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*P<sp/>=<sp/>ml_string_value(S);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>utf8_position(P,<sp/>P<sp/>+<sp/>ml_string_length(S));</highlight></codeline>
<codeline lineno="1116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>utf8_expand(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*S,<sp/>uint32_t<sp/>*P)<sp/>{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(S[0])<sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>__builtin_clz(~(S[0]<sp/>&lt;&lt;<sp/>24));</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>Mask<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>(8<sp/>-<sp/>K))<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>Value<sp/>=<sp/>S[0]<sp/>&amp;<sp/>Mask;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(++S,<sp/>--K;<sp/>K<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>S[0];<sp/>++S,<sp/>--K)<sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>&lt;&lt;=<sp/>6;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>S[0]<sp/>&amp;<sp/>0x3F;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*P++<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>*P++<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLStringIteratorT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__string__iterator__t" kindref="compound">ml_string_iterator_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>Iter-&gt;End;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*Start)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Start<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*End<sp/>&amp;&amp;<sp/>utf8_is_continuation(*End))<sp/>++End;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Start<sp/>=<sp/>Start;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;End<sp/>=<sp/>End;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/>++Iter-&gt;Index;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLStringIteratorT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__string__iterator__t" kindref="compound">ml_string_iterator_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_string(Iter-&gt;Start,<sp/>Iter-&gt;End<sp/>-<sp/>Iter-&gt;Start));</highlight></codeline>
<codeline lineno="1145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLStringIteratorT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__string__iterator__t" kindref="compound">ml_string_iterator_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Iter-&gt;Index));</highlight></codeline>
<codeline lineno="1149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLStringT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*String)<sp/>{</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>ml_string_value(String);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*Start)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Start<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*End<sp/>&amp;&amp;<sp/>utf8_is_continuation(*End))<sp/>++End;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__string__iterator__t" kindref="compound">ml_string_iterator_t</ref><sp/>*Iter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__string__iterator__t" kindref="compound">ml_string_iterator_t</ref>);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Type<sp/>=<sp/>MLStringIteratorT;</highlight></codeline>
<codeline lineno="1158" refid="structml__regex__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Index<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Start<sp/>=<sp/>Start;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;End<sp/>=<sp/>End;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref><sp/><ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref>;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Pattern;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>regex_t<sp/>Value[1];</highlight></codeline>
<codeline lineno="1170"><highlight class="normal">}<sp/><ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref>;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal">regex_t<sp/>*ml_regex_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref><sp/>*Regex<sp/>=<sp/>(<ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Regex-&gt;Value;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>:mini:`Value`<sp/>to<sp/>:mini:`Buffer`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[1]);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length)<sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>ml_string_value(Args[1]),<sp/>Length);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>regex_t<sp/>StringFormat[1];</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Format<sp/>=<sp/>ml_string_value(Args[2]);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Value<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>R<sp/>=<sp/>regexec(StringFormat,<sp/>Format,<sp/>0,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!R)<sp/>{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssize_t<sp/>Written<sp/>=<sp/>ml_stringbuffer_printf(Buffer,<sp/>Format,<sp/>Value);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Written<sp/>?<sp/>MLSome<sp/>:<sp/>MLNil;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;FormatError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>format<sp/>string:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>R);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;length&quot;</highlight><highlight class="normal">,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>UTF-8<sp/>characters<sp/>in<sp/>:mini:`String`.<sp/>Use<sp/>:mini:`:size`<sp/>to<sp/>get<sp/>the<sp/>number<sp/>of<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello<sp/>world&quot;:length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello<sp/>world&quot;:size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;λ:😀️<sp/>→<sp/>😺️&quot;:length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;λ:😀️<sp/>→<sp/>😺️&quot;:size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(utf8_strlen(Args[0]));</highlight></codeline>
<codeline lineno="1215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;precount&quot;</highlight><highlight class="normal">,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>UTF-8<sp/>characters<sp/>in<sp/>:mini:`String`.<sp/>Use<sp/>:mini:`:size`<sp/>to<sp/>get<sp/>the<sp/>number<sp/>of<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello<sp/>world&quot;:count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello<sp/>world&quot;:size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;λ:😀️<sp/>→<sp/>😺️&quot;:count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;λ:😀️<sp/>→<sp/>😺️&quot;:size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(utf8_strlen(Args[0]));</highlight></codeline>
<codeline lineno="1226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;count&quot;</highlight><highlight class="normal">,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>UTF-8<sp/>characters<sp/>in<sp/>:mini:`String`.<sp/>Use<sp/>:mini:`:size`<sp/>to<sp/>get<sp/>the<sp/>number<sp/>of<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello<sp/>world&quot;:count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello<sp/>world&quot;:size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;λ:😀️<sp/>→<sp/>😺️&quot;:count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;λ:😀️<sp/>→<sp/>😺️&quot;:size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(utf8_strlen(Args[0]));</highlight></codeline>
<codeline lineno="1237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;code&quot;</highlight><highlight class="normal">,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>unicode<sp/>codepoint<sp/>of<sp/>the<sp/>first<sp/>UTF-8<sp/>character<sp/>of<sp/>:mini:`String`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;A&quot;:code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;😀️&quot;:code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*S<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>S[0]<sp/>?<sp/>__builtin_clz(~(S[0]<sp/>&lt;&lt;<sp/>24))<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>Mask<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>(8<sp/>-<sp/>K))<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>Value<sp/>=<sp/>S[0]<sp/>&amp;<sp/>Mask;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(++S,<sp/>--K;<sp/>K<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>S[0];<sp/>++S,<sp/>--K)<sp/>{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>&lt;&lt;=<sp/>6;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>S[0]<sp/>&amp;<sp/>0x3F;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Value);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;utf8&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight><highlight class="comment">//&lt;Codepoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>UTF-8<sp/>string<sp/>containing<sp/>the<sp/>character<sp/>with<sp/>unicode<sp/>codepoint<sp/>:mini:`Codepoint`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>Code<sp/>=<sp/>ml_integer_value(Args[0]);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Val[8];</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>LeadByteMax<sp/>=<sp/>0x7F;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Code<sp/>&gt;<sp/>LeadByteMax)<sp/>{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Val[I++]<sp/>=<sp/>(Code<sp/>&amp;<sp/>0x3F)<sp/>|<sp/>0x80;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>&gt;&gt;=<sp/>6;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LeadByteMax<sp/>&gt;&gt;=<sp/>(I<sp/>==<sp/>1<sp/>?<sp/>2<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>Val[I++]<sp/>=<sp/>(Code<sp/>&amp;<sp/>LeadByteMax)<sp/>|<sp/>(~LeadByteMax<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*S<sp/>=<sp/>snew(I<sp/>+<sp/>1),<sp/>*P<sp/>=<sp/>S;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(I--)<sp/>*P++<sp/>=<sp/>Val[I];</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/>*P<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(S,<sp/>I);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_ICU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;cname&quot;</highlight><highlight class="normal">,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*S<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>S[0]<sp/>?<sp/>__builtin_clz(~(S[0]<sp/>&lt;&lt;<sp/>24))<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>Mask<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>(8<sp/>-<sp/>K))<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>Value<sp/>=<sp/>S[0]<sp/>&amp;<sp/>Mask;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(++S,<sp/>--K;<sp/>K<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>S[0];<sp/>++S,<sp/>--K)<sp/>{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>&lt;&lt;=<sp/>6;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>S[0]<sp/>&amp;<sp/>0x3F;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>UErrorCode<sp/>Error<sp/>=<sp/>U_ZERO_ERROR;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>u_charName(Value,<sp/>U_UNICODE_CHAR_NAME,<sp/>NULL,<sp/>0,<sp/>&amp;Error);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>U_ZERO_ERROR;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>u_charName(Value,<sp/>U_UNICODE_CHAR_NAME,<sp/>Name,<sp/>Length<sp/>+<sp/>1,<sp/>&amp;Error);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(U_FAILURE(Error))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;UnicodeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>getting<sp/>character<sp/>name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Name,<sp/>Length);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;utf8&quot;</highlight><highlight class="normal">,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>UErrorCode<sp/>Error<sp/>=<sp/>U_ZERO_ERROR;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>Code<sp/>=<sp/>u_charFromName(U_UNICODE_CHAR_NAME,<sp/>ml_string_value(Args[0]),<sp/>&amp;Error);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(U_FAILURE(Error))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;UnicodeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>getting<sp/>character<sp/>from<sp/>name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Val[8];</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>LeadByteMax<sp/>=<sp/>0x7F;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Code<sp/>&gt;<sp/>LeadByteMax)<sp/>{</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Val[I++]<sp/>=<sp/>(Code<sp/>&amp;<sp/>0x3F)<sp/>|<sp/>0x80;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>&gt;&gt;=<sp/>6;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LeadByteMax<sp/>&gt;&gt;=<sp/>(I<sp/>==<sp/>1<sp/>?<sp/>2<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>Val[I++]<sp/>=<sp/>(Code<sp/>&amp;<sp/>LeadByteMax)<sp/>|<sp/>(~LeadByteMax<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*S<sp/>=<sp/>snew(I<sp/>+<sp/>1),<sp/>*P<sp/>=<sp/>S;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(I--)<sp/>*P++<sp/>=<sp/>Val[I];</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/>*P<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(S,<sp/>I);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;lower&quot;</highlight><highlight class="normal">,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`String`<sp/>with<sp/>each<sp/>character<sp/>converted<sp/>to<sp/>lower<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello<sp/>World&quot;:lower</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Target<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Length;<sp/>++I)<sp/>Target[I]<sp/>=<sp/>tolower(Source[I]);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Target,<sp/>Length);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;upper&quot;</highlight><highlight class="normal">,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`String`<sp/>with<sp/>each<sp/>character<sp/>converted<sp/>to<sp/>upper<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello<sp/>World&quot;:upper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Target<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Length;<sp/>++I)<sp/>Target[I]<sp/>=<sp/>toupper(Source[I]);</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Target,<sp/>Length);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;title&quot;</highlight><highlight class="normal">,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`String`<sp/>with<sp/>the<sp/>first<sp/>character<sp/>and<sp/>each<sp/>character<sp/>after<sp/>whitespace<sp/>converted<sp/>to<sp/>upper<sp/>case<sp/>and<sp/>each<sp/>other<sp/>case<sp/>converted<sp/>to<sp/>lower<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;hello<sp/>world&quot;:title</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;HELLO<sp/>WORLD&quot;:title</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Target<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Upper<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Length;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target[I]<sp/>=<sp/>(Upper<sp/>?<sp/>toupper<sp/>:<sp/>tolower)(Source[I]);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Upper<sp/>=<sp/>isblank(Source[I]);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Target,<sp/>Length);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_ICU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_UNORM_NFC,</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_UNORM_NFD,</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_UNORM_NFKC,</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_UNORM_NFKD</highlight></codeline>
<codeline lineno="1365"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal">ML_ENUM2(MLStringNormT,<sp/></highlight><highlight class="stringliteral">&quot;string::norm&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight><highlight class="comment">//@string::norm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;NFC&quot;</highlight><highlight class="normal">,<sp/>ML_UNORM_NFC,</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;NFD&quot;</highlight><highlight class="normal">,<sp/>ML_UNORM_NFD,</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;NFKC&quot;</highlight><highlight class="normal">,<sp/>ML_UNORM_NFKC,</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;NFKD&quot;</highlight><highlight class="normal">,<sp/>ML_UNORM_NFKD</highlight></codeline>
<codeline lineno="1373"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;normalize&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringNormT)<sp/>{</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight><highlight class="comment">//&lt;Norm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>normalized<sp/>copy<sp/>of<sp/>:mini:`String`<sp/>using<sp/>the<sp/>normalizer<sp/>specified<sp/>by<sp/>:mini:`Norm`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>S<sp/>:=<sp/>&quot;𝕥𝕖𝕩𝕥&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S:normalize(string::norm::NFD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>UErrorCode<sp/>Error<sp/>=<sp/>U_ZERO_ERROR;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SrcLimit<sp/>=<sp/>4<sp/>*<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>UChar<sp/>Src[SrcLimit];</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>u_strFromUTF8(Src,<sp/>SrcLimit,<sp/>&amp;Length,<sp/>ml_string_value(Args[0]),<sp/>ml_string_length(Args[0]),<sp/>&amp;Error);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(U_FAILURE(Error))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;UnicodeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>decoding<sp/>UTF-8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UNormalizer2<sp/>*Normalizer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ml_enum_value_value(Args[1]))<sp/>{</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_UNORM_NFC:</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Normalizer<sp/>=<sp/>unorm2_getNFCInstance(&amp;Error);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_UNORM_NFD:</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Normalizer<sp/>=<sp/>unorm2_getNFDInstance(&amp;Error);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_UNORM_NFKC:</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Normalizer<sp/>=<sp/>unorm2_getNFKCInstance(&amp;Error);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_UNORM_NFKD:</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Normalizer<sp/>=<sp/>unorm2_getNFKDInstance(&amp;Error);</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(U_FAILURE(Error))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;UnicodeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>getting<sp/>normalizer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Capacity<sp/>=<sp/>4<sp/>*<sp/>Length;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/>UChar<sp/>Dest[Capacity];</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Actual<sp/>=<sp/>unorm2_normalize(Normalizer,<sp/>Src,<sp/>Length,<sp/>Dest,<sp/>Capacity,<sp/>&amp;Error);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(U_FAILURE(Error))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;UnicodeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>normalizing<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*String<sp/>=<sp/>snew(Actual<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>u_strToUTF8(String,<sp/>Actual<sp/>*<sp/>4,<sp/>&amp;Length,<sp/>Dest,<sp/>Actual,<sp/>&amp;Error);</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(U_FAILURE(Error))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;UnicodeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>encoding<sp/>UTF-8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(String,<sp/>Length);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal">ML_ENUM2(MLStringCTypeT,<sp/></highlight><highlight class="stringliteral">&quot;string::ctype&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight><highlight class="comment">//@string::ctype</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cn&quot;</highlight><highlight class="normal">,<sp/>U_GENERAL_OTHER_TYPES,<sp/></highlight><highlight class="comment">//<sp/>General<sp/>Other<sp/>Types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Lu&quot;</highlight><highlight class="normal">,<sp/>U_UPPERCASE_LETTER,<sp/></highlight><highlight class="comment">//<sp/>Uppercase<sp/>Letter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Ll&quot;</highlight><highlight class="normal">,<sp/>U_LOWERCASE_LETTER,<sp/></highlight><highlight class="comment">//<sp/>Lowercase<sp/>Letter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Lt&quot;</highlight><highlight class="normal">,<sp/>U_TITLECASE_LETTER,<sp/></highlight><highlight class="comment">//<sp/>Titlecase<sp/>Letter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Lm&quot;</highlight><highlight class="normal">,<sp/>U_MODIFIER_LETTER,<sp/></highlight><highlight class="comment">//<sp/>Modifier<sp/>Letter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Lo&quot;</highlight><highlight class="normal">,<sp/>U_OTHER_LETTER,<sp/></highlight><highlight class="comment">//<sp/>Other<sp/>Letter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Mn&quot;</highlight><highlight class="normal">,<sp/>U_NON_SPACING_MARK,<sp/></highlight><highlight class="comment">//<sp/>Non<sp/>Spacing<sp/>Mark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Me&quot;</highlight><highlight class="normal">,<sp/>U_ENCLOSING_MARK,<sp/></highlight><highlight class="comment">//<sp/>Enclosing<sp/>Mark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Mc&quot;</highlight><highlight class="normal">,<sp/>U_COMBINING_SPACING_MARK,<sp/></highlight><highlight class="comment">//<sp/>Combining<sp/>Spacing<sp/>Mark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Nd&quot;</highlight><highlight class="normal">,<sp/>U_DECIMAL_DIGIT_NUMBER,<sp/></highlight><highlight class="comment">//<sp/>Decimal<sp/>Digit<sp/>Number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Nl&quot;</highlight><highlight class="normal">,<sp/>U_LETTER_NUMBER,<sp/></highlight><highlight class="comment">//<sp/>Letter<sp/>Number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;No&quot;</highlight><highlight class="normal">,<sp/>U_OTHER_NUMBER,<sp/></highlight><highlight class="comment">//<sp/>Other<sp/>Number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Zs&quot;</highlight><highlight class="normal">,<sp/>U_SPACE_SEPARATOR,<sp/></highlight><highlight class="comment">//<sp/>Space<sp/>Separator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Zl&quot;</highlight><highlight class="normal">,<sp/>U_LINE_SEPARATOR,<sp/></highlight><highlight class="comment">//<sp/>Line<sp/>Separator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Zp&quot;</highlight><highlight class="normal">,<sp/>U_PARAGRAPH_SEPARATOR,<sp/></highlight><highlight class="comment">//<sp/>Paragraph<sp/>Separator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cc&quot;</highlight><highlight class="normal">,<sp/>U_CONTROL_CHAR,<sp/></highlight><highlight class="comment">//<sp/>Control<sp/>Char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cf&quot;</highlight><highlight class="normal">,<sp/>U_FORMAT_CHAR,<sp/></highlight><highlight class="comment">//<sp/>Format<sp/>Char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Co&quot;</highlight><highlight class="normal">,<sp/>U_PRIVATE_USE_CHAR,<sp/></highlight><highlight class="comment">//<sp/>Private<sp/>Use<sp/>Char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cs&quot;</highlight><highlight class="normal">,<sp/>U_SURROGATE,<sp/></highlight><highlight class="comment">//<sp/>Surrogate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Pd&quot;</highlight><highlight class="normal">,<sp/>U_DASH_PUNCTUATION,<sp/></highlight><highlight class="comment">//<sp/>Dash<sp/>Punctuation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Ps&quot;</highlight><highlight class="normal">,<sp/>U_START_PUNCTUATION,<sp/></highlight><highlight class="comment">//<sp/>Start<sp/>Punctuation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Pe&quot;</highlight><highlight class="normal">,<sp/>U_END_PUNCTUATION,<sp/></highlight><highlight class="comment">//<sp/>End<sp/>Punctuation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Pc&quot;</highlight><highlight class="normal">,<sp/>U_CONNECTOR_PUNCTUATION,<sp/></highlight><highlight class="comment">//<sp/>Connector<sp/>Punctuation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Po&quot;</highlight><highlight class="normal">,<sp/>U_OTHER_PUNCTUATION,<sp/></highlight><highlight class="comment">//<sp/>Other<sp/>Punctuation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Sm&quot;</highlight><highlight class="normal">,<sp/>U_MATH_SYMBOL,<sp/></highlight><highlight class="comment">//<sp/>Math<sp/>Symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Sc&quot;</highlight><highlight class="normal">,<sp/>U_CURRENCY_SYMBOL,<sp/></highlight><highlight class="comment">//<sp/>Currency<sp/>Symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Sk&quot;</highlight><highlight class="normal">,<sp/>U_MODIFIER_SYMBOL,<sp/></highlight><highlight class="comment">//<sp/>Modifier<sp/>Symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;So&quot;</highlight><highlight class="normal">,<sp/>U_OTHER_SYMBOL,<sp/></highlight><highlight class="comment">//<sp/>Other<sp/>Symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Pi&quot;</highlight><highlight class="normal">,<sp/>U_INITIAL_PUNCTUATION,<sp/></highlight><highlight class="comment">//<sp/>Initial<sp/>Punctuation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Pf&quot;</highlight><highlight class="normal">,<sp/>U_FINAL_PUNCTUATION<sp/></highlight><highlight class="comment">//<sp/>Final<sp/>Punctuation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;ctype&quot;</highlight><highlight class="normal">,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight><highlight class="comment">//&gt;string::ctype</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>unicode<sp/>type<sp/>of<sp/>the<sp/>first<sp/>character<sp/>of<sp/>:mini:`String`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>map(&quot;To<sp/>€2<sp/>á\n&quot;<sp/>=&gt;<sp/>(2,<sp/>2<sp/>-&gt;<sp/>:ctype))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*S<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>S[0]<sp/>?<sp/>__builtin_clz(~(S[0]<sp/>&lt;&lt;<sp/>24))<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>Mask<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>(8<sp/>-<sp/>K))<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>Value<sp/>=<sp/>S[0]<sp/>&amp;<sp/>Mask;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(++S,<sp/>--K;<sp/>K<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>S[0];<sp/>--K,<sp/>++S)<sp/>{</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>&lt;&lt;=<sp/>6;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>+=<sp/>S[0]<sp/>&amp;<sp/>0x3F;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_enum_value(MLStringCTypeT,<sp/>u_charType(Value));</highlight></codeline>
<codeline lineno="1462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;[]&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight><highlight class="comment">//&lt;Index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>substring<sp/>of<sp/>:mini:`String`<sp/>of<sp/>length<sp/>1<sp/>at<sp/>:mini:`Index`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>utf8_strlen(Args[0]);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&lt;=<sp/>0)<sp/>N<sp/>+=<sp/>Length<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&gt;<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!utf8_is_continuation(*Start)<sp/>&amp;&amp;<sp/>(--N<sp/>==<sp/>0))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Start;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Start<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*End<sp/>&amp;&amp;<sp/>utf8_is_continuation(*End))<sp/>++End;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Start,<sp/>End<sp/>-<sp/>Start);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;[]&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight><highlight class="comment">//&lt;Start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight><highlight class="comment">//&lt;End</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>substring<sp/>of<sp/>:mini:`String`<sp/>from<sp/>:mini:`Start`<sp/>to<sp/>:mini:`End<sp/>-<sp/>1`<sp/>inclusively.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>utf8_strlen(Args[0]);</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Lo<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Hi<sp/>=<sp/>ml_integer_value_fast(Args[2]);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Lo<sp/>&lt;=<sp/>0)<sp/>Lo<sp/>+=<sp/>Length<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hi<sp/>&lt;=<sp/>0)<sp/>Hi<sp/>+=<sp/>Length<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Lo<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hi<sp/>&gt;<sp/>Length<sp/>+<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hi<sp/>&lt;<sp/>Lo)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/>Hi<sp/>-=<sp/>Lo;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Lo<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!utf8_is_continuation(*Start)<sp/>&amp;&amp;<sp/>(--Lo<sp/>==<sp/>0))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Start;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Start;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++Hi<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*End)<sp/>{</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!utf8_is_continuation(*End)<sp/>&amp;&amp;<sp/>(--Hi<sp/>==<sp/>0))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++End;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Start,<sp/>End<sp/>-<sp/>Start);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;[]&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLIntegerRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>substring<sp/>of<sp/>:mini:`String`<sp/>corresponding<sp/>to<sp/>:mini:`Range`<sp/>inclusively.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>utf8_strlen(Args[0]);</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Lo<sp/>=<sp/>Range-&gt;Start,<sp/>Hi<sp/>=<sp/>Range-&gt;Limit<sp/>+<sp/>1,<sp/>Step<sp/>=<sp/>Range-&gt;Step;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Step<sp/>!=<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>step<sp/>size<sp/>for<sp/>list<sp/>slice&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Lo<sp/>&lt;=<sp/>0)<sp/>Lo<sp/>+=<sp/>Length<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hi<sp/>&lt;=<sp/>0)<sp/>Hi<sp/>+=<sp/>Length<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Lo<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hi<sp/>&gt;<sp/>Length<sp/>+<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hi<sp/>&lt;<sp/>Lo)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/>Hi<sp/>-=<sp/>Lo;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Lo<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!utf8_is_continuation(*Start)<sp/>&amp;&amp;<sp/>(--Lo<sp/>==<sp/>0))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Start;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Start;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++Hi<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*End)<sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!utf8_is_continuation(*End)<sp/>&amp;&amp;<sp/>(--Hi<sp/>==<sp/>0))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++End;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Start,<sp/>End<sp/>-<sp/>Start);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;limit&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight><highlight class="comment">//&lt;Length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>prefix<sp/>of<sp/>:mini:`String`<sp/>limited<sp/>to<sp/>:mini:`Length`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello<sp/>world&quot;:limit(5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Cake&quot;:limit(5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>utf8_strlen(Args[0]);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_cstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&gt;=<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>++N;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>ml_string_value(Args[0]),<sp/>*End<sp/>=<sp/>Start;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!utf8_is_continuation(*End)<sp/>&amp;&amp;<sp/>(--N<sp/>==<sp/>0))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++End;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Start,<sp/>End<sp/>-<sp/>Start);</highlight></codeline>
<codeline lineno="1561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;offset&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight><highlight class="comment">//&lt;Index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>byte<sp/>position<sp/>of<sp/>the<sp/>:mini:`Index`-th<sp/>character<sp/>of<sp/>:mini:`String`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>S<sp/>:=<sp/>&quot;λ:😀️<sp/>→<sp/>😺️&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(1<sp/>..<sp/>S:length,<sp/>S:offset(_))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>utf8_strlen(Args[0]);</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&lt;=<sp/>0)<sp/>N<sp/>+=<sp/>Length<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&gt;<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*P<sp/>=<sp/>Start;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!utf8_is_continuation(*P)<sp/>&amp;&amp;<sp/>(--N<sp/>==<sp/>0))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++P;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(P<sp/>-<sp/>Start);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A`<sp/>and<sp/>:mini:`B`<sp/>concatentated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello&quot;<sp/>+<sp/>&quot;<sp/>&quot;<sp/>+<sp/>&quot;world&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length1<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length2<sp/>=<sp/>ml_string_length(Args[1]);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>Length1<sp/>+<sp/>Length2;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Chars<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(Chars,<sp/>ml_string_value(Args[0]),<sp/>Length1);</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(Chars<sp/>+<sp/>Length1,<sp/>ml_string_value(Args[1]),<sp/>Length2);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/>Chars[Length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Chars,<sp/>Length);</highlight></codeline>
<codeline lineno="1598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight><highlight class="comment">//&lt;N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`String`<sp/>concatentated<sp/>:mini:`N`<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>5<sp/>*<sp/>&quot;abc&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>ml_integer_value(Args[0]);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Chars<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[1]);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>ml_stringbuffer_write(Buffer,<sp/>Chars,<sp/>Length);</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer_get_value(Buffer);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;trim&quot;</highlight><highlight class="normal">,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>copy<sp/>of<sp/>:mini:`String`<sp/>with<sp/>whitespace<sp/>removed<sp/>from<sp/>both<sp/>ends.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;<sp/>\t<sp/>Hello<sp/>\n&quot;:trim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Start<sp/>+<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Start<sp/>&lt;<sp/>End<sp/>&amp;&amp;<sp/>Start[0]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>++Start;</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Start<sp/>&lt;<sp/>End<sp/>&amp;&amp;<sp/>End[-1]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>--End;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>End<sp/>-<sp/>Start;</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Start,<sp/>Length);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;trim&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight><highlight class="comment">//&lt;Chars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>copy<sp/>of<sp/>:mini:`String`<sp/>with<sp/>characters<sp/>in<sp/>:mini:`Chars`<sp/>removed<sp/>from<sp/>both<sp/>ends.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;<sp/>\t<sp/>Hello<sp/>\n&quot;:trim(&quot;<sp/>\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Trim[256]<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*P<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[1]);<sp/>--Length<sp/>&gt;=<sp/>0;<sp/>++P)<sp/>Trim[*P]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Start<sp/>+<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Start<sp/>&lt;<sp/>End<sp/>&amp;&amp;<sp/>Trim[Start[0]])<sp/>++Start;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Start<sp/>&lt;<sp/>End<sp/>&amp;&amp;<sp/>Trim[End[-1]])<sp/>--End;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>End<sp/>-<sp/>Start;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Start,<sp/>Length);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;ltrim&quot;</highlight><highlight class="normal">,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>copy<sp/>of<sp/>:mini:`String`<sp/>with<sp/>characters<sp/>in<sp/>:mini:`Chars`<sp/>removed<sp/>from<sp/>the<sp/>start.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;<sp/>\t<sp/>Hello<sp/>\n&quot;:ltrim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Start<sp/>+<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Start<sp/>&lt;<sp/>End<sp/>&amp;&amp;<sp/>Start[0]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>++Start;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>End<sp/>-<sp/>Start;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Start,<sp/>Length);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;ltrim&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight><highlight class="comment">//&lt;Chars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>copy<sp/>of<sp/>:mini:`String`<sp/>with<sp/>characters<sp/>in<sp/>:mini:`Chars`<sp/>removed<sp/>from<sp/>the<sp/>start.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;<sp/>\t<sp/>Hello<sp/>\n&quot;:trim(&quot;<sp/>\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Trim[256]<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*P<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[1]);<sp/>--Length<sp/>&gt;=<sp/>0;<sp/>++P)<sp/>Trim[*P]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Start<sp/>+<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Start<sp/>&lt;<sp/>End<sp/>&amp;&amp;<sp/>Trim[Start[0]])<sp/>++Start;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>End<sp/>-<sp/>Start;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Start,<sp/>Length);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;rtrim&quot;</highlight><highlight class="normal">,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>copy<sp/>of<sp/>:mini:`String`<sp/>with<sp/>characters<sp/>in<sp/>:mini:`Chars`<sp/>removed<sp/>from<sp/>the<sp/>end.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;<sp/>\t<sp/>Hello<sp/>\n&quot;:rtrim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Start<sp/>+<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Start<sp/>&lt;<sp/>End<sp/>&amp;&amp;<sp/>End[-1]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>--End;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>End<sp/>-<sp/>Start;</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Start,<sp/>Length);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;rtrim&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight><highlight class="comment">//&lt;Chars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>copy<sp/>of<sp/>:mini:`String`<sp/>with<sp/>characters<sp/>in<sp/>:mini:`Chars`<sp/>removed<sp/>from<sp/>the<sp/>end.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;<sp/>\t<sp/>Hello<sp/>\n&quot;:rtrim(&quot;<sp/>\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Trim[256]<sp/>=<sp/>{0,};</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*P<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[1]);<sp/>--Length<sp/>&gt;=<sp/>0;<sp/>++P)<sp/>Trim[*P]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Start<sp/>+<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Start<sp/>&lt;<sp/>End<sp/>&amp;&amp;<sp/>Trim[End[-1]])<sp/>--End;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>End<sp/>-<sp/>Start;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Start,<sp/>Length);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;reverse&quot;</highlight><highlight class="normal">,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>string<sp/>with<sp/>the<sp/>characters<sp/>in<sp/>:mini:`String`<sp/>reversed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello<sp/>world&quot;:reverse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Reversed<sp/>=<sp/>snew(Length<sp/>+<sp/>1),<sp/>*End<sp/>=<sp/>Reversed<sp/>+<sp/>Length;</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*S<sp/>=<sp/>ml_string_value(Args[0]),<sp/>*T<sp/>=<sp/>S,<sp/>*U<sp/>=<sp/>S<sp/>+<sp/>Length;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(++T<sp/>&lt;<sp/>U)<sp/>{</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--End;</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!utf8_is_continuation(*T))<sp/>{</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*E<sp/>=<sp/>End;<sp/>S<sp/>!=<sp/>T;)<sp/>*E++<sp/>=<sp/>*S++;</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(End<sp/>-<sp/>1,<sp/>S,<sp/>T<sp/>-<sp/>S);</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/>Reversed[Length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Reversed,<sp/>Length);</highlight></codeline>
<codeline lineno="1717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compares<sp/>:mini:`A`<sp/>and<sp/>:mini:`B`<sp/>lexicographically<sp/>and<sp/>returns<sp/>:mini:`-1`,<sp/>:mini:`0`<sp/>or<sp/>:mini:`1`<sp/>respectively.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello&quot;<sp/>&lt;&gt;<sp/>&quot;World&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;World&quot;<sp/>&lt;&gt;<sp/>&quot;Hello&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello&quot;<sp/>&lt;&gt;<sp/>&quot;Hello&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;abcd&quot;<sp/>&lt;&gt;<sp/>&quot;abc&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;abc&quot;<sp/>&lt;&gt;<sp/>&quot;abcd&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*StringA<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*StringB<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LengthA<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LengthB<sp/>=<sp/>ml_string_length(Args[1]);</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LengthA<sp/>&lt;<sp/>LengthB)<sp/>{</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Compare<sp/>=<sp/>memcmp(StringA,<sp/>StringB,<sp/>LengthA);</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Compare<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)One;</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)NegOne;</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LengthA<sp/>&gt;<sp/>LengthB)<sp/>{</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Compare<sp/>=<sp/>memcmp(StringA,<sp/>StringB,<sp/>LengthB);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Compare<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)NegOne;</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)One;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Compare<sp/>=<sp/>memcmp(StringA,<sp/>StringB,<sp/>LengthA);</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Compare<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)NegOne;</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Compare<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)One;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Zero;</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_comp_method_string_string(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="1750"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLStringT,<sp/>MLStringT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1751"><highlight class="preprocessor"></highlight><highlight class="comment">/*&gt;string|nil</highlight></codeline>
<codeline lineno="1752"><highlight class="comment">//<sp/>Returns<sp/>:mini:`Arg/2`<sp/>if<sp/>:mini:`Arg/1<sp/>NAME<sp/>Arg/2`<sp/>and<sp/>:mini:`nil`<sp/>otherwise.</highlight></codeline>
<codeline lineno="1753"><highlight class="comment">//$=<sp/>&quot;Hello&quot;<sp/>NAME<sp/>&quot;World&quot;</highlight></codeline>
<codeline lineno="1754"><highlight class="comment">//$=<sp/>&quot;World&quot;<sp/>NAME<sp/>&quot;Hello&quot;</highlight></codeline>
<codeline lineno="1755"><highlight class="comment">//$=<sp/>&quot;Hello&quot;<sp/>NAME<sp/>&quot;Hello&quot;</highlight></codeline>
<codeline lineno="1756"><highlight class="comment">//$=<sp/>&quot;abcd&quot;<sp/>NAME<sp/>&quot;abc&quot;</highlight></codeline>
<codeline lineno="1757"><highlight class="comment">//$=<sp/>&quot;abc&quot;<sp/>NAME<sp/>&quot;abcd&quot;</highlight></codeline>
<codeline lineno="1758"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="1759"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>const<sp/>char<sp/>*StringA<sp/>=<sp/>ml_string_value(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="1760"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>const<sp/>char<sp/>*StringB<sp/>=<sp/>ml_string_value(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="1761"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>LengthA<sp/>=<sp/>ml_string_length(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="1762"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>LengthB<sp/>=<sp/>ml_string_length(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="1763"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Compare;<sp/>\</highlight></codeline>
<codeline lineno="1764"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(LengthA<sp/>&lt;<sp/>LengthB)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1765"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compare<sp/>=<sp/>memcmp(StringA,<sp/>StringB,<sp/>LengthA)<sp/>?:<sp/>-1;<sp/>\</highlight></codeline>
<codeline lineno="1766"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(LengthA<sp/>&gt;<sp/>LengthB)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1767"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compare<sp/>=<sp/>memcmp(StringA,<sp/>StringB,<sp/>LengthB)<sp/>?:<sp/>1;<sp/>\</highlight></codeline>
<codeline lineno="1768"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1769"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compare<sp/>=<sp/>memcmp(StringA,<sp/>StringB,<sp/>LengthA);<sp/>\</highlight></codeline>
<codeline lineno="1770"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1771"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>Compare<sp/>SYMBOL<sp/>0<sp/>?<sp/>Args[1]<sp/>:<sp/>MLNil;<sp/>\</highlight></codeline>
<codeline lineno="1772"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal">ml_comp_method_string_string(=,<sp/>==)</highlight></codeline>
<codeline lineno="1775"><highlight class="normal">ml_comp_method_string_string(!=,<sp/>!=)</highlight></codeline>
<codeline lineno="1776"><highlight class="normal">ml_comp_method_string_string(&lt;,<sp/>&lt;)</highlight></codeline>
<codeline lineno="1777"><highlight class="normal">ml_comp_method_string_string(&gt;,<sp/>&gt;)</highlight></codeline>
<codeline lineno="1778"><highlight class="normal">ml_comp_method_string_string(&lt;=,<sp/>&lt;=)</highlight></codeline>
<codeline lineno="1779"><highlight class="normal">ml_comp_method_string_string(&gt;=,<sp/>&gt;=)</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal">ML_METHOD(&quot;min&quot;,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`min(A,<sp/>B)`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello&quot;:min(&quot;World&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;World&quot;:min(&quot;Hello&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;abcd&quot;:min(&quot;abc&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;abc&quot;:min(&quot;abcd&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*StringA<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*StringB<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LengthA<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LengthB<sp/>=<sp/>ml_string_length(Args[1]);</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LengthA<sp/>&lt;<sp/>LengthB)<sp/>{</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Compare<sp/>=<sp/>memcmp(StringA,<sp/>StringB,<sp/>LengthA);</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Compare<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LengthA<sp/>&gt;<sp/>LengthB)<sp/>{</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Compare<sp/>=<sp/>memcmp(StringA,<sp/>StringB,<sp/>LengthB);</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Compare<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Compare<sp/>=<sp/>memcmp(StringA,<sp/>StringB,<sp/>LengthA);</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Compare<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Compare<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;max&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`max(A,<sp/>B)`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello&quot;:max(&quot;World&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;World&quot;:max(&quot;Hello&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;abcd&quot;:max(&quot;abc&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;abc&quot;:max(&quot;abcd&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*StringA<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*StringB<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LengthA<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LengthB<sp/>=<sp/>ml_string_length(Args[1]);</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LengthA<sp/>&lt;<sp/>LengthB)<sp/>{</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Compare<sp/>=<sp/>memcmp(StringA,<sp/>StringB,<sp/>LengthA);</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Compare<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LengthA<sp/>&gt;<sp/>LengthB)<sp/>{</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Compare<sp/>=<sp/>memcmp(StringA,<sp/>StringB,<sp/>LengthB);</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Compare<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Compare<sp/>=<sp/>memcmp(StringA,<sp/>StringB,<sp/>LengthA);</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Compare<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Compare<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SWAP(A,<sp/>B)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1840"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typeof(A)<sp/>Temp<sp/>=<sp/>A;<sp/>\</highlight></codeline>
<codeline lineno="1841"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>A<sp/>=<sp/>B;<sp/>\</highlight></codeline>
<codeline lineno="1842"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>B<sp/>=<sp/>Temp;<sp/>\</highlight></codeline>
<codeline lineno="1843"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;~&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>edit<sp/>distance<sp/>between<sp/>:mini:`A`<sp/>and<sp/>:mini:`B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;cake&quot;<sp/>~<sp/>&quot;cat&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;yell&quot;<sp/>~<sp/>&quot;hello&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;say&quot;<sp/>~<sp/>&quot;goodbye&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;goodbye&quot;<sp/>~<sp/>&quot;say&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;λ:😀<sp/>→<sp/>Y&quot;<sp/>~<sp/>&quot;λ:X<sp/>→<sp/>😺&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*CharsA,<sp/>*CharsB;</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LenA<sp/>=<sp/>utf8_strlen(Args[0]);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LenB<sp/>=<sp/>utf8_strlen(Args[1]);</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LenA<sp/>&lt;<sp/>LenB)<sp/>{</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SWAP(LenA,<sp/>LenB);</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharsA<sp/>=<sp/>alloca((LenA<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t));</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>utf8_expand(ml_string_value(Args[1]),<sp/>CharsA);</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharsB<sp/>=<sp/>alloca((LenB<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t));</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>utf8_expand(ml_string_value(Args[0]),<sp/>CharsB);</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharsA<sp/>=<sp/>alloca((LenA<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t));</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>utf8_expand(ml_string_value(Args[0]),<sp/>CharsA);</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharsB<sp/>=<sp/>alloca((LenB<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t));</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>utf8_expand(ml_string_value(Args[1]),<sp/>CharsB);</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Row0<sp/>=<sp/>alloca((LenB<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Row1<sp/>=<sp/>alloca((LenB<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Row2<sp/>=<sp/>alloca((LenB<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Insert<sp/>=<sp/>1,<sp/>Replace<sp/>=<sp/>1,<sp/>Swap<sp/>=<sp/>1,<sp/>Delete<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>0;<sp/>J<sp/>&lt;=<sp/>LenB;<sp/>++J)<sp/>Row1[J]<sp/>=<sp/>J<sp/>*<sp/>Insert;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>PrevA<sp/>=<sp/>0,<sp/>PrevB<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>LenA;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Row2[0]<sp/>=<sp/>(I<sp/>+<sp/>1)<sp/>*<sp/>Delete;</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>0;<sp/>J<sp/>&lt;<sp/>LenB;<sp/>++J)<sp/>{</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Min<sp/>=<sp/>Row1[J]<sp/>+<sp/>Replace<sp/>*<sp/>(CharsA[I]<sp/>!=<sp/>CharsB[J]);</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>J<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>PrevA<sp/>==<sp/>CharsB[J]<sp/>&amp;&amp;<sp/>CharsA[I]<sp/>==<sp/>PrevB<sp/>&amp;&amp;<sp/>Min<sp/>&gt;<sp/>Row0[J<sp/>-<sp/>1]<sp/>+<sp/>Swap)<sp/>{</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Min<sp/>=<sp/>Row0[J<sp/>-<sp/>1]<sp/>+<sp/>Swap;</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Min<sp/>&gt;<sp/>Row1[J<sp/>+<sp/>1]<sp/>+<sp/>Delete)<sp/>Min<sp/>=<sp/>Row1[J<sp/>+<sp/>1]<sp/>+<sp/>Delete;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Min<sp/>&gt;<sp/>Row2[J]<sp/>+<sp/>Insert)<sp/>Min<sp/>=<sp/>Row2[J]<sp/>+<sp/>Insert;</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Row2[J<sp/>+<sp/>1]<sp/>=<sp/>Min;</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrevB<sp/>=<sp/>CharsB[J];</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Dummy<sp/>=<sp/>Row0;</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Row0<sp/>=<sp/>Row1;</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Row1<sp/>=<sp/>Row2;</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Row2<sp/>=<sp/>Dummy;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrevA<sp/>=<sp/>CharsA[I];</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Row1[LenB]);</highlight></codeline>
<codeline lineno="1895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;~&gt;&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>asymmetric<sp/>edit<sp/>distance<sp/>from<sp/>:mini:`A`<sp/>to<sp/>:mini:`B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;cake&quot;<sp/>~&gt;<sp/>&quot;cat&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;yell&quot;<sp/>~&gt;<sp/>&quot;hello&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;say&quot;<sp/>~&gt;<sp/>&quot;goodbye&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;goodbye&quot;<sp/>~&gt;<sp/>&quot;say&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;λ:😀<sp/>→<sp/>Y&quot;<sp/>~&gt;<sp/>&quot;λ:X<sp/>→<sp/>😺&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LenA<sp/>=<sp/>utf8_strlen(Args[0]);</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LenB<sp/>=<sp/>utf8_strlen(Args[1]);</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*CharsA<sp/>=<sp/>alloca((LenA<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t));</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/>utf8_expand(ml_string_value(Args[0]),<sp/>CharsA);</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*CharsB<sp/>=<sp/>alloca((LenB<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t));</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/>utf8_expand(ml_string_value(Args[1]),<sp/>CharsB);</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Row0<sp/>=<sp/>alloca((LenB<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Row1<sp/>=<sp/>alloca((LenB<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Row2<sp/>=<sp/>alloca((LenB<sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Best<sp/>=<sp/>LenB;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Insert<sp/>=<sp/>1,<sp/>Replace<sp/>=<sp/>1,<sp/>Swap<sp/>=<sp/>1,<sp/>Delete<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>0;<sp/>J<sp/>&lt;=<sp/>LenB;<sp/>++J)<sp/>Row1[J]<sp/>=<sp/>J<sp/>*<sp/>Insert;</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>PrevA<sp/>=<sp/>0,<sp/>PrevB<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>2<sp/>*<sp/>LenB;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Row2[0]<sp/>=<sp/>(I<sp/>+<sp/>1)<sp/>*<sp/>Delete;</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>CharA<sp/>=<sp/>I<sp/>&lt;<sp/>LenA<sp/>?<sp/>CharsA[I]<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>0;<sp/>J<sp/>&lt;<sp/>LenB;<sp/>++J)<sp/>{</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Min<sp/>=<sp/>Row1[J]<sp/>+<sp/>Replace<sp/>*<sp/>(CharA<sp/>!=<sp/>CharsB[J]);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>J<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>PrevA<sp/>==<sp/>CharsB[J]<sp/>&amp;&amp;<sp/>CharA<sp/>==<sp/>PrevB<sp/>&amp;&amp;<sp/>Min<sp/>&gt;<sp/>Row0[J<sp/>-<sp/>1]<sp/>+<sp/>Swap)<sp/>{</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Min<sp/>=<sp/>Row0[J<sp/>-<sp/>1]<sp/>+<sp/>Swap;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Min<sp/>&gt;<sp/>Row1[J<sp/>+<sp/>1]<sp/>+<sp/>Delete)<sp/>Min<sp/>=<sp/>Row1[J<sp/>+<sp/>1]<sp/>+<sp/>Delete;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Min<sp/>&gt;<sp/>Row2[J]<sp/>+<sp/>Insert)<sp/>Min<sp/>=<sp/>Row2[J]<sp/>+<sp/>Insert;</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Row2[J<sp/>+<sp/>1]<sp/>=<sp/>Min;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrevB<sp/>=<sp/>CharsB[J];</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Dummy<sp/>=<sp/>Row0;</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Row0<sp/>=<sp/>Row1;</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Row1<sp/>=<sp/>Row2;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Row2<sp/>=<sp/>Dummy;</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrevA<sp/>=<sp/>CharA;</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Row1[LenB]<sp/>&lt;<sp/>Best)<sp/>Best<sp/>=<sp/>Row1[LenB];</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Best);</highlight></codeline>
<codeline lineno="1941"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"></highlight><highlight class="comment">//&lt;Pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight><highlight class="comment">//&gt;list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>list<sp/>of<sp/>substrings<sp/>from<sp/>:mini:`String`<sp/>by<sp/>splitting<sp/>around<sp/>occurences<sp/>of<sp/>:mini:`Pattern`.<sp/>Adjacent<sp/>occurences<sp/>of<sp/>:mini:`Pattern`<sp/>do<sp/>not<sp/>create<sp/>empty<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/><sp/>as<sp/>he<sp/>slept&quot;<sp/>/<sp/>&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;2022/03/08&quot;<sp/>/<sp/>&quot;/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Results<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Pattern<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>strlen(Pattern);</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>pattern<sp/>used<sp/>in<sp/>split&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Next<sp/>=<sp/>strstr(Subject,<sp/>Pattern);</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Next<sp/>==<sp/>Subject)<sp/>{</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Subject<sp/>+=<sp/>Length;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next<sp/>=<sp/>strstr(Subject,<sp/>Pattern);</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Subject[0])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Results;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Next)<sp/>{</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>MatchLength<sp/>=<sp/>Next<sp/>-<sp/>Subject;</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Match<sp/>=<sp/>snew(MatchLength<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Match,<sp/>Subject,<sp/>MatchLength);</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Match[MatchLength]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Results,<sp/>ml_string(Match,<sp/>MatchLength));</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Subject<sp/>=<sp/>Next<sp/>+<sp/>Length;</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Results,<sp/>ml_string(Subject,<sp/>strlen(Subject)));</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Results;</highlight></codeline>
<codeline lineno="1975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLRegexT)<sp/>{</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight><highlight class="comment">//&lt;Pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight><highlight class="comment">//&gt;list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>list<sp/>of<sp/>substrings<sp/>from<sp/>:mini:`String`<sp/>by<sp/>splitting<sp/>around<sp/>occurences<sp/>of<sp/>:mini:`Pattern`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>:mini:`Pattern`<sp/>contains<sp/>subgroups<sp/>then<sp/>only<sp/>the<sp/>subgroup<sp/>matches<sp/>are<sp/>removed<sp/>from<sp/>the<sp/>output<sp/>substrings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1983"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;2022/03/08&quot;<sp/>/<sp/>r&quot;[/-]&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;2022-03-08&quot;<sp/>/<sp/>r&quot;[/-]&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Results<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref><sp/>*Pattern<sp/>=<sp/>(<ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumSubs<sp/>=<sp/>Pattern-&gt;Value-&gt;re_nsub;</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/>regoff_t<sp/>Edge<sp/>=<sp/>0,<sp/>Done<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/>regmatch_t<sp/>Matches[NumSubs<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regnexec(Pattern-&gt;Value,<sp/>Subject<sp/>+<sp/>Done,<sp/>Length<sp/>-<sp/>Done,<sp/>NumSubs<sp/>+<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regexec(Pattern-&gt;Value,<sp/>Subject<sp/>+<sp/>Done,<sp/>NumSubs<sp/>+<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_NOMATCH:<sp/>{</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&gt;<sp/>Edge)<sp/>ml_list_put(Results,<sp/>ml_string(Subject<sp/>+<sp/>Edge,<sp/>Length<sp/>-<sp/>Edge));</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Results;</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_ESPACE:<sp/>{</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ErrorSize<sp/>=<sp/>regerror(REG_ESPACE,<sp/>Pattern-&gt;Value,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ErrorMessage<sp/>=<sp/>snew(ErrorSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regerror(REG_ESPACE,<sp/>Pattern-&gt;Value,<sp/>ErrorMessage,<sp/>ErrorSize);</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ErrorMessage);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Matches[0].rm_eo<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>match<sp/>while<sp/>splitting<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NumSubs)<sp/>{</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;=<sp/>NumSubs;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regoff_t<sp/>Start<sp/>=<sp/>Matches[I].rm_so;</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Done<sp/>&gt;<sp/>Edge)<sp/>ml_list_put(Results,<sp/>ml_string(Subject<sp/>+<sp/>Edge,<sp/>Done<sp/>-<sp/>Edge));</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Edge<sp/>=<sp/>Done<sp/>+<sp/>Matches[I].rm_eo;</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Results,<sp/>ml_string(Subject<sp/>+<sp/>Edge,<sp/>(Done<sp/>+<sp/>Start)<sp/>-<sp/>Edge));</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Edge<sp/>=<sp/>Done<sp/>+<sp/>Matches[I].rm_eo;</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regoff_t<sp/>Start<sp/>=<sp/>Matches[0].rm_so;</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Done<sp/>&gt;<sp/>Edge)<sp/>ml_list_put(Results,<sp/>ml_string(Subject<sp/>+<sp/>Edge,<sp/>Done<sp/>-<sp/>Edge));</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Edge<sp/>=<sp/>Done<sp/>+<sp/>Matches[0].rm_eo;</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Results,<sp/>ml_string(Subject<sp/>+<sp/>Edge,<sp/>(Done<sp/>+<sp/>Start)<sp/>-<sp/>Edge));</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Edge<sp/>=<sp/>Done<sp/>+<sp/>Matches[0].rm_eo;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Done<sp/>+=<sp/>Matches[0].rm_eo;</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Results;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLRegexT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"></highlight><highlight class="comment">//&lt;Pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight><highlight class="comment">//&lt;Index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight><highlight class="comment">//&gt;list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>list<sp/>of<sp/>substrings<sp/>from<sp/>:mini:`String`<sp/>by<sp/>splitting<sp/>around<sp/>occurences<sp/>of<sp/>:mini:`Pattern`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Only<sp/>the<sp/>:mini:`Index`<sp/>subgroup<sp/>matches<sp/>are<sp/>removed<sp/>from<sp/>the<sp/>output<sp/>substrings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2046"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;&lt;A&gt;-&lt;B&gt;-&lt;C&gt;&quot;<sp/>/<sp/>(r&quot;&gt;(-)&lt;&quot;,<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Results<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref><sp/>*Pattern<sp/>=<sp/>(<ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>ml_integer_value(Args[2]);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;<sp/>0<sp/>||<sp/>Index<sp/>&gt;<sp/>Pattern-&gt;Value-&gt;re_nsub)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>regex<sp/>group&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/>regoff_t<sp/>Edge<sp/>=<sp/>0,<sp/>Done<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/>regmatch_t<sp/>Matches[Index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regnexec(Pattern-&gt;Value,<sp/>Subject<sp/>+<sp/>Done,<sp/>Length<sp/>-<sp/>Done,<sp/>Index<sp/>+<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regexec(Pattern-&gt;Value,<sp/>Subject<sp/>+<sp/>Done,<sp/>Index<sp/>+<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_NOMATCH:<sp/>{</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&gt;<sp/>Edge)<sp/>ml_list_put(Results,<sp/>ml_string(Subject<sp/>+<sp/>Edge,<sp/>Length<sp/>-<sp/>Edge));</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Results;</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_ESPACE:<sp/>{</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ErrorSize<sp/>=<sp/>regerror(REG_ESPACE,<sp/>Pattern-&gt;Value,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ErrorMessage<sp/>=<sp/>snew(ErrorSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regerror(REG_ESPACE,<sp/>Pattern-&gt;Value,<sp/>ErrorMessage,<sp/>ErrorSize);</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ErrorMessage);</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Matches[0].rm_eo<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>match<sp/>while<sp/>splitting<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regoff_t<sp/>Start<sp/>=<sp/>Matches[Index].rm_so;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Done<sp/>&gt;<sp/>Edge)<sp/>ml_list_put(Results,<sp/>ml_string(Subject<sp/>+<sp/>Edge,<sp/>Done<sp/>-<sp/>Edge));</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Edge<sp/>=<sp/>Done<sp/>+<sp/>Matches[Index].rm_eo;</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Results,<sp/>ml_string(Subject<sp/>+<sp/>Edge,<sp/>(Done<sp/>+<sp/>Start)<sp/>-<sp/>Edge));</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Edge<sp/>=<sp/>Done<sp/>+<sp/>Matches[Index].rm_eo;</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Done<sp/>+=<sp/>Matches[0].rm_eo;</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Results;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;/*&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"></highlight><highlight class="comment">//&lt;Pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight><highlight class="comment">//&gt;tuple[string,<sp/>string]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Splits<sp/>:mini:`String`<sp/>at<sp/>the<sp/>first<sp/>occurence<sp/>of<sp/>:mini:`Pattern`<sp/>and<sp/>returns<sp/>the<sp/>two<sp/>substrings<sp/>in<sp/>a<sp/>tuple.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;2022/03/08&quot;<sp/>/*<sp/>&quot;/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Subject<sp/>+<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Pattern<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>strlen(Pattern);</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Results<sp/>=<sp/>ml_tuple(2);</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Next<sp/>=<sp/>strstr(Subject,<sp/>Pattern);</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Next)<sp/>{</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Results,<sp/>1,<sp/>ml_string(Subject,<sp/>Next<sp/>-<sp/>Subject));</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next<sp/>+=<sp/>Length;</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Results,<sp/>2,<sp/>ml_string(Next,<sp/>End<sp/>-<sp/>Next));</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Results,<sp/>1,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Results,<sp/>2,<sp/>ml_cstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Results;</highlight></codeline>
<codeline lineno="2110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;/*&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLRegexT)<sp/>{</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"></highlight><highlight class="comment">//&lt;Pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight><highlight class="comment">//&gt;tuple[string,<sp/>string]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Splits<sp/>:mini:`String`<sp/>at<sp/>the<sp/>first<sp/>occurence<sp/>of<sp/>:mini:`Pattern`<sp/>and<sp/>returns<sp/>the<sp/>two<sp/>substrings<sp/>in<sp/>a<sp/>tuple.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;2022/03/08&quot;<sp/>/*<sp/>r&quot;[/-]&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;2022-03-08&quot;<sp/>/*<sp/>r&quot;[/-]&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SubjectLength<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref><sp/>*Pattern<sp/>=<sp/>(<ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Results<sp/>=<sp/>ml_tuple(2);</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/>regmatch_t<sp/>Matches[2];</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regnexec(Pattern-&gt;Value,<sp/>Subject,<sp/>SubjectLength,<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regexec(Pattern-&gt;Value,<sp/>Subject,<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_NOMATCH:</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Results,<sp/>1,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Results,<sp/>2,<sp/>ml_cstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Results;</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_ESPACE:<sp/>{</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ErrorSize<sp/>=<sp/>regerror(REG_ESPACE,<sp/>Pattern-&gt;Value,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ErrorMessage<sp/>=<sp/>snew(ErrorSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regerror(REG_ESPACE,<sp/>Pattern-&gt;Value,<sp/>ErrorMessage,<sp/>ErrorSize);</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ErrorMessage);</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Results,<sp/>1,<sp/>ml_string(Subject,<sp/>Matches[0].rm_so));</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Next<sp/>=<sp/>Subject<sp/>+<sp/>Matches[0].rm_eo;</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Results,<sp/>2,<sp/>ml_string(Next,<sp/>Subject<sp/>+<sp/>SubjectLength<sp/>-<sp/>Next));</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Results;</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;*/&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"></highlight><highlight class="comment">//&lt;Pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight><highlight class="comment">//&gt;tuple[string,<sp/>string]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Splits<sp/>:mini:`String`<sp/>at<sp/>the<sp/>last<sp/>occurence<sp/>of<sp/>:mini:`Pattern`<sp/>and<sp/>returns<sp/>the<sp/>two<sp/>substrings<sp/>in<sp/>a<sp/>tuple.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;2022/03/08&quot;<sp/>*/<sp/>&quot;/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Subject<sp/>+<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Pattern<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>strlen(Pattern);</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Results<sp/>=<sp/>ml_tuple(2);</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Next<sp/>=<sp/>End<sp/>-<sp/>Length;</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Next<sp/>&gt;=<sp/>Subject)<sp/>{</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memcmp(Next,<sp/>Pattern,<sp/>Length))<sp/>{</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Results,<sp/>1,<sp/>ml_string(Subject,<sp/>Next<sp/>-<sp/>Subject));</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next<sp/>+=<sp/>Length;</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Results,<sp/>2,<sp/>ml_string(Next,<sp/>End<sp/>-<sp/>Next));</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Results;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Next;</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_tuple_set(Results,<sp/>1,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_tuple_set(Results,<sp/>2,<sp/>ml_cstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Results;</highlight></codeline>
<codeline lineno="2172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;*/&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLRegexT)<sp/>{</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"></highlight><highlight class="comment">//&lt;Pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"></highlight><highlight class="comment">//&gt;tuple[string,<sp/>string]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Splits<sp/>:mini:`String`<sp/>at<sp/>the<sp/>last<sp/>occurence<sp/>of<sp/>:mini:`Pattern`<sp/>and<sp/>returns<sp/>the<sp/>two<sp/>substrings<sp/>in<sp/>a<sp/>tuple.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;2022/03/08&quot;<sp/>*/<sp/>r&quot;[/-]&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;2022-03-08&quot;<sp/>*/<sp/>r&quot;[/-]&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Subject<sp/>+<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref><sp/>*Pattern<sp/>=<sp/>(<ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Results<sp/>=<sp/>ml_tuple(2);</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/>regmatch_t<sp/>Matches[2];</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Next<sp/>=<sp/>End<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NextLength<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Next<sp/>&gt;=<sp/>Subject)<sp/>{</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regnexec(Pattern-&gt;Value,<sp/>Next,<sp/>NextLength,<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regexec(Pattern-&gt;Value,<sp/>Next,<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_NOMATCH:</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Next;</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++NextLength;</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_ESPACE:<sp/>{</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ErrorSize<sp/>=<sp/>regerror(REG_ESPACE,<sp/>Pattern-&gt;Value,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ErrorMessage<sp/>=<sp/>snew(ErrorSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regerror(REG_ESPACE,<sp/>Pattern-&gt;Value,<sp/>ErrorMessage,<sp/>ErrorSize);</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ErrorMessage);</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Results,<sp/>1,<sp/>ml_string(Subject,<sp/>Next<sp/>-<sp/>Subject));</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next<sp/>+=<sp/>Matches[0].rm_eo;</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Results,<sp/>2,<sp/>ml_string(Next,<sp/>End<sp/>-<sp/>Next));</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Results;</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_tuple_set(Results,<sp/>1,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_tuple_set(Results,<sp/>2,<sp/>ml_cstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Results;</highlight></codeline>
<codeline lineno="2215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"></highlight></codeline>
<codeline lineno="2217"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;escape&quot;</highlight><highlight class="normal">,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`String`<sp/>with<sp/>white<sp/>space,<sp/>quotes<sp/>and<sp/>backslashes<sp/>replaced<sp/>by<sp/>escape<sp/>sequences.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;\t\&quot;Text\&quot;\r\n&quot;:escape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Start;</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>--N<sp/>&gt;=<sp/>0;<sp/>++End)<sp/>{</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*End)<sp/>{</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Start,<sp/>End<sp/>-<sp/>Start);</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\r&quot;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Start<sp/>=<sp/>End<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Start,<sp/>End<sp/>-<sp/>Start);</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\n&quot;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Start<sp/>=<sp/>End<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Start,<sp/>End<sp/>-<sp/>Start);</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\t&quot;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Start<sp/>=<sp/>End<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\e&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Start,<sp/>End<sp/>-<sp/>Start);</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\e&quot;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Start<sp/>=<sp/>End<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Start,<sp/>End<sp/>-<sp/>Start);</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\\&apos;&quot;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Start<sp/>=<sp/>End<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Start,<sp/>End<sp/>-<sp/>Start);</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\\&quot;&quot;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Start<sp/>=<sp/>End<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Start,<sp/>End<sp/>-<sp/>Start);</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\\\&quot;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Start<sp/>=<sp/>End<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Start,<sp/>End<sp/>-<sp/>Start);</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\0&quot;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Start<sp/>=<sp/>End<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Start,<sp/>End<sp/>-<sp/>Start);</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer_get_value(Buffer);</highlight></codeline>
<codeline lineno="2274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;contains&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"></highlight><highlight class="comment">//&lt;Haystack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2278"><highlight class="normal"></highlight><highlight class="comment">//&lt;Needle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2279"><highlight class="normal"></highlight><highlight class="comment">//&gt;string|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>:mini:`Haystack`<sp/>if<sp/>it<sp/>contains<sp/>:mini:`Pattern`<sp/>or<sp/>:mini:`nil`<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2281"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:contains(&quot;cat&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:contains(&quot;dog&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Haystack<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Needle<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strstr(Haystack,<sp/>Needle)<sp/>?<sp/>Args[0]<sp/>:<sp/>MLNil;</highlight></codeline>
<codeline lineno="2286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"></highlight></codeline>
<codeline lineno="2288"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;find&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"></highlight><highlight class="comment">//&lt;Haystack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight><highlight class="comment">//&lt;Needle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>index<sp/>of<sp/>the<sp/>first<sp/>occurence<sp/>of<sp/>:mini:`Needle`<sp/>in<sp/>:mini:`Haystack`,<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>no<sp/>occurence<sp/>is<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find(&quot;cat&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find(&quot;dog&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Haystack<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Needle<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Match<sp/>=<sp/>strstr(Haystack,<sp/>Needle);</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Match)<sp/>{</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(1<sp/>+<sp/>utf8_position(Haystack,<sp/>Match));</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;find2&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight><highlight class="comment">//&lt;Haystack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"></highlight><highlight class="comment">//&lt;Needle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight><highlight class="comment">//&gt;tuple[integer,string]|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`(Index,<sp/>Needle)`<sp/>where<sp/>:mini:`Index`<sp/>is<sp/>the<sp/>first<sp/>occurence<sp/>of<sp/>:mini:`Needle`<sp/>in<sp/>:mini:`Haystack`,<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>no<sp/>occurence<sp/>is<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2310"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find2(&quot;cat&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find2(&quot;dog&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Haystack<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Needle<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Match<sp/>=<sp/>strstr(Haystack,<sp/>Needle);</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Match)<sp/>{</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_tuplev(2,<sp/>ml_integer(1<sp/>+<sp/>utf8_position(Haystack,<sp/>Match)),<sp/>Args[1]);</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*utf8_skip(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*S,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>P)<sp/>{</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*S)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!utf8_is_continuation(*S)<sp/>&amp;&amp;<sp/>(--P<sp/>==<sp/>0))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++S;</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>S;</highlight></codeline>
<codeline lineno="2329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"></highlight></codeline>
<codeline lineno="2331"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;find&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"></highlight><highlight class="comment">//&lt;Haystack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2333"><highlight class="normal"></highlight><highlight class="comment">//&lt;Needle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight><highlight class="comment">//&lt;Start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>index<sp/>of<sp/>the<sp/>first<sp/>occurence<sp/>of<sp/>:mini:`Needle`<sp/>in<sp/>:mini:`Haystack`<sp/>at<sp/>or<sp/>after<sp/>:mini:`Start`,<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>no<sp/>occurence<sp/>is<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find(&quot;s&quot;,<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find(&quot;s&quot;,<sp/>10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find(&quot;s&quot;,<sp/>-6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Haystack<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>HaystackLength<sp/>=<sp/>utf8_strlen(Args[0]);</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Needle<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Start<sp/>=<sp/>ml_integer_value_fast(Args[2]);</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&lt;=<sp/>0)<sp/>Start<sp/>+=<sp/>HaystackLength<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&gt;<sp/>HaystackLength)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/>Haystack<sp/>=<sp/>utf8_skip(Haystack,<sp/>Start);</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Match<sp/>=<sp/>strstr(Haystack,<sp/>Needle);</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Match)<sp/>{</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Start<sp/>+<sp/>utf8_position(Haystack,<sp/>Match));</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;find2&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"></highlight><highlight class="comment">//&lt;Haystack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight><highlight class="comment">//&lt;Needle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight><highlight class="comment">//&lt;Start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"></highlight><highlight class="comment">//&gt;tuple[integer,string]|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`(Index,<sp/>Needle)`<sp/>where<sp/>:mini:`Index`<sp/>is<sp/>the<sp/>first<sp/>occurence<sp/>of<sp/>:mini:`Needle`<sp/>in<sp/>:mini:`Haystack`<sp/>at<sp/>or<sp/>after<sp/>:mini:`Start`,<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>no<sp/>occurence<sp/>is<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find2(&quot;s&quot;,<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2363"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find2(&quot;s&quot;,<sp/>10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2364"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find2(&quot;s&quot;,<sp/>-6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Haystack<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>HaystackLength<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Needle<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Start<sp/>=<sp/>ml_integer_value_fast(Args[2]);</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&lt;=<sp/>0)<sp/>Start<sp/>+=<sp/>HaystackLength<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&gt;<sp/>HaystackLength)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/>Haystack<sp/>=<sp/>utf8_skip(Haystack,<sp/>Start);</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Match<sp/>=<sp/>strstr(Haystack,<sp/>Needle);</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Match)<sp/>{</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_tuplev(2,<sp/>ml_integer(Start<sp/>+<sp/>utf8_position(Haystack,<sp/>Match)),<sp/>Args[1]);</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;contains&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLRegexT)<sp/>{</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"></highlight><highlight class="comment">//&lt;Haystack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2383"><highlight class="normal"></highlight><highlight class="comment">//&lt;Pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="normal"></highlight><highlight class="comment">//&gt;string|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>:mini:`Haystack`<sp/>if<sp/>it<sp/>contains<sp/>:mini:`Pattern`<sp/>or<sp/>:mini:`nil`<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:contains(r&quot;[a-z]{3}&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2387"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:contains(r&quot;[0-9]+&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Haystack<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/>regex_t<sp/>*Regex<sp/>=<sp/>ml_regex_value(Args[1]);</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/>regmatch_t<sp/>Matches[1];</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regnexec(Regex,<sp/>Haystack,<sp/>Length,<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regexec(Regex,<sp/>Haystack,<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_NOMATCH:</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_ESPACE:<sp/>{</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ErrorSize<sp/>=<sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ErrorMessage<sp/>=<sp/>snew(ErrorSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>ErrorMessage,<sp/>ErrorSize);</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ErrorMessage);</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="2407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;find&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLRegexT)<sp/>{</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"></highlight><highlight class="comment">//&lt;Haystack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight><highlight class="comment">//&lt;Pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>index<sp/>of<sp/>the<sp/>first<sp/>occurence<sp/>of<sp/>:mini:`Pattern`<sp/>in<sp/>:mini:`Haystack`,<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>no<sp/>occurence<sp/>is<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find(r&quot;[a-z]{3}&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2415"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find(r&quot;[0-9]+&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Haystack<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/>regex_t<sp/>*Regex<sp/>=<sp/>ml_regex_value(Args[1]);</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/>regmatch_t<sp/>Matches[1];</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regnexec(Regex,<sp/>Haystack,<sp/>Length,<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regexec(Regex,<sp/>Haystack,<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_NOMATCH:</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_ESPACE:<sp/>{</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ErrorSize<sp/>=<sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ErrorMessage<sp/>=<sp/>snew(ErrorSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>ErrorMessage,<sp/>ErrorSize);</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ErrorMessage);</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(1<sp/>+<sp/>utf8_position(Haystack,<sp/>Haystack<sp/>+<sp/>Matches-&gt;rm_so));</highlight></codeline>
<codeline lineno="2435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;find2&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLRegexT)<sp/>{</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight><highlight class="comment">//&lt;Haystack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"></highlight><highlight class="comment">//&lt;Pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2440"><highlight class="normal"></highlight><highlight class="comment">//&gt;tuple[integer,string]|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`(Index,<sp/>Match)`<sp/>where<sp/>:mini:`Index`<sp/>is<sp/>the<sp/>first<sp/>occurence<sp/>of<sp/>:mini:`Pattern`<sp/>in<sp/>:mini:`Haystack`,<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>no<sp/>occurence<sp/>is<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find2(r&quot;[a-z]{3}&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find2(r&quot;[0-9]+&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Haystack<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/>regex_t<sp/>*Regex<sp/>=<sp/>ml_regex_value(Args[1]);</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/>regmatch_t<sp/>Matches[Regex-&gt;re_nsub<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regnexec(Regex,<sp/>Haystack,<sp/>Length,<sp/>Regex-&gt;re_nsub<sp/>+<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regexec(Regex,<sp/>Haystack,<sp/>Regex-&gt;re_nsub<sp/>+<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_NOMATCH:</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_ESPACE:<sp/>{</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ErrorSize<sp/>=<sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ErrorMessage<sp/>=<sp/>snew(ErrorSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>ErrorMessage,<sp/>ErrorSize);</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ErrorMessage);</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>ml_tuple(Regex-&gt;re_nsub<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_tuple_set(Result,<sp/>1,<sp/>ml_integer(1<sp/>+<sp/>utf8_position(Haystack,<sp/>Haystack<sp/>+<sp/>Matches-&gt;rm_so)));</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Regex-&gt;re_nsub<sp/>+<sp/>1;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regoff_t<sp/>Start<sp/>=<sp/>Matches[I].rm_so;</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>Matches[I].rm_eo<sp/>-<sp/>Start;</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Result,<sp/>I<sp/>+<sp/>2,<sp/>ml_string(Haystack<sp/>+<sp/>Start,<sp/>Length));</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Result,<sp/>I<sp/>+<sp/>2,<sp/>MLNil);</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="2474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;find&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLRegexT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"></highlight><highlight class="comment">//&lt;Haystack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal"></highlight><highlight class="comment">//&lt;Pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight><highlight class="comment">//&lt;Start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2481"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>index<sp/>of<sp/>the<sp/>first<sp/>occurence<sp/>of<sp/>:mini:`Pattern`<sp/>in<sp/>:mini:`Haystack`<sp/>at<sp/>or<sp/>after<sp/>:mini:`Start`,<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>no<sp/>occurence<sp/>is<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find(r&quot;s[a-z]+&quot;,<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find(r&quot;s[a-z]+&quot;,<sp/>10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find(r&quot;s[a-z]+&quot;,<sp/>-6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Haystack<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/>regex_t<sp/>*Regex<sp/>=<sp/>ml_regex_value(Args[1]);</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Start<sp/>=<sp/>ml_integer_value_fast(Args[2]);</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&lt;=<sp/>0)<sp/>Start<sp/>+=<sp/>Length<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&gt;<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Haystack2<sp/>=<sp/>utf8_skip(Haystack,<sp/>Start);</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/>Length<sp/>-=<sp/>(Haystack2<sp/>-<sp/>Haystack);</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/>regmatch_t<sp/>Matches[1];</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regnexec(Regex,<sp/>Haystack2,<sp/>Length,<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regexec(Regex,<sp/>Haystack2,<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_NOMATCH:</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_ESPACE:<sp/>{</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ErrorSize<sp/>=<sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ErrorMessage<sp/>=<sp/>snew(ErrorSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>ErrorMessage,<sp/>ErrorSize);</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ErrorMessage);</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Start<sp/>+<sp/>utf8_position(Haystack2,<sp/>Haystack2<sp/>+<sp/>Matches-&gt;rm_so));</highlight></codeline>
<codeline lineno="2510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;find2&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLRegexT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"></highlight><highlight class="comment">//&lt;Haystack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"></highlight><highlight class="comment">//&lt;Pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight><highlight class="comment">//&lt;Start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"></highlight><highlight class="comment">//&gt;tuple[integer,string]|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`(Index,<sp/>Match)`<sp/>where<sp/>:mini:`Index`<sp/>is<sp/>the<sp/>first<sp/>occurence<sp/>of<sp/>:mini:`Pattern`<sp/>in<sp/>:mini:`Haystack`<sp/>at<sp/>or<sp/>after<sp/>:mini:`Start`,<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>no<sp/>occurence<sp/>is<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find2(r&quot;s[a-z]+&quot;,<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2519"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find2(r&quot;s[a-z]+&quot;,<sp/>10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find2(r&quot;s[a-z]+&quot;,<sp/>-6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Haystack<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/>regex_t<sp/>*Regex<sp/>=<sp/>ml_regex_value(Args[1]);</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Start<sp/>=<sp/>ml_integer_value_fast(Args[2]);</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&lt;=<sp/>0)<sp/>Start<sp/>+=<sp/>Length<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&gt;<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Haystack2<sp/>=<sp/>utf8_skip(Haystack,<sp/>Start);</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/>Length<sp/>-=<sp/>(Haystack2<sp/>-<sp/>Haystack);</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/>regmatch_t<sp/>Matches[Regex-&gt;re_nsub<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regnexec(Regex,<sp/>Haystack2,<sp/>Length,<sp/>Regex-&gt;re_nsub<sp/>+<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regexec(Regex,<sp/>Haystack2,<sp/>Regex-&gt;re_nsub<sp/>+<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_NOMATCH:</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_ESPACE:<sp/>{</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ErrorSize<sp/>=<sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ErrorMessage<sp/>=<sp/>snew(ErrorSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>ErrorMessage,<sp/>ErrorSize);</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ErrorMessage);</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>ml_tuple(Regex-&gt;re_nsub<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_tuple_set(Result,<sp/>1,<sp/>ml_integer(Start<sp/>+<sp/>utf8_position(Haystack2,<sp/>Haystack2<sp/>+<sp/>Matches-&gt;rm_so)));</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Regex-&gt;re_nsub<sp/>+<sp/>1;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regoff_t<sp/>Start<sp/>=<sp/>Matches[I].rm_so;</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>Matches[I].rm_eo<sp/>-<sp/>Start;</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Result,<sp/>I<sp/>+<sp/>2,<sp/>ml_string(Haystack2<sp/>+<sp/>Start,<sp/>Length));</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Result,<sp/>I<sp/>+<sp/>2,<sp/>MLNil);</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="2557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"></highlight></codeline>
<codeline lineno="2559"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2560"><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal">ML_GENERIC_TYPE(MLTupleIntegerStringT,<sp/>MLTupleT,<sp/>MLIntegerT,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;find2&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT,<sp/>MLTupleIntegerStringT)<sp/>{</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"></highlight><highlight class="comment">//&lt;Haystack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2565"><highlight class="normal"></highlight><highlight class="comment">//&lt;Needle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"></highlight><highlight class="comment">//&lt;Start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"></highlight><highlight class="comment">//&gt;tuple[integer,string]|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2568"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`(Index,<sp/>Needle)`<sp/>where<sp/>:mini:`Index`<sp/>is<sp/>the<sp/>first<sp/>occurence<sp/>of<sp/>:mini:`Needle`<sp/>in<sp/>:mini:`Haystack`<sp/>at<sp/>or<sp/>after<sp/>:mini:`Start`,<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>no<sp/>occurence<sp/>is<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find2(&quot;s&quot;,<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2570"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find2(&quot;s&quot;,<sp/>10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find2(&quot;s&quot;,<sp/>-6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Haystack<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>HaystackLength<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Needle<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Start<sp/>=<sp/>ml_integer_value(ml_tuple_get(Args[2],<sp/>1))<sp/>+<sp/>ml_string_length(ml_tuple_get(Args[2],<sp/>2));</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&lt;=<sp/>0)<sp/>Start<sp/>+=<sp/>HaystackLength<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&gt;<sp/>HaystackLength)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/>Haystack<sp/>=<sp/>utf8_skip(Haystack,<sp/>Start);</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Match<sp/>=<sp/>strstr(Haystack,<sp/>Needle);</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Match)<sp/>{</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_tuplev(2,<sp/>ml_integer(Start<sp/>+<sp/>utf8_position(Haystack,<sp/>Match)),<sp/>Args[1]);</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;find2&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLRegexT,<sp/>MLTupleIntegerStringT)<sp/>{</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"></highlight><highlight class="comment">//&lt;Haystack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal"></highlight><highlight class="comment">//&lt;Pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2591"><highlight class="normal"></highlight><highlight class="comment">//&lt;Start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"></highlight><highlight class="comment">//&gt;tuple[integer,string]|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2593"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`(Index,<sp/>Match)`<sp/>where<sp/>:mini:`Index`<sp/>is<sp/>the<sp/>first<sp/>occurence<sp/>of<sp/>:mini:`Pattern`<sp/>in<sp/>:mini:`Haystack`<sp/>at<sp/>or<sp/>after<sp/>:mini:`Start`,<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>no<sp/>occurence<sp/>is<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2594"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find2(r&quot;s[a-z]+&quot;,<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find2(r&quot;s[a-z]+&quot;,<sp/>10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;The<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:find2(r&quot;s[a-z]+&quot;,<sp/>-6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Haystack<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/>regex_t<sp/>*Regex<sp/>=<sp/>ml_regex_value(Args[1]);</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Start<sp/>=<sp/>ml_integer_value(ml_tuple_get(Args[2],<sp/>1))<sp/>+<sp/>ml_string_length(ml_tuple_get(Args[2],<sp/>2));</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&lt;=<sp/>0)<sp/>Start<sp/>+=<sp/>Length<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&gt;<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Haystack2<sp/>=<sp/>utf8_skip(Haystack,<sp/>Start);</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/>Length<sp/>-=<sp/>(Haystack2<sp/>-<sp/>Haystack);</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/>regmatch_t<sp/>Matches[Regex-&gt;re_nsub<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regnexec(Regex,<sp/>Haystack2,<sp/>Length,<sp/>Regex-&gt;re_nsub<sp/>+<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regexec(Regex,<sp/>Haystack2,<sp/>Regex-&gt;re_nsub<sp/>+<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_NOMATCH:</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_ESPACE:<sp/>{</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ErrorSize<sp/>=<sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ErrorMessage<sp/>=<sp/>snew(ErrorSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>ErrorMessage,<sp/>ErrorSize);</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ErrorMessage);</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>ml_tuple(Regex-&gt;re_nsub<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_tuple_set(Result,<sp/>1,<sp/>ml_integer(Start<sp/>+<sp/>utf8_position(Haystack2,<sp/>Haystack2<sp/>+<sp/>Matches-&gt;rm_so)));</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Regex-&gt;re_nsub<sp/>+<sp/>1;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regoff_t<sp/>Start<sp/>=<sp/>Matches[I].rm_so;</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>Matches[I].rm_eo<sp/>-<sp/>Start;</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Result,<sp/>I<sp/>+<sp/>2,<sp/>ml_string(Haystack2<sp/>+<sp/>Start,<sp/>Length));</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Result,<sp/>I<sp/>+<sp/>2,<sp/>MLNil);</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="2633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"></highlight></codeline>
<codeline lineno="2635"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;%&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLRegexT)<sp/>{</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="normal"></highlight><highlight class="comment">//&lt;Pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2640"><highlight class="normal"></highlight><highlight class="comment">//&gt;tuple[string]|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2641"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches<sp/>:mini:`String`<sp/>with<sp/>:mini:`Pattern`<sp/>returning<sp/>a<sp/>tuple<sp/>of<sp/>the<sp/>matched<sp/>components,<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>the<sp/>pattern<sp/>does<sp/>not<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2642"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;2022-03-08&quot;<sp/>%<sp/>r&quot;([0-9]+)[/-]([0-9]+)[/-]([0-9]+)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Not<sp/>a<sp/>date&quot;<sp/>%<sp/>r&quot;([0-9]+)[/-]([0-9]+)[/-]([0-9]+)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/>regex_t<sp/>*Regex<sp/>=<sp/>ml_regex_value(Args[1]);</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/>regmatch_t<sp/>Matches[Regex-&gt;re_nsub<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regnexec(Regex,<sp/>Subject,<sp/>Length,<sp/>Regex-&gt;re_nsub<sp/>+<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"></highlight></codeline>
<codeline lineno="2651"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regexec(Regex,<sp/>Subject,<sp/>Regex-&gt;re_nsub<sp/>+<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_NOMATCH:</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_ESPACE:<sp/>{</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ErrorSize<sp/>=<sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ErrorMessage<sp/>=<sp/>snew(ErrorSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>ErrorMessage,<sp/>ErrorSize);</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ErrorMessage);</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Results<sp/>=<sp/>ml_tuple(Regex-&gt;re_nsub<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Regex-&gt;re_nsub<sp/>+<sp/>1;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regoff_t<sp/>Start<sp/>=<sp/>Matches[I].rm_so;</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>Matches[I].rm_eo<sp/>-<sp/>Start;</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Results,<sp/>I<sp/>+<sp/>1,<sp/>ml_string(Subject<sp/>+<sp/>Start,<sp/>Length));</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Results,<sp/>I<sp/>+<sp/>1,<sp/>MLNil);</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Results;</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"></highlight></codeline>
<codeline lineno="2678"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_regex_match(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/>regex_t<sp/>*Regex<sp/>=<sp/>ml_regex_value(Value);</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regnexec(Regex,<sp/>Subject,<sp/>Length,<sp/>0,<sp/>NULL,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regexec(Regex,<sp/>Subject,<sp/>0,<sp/>NULL,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_NOMATCH:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_ESPACE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"></highlight></codeline>
<codeline lineno="2691"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;?&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLRegexT)<sp/>{</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2693"><highlight class="normal"></highlight><highlight class="comment">//&lt;Pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2694"><highlight class="normal"></highlight><highlight class="comment">//&gt;string|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2695"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`String`<sp/>if<sp/>it<sp/>matches<sp/>:mini:`Pattern`<sp/>and<sp/>:mini:`nil`<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2696"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;2022-03-08&quot;<sp/>?<sp/>r&quot;([0-9]+)[/-]([0-9]+)[/-]([0-9]+)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2697"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Not<sp/>a<sp/>date&quot;<sp/>?<sp/>r&quot;([0-9]+)[/-]([0-9]+)[/-]([0-9]+)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/>regex_t<sp/>*Regex<sp/>=<sp/>ml_regex_value(Args[1]);</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/>regmatch_t<sp/>Matches[Regex-&gt;re_nsub<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regnexec(Regex,<sp/>Subject,<sp/>Length,<sp/>Regex-&gt;re_nsub<sp/>+<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"></highlight></codeline>
<codeline lineno="2705"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regexec(Regex,<sp/>Subject,<sp/>Regex-&gt;re_nsub<sp/>+<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_NOMATCH:</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_ESPACE:<sp/>{</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ErrorSize<sp/>=<sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ErrorMessage<sp/>=<sp/>snew(ErrorSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>ErrorMessage,<sp/>ErrorSize);</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ErrorMessage);</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regoff_t<sp/>Start<sp/>=<sp/>Matches[0].rm_so;</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Start<sp/>&gt;=<sp/>0<sp/>?<sp/>Args[0]<sp/>:<sp/>MLNil;</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"></highlight></codeline>
<codeline lineno="2723"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;!?&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLRegexT)<sp/>{</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2725"><highlight class="normal"></highlight><highlight class="comment">//&lt;Pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2726"><highlight class="normal"></highlight><highlight class="comment">//&gt;string|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2727"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`String`<sp/>if<sp/>it<sp/>does<sp/>not<sp/>match<sp/>:mini:`Pattern`<sp/>and<sp/>:mini:`nil`<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2728"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;2022-03-08&quot;<sp/>!?<sp/>r&quot;([0-9]+)[/-]([0-9]+)[/-]([0-9]+)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2729"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Not<sp/>a<sp/>date&quot;<sp/>!?<sp/>r&quot;([0-9]+)[/-]([0-9]+)[/-]([0-9]+)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/>regex_t<sp/>*Regex<sp/>=<sp/>ml_regex_value(Args[1]);</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/>regmatch_t<sp/>Matches[Regex-&gt;re_nsub<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regnexec(Regex,<sp/>Subject,<sp/>Length,<sp/>Regex-&gt;re_nsub<sp/>+<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"></highlight></codeline>
<codeline lineno="2737"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regexec(Regex,<sp/>Subject,<sp/>Regex-&gt;re_nsub<sp/>+<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_NOMATCH:</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_ESPACE:<sp/>{</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ErrorSize<sp/>=<sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ErrorMessage<sp/>=<sp/>snew(ErrorSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>ErrorMessage,<sp/>ErrorSize);</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ErrorMessage);</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regoff_t<sp/>Start<sp/>=<sp/>Matches[0].rm_so;</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Start<sp/>&gt;=<sp/>0<sp/>?<sp/>MLNil<sp/>:<sp/>Args[0];</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"></highlight></codeline>
<codeline lineno="2755"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;starts&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2757"><highlight class="normal"></highlight><highlight class="comment">//&lt;Prefix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2758"><highlight class="normal"></highlight><highlight class="comment">//&gt;string|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2759"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`String`<sp/>if<sp/>it<sp/>starts<sp/>with<sp/>:mini:`Prefix`<sp/>and<sp/>:mini:`nil`<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2760"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello<sp/>world&quot;:starts(&quot;Hello&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2761"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello<sp/>world&quot;:starts(&quot;cake&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Prefix<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[1]);</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&gt;<sp/>ml_string_length(Args[0]))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(Subject,<sp/>Prefix,<sp/>Length))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="2768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"></highlight></codeline>
<codeline lineno="2770"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;starts&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLRegexT)<sp/>{</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal"></highlight><highlight class="comment">//&lt;Pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2773"><highlight class="normal"></highlight><highlight class="comment">//&gt;string|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2774"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`String`<sp/>if<sp/>it<sp/>starts<sp/>with<sp/>:mini:`Pattern`<sp/>and<sp/>:mini:`nil`<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2775"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello<sp/>world&quot;:starts(r&quot;[A-Z]&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2776"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello<sp/>world&quot;:starts(r&quot;[0-9]&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/>regex_t<sp/>*Regex<sp/>=<sp/>ml_regex_value(Args[1]);</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/>regmatch_t<sp/>Matches[Regex-&gt;re_nsub<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regnexec(Regex,<sp/>Subject,<sp/>Length,<sp/>Regex-&gt;re_nsub<sp/>+<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"></highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regexec(Regex,<sp/>Subject,<sp/>Regex-&gt;re_nsub<sp/>+<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_NOMATCH:</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_ESPACE:<sp/>{</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ErrorSize<sp/>=<sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ErrorMessage<sp/>=<sp/>snew(ErrorSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>ErrorMessage,<sp/>ErrorSize);</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ErrorMessage);</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regoff_t<sp/>Start<sp/>=<sp/>Matches[0].rm_so;</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"></highlight></codeline>
<codeline lineno="2803"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;ends&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2805"><highlight class="normal"></highlight><highlight class="comment">//&lt;Suffix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2806"><highlight class="normal"></highlight><highlight class="comment">//&gt;string|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2807"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`String`<sp/>if<sp/>it<sp/>ends<sp/>with<sp/>:mini:`Suffix`<sp/>and<sp/>:mini:`nil`<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2808"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello<sp/>world&quot;:ends(&quot;world&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2809"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello<sp/>world&quot;:ends(&quot;cake&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Suffix<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[1]);</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length0<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&gt;<sp/>Length0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(Subject<sp/>+<sp/>Length0<sp/>-<sp/>Length,<sp/>Suffix,<sp/>Length))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="2817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;after&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight><highlight class="comment">//&lt;Delimiter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"></highlight><highlight class="comment">//&gt;string|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2823"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>portion<sp/>of<sp/>:mini:`String`<sp/>after<sp/>the<sp/>1st<sp/>occurence<sp/>of<sp/>:mini:`Delimiter`,<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>no<sp/>occurence<sp/>if<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2824"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;2022/03/08&quot;:after(&quot;/&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Haystack<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>HaystackLength<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Needle<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NeedleLength<sp/>=<sp/>ml_string_length(Args[1]);</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Match<sp/>=<sp/>strstr(Haystack,<sp/>Needle);</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Match)<sp/>{</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Match<sp/>+=<sp/>NeedleLength;</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>HaystackLength<sp/>-<sp/>(Match<sp/>-<sp/>Haystack);</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Match,<sp/>Length);</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"></highlight></codeline>
<codeline lineno="2839"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;after&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2841"><highlight class="normal"></highlight><highlight class="comment">//&lt;Delimiter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2842"><highlight class="normal"></highlight><highlight class="comment">//&lt;N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2843"><highlight class="normal"></highlight><highlight class="comment">//&gt;string|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2844"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>portion<sp/>of<sp/>:mini:`String`<sp/>after<sp/>the<sp/>:mini:`N`-th<sp/>occurence<sp/>of<sp/>:mini:`Delimiter`,<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>no<sp/>:mini:`N`-th<sp/>occurence<sp/>if<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2845"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>:mini:`N<sp/>&lt;<sp/>0`<sp/>then<sp/>occurences<sp/>are<sp/>counted<sp/>from<sp/>the<sp/>end<sp/>of<sp/>:mini:`String`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2846"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;2022/03/08&quot;:after(&quot;/&quot;,<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Haystack<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>HaystackLength<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*HaystackEnd<sp/>=<sp/>Haystack<sp/>+<sp/>HaystackLength;</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Needle<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NeedleLength<sp/>=<sp/>ml_string_length(Args[1]);</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>ml_integer_value(Args[2]);</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Match<sp/>=<sp/>strstr(Haystack,<sp/>Needle);</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Match)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--Index)<sp/>{</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Haystack<sp/>=<sp/>Match<sp/>+<sp/>NeedleLength;</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Match<sp/>+=<sp/>NeedleLength;</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>HaystackEnd<sp/>-<sp/>Match;</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Match,<sp/>Length);</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>HaystackLength<sp/>-<sp/>NeedleLength;<sp/>I<sp/>&gt;=<sp/>0;<sp/>--I)<sp/>{</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Match<sp/>=<sp/>Haystack<sp/>+<sp/>I;</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memcmp(Match,<sp/>Needle,<sp/>NeedleLength))<sp/>{</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++Index)<sp/>{</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I<sp/>-=<sp/>NeedleLength;</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Match<sp/>+=<sp/>NeedleLength;</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>HaystackEnd<sp/>-<sp/>Match;</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Match,<sp/>Length);</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="2881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"></highlight></codeline>
<codeline lineno="2883"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;before&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2885"><highlight class="normal"></highlight><highlight class="comment">//&lt;Delimiter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2886"><highlight class="normal"></highlight><highlight class="comment">//&gt;string|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2887"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>portion<sp/>of<sp/>:mini:`String`<sp/>before<sp/>the<sp/>1st<sp/>occurence<sp/>of<sp/>:mini:`Delimiter`,<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>no<sp/>occurence<sp/>if<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2888"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;2022/03/08&quot;:before(&quot;/&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Haystack<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Needle<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Match<sp/>=<sp/>strstr(Haystack,<sp/>Needle);</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Match)<sp/>{</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Haystack,<sp/>Match<sp/>-<sp/>Haystack);</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"></highlight></codeline>
<codeline lineno="2899"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;before&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2901"><highlight class="normal"></highlight><highlight class="comment">//&lt;Delimiter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2902"><highlight class="normal"></highlight><highlight class="comment">//&lt;N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2903"><highlight class="normal"></highlight><highlight class="comment">//&gt;string|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2904"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;2022/03/08&quot;:before(&quot;/&quot;,<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2905"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>portion<sp/>of<sp/>:mini:`String`<sp/>before<sp/>the<sp/>:mini:`N`-th<sp/>occurence<sp/>of<sp/>:mini:`Delimiter`,<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>no<sp/>:mini:`N`-th<sp/>occurence<sp/>if<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2906"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>:mini:`N<sp/>&lt;<sp/>0`<sp/>then<sp/>occurences<sp/>are<sp/>counted<sp/>from<sp/>the<sp/>end<sp/>of<sp/>:mini:`String`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Haystack<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>HaystackLength<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Needle<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NeedleLength<sp/>=<sp/>ml_string_length(Args[1]);</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>ml_integer_value(Args[2]);</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Match<sp/>=<sp/>strstr(Haystack,<sp/>Needle);</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Match)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--Index)<sp/>{</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Haystack<sp/>=<sp/>Match<sp/>+<sp/>NeedleLength;</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Haystack<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Haystack,<sp/>Match<sp/>-<sp/>Haystack);</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>HaystackLength<sp/>-<sp/>NeedleLength;<sp/>I<sp/>&gt;=<sp/>0;<sp/>--I)<sp/>{</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memcmp(Haystack<sp/>+<sp/>I,<sp/>Needle,<sp/>NeedleLength))<sp/>{</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++Index)<sp/>{</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I<sp/>-=<sp/>NeedleLength;</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Haystack,<sp/>I);</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="2936"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"></highlight></codeline>
<codeline lineno="2938"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;replace&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2940"><highlight class="normal"></highlight><highlight class="comment">//&lt;Pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight><highlight class="comment">//&lt;Replacement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2942"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2943"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>copy<sp/>of<sp/>:mini:`String`<sp/>with<sp/>each<sp/>occurence<sp/>of<sp/>:mini:`Pattern`<sp/>replaced<sp/>by<sp/>:mini:`Replacement`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2944"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello<sp/>world&quot;:replace(&quot;l&quot;,<sp/>&quot;bb&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*SubjectEnd<sp/>=<sp/>Subject<sp/>+<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Pattern<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PatternLength<sp/>=<sp/>ml_string_length(Args[1]);</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PatternLength)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>pattern<sp/>used<sp/>in<sp/>replace&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Replace<sp/>=<sp/>ml_string_value(Args[2]);</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ReplaceLength<sp/>=<sp/>ml_string_length(Args[2]);</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Find<sp/>=<sp/>strstr(Subject,<sp/>Pattern);</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Find)<sp/>{</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Find<sp/>&gt;<sp/>Subject)<sp/>ml_stringbuffer_write(Buffer,<sp/>Subject,<sp/>Find<sp/>-<sp/>Subject);</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Replace,<sp/>ReplaceLength);</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Subject<sp/>=<sp/>Find<sp/>+<sp/>PatternLength;</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Find<sp/>=<sp/>strstr(Subject,<sp/>Pattern);</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SubjectEnd<sp/>&gt;<sp/>Subject)<sp/>{</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Subject,<sp/>SubjectEnd<sp/>-<sp/>Subject);</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer_get_value(Buffer);</highlight></codeline>
<codeline lineno="2964"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"></highlight></codeline>
<codeline lineno="2966"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;replace&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLRegexT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2968"><highlight class="normal"></highlight><highlight class="comment">//&lt;Pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2969"><highlight class="normal"></highlight><highlight class="comment">//&lt;Replacement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2970"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2971"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>copy<sp/>of<sp/>:mini:`String`<sp/>with<sp/>each<sp/>occurence<sp/>of<sp/>:mini:`Pattern`<sp/>replaced<sp/>by<sp/>:mini:`Replacement`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2972"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello<sp/>world&quot;:replace(r&quot;l+&quot;,<sp/>&quot;bb&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SubjectLength<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/>regex_t<sp/>*Regex<sp/>=<sp/>ml_regex_value(Args[1]);</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Replace<sp/>=<sp/>ml_string_value(Args[2]);</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ReplaceLength<sp/>=<sp/>ml_string_length(Args[2]);</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/>regmatch_t<sp/>Matches[1];</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RegexFlags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regnexec(Regex,<sp/>Subject,<sp/>SubjectLength,<sp/>1,<sp/>Matches,<sp/>RegexFlags))<sp/>{</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"></highlight></codeline>
<codeline lineno="2985"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regexec(Regex,<sp/>Subject,<sp/>1,<sp/>Matches,<sp/>RegexFlags))<sp/>{</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_NOMATCH:</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SubjectLength)<sp/>ml_stringbuffer_write(Buffer,<sp/>Subject,<sp/>SubjectLength);</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer_get_value(Buffer);</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_ESPACE:<sp/>{</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ErrorSize<sp/>=<sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ErrorMessage<sp/>=<sp/>snew(ErrorSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>ErrorMessage,<sp/>ErrorSize);</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ErrorMessage);</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Matches[0].rm_eo<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>match<sp/>while<sp/>splitting<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regoff_t<sp/>Start<sp/>=<sp/>Matches[0].rm_so;</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regoff_t<sp/>End<sp/>=<sp/>Matches[0].rm_eo;</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&gt;<sp/>0)<sp/>ml_stringbuffer_write(Buffer,<sp/>Subject,<sp/>Start);</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Replace,<sp/>ReplaceLength);</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Subject<sp/>+=<sp/>End;</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SubjectLength<sp/>-=<sp/>End;</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RegexFlags<sp/>=<sp/>REG_NOTBOL;</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3010"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"></highlight></codeline>
<codeline lineno="3012"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;replace2&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3014"><highlight class="normal"></highlight><highlight class="comment">//&lt;Pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3015"><highlight class="normal"></highlight><highlight class="comment">//&lt;Replacement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3016"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3017"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>copy<sp/>of<sp/>:mini:`String`<sp/>with<sp/>each<sp/>occurence<sp/>of<sp/>:mini:`Pattern`<sp/>replaced<sp/>by<sp/>:mini:`Replacement`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3018"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello<sp/>world&quot;:replace2(&quot;l&quot;,<sp/>&quot;bb&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*SubjectEnd<sp/>=<sp/>Subject<sp/>+<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Pattern<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PatternLength<sp/>=<sp/>ml_string_length(Args[1]);</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PatternLength)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>pattern<sp/>used<sp/>in<sp/>replace&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Replace<sp/>=<sp/>ml_string_value(Args[2]);</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ReplaceLength<sp/>=<sp/>ml_string_length(Args[2]);</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Total<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Find<sp/>=<sp/>strstr(Subject,<sp/>Pattern);</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Find)<sp/>{</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Find<sp/>&gt;<sp/>Subject)<sp/>ml_stringbuffer_write(Buffer,<sp/>Subject,<sp/>Find<sp/>-<sp/>Subject);</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Replace,<sp/>ReplaceLength);</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Subject<sp/>=<sp/>Find<sp/>+<sp/>PatternLength;</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Find<sp/>=<sp/>strstr(Subject,<sp/>Pattern);</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Total;</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SubjectEnd<sp/>&gt;<sp/>Subject)<sp/>{</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Subject,<sp/>SubjectEnd<sp/>-<sp/>Subject);</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_tuplev(2,<sp/>ml_stringbuffer_get_value(Buffer),<sp/>ml_integer(Total));</highlight></codeline>
<codeline lineno="3040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"></highlight></codeline>
<codeline lineno="3042"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;replace2&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLRegexT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3044"><highlight class="normal"></highlight><highlight class="comment">//&lt;Pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3045"><highlight class="normal"></highlight><highlight class="comment">//&lt;Replacement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3046"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3047"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>copy<sp/>of<sp/>:mini:`String`<sp/>with<sp/>each<sp/>occurence<sp/>of<sp/>:mini:`Pattern`<sp/>replaced<sp/>by<sp/>:mini:`Replacement`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3048"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello<sp/>world&quot;:replace2(r&quot;l+&quot;,<sp/>&quot;bb&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SubjectLength<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/>regex_t<sp/>*Regex<sp/>=<sp/>ml_regex_value(Args[1]);</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Replace<sp/>=<sp/>ml_string_value(Args[2]);</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ReplaceLength<sp/>=<sp/>ml_string_length(Args[2]);</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/>regmatch_t<sp/>Matches[1];</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RegexFlags<sp/>=<sp/>0,<sp/>Total<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regnexec(Regex,<sp/>Subject,<sp/>SubjectLength,<sp/>1,<sp/>Matches,<sp/>RegexFlags))<sp/>{</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"></highlight></codeline>
<codeline lineno="3061"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regexec(Regex,<sp/>Subject,<sp/>1,<sp/>Matches,<sp/>RegexFlags))<sp/>{</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_NOMATCH:</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SubjectLength)<sp/>ml_stringbuffer_write(Buffer,<sp/>Subject,<sp/>SubjectLength);</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_tuplev(2,<sp/>ml_stringbuffer_get_value(Buffer),<sp/>ml_integer(Total));</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_ESPACE:<sp/>{</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ErrorSize<sp/>=<sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ErrorMessage<sp/>=<sp/>snew(ErrorSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>ErrorMessage,<sp/>ErrorSize);</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ErrorMessage);</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Matches[0].rm_eo<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>match<sp/>while<sp/>splitting<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regoff_t<sp/>Start<sp/>=<sp/>Matches[0].rm_so;</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regoff_t<sp/>End<sp/>=<sp/>Matches[0].rm_eo;</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&gt;<sp/>0)<sp/>ml_stringbuffer_write(Buffer,<sp/>Subject,<sp/>Start);</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Replace,<sp/>ReplaceLength);</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Subject<sp/>+=<sp/>End;</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SubjectLength<sp/>-=<sp/>End;</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RegexFlags<sp/>=<sp/>REG_NOTBOL;</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Total;</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3087" refid="structml__str__replacement__state__t" refkind="compound"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"></highlight></codeline>
<codeline lineno="3089"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*String;</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regex_t<sp/>*Regex;</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>Pattern;</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*String;</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function;</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>Replacement;</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PatternLength;</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ReplacementLength;</highlight></codeline>
<codeline lineno="3100"><highlight class="normal">}<sp/>ml_str_replacement_t;</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"></highlight></codeline>
<codeline lineno="3102"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1];</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject;</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length,<sp/>Count,<sp/>Total;</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RegexFlags,<sp/>Tuple;</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_str_replacement_t<sp/>Replacements[];</highlight></codeline>
<codeline lineno="3109"><highlight class="normal">}<sp/><ref refid="structml__str__replacement__state__t" kindref="compound">ml_str_replacement_state_t</ref>;</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"></highlight></codeline>
<codeline lineno="3111"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_str_replacement_next(<ref refid="structml__str__replacement__state__t" kindref="compound">ml_str_replacement_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"></highlight></codeline>
<codeline lineno="3113"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_str_replacement_func(<ref refid="structml__str__replacement__state__t" kindref="compound">ml_str_replacement_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_str_replacement_next;</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args<sp/>=<sp/>ml_alloc_args(2);</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)State-&gt;Buffer;</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_call(State,<sp/>AppendMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="3120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"></highlight></codeline>
<codeline lineno="3122"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_str_replacement_next(<ref refid="structml__str__replacement__state__t" kindref="compound">ml_str_replacement_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject<sp/>=<sp/>State-&gt;Subject;</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>State-&gt;Length;</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>State-&gt;Buffer;</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MatchStart<sp/>=<sp/>Length,<sp/>MatchEnd<sp/>=<sp/>Length;</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_str_replacement_t<sp/>*Test<sp/>=<sp/>State-&gt;Replacements,<sp/>*Match<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**SubArgs<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SubCount;</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>State-&gt;Count;<sp/>++I,<sp/>++Test)<sp/>{</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Test-&gt;PatternLength<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regex_t<sp/>*Regex<sp/>=<sp/>Test-&gt;Pattern.Regex;</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumSub<sp/>=<sp/>Test-&gt;Pattern.Regex-&gt;re_nsub<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regmatch_t<sp/>Matches[NumSub];</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regnexec(Regex,<sp/>Subject,<sp/>Length,<sp/>NumSub,<sp/>Matches,<sp/>State-&gt;RegexFlags))<sp/>{</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regexec(Regex,<sp/>Subject,<sp/>NumSub,<sp/>Matches,<sp/>State-&gt;RegexFlags))<sp/>{</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_NOMATCH:</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_ESPACE:<sp/>{</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ErrorSize<sp/>=<sp/>regerror(REG_ESPACE,<sp/>Test-&gt;Pattern.Regex,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ErrorMessage<sp/>=<sp/>snew(ErrorSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regerror(REG_ESPACE,<sp/>Test-&gt;Pattern.Regex,<sp/>ErrorMessage,<sp/>ErrorSize);</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ErrorMessage);</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Matches[0].rm_eo<sp/>==<sp/>0)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>match<sp/>while<sp/>splitting<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Matches[0].rm_so<sp/>&lt;<sp/>MatchStart)<sp/>{</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchStart<sp/>=<sp/>Matches[0].rm_so;</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SubArgs<sp/>=<sp/>ml_alloc_args(NumSub);</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NumSub;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SubArgs[I]<sp/>=<sp/>ml_string(Subject<sp/>+<sp/>Matches[I].rm_so,<sp/>Matches[I].rm_eo<sp/>-<sp/>Matches[I].rm_so);</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SubCount<sp/>=<sp/>NumSub;</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchEnd<sp/>=<sp/>Matches[0].rm_eo;</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Match<sp/>=<sp/>Test;</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Find<sp/>=<sp/>strstr(Subject,<sp/>Test-&gt;Pattern.String);</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Find)<sp/>{</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Start<sp/>=<sp/>Find<sp/>-<sp/>Subject;</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&lt;<sp/>MatchStart)<sp/>{</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchStart<sp/>=<sp/>Start;</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SubArgs<sp/>=<sp/>ml_alloc_args(1);</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SubArgs[0]<sp/>=<sp/>ml_string(Subject<sp/>+<sp/>Start,<sp/>Test-&gt;PatternLength);</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SubCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchEnd<sp/>=<sp/>Start<sp/>+<sp/>Test-&gt;PatternLength;</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Match<sp/>=<sp/>Test;</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Match)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++State-&gt;Total;</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MatchStart)<sp/>ml_stringbuffer_write(State-&gt;Buffer,<sp/>Subject,<sp/>MatchStart);</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Subject<sp/>+=<sp/>MatchEnd;</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Length<sp/>-=<sp/>MatchEnd;</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;RegexFlags<sp/>=<sp/>REG_NOTBOL;</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Match-&gt;ReplacementLength<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_str_replacement_func;</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Subject<sp/>=<sp/>Subject;</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Length<sp/>=<sp/>Length;</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Match-&gt;Replacement.Function,<sp/>SubCount,<sp/>SubArgs);</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Match-&gt;Replacement.String,<sp/>Match-&gt;ReplacementLength);</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Length)<sp/>ml_stringbuffer_write(Buffer,<sp/>Subject,<sp/>Length);</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Tuple)<sp/>{</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(ml_tuplev(2,<sp/>ml_stringbuffer_get_value(Buffer),<sp/>ml_integer(State-&gt;Total)));</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(ml_stringbuffer_get_value(Buffer));</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"></highlight></codeline>
<codeline lineno="3203"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;replace&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLMapT)<sp/>{</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3205"><highlight class="normal"></highlight><highlight class="comment">//&lt;Replacements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3206"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>key<sp/>in<sp/>:mini:`Replacements`<sp/>can<sp/>be<sp/>either<sp/>a<sp/>string<sp/>or<sp/>a<sp/>regex.<sp/>Each<sp/>value<sp/>in<sp/>:mini:`Replacements`<sp/>can<sp/>be<sp/>either<sp/>a<sp/>string<sp/>or<sp/>a<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>copy<sp/>of<sp/>:mini:`String`<sp/>with<sp/>each<sp/>matching<sp/>string<sp/>or<sp/>regex<sp/>from<sp/>:mini:`Replacements`<sp/>replaced<sp/>with<sp/>the<sp/>corresponding<sp/>value.<sp/>Functions<sp/>are<sp/>called<sp/>with<sp/>the<sp/>matched<sp/>string<sp/>or<sp/>regex<sp/>subpatterns.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3209"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>&quot;the<sp/>dog<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:replace({</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3210"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/><sp/><sp/><sp/>r&quot;<sp/>([a-z])&quot;<sp/>is<sp/>fun(Match,<sp/>A)<sp/>&apos;-{A:upper}&apos;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3211"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/><sp/><sp/><sp/>&quot;nor&quot;<sp/>is<sp/>&quot;narl&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3212"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumPatterns<sp/>=<sp/>ml_map_size(Args[1]);</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__str__replacement__state__t" kindref="compound">ml_str_replacement_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__str__replacement__state__t" kindref="compound">ml_str_replacement_state_t</ref>,<sp/>NumPatterns,<sp/>ml_str_replacement_t);</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_str_replacement_t<sp/>*Replacement<sp/>=<sp/>State-&gt;Replacements;</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_MAP_FOREACH(Args[1],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Iter-&gt;Key,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Replacement-&gt;Pattern.String<sp/>=<sp/>ml_string_value(Iter-&gt;Key);</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Replacement-&gt;PatternLength<sp/>=<sp/>ml_string_length(Iter-&gt;Key);</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Replacement-&gt;PatternLength)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>pattern<sp/>used<sp/>in<sp/>replace&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Iter-&gt;Key,<sp/>MLRegexT))<sp/>{</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Replacement-&gt;Pattern.Regex<sp/>=<sp/>ml_regex_value(Iter-&gt;Key);</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Replacement-&gt;PatternLength<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>pattern<sp/>type:<sp/>&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Iter-&gt;Key)-&gt;Name);</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Iter-&gt;Value,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Replacement-&gt;Replacement.String<sp/>=<sp/>ml_string_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Replacement-&gt;ReplacementLength<sp/>=<sp/>ml_string_length(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Iter-&gt;Value,<sp/>MLFunctionT))<sp/>{</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Replacement-&gt;Replacement.Function<sp/>=<sp/>Iter-&gt;Value;</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Replacement-&gt;ReplacementLength<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>replacement<sp/>type:<sp/>&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Iter-&gt;Value)-&gt;Name);</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Replacement;</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>NumPatterns;</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Subject<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Buffer[0]<sp/>=<sp/>ML_STRINGBUFFER_INIT;</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_str_replacement_next(State,<sp/>MLNil);</highlight></codeline>
<codeline lineno="3245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"></highlight></codeline>
<codeline lineno="3247"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;replace2&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLMapT)<sp/>{</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3249"><highlight class="normal"></highlight><highlight class="comment">//&lt;Replacements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3250"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>key<sp/>in<sp/>:mini:`Replacements`<sp/>can<sp/>be<sp/>either<sp/>a<sp/>string<sp/>or<sp/>a<sp/>regex.<sp/>Each<sp/>value<sp/>in<sp/>:mini:`Replacements`<sp/>can<sp/>be<sp/>either<sp/>a<sp/>string<sp/>or<sp/>a<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>copy<sp/>of<sp/>:mini:`String`<sp/>with<sp/>each<sp/>matching<sp/>string<sp/>or<sp/>regex<sp/>from<sp/>:mini:`Replacements`<sp/>replaced<sp/>with<sp/>the<sp/>corresponding<sp/>value.<sp/>Functions<sp/>are<sp/>called<sp/>with<sp/>the<sp/>matched<sp/>string<sp/>or<sp/>regex<sp/>subpatterns.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3253"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>&quot;the<sp/>dog<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:replace2({</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3254"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/><sp/><sp/><sp/>r&quot;<sp/>([a-z])&quot;<sp/>is<sp/>fun(Match,<sp/>A)<sp/>&apos;-{A:upper}&apos;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3255"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/><sp/><sp/><sp/>&quot;nor&quot;<sp/>is<sp/>&quot;narl&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3256"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumPatterns<sp/>=<sp/>ml_map_size(Args[1]);</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__str__replacement__state__t" kindref="compound">ml_str_replacement_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__str__replacement__state__t" kindref="compound">ml_str_replacement_state_t</ref>,<sp/>NumPatterns,<sp/>ml_str_replacement_t);</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_str_replacement_t<sp/>*Replacement<sp/>=<sp/>State-&gt;Replacements;</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_MAP_FOREACH(Args[1],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Iter-&gt;Key,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Replacement-&gt;Pattern.String<sp/>=<sp/>ml_string_value(Iter-&gt;Key);</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Replacement-&gt;PatternLength<sp/>=<sp/>ml_string_length(Iter-&gt;Key);</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Replacement-&gt;PatternLength)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>pattern<sp/>used<sp/>in<sp/>replace&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Iter-&gt;Key,<sp/>MLRegexT))<sp/>{</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Replacement-&gt;Pattern.Regex<sp/>=<sp/>ml_regex_value(Iter-&gt;Key);</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Replacement-&gt;PatternLength<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>pattern<sp/>type:<sp/>&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Iter-&gt;Key)-&gt;Name);</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Iter-&gt;Value,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Replacement-&gt;Replacement.String<sp/>=<sp/>ml_string_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Replacement-&gt;ReplacementLength<sp/>=<sp/>ml_string_length(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Iter-&gt;Value,<sp/>MLFunctionT))<sp/>{</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Replacement-&gt;Replacement.Function<sp/>=<sp/>Iter-&gt;Value;</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Replacement-&gt;ReplacementLength<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>replacement<sp/>type:<sp/>&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Iter-&gt;Value)-&gt;Name);</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Replacement;</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>NumPatterns;</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Subject<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Tuple<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Buffer[0]<sp/>=<sp/>ML_STRINGBUFFER_INIT;</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_str_replacement_next(State,<sp/>MLNil);</highlight></codeline>
<codeline lineno="3290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"></highlight></codeline>
<codeline lineno="3292"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;replace&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLRegexT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3294"><highlight class="normal"></highlight><highlight class="comment">//&lt;Pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3295"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3296"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>copy<sp/>of<sp/>:mini:`String`<sp/>with<sp/>each<sp/>occurence<sp/>of<sp/>:mini:`Pattern`<sp/>replaced<sp/>by<sp/>:mini:`Fn(Match,<sp/>Sub/1,<sp/>...,<sp/>Sub/n)`<sp/>where<sp/>:mini:`Match`<sp/>is<sp/>the<sp/>actual<sp/>matched<sp/>text<sp/>and<sp/>:mini:`Sub/i`<sp/>are<sp/>the<sp/>matched<sp/>subpatterns.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3298"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;the<sp/>cat<sp/>snored<sp/>as<sp/>he<sp/>slept&quot;:replace(r&quot;<sp/>([a-z])&quot;,<sp/>fun(Match,<sp/>A)<sp/>&apos;-{A:upper}&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__str__replacement__state__t" kindref="compound">ml_str_replacement_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__str__replacement__state__t" kindref="compound">ml_str_replacement_state_t</ref>,<sp/>1,<sp/>ml_str_replacement_t);</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_str_replacement_t<sp/>*Replacement<sp/>=<sp/>State-&gt;Replacements;</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/>Replacement-&gt;Pattern.Regex<sp/>=<sp/>ml_regex_value(Args[1]);</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/>Replacement-&gt;PatternLength<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/>Replacement-&gt;Replacement.Function<sp/>=<sp/>Args[2];</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/>Replacement-&gt;ReplacementLength<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Subject<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Buffer[0]<sp/>=<sp/>ML_STRINGBUFFER_INIT;</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_str_replacement_next(State,<sp/>MLNil);</highlight></codeline>
<codeline lineno="3312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"></highlight></codeline>
<codeline lineno="3314"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;replace&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLIntegerT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3316"><highlight class="normal"></highlight><highlight class="comment">//&lt;I</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3317"><highlight class="normal"></highlight><highlight class="comment">//&lt;Replacement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3318"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3319"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>copy<sp/>of<sp/>:mini:`String`<sp/>with<sp/>the<sp/>:mini:`String[I]`<sp/>is<sp/>replaced<sp/>by<sp/>:mini:`Replacement`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3320"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello<sp/>world&quot;:replace(6,<sp/>&quot;_&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>utf8_strlen(Args[0]);</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Start<sp/>+<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&lt;=<sp/>0)<sp/>N<sp/>+=<sp/>Length<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&gt;<sp/>Length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*A<sp/>=<sp/>Start;</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!utf8_is_continuation(*A)<sp/>&amp;&amp;<sp/>(--N<sp/>==<sp/>0))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++A;</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*B<sp/>=<sp/>A<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*B<sp/>&amp;&amp;<sp/>utf8_is_continuation(*B))<sp/>++B;</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Start,<sp/>A<sp/>-<sp/>Start);</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>ml_string_value(Args[2]),<sp/>ml_string_length(Args[2]));</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>B,<sp/>End<sp/>-<sp/>B);</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer_get_value(Buffer);</highlight></codeline>
<codeline lineno="3340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"></highlight></codeline>
<codeline lineno="3342"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;replace&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLIntegerT,<sp/>MLIntegerT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3344"><highlight class="normal"></highlight><highlight class="comment">//&lt;I</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3345"><highlight class="normal"></highlight><highlight class="comment">//&lt;J</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3346"><highlight class="normal"></highlight><highlight class="comment">//&lt;Replacement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3347"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>copy<sp/>of<sp/>:mini:`String`<sp/>with<sp/>the<sp/>:mini:`String[I,<sp/>J]`<sp/>is<sp/>replaced<sp/>by<sp/>:mini:`Replacement`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3349"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello<sp/>world&quot;:replace(1,<sp/>6,<sp/>&quot;Goodbye&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3350"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;Hello<sp/>world&quot;:replace(-6,<sp/>0,<sp/>&quot;,<sp/>how<sp/>are<sp/>you?&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>utf8_strlen(Args[0]);</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Start<sp/>+<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Lo<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Hi<sp/>=<sp/>ml_integer_value_fast(Args[2]);</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Lo<sp/>&lt;=<sp/>0)<sp/>Lo<sp/>+=<sp/>Length<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hi<sp/>&lt;=<sp/>0)<sp/>Hi<sp/>+=<sp/>Length<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Lo<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hi<sp/>&gt;<sp/>Length<sp/>+<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hi<sp/>&lt;<sp/>Lo)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/>Hi<sp/>-=<sp/>Lo;</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*A<sp/>=<sp/>Start;</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Lo<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="3364" refid="structml__fn__replace__state__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!utf8_is_continuation(*A)<sp/>&amp;&amp;<sp/>(--Lo<sp/>==<sp/>0))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++A;</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*B<sp/>=<sp/>A;</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++Hi<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*B)<sp/>{</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!utf8_is_continuation(*B)<sp/>&amp;&amp;<sp/>(--Hi<sp/>==<sp/>0))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++B;</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Start,<sp/>A<sp/>-<sp/>Start);</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>ml_string_value(Args[3]),<sp/>ml_string_length(Args[3]));</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>B,<sp/>End<sp/>-<sp/>B);</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer_get_value(Buffer);</highlight></codeline>
<codeline lineno="3377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"></highlight></codeline>
<codeline lineno="3379"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1];</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Rest;</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length;</highlight></codeline>
<codeline lineno="3384"><highlight class="normal">}<sp/><ref refid="structml__fn__replace__state__t" kindref="compound">ml_fn_replace_state_t</ref>;</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"></highlight></codeline>
<codeline lineno="3386"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_fn_replace_run(<ref refid="structml__fn__replace__state__t" kindref="compound">ml_fn_replace_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(State-&gt;Buffer,<sp/>State-&gt;Rest,<sp/>State-&gt;Length);</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_stringbuffer_get_value(State-&gt;Buffer));</highlight></codeline>
<codeline lineno="3391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"></highlight></codeline>
<codeline lineno="3393"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_fn_replace_func(<ref refid="structml__fn__replace__state__t" kindref="compound">ml_fn_replace_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_fn_replace_run;</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args<sp/>=<sp/>ml_alloc_args(2);</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)State-&gt;Buffer;</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>AppendMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="3400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"></highlight></codeline>
<codeline lineno="3402"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;replace&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLIntegerT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3404"><highlight class="normal"></highlight><highlight class="comment">//&lt;I</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3405"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3406"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3407"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>copy<sp/>of<sp/>:mini:`String`<sp/>with<sp/>the<sp/>:mini:`String[I]`<sp/>is<sp/>replaced<sp/>by<sp/>:mini:`Fn(String[I])`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3408"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;hello<sp/>world&quot;:replace(1,<sp/>:upper)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>utf8_strlen(Args[0]);</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Start<sp/>+<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&lt;=<sp/>0)<sp/>N<sp/>+=<sp/>Length<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&lt;=<sp/>0)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&gt;<sp/>Length)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*A<sp/>=<sp/>Start;</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!utf8_is_continuation(*A)<sp/>&amp;&amp;<sp/>(--N<sp/>==<sp/>0))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++A;</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*B<sp/>=<sp/>A<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*B<sp/>&amp;&amp;<sp/>utf8_is_continuation(*B))<sp/>++B;</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__fn__replace__state__t" kindref="compound">ml_fn_replace_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__fn__replace__state__t" kindref="compound">ml_fn_replace_state_t</ref>);</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_fn_replace_func;</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Buffer[0]<sp/>=<sp/>ML_STRINGBUFFER_INIT;</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Rest<sp/>=<sp/>B;</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Length<sp/>=<sp/>End<sp/>-<sp/>B;</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(State-&gt;Buffer,<sp/>Start,<sp/>A<sp/>-<sp/>Start);</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args2<sp/>=<sp/>ml_alloc_args(1);</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/>Args2[0]<sp/>=<sp/>ml_string(A,<sp/>B<sp/>-<sp/>A);</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Args[2],<sp/>1,<sp/>Args2);</highlight></codeline>
<codeline lineno="3434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"></highlight></codeline>
<codeline lineno="3436"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;replace&quot;</highlight><highlight class="normal">,<sp/>MLStringT,<sp/>MLIntegerT,<sp/>MLIntegerT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3438"><highlight class="normal"></highlight><highlight class="comment">//&lt;I</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3439"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3440"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3441"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>copy<sp/>of<sp/>:mini:`String`<sp/>with<sp/>the<sp/>:mini:`String[I,<sp/>J]`<sp/>is<sp/>replaced<sp/>by<sp/>:mini:`Fn(String[I,<sp/>J])`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3442"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;hello<sp/>world&quot;:replace(1,<sp/>6,<sp/>:upper)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Start<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>utf8_strlen(Args[0]);</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Start<sp/>+<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Lo<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Hi<sp/>=<sp/>ml_integer_value_fast(Args[2]);</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Lo<sp/>&lt;=<sp/>0)<sp/>Lo<sp/>+=<sp/>Length<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hi<sp/>&lt;=<sp/>0)<sp/>Hi<sp/>+=<sp/>Length<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Lo<sp/>&lt;=<sp/>0)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hi<sp/>&gt;<sp/>Length<sp/>+<sp/>1)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hi<sp/>&lt;<sp/>Lo)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/>Hi<sp/>-=<sp/>Lo;</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*A<sp/>=<sp/>Start;</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Lo<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!utf8_is_continuation(*A)<sp/>&amp;&amp;<sp/>(--Lo<sp/>==<sp/>0))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++A;</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*B<sp/>=<sp/>A;</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++Hi<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*B)<sp/>{</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!utf8_is_continuation(*B)<sp/>&amp;&amp;<sp/>(--Hi<sp/>==<sp/>0))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++B;</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__fn__replace__state__t" kindref="compound">ml_fn_replace_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__fn__replace__state__t" kindref="compound">ml_fn_replace_state_t</ref>);</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_fn_replace_func;</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Buffer[0]<sp/>=<sp/>ML_STRINGBUFFER_INIT;</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Rest<sp/>=<sp/>B;</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Length<sp/>=<sp/>End<sp/>-<sp/>B;</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(State-&gt;Buffer,<sp/>Start,<sp/>A<sp/>-<sp/>Start);</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args2<sp/>=<sp/>ml_alloc_args(1);</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/>Args2[0]<sp/>=<sp/>ml_string(A,<sp/>B<sp/>-<sp/>A);</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Args[3],<sp/>1,<sp/>Args2);</highlight></codeline>
<codeline lineno="3475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"></highlight></codeline>
<codeline lineno="3477"><highlight class="normal">ML_FUNCTION(MLStringEscape)<sp/>{</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"></highlight><highlight class="comment">//@string::escape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3479"><highlight class="normal"></highlight><highlight class="comment">//&lt;String:string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3480"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3481"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Escapes<sp/>characters<sp/>in<sp/>:mini:`String`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3482"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>string::escape(&quot;\&apos;Hello\nworld!\&apos;&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*S<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>ml_string_length(Args[0]);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++S)<sp/>{</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*S)<sp/>{</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\0&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\0&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\a&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\a&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\a&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\b&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\b&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\b&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\t&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\t&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\r&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\r&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\n&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\\\&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\\\&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\\&apos;&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\\&apos;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\\&quot;&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\\&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>S,<sp/>1);</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer_get_value(Buffer);</highlight></codeline>
<codeline lineno="3522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"></highlight></codeline>
<codeline lineno="3524"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ml_regex_hash(<ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref><sp/>*Regex,<sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Chain)<sp/>{</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Hash<sp/>=<sp/>5381;</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Pattern<sp/>=<sp/>Regex-&gt;Pattern;</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*Pattern)<sp/>Hash<sp/>=<sp/>((Hash<sp/>&lt;&lt;<sp/>5)<sp/>+<sp/>Hash)<sp/>+<sp/>*(Pattern++);</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Hash;</highlight></codeline>
<codeline lineno="3529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"></highlight></codeline>
<codeline lineno="3531"><highlight class="normal">ML_FUNCTION(MLRegex)<sp/>{</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"></highlight><highlight class="comment">//@regex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3533"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3534"><highlight class="normal"></highlight><highlight class="comment">//&gt;regex<sp/>|<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3535"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compiles<sp/>:mini:`String`<sp/>as<sp/>a<sp/>regular<sp/>expression.<sp/>Returns<sp/>an<sp/>error<sp/>if<sp/>:mini:`String`<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>regular<sp/>expression.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3536"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>regex(&quot;[0-9]+&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3537"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>regex(&quot;[0-9&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Pattern<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Pattern[Length])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Regex<sp/>pattern<sp/>must<sp/>be<sp/>proper<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_regex(Pattern,<sp/>Length);</highlight></codeline>
<codeline lineno="3544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"></highlight></codeline>
<codeline lineno="3546"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_regex_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/>regex_t<sp/>*Regex<sp/>=<sp/>Value-&gt;Value;</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject<sp/>=<sp/>ml_string_value(ml_deref(Args[0]));</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/>regmatch_t<sp/>Matches[Regex-&gt;re_nsub<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regnexec(Regex,<sp/>Subject,<sp/>Length,<sp/>Regex-&gt;re_nsub<sp/>+<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"></highlight></codeline>
<codeline lineno="3556"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(regexec(Regex,<sp/>Subject,<sp/>Regex-&gt;re_nsub<sp/>+<sp/>1,<sp/>Matches,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_NOMATCH:</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REG_ESPACE:<sp/>{</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ErrorSize<sp/>=<sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ErrorMessage<sp/>=<sp/>snew(ErrorSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regerror(REG_ESPACE,<sp/>Regex,<sp/>ErrorMessage,<sp/>ErrorSize);</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ErrorMessage);</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Results<sp/>=<sp/>ml_tuple(Regex-&gt;re_nsub<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Regex-&gt;re_nsub<sp/>+<sp/>1;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regoff_t<sp/>Start<sp/>=<sp/>Matches[I].rm_so;</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Start<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>Matches[I].rm_eo<sp/>-<sp/>Start;</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Results,<sp/>I<sp/>+<sp/>1,<sp/>ml_string(Subject<sp/>+<sp/>Start,<sp/>Length));</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(Results,<sp/>I<sp/>+<sp/>1,<sp/>MLNil);</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Results);</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"></highlight></codeline>
<codeline lineno="3583"><highlight class="normal">ML_TYPE(MLRegexT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;regex&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>regular<sp/>expression.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/>.hash<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_regex_hash,</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_regex_call,</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLRegex</highlight></codeline>
<codeline lineno="3588"><highlight class="normal">);</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"></highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_regex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Pattern,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref><sp/>*Regex<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref>);</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/>Regex-&gt;Type<sp/>=<sp/>MLRegexT;</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/>Regex-&gt;Pattern<sp/>=<sp/>Pattern;</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Error<sp/>=<sp/>regncomp(Regex-&gt;Value,<sp/>Pattern,<sp/>Length,<sp/>REG_EXTENDED);</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Error<sp/>=<sp/>regcomp(Regex-&gt;Value,<sp/>Pattern,<sp/>REG_EXTENDED);</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Error)<sp/>{</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ErrorSize<sp/>=<sp/>regerror(Error,<sp/>Regex-&gt;Value,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ErrorMessage<sp/>=<sp/>snew(ErrorSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regerror(Error,<sp/>Regex-&gt;Value,<sp/>ErrorMessage,<sp/>ErrorSize);</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ErrorMessage);</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Regex;</highlight></codeline>
<codeline lineno="3606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"></highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_regexi(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Pattern0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref><sp/>*Regex<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref>);</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/>Regex-&gt;Type<sp/>=<sp/>MLRegexT;</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Pattern;</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/>Length<sp/>=<sp/>GC_asprintf(&amp;Pattern,<sp/></highlight><highlight class="stringliteral">&quot;(?i)%s&quot;</highlight><highlight class="normal">,<sp/>Pattern0);</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/>Regex-&gt;Pattern<sp/>=<sp/>Pattern;</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Error<sp/>=<sp/>regncomp(Regex-&gt;Value,<sp/>Pattern,<sp/>Length,<sp/>REG_EXTENDED);</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Error<sp/>=<sp/>regcomp(Regex-&gt;Value,<sp/>Pattern,<sp/>REG_EXTENDED);</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Error)<sp/>{</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ErrorSize<sp/>=<sp/>regerror(Error,<sp/>Regex-&gt;Value,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ErrorMessage<sp/>=<sp/>snew(ErrorSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regerror(Error,<sp/>Regex-&gt;Value,<sp/>ErrorMessage,<sp/>ErrorSize);</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RegexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ErrorMessage);</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Regex;</highlight></codeline>
<codeline lineno="3626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_regex_pattern(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref><sp/>*Regex<sp/>=<sp/>(<ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Regex-&gt;Pattern;</highlight></codeline>
<codeline lineno="3631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"></highlight></codeline>
<codeline lineno="3633"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_value_is_constant,<sp/>MLRegexT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="3635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"></highlight></codeline>
<codeline lineno="3637"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;pattern&quot;</highlight><highlight class="normal">,<sp/>MLRegexT)<sp/>{</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"></highlight><highlight class="comment">//&lt;Regex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3639"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3640"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>pattern<sp/>used<sp/>to<sp/>create<sp/>:mini:`Regex`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3641"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>r&quot;[0-9]+&quot;:pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(ml_regex_pattern(Args[0]),<sp/>-1);</highlight></codeline>
<codeline lineno="3643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"></highlight></codeline>
<codeline lineno="3645"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLRegexT,<sp/>MLRegexT)<sp/>{</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3647"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3648"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3649"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compares<sp/>:mini:`A`<sp/>and<sp/>:mini:`B`<sp/>lexicographically<sp/>and<sp/>returns<sp/>:mini:`-1`,<sp/>:mini:`0`<sp/>or<sp/>:mini:`1`<sp/>respectively.<sp/>Mainly<sp/>for<sp/>using<sp/>regular<sp/>expressions<sp/>as<sp/>keys<sp/>in<sp/>maps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3650"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>r&quot;[0-9]+&quot;<sp/>&lt;&gt;<sp/>r&quot;[A-Za-z0-9_]+&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3651"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>r&quot;[A-Za-z0-9_]+&quot;<sp/>&lt;&gt;<sp/>r&quot;[0-9]+&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3652"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>r&quot;[0-9]+&quot;<sp/>&lt;&gt;<sp/>r&quot;[0-9]+&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*PatternA<sp/>=<sp/>ml_regex_pattern(Args[0]);</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*PatternB<sp/>=<sp/>ml_regex_pattern(Args[1]);</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Compare<sp/>=<sp/>strcmp(PatternA,<sp/>PatternB);</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Compare<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)NegOne;</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Compare<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)One;</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Zero;</highlight></codeline>
<codeline lineno="3659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"></highlight></codeline>
<codeline lineno="3661"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_comp_method_regex_regex(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="3662"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLRegexT,<sp/>MLRegexT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="3663"><highlight class="preprocessor"></highlight><highlight class="comment">/*&gt;regex|nil</highlight></codeline>
<codeline lineno="3664"><highlight class="comment">//<sp/>Returns<sp/>:mini:`Arg/2`<sp/>if<sp/>:mini:`Arg/1<sp/>NAME<sp/>Arg/2`<sp/>and<sp/>:mini:`nil`<sp/>otherwise.</highlight></codeline>
<codeline lineno="3665"><highlight class="comment">//$=<sp/>r&quot;[0-9]+&quot;<sp/>NAME<sp/>r&quot;[A-Za-z0-9_]+&quot;</highlight></codeline>
<codeline lineno="3666"><highlight class="comment">//$=<sp/>r&quot;[A-Za-z0-9_]+&quot;<sp/>NAME<sp/>r&quot;[0-9]+&quot;</highlight></codeline>
<codeline lineno="3667"><highlight class="comment">//$=<sp/>r&quot;[0-9]+&quot;<sp/>NAME<sp/>r&quot;[0-9]+&quot;</highlight></codeline>
<codeline lineno="3668"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="3669"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>const<sp/>char<sp/>*PatternA<sp/>=<sp/>ml_regex_pattern(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="3670"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>const<sp/>char<sp/>*PatternB<sp/>=<sp/>ml_regex_pattern(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="3671"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int<sp/>Compare<sp/>=<sp/>strcmp(PatternA,<sp/>PatternB);<sp/>\</highlight></codeline>
<codeline lineno="3672"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>Compare<sp/>SYMBOL<sp/>0<sp/>?<sp/>Args[1]<sp/>:<sp/>MLNil;<sp/>\</highlight></codeline>
<codeline lineno="3673"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3674"><highlight class="normal"></highlight></codeline>
<codeline lineno="3675"><highlight class="normal">ml_comp_method_regex_regex(=,<sp/>==)</highlight></codeline>
<codeline lineno="3676"><highlight class="normal">ml_comp_method_regex_regex(!=,<sp/>!=)</highlight></codeline>
<codeline lineno="3677"><highlight class="normal">ml_comp_method_regex_regex(&lt;,<sp/>&lt;)</highlight></codeline>
<codeline lineno="3678"><highlight class="normal">ml_comp_method_regex_regex(&gt;,<sp/>&gt;)</highlight></codeline>
<codeline lineno="3679"><highlight class="normal">ml_comp_method_regex_regex(&lt;=,<sp/>&lt;=)</highlight></codeline>
<codeline lineno="3680"><highlight class="normal">ml_comp_method_regex_regex(&gt;=,<sp/>&gt;=)</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"></highlight></codeline>
<codeline lineno="3682"><highlight class="normal">ML_METHOD(&quot;append&quot;,<sp/>MLStringBufferT,<sp/>MLRegexT)<sp/>{</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3684"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3685"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>a<sp/>representation<sp/>of<sp/>:mini:`Value`<sp/>to<sp/>:mini:`Buffer`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;/%s/&quot;</highlight><highlight class="normal">,<sp/>ml_regex_pattern(Args[1]));</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="3689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"></highlight></codeline>
<codeline lineno="3691"><highlight class="normal">ML_FUNCTION(MLRegexEscape)<sp/>{</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"></highlight><highlight class="comment">//@regex::escape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3693"><highlight class="normal"></highlight><highlight class="comment">//&lt;String:string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3694"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3695"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Escapes<sp/>characters<sp/>in<sp/>:mini:`String`<sp/>that<sp/>are<sp/>treated<sp/>specially<sp/>in<sp/>regular<sp/>expressions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3696"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>regex::escape(&quot;Word<sp/>(?)\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*S<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>ml_string_length(Args[0]);<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++S)<sp/>{</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*S)<sp/>{</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\0&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\0&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\a&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\a&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\a&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\e&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\e&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\e&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\t&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\t&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\r&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\r&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\n&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\\\&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\\\&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\.&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;^&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\^&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\^&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\$&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\$&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\*&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\*&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\?&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\?&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;|&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\|&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\|&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\[&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\[&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\{&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\{&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3748" refid="structml__string__switch__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\(&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\(&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\\)&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\\)&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>S,<sp/>1);</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer_get_value(Buffer);</highlight></codeline>
<codeline lineno="3760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"></highlight></codeline>
<codeline lineno="3762"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Index;</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__string__t" kindref="compound">ml_string_t</ref><sp/>*String;</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref><sp/>*Regex;</highlight></codeline>
<codeline lineno="3766"><highlight class="normal">}<sp/>ml_string_case_t;</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"></highlight></codeline>
<codeline lineno="3768"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_string_case_t<sp/>Cases[];</highlight></codeline>
<codeline lineno="3771"><highlight class="normal">}<sp/><ref refid="structml__string__switch__t" kindref="compound">ml_string_switch_t</ref>;</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"></highlight></codeline>
<codeline lineno="3773"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_string_switch(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__string__switch__t" kindref="compound">ml_string_switch_t</ref><sp/>*Switch,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg<sp/>=<sp/>ml_deref(Args[0]);</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Arg,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>string<sp/>for<sp/>argument<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Subject<sp/>=<sp/>ml_string_value(Arg);</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Arg);</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ml_string_case_t<sp/>*Case<sp/>=<sp/>Switch-&gt;Cases;;<sp/>++Case)<sp/>{</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Case-&gt;String)<sp/>{</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Case-&gt;String-&gt;Length<sp/>==<sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memcmp(Subject,<sp/>Case-&gt;String-&gt;Value,<sp/>Length))<sp/>ML_RETURN(Case-&gt;Index);</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Case-&gt;Regex)<sp/>{</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Args[0]);</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!regnexec(Case-&gt;Regex-&gt;Value,<sp/>Subject,<sp/>Length,<sp/>0,<sp/>NULL,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"></highlight></codeline>
<codeline lineno="3791"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!regexec(Case-&gt;Regex-&gt;Value,<sp/>Subject,<sp/>0,<sp/>NULL,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Case-&gt;Index);</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Case-&gt;Index);</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="3801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"></highlight></codeline>
<codeline lineno="3803"><highlight class="normal">ML_TYPE(MLStringSwitchT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;string-switch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_string_switch</highlight></codeline>
<codeline lineno="3806"><highlight class="normal">);</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"></highlight></codeline>
<codeline lineno="3808"><highlight class="normal">ML_FUNCTION_INLINE(MLStringSwitch)<sp/>{</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"></highlight><highlight class="comment">//@string::switch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3810"><highlight class="normal"></highlight><highlight class="comment">//&lt;Cases...:string|regex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3811"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>:mini:`switch`<sp/>for<sp/>string<sp/>values.<sp/>Case<sp/>values<sp/>must<sp/>be<sp/>strings<sp/>or<sp/>regular<sp/>expressions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3812"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>for<sp/>Pet<sp/>in<sp/>[&quot;cat&quot;,<sp/>&quot;dog&quot;,<sp/>&quot;mouse&quot;,<sp/>&quot;fox&quot;]<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3813"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/><sp/><sp/><sp/>switch<sp/>Pet:<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3814"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>&quot;cat&quot;<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3815"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;Meow!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3816"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>&quot;dog&quot;<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3817"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;Woof!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3818"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>&quot;mouse&quot;<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3819"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;Squeak!\n&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3820"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3821"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(&quot;???!&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3822"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/><sp/><sp/><sp/><sp/><sp/><sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3823"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Total<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLListT);</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Total<sp/>+=<sp/>ml_list_length(Args[I]);</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__string__switch__t" kindref="compound">ml_string_switch_t</ref><sp/>*Switch<sp/>=<sp/>xnew(<ref refid="structml__string__switch__t" kindref="compound">ml_string_switch_t</ref>,<sp/>Total,<sp/>ml_string_case_t);</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/><sp/>Switch-&gt;Type<sp/>=<sp/>MLStringSwitchT;</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_string_case_t<sp/>*Case<sp/>=<sp/>Switch-&gt;Cases;</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[I],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Iter-&gt;Value;</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;String<sp/>=<sp/>(<ref refid="structml__string__t" kindref="compound">ml_string_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLRegexT))<sp/>{</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Regex<sp/>=<sp/>(<ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>value<sp/>in<sp/>string<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Index<sp/>=<sp/>ml_integer(I);</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Case;</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/>Case-&gt;Index<sp/>=<sp/>ml_integer(Count);</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Switch;</highlight></codeline>
<codeline lineno="3848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"></highlight></codeline>
<codeline lineno="3850"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_serialize,<sp/>MLStringSwitchT,<sp/><ref refid="structml__string__switch__t" kindref="compound">ml_string_switch_t</ref><sp/>*Switch)<sp/>{</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_put(Result,<sp/>ml_cstring(</highlight><highlight class="stringliteral">&quot;string-switch&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Index<sp/>=<sp/>NULL,<sp/>*Last<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ml_string_case_t<sp/>*Case<sp/>=<sp/>Switch-&gt;Cases;;<sp/>++Case)<sp/>{</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Match<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Case-&gt;String;</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Match)<sp/>Match<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Case-&gt;Regex;</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Match)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Case-&gt;Index<sp/>!=<sp/>Index)<sp/>{</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index<sp/>=<sp/>Case-&gt;Index;</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Last<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Result,<sp/>Last);</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Last,<sp/>Match);</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="3866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"></highlight></codeline>
<codeline lineno="3868"><highlight class="normal">ML_DESERIALIZER(</highlight><highlight class="stringliteral">&quot;string-switch&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Total<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLListT);</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Total<sp/>+=<sp/>ml_list_length(Args[I]);</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__string__switch__t" kindref="compound">ml_string_switch_t</ref><sp/>*Switch<sp/>=<sp/>xnew(<ref refid="structml__string__switch__t" kindref="compound">ml_string_switch_t</ref>,<sp/>Total,<sp/>ml_string_case_t);</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/>Switch-&gt;Type<sp/>=<sp/>MLStringSwitchT;</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_string_case_t<sp/>*Case<sp/>=<sp/>Switch-&gt;Cases;</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[I],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Iter-&gt;Value;</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;String<sp/>=<sp/>(<ref refid="structml__string__t" kindref="compound">ml_string_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLRegexT))<sp/>{</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Regex<sp/>=<sp/>(<ref refid="structml__regex__t" kindref="compound">ml_regex_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>value<sp/>in<sp/>string<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Index<sp/>=<sp/>ml_integer(I);</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Case;</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/><sp/>Case-&gt;Index<sp/>=<sp/>ml_integer(Count);</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Switch;</highlight></codeline>
<codeline lineno="3893"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"></highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_stringbuffer()<sp/>{</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref>);</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Type<sp/>=<sp/>MLStringBufferT;</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Buffer;</highlight></codeline>
<codeline lineno="3899"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"></highlight></codeline>
<codeline lineno="3901"><highlight class="normal">ML_FUNCTION(MLStringBuffer)<sp/>{</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"></highlight><highlight class="comment">//@string::buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3903"><highlight class="normal"></highlight><highlight class="comment">//&gt;string::buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3904"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>:mini:`string::buffer`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer();</highlight></codeline>
<codeline lineno="3906"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"></highlight></codeline>
<codeline lineno="3908"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3909"><highlight class="comment">ML_TYPE(MLStringBufferT,<sp/>(MLStreamT),<sp/>&quot;stringbuffer&quot;);</highlight></codeline>
<codeline lineno="3910"><highlight class="comment">//<sp/>A<sp/>string<sp/>buffer<sp/>that<sp/>automatically<sp/>grows<sp/>and<sp/>shrinks<sp/>as<sp/>required.</highlight></codeline>
<codeline lineno="3911"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3912"><highlight class="normal"></highlight></codeline>
<codeline lineno="3913"><highlight class="normal">ML_TYPE(MLStringBufferT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;stringbuffer&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3915"><highlight class="comment">//<sp/>A<sp/>string<sp/>buffer<sp/>that<sp/>automatically<sp/>grows<sp/>and<sp/>shrinks<sp/>as<sp/>required.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLStringBuffer</highlight></codeline>
<codeline lineno="3917"><highlight class="normal">);</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"></highlight></codeline>
<codeline lineno="3919"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GC_descr<sp/>StringBufferDesc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"></highlight></codeline>
<codeline lineno="3921"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3922"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*<sp/>_Atomic<sp/>StringBufferNodeCache<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3924"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*StringBufferNodeCache<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3926"><highlight class="normal"></highlight></codeline>
<codeline lineno="3927"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*ml_stringbuffer_node()<sp/>{</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*Next<sp/>=<sp/>StringBufferNodeCache,<sp/>*CacheNext;</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Next)<sp/>{</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next<sp/>=<sp/>GC_MALLOC_EXPLICITLY_TYPED(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref>),<sp/>StringBufferDesc);</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CacheNext<sp/>=<sp/>Next-&gt;Next;</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!atomic_compare_exchange_weak(&amp;StringBufferNodeCache,<sp/>&amp;Next,<sp/>CacheNext));</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*Next<sp/>=<sp/>StringBufferNodeCache;</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Next)<sp/>{</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next<sp/>=<sp/>GC_MALLOC_EXPLICITLY_TYPED(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref>),<sp/>StringBufferDesc);</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringBufferNodeCache<sp/>=<sp/>Next-&gt;Next;</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><sp/><sp/><sp/><sp/>Next-&gt;Next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Next;</highlight></codeline>
<codeline lineno="3947"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"></highlight></codeline>
<codeline lineno="3949"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stringbuffer_node_free(<ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*Node)<sp/>{</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*CacheNext<sp/>=<sp/>StringBufferNodeCache;</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Next<sp/>=<sp/>CacheNext;</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!atomic_compare_exchange_weak(&amp;StringBufferNodeCache,<sp/>&amp;CacheNext,<sp/>Node));</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/>Node-&gt;Next<sp/>=<sp/>StringBufferNodeCache;</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/>StringBufferNodeCache<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"></highlight></codeline>
<codeline lineno="3961"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ml_stringbuffer_reader(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*Node<sp/>=<sp/>Buffer-&gt;Head;</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Length<sp/>-=<sp/>Length;</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Start<sp/>+=<sp/>Length;</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Node)<sp/>{</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Limit<sp/>=<sp/>ML_STRINGBUFFER_NODE_SIZE;</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node<sp/>==<sp/>Buffer-&gt;Tail)<sp/>Limit<sp/>-=<sp/>Buffer-&gt;Space;</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Buffer-&gt;Start<sp/>&lt;<sp/>Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Limit<sp/>-<sp/>Buffer-&gt;Start;</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*Next<sp/>=<sp/>Node-&gt;Next;</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_node_free(Node);</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Buffer-&gt;Start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Next)<sp/>{</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node<sp/>=<sp/>Buffer-&gt;Head<sp/>=<sp/>Next;</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Buffer-&gt;Head<sp/>=<sp/>Buffer-&gt;Tail<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Buffer-&gt;Space<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3981"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"></highlight></codeline>
<codeline lineno="3983"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_stringbuffer_writer(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*Node<sp/>=<sp/>Buffer-&gt;Tail<sp/>?:<sp/>(<ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*)&amp;Buffer-&gt;Head;</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Length<sp/>+=<sp/>Length;</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Space<sp/>-=<sp/>Length;</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Buffer-&gt;Space)<sp/>{</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node<sp/>=<sp/>Node-&gt;Next<sp/>=<sp/>ml_stringbuffer_node();</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Buffer-&gt;Space<sp/>=<sp/>ML_STRINGBUFFER_NODE_SIZE;</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Buffer-&gt;Tail<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Node-&gt;Chars<sp/>+<sp/>ML_STRINGBUFFER_NODE_SIZE<sp/>-<sp/>Buffer-&gt;Space;</highlight></codeline>
<codeline lineno="3993"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"></highlight></codeline>
<codeline lineno="3995"><highlight class="normal">ssize_t<sp/>ml_stringbuffer_write(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*String,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//fprintf(stderr,<sp/>&quot;ml_stringbuffer_add(%s,<sp/>%ld)\n&quot;,<sp/>String,<sp/>Length);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Remaining<sp/>=<sp/>Length;</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*Node<sp/>=<sp/>Buffer-&gt;Tail<sp/>?:<sp/>(<ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*)&amp;Buffer-&gt;Head;</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Buffer-&gt;Space<sp/>&lt;<sp/>Remaining)<sp/>{</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Node-&gt;Chars<sp/>+<sp/>ML_STRINGBUFFER_NODE_SIZE<sp/>-<sp/>Buffer-&gt;Space,<sp/>String,<sp/>Buffer-&gt;Space);</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>+=<sp/>Buffer-&gt;Space;</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Remaining<sp/>-=<sp/>Buffer-&gt;Space;</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node<sp/>=<sp/>Node-&gt;Next<sp/>=<sp/>ml_stringbuffer_node();</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Buffer-&gt;Space<sp/>=<sp/>ML_STRINGBUFFER_NODE_SIZE;</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(Node-&gt;Chars<sp/>+<sp/>ML_STRINGBUFFER_NODE_SIZE<sp/>-<sp/>Buffer-&gt;Space,<sp/>String,<sp/>Remaining);</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Space<sp/>-=<sp/>Remaining;</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Length<sp/>+=<sp/>Length;</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Tail<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Length;</highlight></codeline>
<codeline lineno="4011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"></highlight></codeline>
<codeline lineno="4013"><highlight class="normal">ssize_t<sp/>ml_stringbuffer_printf(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Format,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*Node<sp/>=<sp/>Buffer-&gt;Tail<sp/>?:<sp/>(<ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*)&amp;Buffer-&gt;Head;</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Space<sp/>=<sp/>Buffer-&gt;Space;</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Space)<sp/>{</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node<sp/>=<sp/>Node-&gt;Next<sp/>=<sp/>ml_stringbuffer_node();</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Space<sp/>=<sp/>Buffer-&gt;Space<sp/>=<sp/>ML_STRINGBUFFER_NODE_SIZE;</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Buffer-&gt;Tail<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Chars<sp/>=<sp/>Node-&gt;Chars<sp/>+<sp/>ML_STRINGBUFFER_NODE_SIZE<sp/>-<sp/>Space;</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>Args;</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>Format);</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>vsnprintf(Chars,<sp/>Space,<sp/>Format,<sp/>Args);</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&lt;<sp/>Space)<sp/>{</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Buffer-&gt;Space<sp/>-=<sp/>Length;</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Buffer-&gt;Length<sp/>+=<sp/>Length;</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Chars<sp/>=<sp/>alloca(Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_list<sp/>Args;</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_start(Args,<sp/>Format);</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vsprintf(Chars,<sp/>Format,<sp/>Args);</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Chars,<sp/>Length);</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Length;</highlight></codeline>
<codeline lineno="4038"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"></highlight></codeline>
<codeline lineno="4040"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stringbuffer_put(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Char)<sp/>{</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*Node<sp/>=<sp/>Buffer-&gt;Tail<sp/>?:<sp/>(<ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*)&amp;Buffer-&gt;Head;</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Buffer-&gt;Space)<sp/>{</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node<sp/>=<sp/>Node-&gt;Next<sp/>=<sp/>ml_stringbuffer_node();</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Buffer-&gt;Space<sp/>=<sp/>ML_STRINGBUFFER_NODE_SIZE;</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/>Node-&gt;Chars[ML_STRINGBUFFER_NODE_SIZE<sp/>-<sp/>Buffer-&gt;Space]<sp/>=<sp/>Char;</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Space<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Length<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Tail<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="4050"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"></highlight></codeline>
<codeline lineno="4052"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ml_stringbuffer_last(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer)<sp/>{</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*Node<sp/>=<sp/>Buffer-&gt;Tail;</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Buffer-&gt;Space<sp/>==<sp/>ML_STRINGBUFFER_NODE_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*Prev<sp/>=<sp/>Buffer-&gt;Head;</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Prev<sp/>==<sp/>Node)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Prev-&gt;Next<sp/>!=<sp/>Node)<sp/>Prev<sp/>=<sp/>Prev-&gt;Next;</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Prev-&gt;Chars[ML_STRINGBUFFER_NODE_SIZE<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Node-&gt;Chars[ML_STRINGBUFFER_NODE_SIZE<sp/>-<sp/>(Buffer-&gt;Space<sp/>+<sp/>1)];</highlight></codeline>
<codeline lineno="4062"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"></highlight></codeline>
<codeline lineno="4064"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stringbuffer_put32(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/>uint32_t<sp/>Code)<sp/>{</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Val[8];</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>LeadByteMax<sp/>=<sp/>0x7F;</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Code<sp/>&gt;<sp/>LeadByteMax)<sp/>{</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Val[I++]<sp/>=<sp/>(Code<sp/>&amp;<sp/>0x3F)<sp/>|<sp/>0x80;</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>&gt;&gt;=<sp/>6;</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LeadByteMax<sp/>&gt;&gt;=<sp/>(I<sp/>==<sp/>1<sp/>?<sp/>2<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/>Val[I++]<sp/>=<sp/>(Code<sp/>&amp;<sp/>LeadByteMax)<sp/>|<sp/>(~LeadByteMax<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(I--)<sp/>ml_stringbuffer_put(Buffer,<sp/>Val[I]);</highlight></codeline>
<codeline lineno="4075"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"></highlight></codeline>
<codeline lineno="4077"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stringbuffer_finish(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*String)<sp/>{</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*P<sp/>=<sp/>String;</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*Node<sp/>=<sp/>Buffer-&gt;Head;</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Start<sp/>=<sp/>Buffer-&gt;Start;</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Node-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(P,<sp/>Node-&gt;Chars<sp/>+<sp/>Start,<sp/>ML_STRINGBUFFER_NODE_SIZE<sp/>-<sp/>Start);</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P<sp/>+=<sp/>ML_STRINGBUFFER_NODE_SIZE<sp/>-<sp/>Start;</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node<sp/>=<sp/>Node-&gt;Next;</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(P,<sp/>Node-&gt;Chars<sp/>+<sp/>Start,<sp/>ML_STRINGBUFFER_NODE_SIZE<sp/>-<sp/>(Buffer-&gt;Space<sp/>+<sp/>Start));</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/>P<sp/>+=<sp/>ML_STRINGBUFFER_NODE_SIZE<sp/>-<sp/>(Buffer-&gt;Space<sp/>+<sp/>Start);</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/><sp/>*P++<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"></highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*Head<sp/>=<sp/>Buffer-&gt;Head,<sp/>*Tail<sp/>=<sp/>Buffer-&gt;Tail;</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*CacheNext<sp/>=<sp/>StringBufferNodeCache;</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tail-&gt;Next<sp/>=<sp/>CacheNext;</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!atomic_compare_exchange_weak(&amp;StringBufferNodeCache,<sp/>&amp;CacheNext,<sp/>Head));</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/><sp/><sp/>Tail-&gt;Next<sp/>=<sp/>StringBufferNodeCache;</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/><sp/><sp/>StringBufferNodeCache<sp/>=<sp/>Head;</highlight></codeline>
<codeline lineno="4100"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Head<sp/>=<sp/>Buffer-&gt;Tail<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Length<sp/>=<sp/>Buffer-&gt;Space<sp/>=<sp/>Buffer-&gt;Start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"></highlight></codeline>
<codeline lineno="4105"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_stringbuffer_get_string(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer)<sp/>{</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Buffer-&gt;Length<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*String<sp/>=<sp/>snew(Buffer-&gt;Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_finish(Buffer,<sp/>String);</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String;</highlight></codeline>
<codeline lineno="4110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"></highlight></codeline>
<codeline lineno="4112"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_stringbuffer_get_uncollectable(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer)<sp/>{</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Buffer-&gt;Length<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*String<sp/>=<sp/>GC_MALLOC_ATOMIC_UNCOLLECTABLE(Buffer-&gt;Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_finish(Buffer,<sp/>String);</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String;</highlight></codeline>
<codeline lineno="4117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"></highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_stringbuffer_get_value(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer)<sp/>{</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>Buffer-&gt;Length;</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_cstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Chars<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_finish(Buffer,<sp/>Chars);</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Chars,<sp/>Length);</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"></highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_stringbuffer_to_address(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer)<sp/>{</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>Buffer-&gt;Length;</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Chars<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length)<sp/>ml_stringbuffer_finish(Buffer,<sp/>Chars);</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_address(Chars,<sp/>Length);</highlight></codeline>
<codeline lineno="4135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"></highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_stringbuffer_to_buffer(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer)<sp/>{</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>Buffer-&gt;Length;</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Chars<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length)<sp/>ml_stringbuffer_finish(Buffer,<sp/>Chars);</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_buffer(Chars,<sp/>Length);</highlight></codeline>
<codeline lineno="4142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"></highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_stringbuffer_to_string(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer)<sp/>{</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>Buffer-&gt;Length;</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Chars<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length)<sp/>ml_stringbuffer_finish(Buffer,<sp/>Chars);</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Chars,<sp/>Length);</highlight></codeline>
<codeline lineno="4149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"></highlight></codeline>
<codeline lineno="4151"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;rest&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT)<sp/>{</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4153"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>contents<sp/>of<sp/>:mini:`Buffer`<sp/>as<sp/>a<sp/>string<sp/>and<sp/>clears<sp/>:mini:`Buffer`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4155"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>B<sp/>:=<sp/>string::buffer()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4156"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>B:write(&quot;Hello<sp/>world&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4157"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>B:rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4158"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>B:rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer_get_value(Buffer);</highlight></codeline>
<codeline lineno="4161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"></highlight></codeline>
<codeline lineno="4163"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;get&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT)<sp/>{</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4165"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>contents<sp/>of<sp/>:mini:`Buffer`<sp/>as<sp/>a<sp/>string<sp/>and<sp/>clears<sp/>:mini:`Buffer`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>..<sp/>deprecated::<sp/>2.5.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4168"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4169"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Use<sp/>:mini:`Buffer:rest`<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4170"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>B<sp/>:=<sp/>string::buffer()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4171"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>B:write(&quot;Hello<sp/>world&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4172"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>B:get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4173"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>B:get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer_get_value(Buffer);</highlight></codeline>
<codeline lineno="4176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"></highlight></codeline>
<codeline lineno="4178"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;length&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT)<sp/>{</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4180"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>currently<sp/>available<sp/>in<sp/>:mini:`Buffer`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4182"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>B<sp/>:=<sp/>string::buffer()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4183"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>B:write(&quot;Hello<sp/>world&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4184"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>B:length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Buffer-&gt;Length);</highlight></codeline>
<codeline lineno="4187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"></highlight></codeline>
<codeline lineno="4189"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_stringbuffer_drain(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*callback)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*Node<sp/>=<sp/>Buffer-&gt;Head;</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Start<sp/>=<sp/>Buffer-&gt;Start;</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>callback(Data,<sp/>Node-&gt;Chars<sp/>+<sp/>Start,<sp/>(ML_STRINGBUFFER_NODE_SIZE<sp/>-<sp/>Buffer-&gt;Space)<sp/>-<sp/>Start);</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>callback(Data,<sp/>Node-&gt;Chars<sp/>+<sp/>Start,<sp/>ML_STRINGBUFFER_NODE_SIZE<sp/>-<sp/>Start);</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/>Node<sp/>=<sp/>Node-&gt;Next;</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Node-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>callback(Data,<sp/>Node-&gt;Chars,<sp/>ML_STRINGBUFFER_NODE_SIZE);</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node<sp/>=<sp/>Node-&gt;Next;</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>callback(Data,<sp/>Node-&gt;Chars,<sp/>ML_STRINGBUFFER_NODE_SIZE<sp/>-<sp/>Buffer-&gt;Space);</highlight></codeline>
<codeline lineno="4207"><highlight class="normal">done:;</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*Head<sp/>=<sp/>Buffer-&gt;Head,<sp/>*Tail<sp/>=<sp/>Buffer-&gt;Tail;</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__node__t" kindref="compound">ml_stringbuffer_node_t</ref><sp/>*CacheNext<sp/>=<sp/>StringBufferNodeCache;</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tail-&gt;Next<sp/>=<sp/>CacheNext;</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!atomic_compare_exchange_weak(&amp;StringBufferNodeCache,<sp/>&amp;CacheNext,<sp/>Head));</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/><sp/><sp/>Tail-&gt;Next<sp/>=<sp/>StringBufferNodeCache;</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><sp/><sp/>StringBufferNodeCache<sp/>=<sp/>Head;</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Head<sp/>=<sp/>Buffer-&gt;Tail<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Length<sp/>=<sp/>Buffer-&gt;Space<sp/>=<sp/>Buffer-&gt;Start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="4221" refid="structml__stringbuffer__append__state__t" refkind="compound"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"></highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_stringbuffer_simple_append(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Chain<sp/>=<sp/>Buffer-&gt;Chain;</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Link<sp/>=<sp/>Chain;<sp/>Link;<sp/>Link<sp/>=<sp/>Link-&gt;Previous)<sp/>{</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Link-&gt;Value<sp/>==<sp/>Value)<sp/>{</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>Link-&gt;Index;</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Index)<sp/>Index<sp/>=<sp/>Link-&gt;Index<sp/>=<sp/>++Buffer-&gt;Index;</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;&gt;%d&quot;</highlight><highlight class="normal">,<sp/>Index);</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Buffer;</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>NewChain[1]<sp/>=<sp/>{{Chain,<sp/>Value,<sp/>0}};</highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Chain<sp/>=<sp/>NewChain;</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>ml_simple_inline(AppendMethod,<sp/>2,<sp/>Buffer,<sp/>Value);</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewChain-&gt;Index)<sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;&lt;%d&quot;</highlight><highlight class="normal">,<sp/>NewChain-&gt;Index);</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Chain<sp/>=<sp/>Chain;</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="4239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"></highlight></codeline>
<codeline lineno="4241"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>Chain[1];</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[2];</highlight></codeline>
<codeline lineno="4245"><highlight class="normal">}<sp/><ref refid="structml__stringbuffer__append__state__t" kindref="compound">ml_stringbuffer_append_state_t</ref>;</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"></highlight></codeline>
<codeline lineno="4247"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stringbuffer_append_run(<ref refid="structml__stringbuffer__append__state__t" kindref="compound">ml_stringbuffer_append_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)State-&gt;Args[0];</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Chain-&gt;Index)<sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;&lt;%d&quot;</highlight><highlight class="normal">,<sp/>State-&gt;Chain-&gt;Index);</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Chain<sp/>=<sp/>State-&gt;Chain-&gt;Previous;</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Buffer);</highlight></codeline>
<codeline lineno="4254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"></highlight></codeline>
<codeline lineno="4256"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stringbuffer_append(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Link<sp/>=<sp/>Buffer-&gt;Chain;<sp/>Link;<sp/>Link<sp/>=<sp/>Link-&gt;Previous)<sp/>{</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Link-&gt;Value<sp/>==<sp/>Value)<sp/>{</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>Link-&gt;Index;</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Index)<sp/>Index<sp/>=<sp/>Link-&gt;Index<sp/>=<sp/>++Buffer-&gt;Index;</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;&gt;%d&quot;</highlight><highlight class="normal">,<sp/>Index);</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Buffer);</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__append__state__t" kindref="compound">ml_stringbuffer_append_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__stringbuffer__append__state__t" kindref="compound">ml_stringbuffer_append_state_t</ref>);</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_stringbuffer_append_run;</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Chain-&gt;Previous<sp/>=<sp/>Buffer-&gt;Chain;</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Chain-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Chain<sp/>=<sp/>State-&gt;Chain;</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Buffer;</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>AppendMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="4275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"></highlight></codeline>
<codeline lineno="4277"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer;</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index,<sp/>Count,<sp/>Initial;</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[];</highlight></codeline>
<codeline lineno="4282"><highlight class="normal">}<sp/><ref refid="structml__write__state__t" kindref="compound">ml_write_state_t</ref>;</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"></highlight></codeline>
<codeline lineno="4284"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_string_buffer_write_run(<ref refid="structml__write__state__t" kindref="compound">ml_write_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>State-&gt;Buffer;</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++State-&gt;Index<sp/>&lt;<sp/>State-&gt;Count)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer_append((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Buffer,<sp/>State-&gt;Args[State-&gt;Index]);</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>ml_integer(State-&gt;Buffer-&gt;Length<sp/>-<sp/>State-&gt;Initial));</highlight></codeline>
<codeline lineno="4289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"></highlight></codeline>
<codeline lineno="4291"><highlight class="normal">ML_METHODVX(</highlight><highlight class="stringliteral">&quot;write&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4293"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value/1,...,Value/n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4294"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Writes<sp/>each<sp/>:mini:`Value/i`<sp/>in<sp/>turn<sp/>to<sp/>:mini:`Buffer`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4296"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>B<sp/>:=<sp/>string::buffer()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4297"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>B:write(&quot;1<sp/>+<sp/>1<sp/>=<sp/>&quot;,<sp/>1<sp/>+<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4298"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>B:rest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__write__state__t" kindref="compound">ml_write_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__write__state__t" kindref="compound">ml_write_state_t</ref>,<sp/>Count<sp/>-<sp/>1,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_string_buffer_write_run;</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Initial<sp/>=<sp/>State-&gt;Buffer-&gt;Length;</highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>Count<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>State-&gt;Args[I<sp/>-<sp/>1]<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer_append((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Buffer,<sp/>State-&gt;Args[0]);</highlight></codeline>
<codeline lineno="4309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"></highlight></codeline>
<codeline lineno="4311"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_string_init()<sp/>{</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/><sp/><sp/>setlocale(LC_ALL,<sp/></highlight><highlight class="stringliteral">&quot;C.UTF-8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_word<sp/>StringBufferLayout[]<sp/>=<sp/>{1};</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/><sp/><sp/>StringBufferDesc<sp/>=<sp/>GC_make_descriptor(StringBufferLayout,<sp/>1);</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLStringT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;buffer&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT);</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/><sp/><sp/>regcomp(IntFormat,<sp/></highlight><highlight class="stringliteral">&quot;^\\s*%[-+<sp/>#&apos;0]*[.0-9]*[diouxX]\\s*$&quot;</highlight><highlight class="normal">,<sp/>REG_NOSUB);</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/><sp/><sp/>regcomp(LongFormat,<sp/></highlight><highlight class="stringliteral">&quot;^\\s*%[-+<sp/>#&apos;0]*[.0-9]*l[diouxX]\\s*$&quot;</highlight><highlight class="normal">,<sp/>REG_NOSUB);</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/><sp/><sp/>regcomp(RealFormat,<sp/></highlight><highlight class="stringliteral">&quot;^\\s*%[-+<sp/>#&apos;0]*[.0-9]*[aefgAEG]\\s*$&quot;</highlight><highlight class="normal">,<sp/>REG_NOSUB);</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/><sp/><sp/>regcomp(StringFormat,<sp/></highlight><highlight class="stringliteral">&quot;^\\s*%[-]?[0-9]*[s]\\s*$&quot;</highlight><highlight class="normal">,<sp/>REG_NOSUB);</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLStringT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;switch&quot;</highlight><highlight class="normal">,<sp/>MLStringSwitch);</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLStringT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;escape&quot;</highlight><highlight class="normal">,<sp/>MLStringEscape);</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLRegexT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;escape&quot;</highlight><highlight class="normal">,<sp/>MLRegexEscape);</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_string_init.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4324"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*TArgs[3]<sp/>=<sp/>{MLSequenceT,<sp/>MLIntegerT,<sp/>MLStringT};</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_parent(MLStringT,<sp/>ml_generic_type(3,<sp/>TArgs));</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4328"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_TRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Features<sp/>=<sp/>ml_module(</highlight><highlight class="stringliteral">&quot;regex::features&quot;</highlight><highlight class="normal">,<sp/>NULL);</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLRegexT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;features&quot;</highlight><highlight class="normal">,<sp/>Features);</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tre_config(TRE_CONFIG_APPROX,<sp/>&amp;Result))<sp/>{</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_module_export(Features,<sp/></highlight><highlight class="stringliteral">&quot;approx&quot;</highlight><highlight class="normal">,<sp/>ml_boolean(Result));</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tre_config(TRE_CONFIG_WCHAR,<sp/>&amp;Result))<sp/>{</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_module_export(Features,<sp/></highlight><highlight class="stringliteral">&quot;wchar&quot;</highlight><highlight class="normal">,<sp/>ml_boolean(Result));</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tre_config(TRE_CONFIG_MULTIBYTE,<sp/>&amp;Result))<sp/>{</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_module_export(Features,<sp/></highlight><highlight class="stringliteral">&quot;multibyte&quot;</highlight><highlight class="normal">,<sp/>ml_boolean(Result));</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Version;</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tre_config(TRE_CONFIG_VERSION,<sp/>&amp;Version))<sp/>{</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_module_export(Features,<sp/></highlight><highlight class="stringliteral">&quot;version&quot;</highlight><highlight class="normal">,<sp/>ml_string(Version,<sp/>-1));</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4346"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_ICU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLStringT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;norm&quot;</highlight><highlight class="normal">,<sp/>MLStringNormT);</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLStringT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;ctype&quot;</highlight><highlight class="normal">,<sp/>MLStringCTypeT);</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4350"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ml_string.c"/>
  </compounddef>
</doxygen>
