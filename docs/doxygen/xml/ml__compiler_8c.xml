<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__compiler_8c" kind="file" language="C++">
    <compoundname>ml_compiler.c</compoundname>
    <includes refid="minilang_8h" local="yes">minilang.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes refid="ml__compiler2_8h" local="yes">ml_compiler2.h</includes>
    <includes refid="stringmap_8h" local="yes">stringmap.h</includes>
    <includes refid="ml__runtime_8h" local="yes">ml_runtime.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">limits.h</includes>
    <includes refid="ml__expr__types_8c" local="yes">ml_expr_types.c</includes>
    <includes refid="keywords_8c" local="yes">keywords.c</includes>
    <includes local="yes">ml_compiler_init.c</includes>
    <incdepgraph>
      <node id="13">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>keywords.c</label>
        <link refid="keywords_8c_source"/>
      </node>
      <node id="2">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>ml_bytecode.h</label>
        <link refid="ml__bytecode_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_compiler.c</label>
        <link refid="ml__compiler_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ml_compiler2.h</label>
        <link refid="ml__compiler2_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>ml_expr_types.c</label>
        <link refid="ml__expr__types_8c_source"/>
      </node>
      <node id="22">
        <label>ml_expr_types.h</label>
        <link refid="ml__expr__types_8h_source"/>
      </node>
      <node id="17">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>ml_opcodes.h</label>
        <link refid="ml__opcodes_8h_source"/>
      </node>
      <node id="7">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="18">
        <label>gc/gc.h</label>
      </node>
      <node id="16">
        <label>limits.h</label>
      </node>
      <node id="25">
        <label>ml_compiler_init.c</label>
      </node>
      <node id="15">
        <label>ml_config.h</label>
      </node>
      <node id="6">
        <label>setjmp.h</label>
      </node>
      <node id="11">
        <label>stdarg.h</label>
      </node>
      <node id="14">
        <label>stdint.h</label>
      </node>
      <node id="9">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="10">
        <label>string.h</label>
      </node>
      <node id="4">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structmlc__upvalue__t" prot="public">mlc_upvalue_t</innerclass>
    <innerclass refid="structmlc__try__t" prot="public">mlc_try_t</innerclass>
    <innerclass refid="structmlc__token__t" prot="public">mlc_token_t</innerclass>
    <innerclass refid="structmlc__expected__delimiter__t" prot="public">mlc_expected_delimiter_t</innerclass>
    <innerclass refid="structml__parser__t" prot="public">ml_parser_t</innerclass>
    <innerclass refid="structml__compiler__t" prot="public">ml_compiler_t</innerclass>
    <innerclass refid="structmlc__compile__frame__t" prot="public">mlc_compile_frame_t</innerclass>
    <innerclass refid="structmlc__if__expr__frame__t" prot="public">mlc_if_expr_frame_t</innerclass>
    <innerclass refid="structmlc__parent__expr__frame__t" prot="public">mlc_parent_expr_frame_t</innerclass>
    <innerclass refid="structmlc__link__expr__frame__t" prot="public">mlc_link_expr_frame_t</innerclass>
    <innerclass refid="structmlc__config__expr__frame__t" prot="public">mlc_config_expr_frame_t</innerclass>
    <innerclass refid="structmlc__switch__expr__frame__t" prot="public">mlc_switch_expr_frame_t</innerclass>
    <innerclass refid="structmlc__must__t" prot="public">mlc_must_t</innerclass>
    <innerclass refid="structmlc__must__frame__t" prot="public">mlc_must_frame_t</innerclass>
    <innerclass refid="structmlc__loop__t" prot="public">mlc_loop_t</innerclass>
    <innerclass refid="structmlc__loop__frame__t" prot="public">mlc_loop_frame_t</innerclass>
    <innerclass refid="structmlc__exit__expr__frame__t" prot="public">mlc_exit_expr_frame_t</innerclass>
    <innerclass refid="structmlc__with__expr__frame__t" prot="public">mlc_with_expr_frame_t</innerclass>
    <innerclass refid="structmlc__for__expr__frame__t" prot="public">mlc_for_expr_frame_t</innerclass>
    <innerclass refid="structmlc__block__t" prot="public">mlc_block_t</innerclass>
    <innerclass refid="structmlc__local__expr__frame__t" prot="public">mlc_local_expr_frame_t</innerclass>
    <innerclass refid="structmlc__def__in__expr__frame__t" prot="public">mlc_def_in_expr_frame_t</innerclass>
    <innerclass refid="structml__inline__expr__frame__t" prot="public">ml_inline_expr_frame_t</innerclass>
    <innerclass refid="structml__call__expr__frame__t" prot="public">ml_call_expr_frame_t</innerclass>
    <innerclass refid="structml__macro__frame__t" prot="public">ml_macro_frame_t</innerclass>
    <innerclass refid="structmlc__inline__call__frame__t" prot="public">mlc_inline_call_frame_t</innerclass>
    <innerclass refid="structml__guard__expr__frame__t" prot="public">ml_guard_expr_frame_t</innerclass>
    <innerclass refid="structmlc__scoped__decl__t" prot="public">mlc_scoped_decl_t</innerclass>
    <innerclass refid="structmlc__scoped__expr__t" prot="public">mlc_scoped_expr_t</innerclass>
    <innerclass refid="structmlc__subst__expr__t" prot="public">mlc_subst_expr_t</innerclass>
    <innerclass refid="structmlc__args__expr__t" prot="public">mlc_args_expr_t</innerclass>
    <innerclass refid="structmlc__args__expr__frame__t" prot="public">mlc_args_expr_frame_t</innerclass>
    <innerclass refid="structml__resolve__expr__frame__t" prot="public">ml_resolve_expr_frame_t</innerclass>
    <innerclass refid="structml__string__expr__frame__t" prot="public">ml_string_expr_frame_t</innerclass>
    <innerclass refid="structmlc__fun__expr__frame__t" prot="public">mlc_fun_expr_frame_t</innerclass>
    <innerclass refid="structmlc__default__expr__frame__t" prot="public">mlc_default_expr_frame_t</innerclass>
    <innerclass refid="structml__macro__subst__t" prot="public">ml_macro_subst_t</innerclass>
    <innerclass refid="structmlc__block__builder__t" prot="public">mlc_block_builder_t</innerclass>
    <innerclass refid="structmlc__expr__builder__t" prot="public">mlc_expr_builder_t</innerclass>
    <innerclass refid="structml__compiler__zip__t" prot="public">ml_compiler_zip_t</innerclass>
    <innerclass refid="structml__compiler__zip__state__t" prot="public">ml_compiler_zip_state_t</innerclass>
    <innerclass refid="structml__accept__block__t" prot="public">ml_accept_block_t</innerclass>
    <innerclass refid="structml__evaluate__state__t" prot="public">ml_evaluate_state_t</innerclass>
    <innerclass refid="structml__global__t" prot="public">ml_global_t</innerclass>
    <innerclass refid="structml__command__idents__frame__t" prot="public">ml_command_idents_frame_t</innerclass>
    <innerclass refid="structml__command__ident__frame__t" prot="public">ml_command_ident_frame_t</innerclass>
    <innerclass refid="structml__command__decl__frame__t" prot="public">ml_command_decl_frame_t</innerclass>
    <innerclass refid="structml__load__file__state__t" prot="public">ml_load_file_state_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__compiler_8c_1aebec330325aff5cbc7d9c9248e2cae4a" prot="public" static="no">
        <name>ML_CATEGORY</name>
        <initializer>&quot;compiler&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="13" column="10" bodyfile="src/ml_compiler.c" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__compiler_8c_1ae0bdddf37723bb24fdf59235f5c6f3a6" prot="public" static="no">
        <name>ML_EXPR</name>
        <param><defname>EXPR</defname></param>
        <param><defname>TYPE</defname></param>
        <param><defname>COMP</defname></param>
        <initializer>	mlc_ ## TYPE ## _expr_t *EXPR = new(mlc_ ## TYPE ## _expr_t); \
	EXPR-&gt;compile = ml_ ## COMP ## _expr_compile; \
	EXPR-&gt;Source = Parser-&gt;Source.Name; \
	EXPR-&gt;StartLine = EXPR-&gt;EndLine = Parser-&gt;Source.Line</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="27" column="9" bodyfile="src/ml_compiler.c" bodystart="27" bodyend="31"/>
      </memberdef>
      <memberdef kind="define" id="ml__compiler_8c_1aa7c971f9732767def904ded39aa5b8d0" prot="public" static="no">
        <name>ML_EXPR_END</name>
        <param><defname>EXPR</defname></param>
        <initializer>(((<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *)EXPR)-&gt;EndLine = Parser-&gt;Source.Line, (<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *)EXPR)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="33" column="9" bodyfile="src/ml_compiler.c" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__compiler_8c_1a6df1d22fb5f09eccc23b9f399670cfd7" prot="public" static="no">
        <name>STRINGIFY</name>
        <param><defname>x</defname></param>
        <initializer>#x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="78" column="9" bodyfile="src/ml_compiler.c" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__compiler_8c_1a9063e80f8777300c93afde6e6f4c9cea" prot="public" static="no">
        <name>TOSTRING</name>
        <param><defname>x</defname></param>
        <initializer>STRINGIFY(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="79" column="9" bodyfile="src/ml_compiler.c" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__compiler_8c_1ae8ce44db9a5d08fe37716916f8ab81e8" prot="public" static="no">
        <name>FRAME_BLOCK_SIZE</name>
        <initializer>2000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="105" column="9" bodyfile="src/ml_compiler.c" bodystart="105" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="ml__compiler_8c_1adb0f82ea7e0b112201467c41483da9c3" prot="public" static="no" strong="no">
        <type></type>
        <name>ml_expr_level_t</name>
        <enumvalue id="ml__compiler_8c_1adb0f82ea7e0b112201467c41483da9c3a0d72b0925dde68daa19d94badafc7e74" prot="public">
          <name>EXPR_SIMPLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__compiler_8c_1adb0f82ea7e0b112201467c41483da9c3afea9e82be3ba5cac872e3a9759e913c4" prot="public">
          <name>EXPR_AND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__compiler_8c_1adb0f82ea7e0b112201467c41483da9c3ad82d2142b175035bbf6e924084a4757c" prot="public">
          <name>EXPR_OR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__compiler_8c_1adb0f82ea7e0b112201467c41483da9c3a778a2c5ff374457612535d29f04b5e5d" prot="public">
          <name>EXPR_FOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__compiler_8c_1adb0f82ea7e0b112201467c41483da9c3a04f7c6d7dd4ec2afcb0b8c9b29d7d4b0" prot="public">
          <name>EXPR_DEFAULT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3893" column="1" bodyfile="src/ml_compiler.c" bodystart="3893" bodyend="3899"/>
      </memberdef>
      <memberdef kind="enum" id="ml__compiler_8c_1aee31488281854eeab38b39d1aa441424" prot="public" static="no" strong="no">
        <type></type>
        <name>ml_char_type_t</name>
        <enumvalue id="ml__compiler_8c_1aee31488281854eeab38b39d1aa441424a6c5f4f3d8e7e33adc1fcc686f56fa0d9" prot="public">
          <name>ML_CHAR_OTHER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__compiler_8c_1aee31488281854eeab38b39d1aa441424aea4e12997be87f9b00ed03b7c3aeaea3" prot="public">
          <name>ML_CHAR_EOI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__compiler_8c_1aee31488281854eeab38b39d1aa441424a74f2a49e09f4313c4103fcb15536910f" prot="public">
          <name>ML_CHAR_SPACE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__compiler_8c_1aee31488281854eeab38b39d1aa441424ac982f526a10adf7d629e3b3e95ede81c" prot="public">
          <name>ML_CHAR_LINE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__compiler_8c_1aee31488281854eeab38b39d1aa441424a0651e84778e2f31cefe46ce1e53646a3" prot="public">
          <name>ML_CHAR_ALPHA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__compiler_8c_1aee31488281854eeab38b39d1aa441424a69052c2b48af4f7250134e3cf43d0a1f" prot="public">
          <name>ML_CHAR_DIGIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__compiler_8c_1aee31488281854eeab38b39d1aa441424a9d50f7c678b58207cbf4447f4783c569" prot="public">
          <name>ML_CHAR_OPER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__compiler_8c_1aee31488281854eeab38b39d1aa441424a626607bf77fe11872dcd955c236a765c" prot="public">
          <name>ML_CHAR_DELIM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__compiler_8c_1aee31488281854eeab38b39d1aa441424ae2b0279f4444a67bf0de3da21d1dee7f" prot="public">
          <name>ML_CHAR_COLON</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__compiler_8c_1aee31488281854eeab38b39d1aa441424a996f07dfdbb104bfaed11fe2ca0f3eb5" prot="public">
          <name>ML_CHAR_SQUOTE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__compiler_8c_1aee31488281854eeab38b39d1aa441424ad2e0bb89604b91d832d8a5dd20fbf6d2" prot="public">
          <name>ML_CHAR_DQUOTE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__compiler_8c_1aee31488281854eeab38b39d1aa441424a442b06239025b759e1a77acf332adfee" prot="public">
          <name>ML_CHAR_SPECIAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4025" column="1" bodyfile="src/ml_compiler.c" bodystart="4025" bodyend="4038"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ml__compiler_8c_1a8e6cae008f0ec4ab2b4b27ab6e9d100c" prot="public" static="no">
        <type>struct mlc_token_t</type>
        <definition>typedef struct mlc_token_t mlc_token_t</definition>
        <argsstring></argsstring>
        <name>mlc_token_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="35" column="26" bodyfile="src/ml_compiler.c" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__compiler_8c_1a3dc16206974caa786bf36ef95854d7c3" prot="public" static="no">
        <type>struct mlc_expected_delimiter_t</type>
        <definition>typedef struct mlc_expected_delimiter_t mlc_expected_delimiter_t</definition>
        <argsstring></argsstring>
        <name>mlc_expected_delimiter_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="44" column="39" bodyfile="src/ml_compiler.c" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__compiler_8c_1a74bb888d2483f69208daaf0b52047e93" prot="public" static="no">
        <type>struct mlc_scoped_expr_t</type>
        <definition>typedef struct mlc_scoped_expr_t mlc_scoped_expr_t</definition>
        <argsstring></argsstring>
        <name>mlc_scoped_expr_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2493" column="32" bodyfile="src/ml_compiler.c" bodystart="2493" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__compiler_8c_1ae622e68b5b5f28f578162b6cab748e9a" prot="public" static="no">
        <type>struct mlc_subst_expr_t</type>
        <definition>typedef struct mlc_subst_expr_t mlc_subst_expr_t</definition>
        <argsstring></argsstring>
        <name>mlc_subst_expr_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2619" column="31" bodyfile="src/ml_compiler.c" bodystart="2619" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__compiler_8c_1a118e9cfbe3bc3b0488a48c44c191c0ff" prot="public" static="no">
        <type>struct mlc_args_expr_t</type>
        <definition>typedef struct mlc_args_expr_t mlc_args_expr_t</definition>
        <argsstring></argsstring>
        <name>mlc_args_expr_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2650" column="30" bodyfile="src/ml_compiler.c" bodystart="2650" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="ml__compiler_8c_1a2ddee4a84b6bee62fca996492e869fa6" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t* IndexMethod</definition>
        <argsstring></argsstring>
        <name>IndexMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="81" column="19" declfile="src/ml_compiler.c" declline="81" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="ml__compiler_8c_1a0d1b33b86c43befcfbb9b4e1e58a4e56" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t* SymbolMethod</definition>
        <argsstring></argsstring>
        <name>SymbolMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="82" column="19" declfile="src/ml_compiler.c" declline="82" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="ml__compiler_8c_1a1199320700d4b5af70337365b34d32c6" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref></type>
        <definition>ml_value_t MLBlank[]</definition>
        <argsstring>[]</argsstring>
        <name>MLBlank</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="261" column="19" declfile="src/ml_compiler.c" declline="261" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="ml__compiler_8c_1aa5d23af885149266086e673ce071ed1b" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref></type>
        <definition>ml_cfunctionx_t MLCall[]</definition>
        <argsstring>[]</argsstring>
        <name>MLCall</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2209" column="24" declfile="src/ml_compiler.c" declline="2209" declcolumn="24"/>
      </memberdef>
      <memberdef kind="variable" id="ml__compiler_8c_1a3d8b35b4a8cf50f348d8b42fd537d787" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* MLTokens[]</definition>
        <argsstring>[]</argsstring>
        <name>MLTokens</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3637" column="12" bodyfile="src/ml_compiler.c" bodystart="3637" bodyend="3701"/>
      </memberdef>
      <memberdef kind="variable" id="ml__compiler_8c_1a24c92ddfb17300bfc2cc6517c0d3e3ee" prot="public" static="yes" mutable="no">
        <type><ref refid="structml__inline__function__t" kindref="compound">ml_inline_function_t</ref></type>
        <definition>ml_inline_function_t MLSourceInline[1]</definition>
        <argsstring>[1]</argsstring>
        <name>MLSourceInline</name>
        <initializer>= {{MLFunctionInlineT, (<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *)MLSource}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3739" column="29" bodyfile="src/ml_compiler.c" bodystart="3739" bodyend="3739"/>
      </memberdef>
      <memberdef kind="variable" id="ml__compiler_8c_1aec6c606a00f0f9a01cf4e4c062b64423" prot="public" static="yes" mutable="no">
        <type>const unsigned char</type>
        <definition>const unsigned char CharTypes[256]</definition>
        <argsstring>[256]</argsstring>
        <name>CharTypes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4040" column="28" bodyfile="src/ml_compiler.c" bodystart="4040" bodyend="4083"/>
      </memberdef>
      <memberdef kind="variable" id="ml__compiler_8c_1a76e22bdeb81678b5880c2820ce6f0825" prot="public" static="yes" mutable="no">
        <type>const ml_token_t</type>
        <definition>const ml_token_t CharTokens[256]</definition>
        <argsstring>[256]</argsstring>
        <name>CharTokens</name>
        <initializer>= {
	0,
	[&apos;(&apos;] = MLT_LEFT_PAREN,
	[&apos;)&apos;] = MLT_RIGHT_PAREN,
	[&apos;[&apos;] = MLT_LEFT_SQUARE,
	[&apos;]&apos;] = MLT_RIGHT_SQUARE,
	[&apos;{&apos;] = MLT_LEFT_BRACE,
	[&apos;}&apos;] = MLT_RIGHT_BRACE,
	[&apos;;&apos;] = MLT_SEMICOLON,
	[&apos;:&apos;] = MLT_COLON,
	[&apos;,&apos;] = MLT_COMMA
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4085" column="25" bodyfile="src/ml_compiler.c" bodystart="4085" bodyend="4096"/>
      </memberdef>
      <memberdef kind="variable" id="ml__compiler_8c_1aa9519dca6a94ac87c2fe5815d8a750b8" prot="public" static="yes" mutable="no">
        <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref></type>
        <definition>stringmap_t StringFns[1]</definition>
        <argsstring>[1]</argsstring>
        <name>StringFns</name>
        <initializer>= {STRINGMAP_INIT}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4116" column="20" bodyfile="src/ml_compiler.c" bodystart="4116" bodyend="4116"/>
      </memberdef>
      <memberdef kind="variable" id="ml__compiler_8c_1a263a4c935d51edddeafeeb44e3d5e221" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLFunctionSequenceT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLFunctionSequenceT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5212" column="18" declfile="src/ml_compiler.c" declline="5212" declcolumn="18"/>
      </memberdef>
      <member refid="group__compiler_1ga2d75bfdaf57301a2a219a6122c94bf69" kind="variable"><name>MLEndOfInput</name></member>
      <member refid="group__compiler_1ga0ca862eaf50d8beef623b1d8a65893a8" kind="variable"><name>MLNotFound</name></member>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__compiler_8c_1a3a3d08d1cedfdc5666e1b3cff1d62b9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>long</type>
        <definition>long ml_ident_hash</definition>
        <argsstring>(const char *Ident)</argsstring>
        <name>ml_ident_hash</name>
        <param>
          <type>const char *</type>
          <declname>Ident</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="84" column="13" bodyfile="src/ml_compiler.c" bodystart="84" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a83800f871f0c765dc0a80df98ca3c550" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mlc_function_run</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value)</argsstring>
        <name>mlc_function_run</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="90" column="13" bodyfile="src/ml_compiler.c" bodystart="90" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ac9a2a75a76c4619b6931929018d68768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLCompilerFunctionT,(MLStateT), &quot;compiler-function&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLCompilerFunctionT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;compiler-function&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="99" column="1" declfile="src/ml_compiler.c" declline="99" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aa1b3aff3503cb415ceebd35cf6908f5e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__source__t" kindref="compound">ml_source_t</ref></type>
        <definition>static ml_source_t ML_TYPED_FN</definition>
        <argsstring>(ml_debugger_source, MLCompilerFunctionT, mlc_function_t *Function)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_debugger_source</type>
        </param>
        <param>
          <type>MLCompilerFunctionT</type>
        </param>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="101" column="20" bodyfile="src/ml_compiler.c" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ad15244da3ff103f30e5da65ca2b87494" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mlc_return</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value)</argsstring>
        <name>mlc_return</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="107" column="13" bodyfile="src/ml_compiler.c" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a99d78e5a53e8d645c32ccabf3d44f3cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mlc_pop</definition>
        <argsstring>(mlc_function_t *Function)</argsstring>
        <name>mlc_pop</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="112" column="13" bodyfile="src/ml_compiler.c" bodystart="112" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a601a5b7f41158bd03875dddcdee9313b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mlc_link_frame_run</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, void **Limit)</argsstring>
        <name>mlc_link_frame_run</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>Limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="116" column="13" bodyfile="src/ml_compiler.c" bodystart="116" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ab9600d6716f732f0ca9bac066fa6ed7c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static __attribute__</definition>
        <argsstring>((noinline))</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(noinline)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="122" column="8" bodyfile="src/ml_compiler.c" bodystart="122" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a728a04ce3c934b78bf17889230c50abc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref> *</type>
        <definition>ml_inst_t * ml_inst_alloc</definition>
        <argsstring>(mlc_function_t *Function, int Line, ml_opcode_t Opcode, int N)</argsstring>
        <name>ml_inst_alloc</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Line</declname>
        </param>
        <param>
          <type>ml_opcode_t</type>
          <declname>Opcode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="147" column="11" bodyfile="src/ml_compiler.c" bodystart="147" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1abaf52dfb8c7f47f05c0dc4c12ca082da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mlc_fix_links</definition>
        <argsstring>(ml_inst_t *Start, ml_inst_t *Target)</argsstring>
        <name>mlc_fix_links</name>
        <param>
          <type><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref> *</type>
          <declname>Start</declname>
        </param>
        <param>
          <type><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref> *</type>
          <declname>Target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="164" column="13" bodyfile="src/ml_compiler.c" bodystart="164" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a4ce145bb445abd04547bba3e60834a6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mlc_inc_top</definition>
        <argsstring>(mlc_function_t *Function)</argsstring>
        <name>mlc_inc_top</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="172" column="13" bodyfile="src/ml_compiler.c" bodystart="172" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a04f8ae472e7289d054f1e6448189edfc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mlc_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_expr_t *Expr, int Flags)</argsstring>
        <name>mlc_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="176" column="13" bodyfile="src/ml_compiler.c" bodystart="176" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ab740dbc448370206f116a32a31ae5702" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mlc_expr_error</definition>
        <argsstring>(mlc_function_t *Function, mlc_expr_t *Expr, ml_value_t *Error)</argsstring>
        <name>mlc_expr_error</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="180" column="13" bodyfile="src/ml_compiler.c" bodystart="180" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ab3b5c88fbeb17ecf4d9edc564474caff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref> *</type>
        <definition>static mlc_local_t * mlc_local_new</definition>
        <argsstring>(const char *Ident, int Line)</argsstring>
        <name>mlc_local_new</name>
        <param>
          <type>const char *</type>
          <declname>Ident</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="185" column="20" bodyfile="src/ml_compiler.c" bodystart="185" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a44e2aa863dfb01b97cef6cf6c0ce4b7a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mlc_expr_call2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_compile_frame_t *Frame)</argsstring>
        <name>mlc_expr_call2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__compile__frame__t" kindref="compound">mlc_compile_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="197" column="13" bodyfile="src/ml_compiler.c" bodystart="197" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ab2422d71bf1ebe12d6c85609b2bac62c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mlc_expr_call</definition>
        <argsstring>(mlc_function_t *Parent, mlc_expr_t *Expr)</argsstring>
        <name>mlc_expr_call</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Parent</declname>
        </param>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="219" column="13" bodyfile="src/ml_compiler.c" bodystart="219" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1acbe8a6cf316ed53873fb91bf6b35f473" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLExprGotoT,(), &quot;expr::goto&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLExprGotoT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;expr::goto&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="243" column="1" declfile="src/ml_compiler.c" declline="243" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a07139fd2e808f3e4a579523d60bde616" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_VALUE</definition>
        <argsstring>(MLExprGoto, MLExprGotoT)</argsstring>
        <name>ML_VALUE</name>
        <param>
          <type>MLExprGoto</type>
        </param>
        <param>
          <type>MLExprGotoT</type>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="246" column="1" declfile="src/ml_compiler.c" declline="246" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a3e111e31b64a7a07ddbffe129cd8d390" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_unknown_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_expr_t *Expr, int Flags)</argsstring>
        <name>ml_unknown_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="249" column="13" bodyfile="src/ml_compiler.c" bodystart="249" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a283f2e9eaa82f04b53087a653648ed64" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_register_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_expr_t *Expr, int Flags)</argsstring>
        <name>ml_register_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="253" column="13" bodyfile="src/ml_compiler.c" bodystart="253" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a2f24fa27fd366c01c683a17ce78c1bca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_blank_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_expr_t *Expr, int Flags)</argsstring>
        <name>ml_blank_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="263" column="13" bodyfile="src/ml_compiler.c" bodystart="263" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1af4e58c54fdb40b87be7347bc94ad4f25" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_nil_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_expr_t *Expr, int Flags)</argsstring>
        <name>ml_nil_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="273" column="13" bodyfile="src/ml_compiler.c" bodystart="273" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a44d73506255af519cdacd7e667b19804" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_value_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_value_expr_t *Expr, int Flags)</argsstring>
        <name>ml_value_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__value__expr__t" kindref="compound">mlc_value_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="282" column="13" bodyfile="src/ml_compiler.c" bodystart="282" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ae8c02e8c1fa75cf46362ab5f5223e0e4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_if_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_if_expr_frame_t *Frame)</argsstring>
        <name>ml_if_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__if__expr__frame__t" kindref="compound">mlc_if_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="358" column="13" bodyfile="src/ml_compiler.c" bodystart="358" bodyend="406" declfile="src/ml_compiler.c" declline="301" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a4b77af6b71c385c9da53055d1263c22c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_if_expr_compile4</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_if_expr_frame_t *Frame)</argsstring>
        <name>ml_if_expr_compile4</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__if__expr__frame__t" kindref="compound">mlc_if_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="303" column="13" bodyfile="src/ml_compiler.c" bodystart="303" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a7eb0ef2668b2242919978bf0711d2d2c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_if_expr_compile3</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_if_expr_frame_t *Frame)</argsstring>
        <name>ml_if_expr_compile3</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__if__expr__frame__t" kindref="compound">mlc_if_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="315" column="13" bodyfile="src/ml_compiler.c" bodystart="315" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a0944f6f8cf63198571bc44fef26656ab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_if_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_if_expr_t *Expr, int Flags)</argsstring>
        <name>ml_if_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__if__expr__t" kindref="compound">mlc_if_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="408" column="13" bodyfile="src/ml_compiler.c" bodystart="408" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a57e6c28679e643877695b8cb143ade16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_or_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_link_expr_frame_t *Frame)</argsstring>
        <name>ml_or_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__link__expr__frame__t" kindref="compound">mlc_link_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="433" column="13" bodyfile="src/ml_compiler.c" bodystart="433" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ad1e530c1275559d2f6202490edc2c1f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_or_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_parent_expr_t *Expr, int Flags)</argsstring>
        <name>ml_or_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="451" column="13" bodyfile="src/ml_compiler.c" bodystart="451" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a0c5ccea357858df6201cefac6b6865b9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_and_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_link_expr_frame_t *Frame)</argsstring>
        <name>ml_and_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__link__expr__frame__t" kindref="compound">mlc_link_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="460" column="13" bodyfile="src/ml_compiler.c" bodystart="460" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a88d87545a7efe9a844a1f34c27f20eac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_and_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_parent_expr_t *Expr, int Flags)</argsstring>
        <name>ml_and_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="478" column="13" bodyfile="src/ml_compiler.c" bodystart="478" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a989d46e890e88fb5a33c8f2bfd43a788" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_debug_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_link_expr_frame_t *Frame)</argsstring>
        <name>ml_debug_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__link__expr__frame__t" kindref="compound">mlc_link_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="487" column="13" bodyfile="src/ml_compiler.c" bodystart="487" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a88f8c9025fd26a43428003813e842939" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_debug_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_parent_expr_t *Expr, int Flags)</argsstring>
        <name>ml_debug_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="497" column="13" bodyfile="src/ml_compiler.c" bodystart="497" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a97f336c4df3ae3ed6698f59fbdd78903" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_if_config_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_config_expr_frame_t *Frame)</argsstring>
        <name>ml_if_config_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__config__expr__frame__t" kindref="compound">mlc_config_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="512" column="13" bodyfile="src/ml_compiler.c" bodystart="512" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a408c9c9a2dd7e020677a020de29f55d2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_if_config_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_if_config_expr_t *Expr, int Flags)</argsstring>
        <name>ml_if_config_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__if__config__expr__t" kindref="compound">mlc_if_config_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="522" column="13" bodyfile="src/ml_compiler.c" bodystart="522" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aac41c8fd013d0d20183a8e6da51c96b1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_not_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_parent_expr_frame_t *Frame)</argsstring>
        <name>ml_not_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="533" column="13" bodyfile="src/ml_compiler.c" bodystart="533" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a52698f29035d5f55b299aa24a91ac05f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_not_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_parent_expr_t *Expr, int Flags)</argsstring>
        <name>ml_not_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="544" column="13" bodyfile="src/ml_compiler.c" bodystart="544" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aeb5fc75fe6269b9ce265fda206aa3a80" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_switch_expr_compile3</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_switch_expr_frame_t *Frame)</argsstring>
        <name>ml_switch_expr_compile3</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__switch__expr__frame__t" kindref="compound">mlc_switch_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="559" column="13" bodyfile="src/ml_compiler.c" bodystart="559" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a706e6972a8d24eee396892dd1a1b52af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_switch_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_switch_expr_frame_t *Frame)</argsstring>
        <name>ml_switch_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__switch__expr__frame__t" kindref="compound">mlc_switch_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="578" column="13" bodyfile="src/ml_compiler.c" bodystart="578" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a86d314ede3a32e734dfc548bc6a6bfa6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_switch_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_parent_expr_t *Expr, int Flags)</argsstring>
        <name>ml_switch_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="591" column="13" bodyfile="src/ml_compiler.c" bodystart="591" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a3b7a3a732f8e328b2c1f70dbf4457ccd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_must_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_must_frame_t *Frame)</argsstring>
        <name>ml_must_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__must__frame__t" kindref="compound">mlc_must_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="612" column="13" bodyfile="src/ml_compiler.c" bodystart="612" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aa8454d7cfda33558db8531e7fa93bf07" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_must_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_must_t *Must, mlc_must_t *End)</argsstring>
        <name>ml_must_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__must__t" kindref="compound">mlc_must_t</ref> *</type>
          <declname>Must</declname>
        </param>
        <param>
          <type><ref refid="structmlc__must__t" kindref="compound">mlc_must_t</ref> *</type>
          <declname>End</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="627" column="13" bodyfile="src/ml_compiler.c" bodystart="627" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a0692b3cb84d15e85854bd3b58fca46aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_loop_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_loop_frame_t *Frame)</argsstring>
        <name>ml_loop_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__loop__frame__t" kindref="compound">mlc_loop_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="656" column="13" bodyfile="src/ml_compiler.c" bodystart="656" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a127cd00b1031a9efa9206d4e69eefa58" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_loop_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_parent_expr_t *Expr, int Flags)</argsstring>
        <name>ml_loop_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="673" column="13" bodyfile="src/ml_compiler.c" bodystart="673" bodyend="689"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a86fce3a1d297f3b5a966476e787cbdd4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_next_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_parent_expr_t **Frame)</argsstring>
        <name>ml_next_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref> **</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="691" column="13" bodyfile="src/ml_compiler.c" bodystart="691" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a8cc97521ea245defbdc671afa54b3907" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_next_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_parent_expr_t *Expr, int Flags)</argsstring>
        <name>ml_next_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="713" column="13" bodyfile="src/ml_compiler.c" bodystart="713" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a725a5ac264179f58205786422da4d368" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_exit_expr_compile3</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_exit_expr_frame_t *Frame)</argsstring>
        <name>ml_exit_expr_compile3</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__exit__expr__frame__t" kindref="compound">mlc_exit_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="756" column="13" bodyfile="src/ml_compiler.c" bodystart="756" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a6c96109e2e63c17ccd861786e8c4edc3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_exit_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_exit_expr_frame_t *Frame)</argsstring>
        <name>ml_exit_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__exit__expr__frame__t" kindref="compound">mlc_exit_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="777" column="13" bodyfile="src/ml_compiler.c" bodystart="777" bodyend="791"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aef4e4b14e25125585d5f18807c9534a0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_exit_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_parent_expr_t *Expr, int Flags)</argsstring>
        <name>ml_exit_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="793" column="13" bodyfile="src/ml_compiler.c" bodystart="793" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aa4bb985d48413ca2da455fe3146a954b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_return_expr_compile3</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_parent_expr_frame_t *Frame)</argsstring>
        <name>ml_return_expr_compile3</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="829" column="13" bodyfile="src/ml_compiler.c" bodystart="829" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aae13e19aeada2ff33180212c7e272ad2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_return_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_parent_expr_frame_t *Frame)</argsstring>
        <name>ml_return_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="836" column="13" bodyfile="src/ml_compiler.c" bodystart="836" bodyend="847"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a27883b5dc7a5c54673a6a834c14e0758" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_return_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_parent_expr_t *Expr, int Flags)</argsstring>
        <name>ml_return_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="849" column="13" bodyfile="src/ml_compiler.c" bodystart="849" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a9759753f40fbf1b5e847c216d6bf1146" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_suspend_expr_compile3</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_parent_expr_frame_t *Frame)</argsstring>
        <name>ml_suspend_expr_compile3</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="862" column="13" bodyfile="src/ml_compiler.c" bodystart="862" bodyend="873"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a70bb5e281e0877b4a46dfeca17650123" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_suspend_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_parent_expr_frame_t *Frame)</argsstring>
        <name>ml_suspend_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="875" column="13" bodyfile="src/ml_compiler.c" bodystart="875" bodyend="878"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a31ecb1afcc52d3156f0b87fa71be613b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_suspend_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_parent_expr_t *Expr, int Flags)</argsstring>
        <name>ml_suspend_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="880" column="13" bodyfile="src/ml_compiler.c" bodystart="880" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a4f8c44c9b327963fef12b544331cf38a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_with_expr_compile3</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_with_expr_frame_t *Frame)</argsstring>
        <name>ml_with_expr_compile3</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__with__expr__frame__t" kindref="compound">mlc_with_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="904" column="13" bodyfile="src/ml_compiler.c" bodystart="904" bodyend="917"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1abcf3ce1b219668d056181748bbef0d71" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_with_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_with_expr_frame_t *Frame)</argsstring>
        <name>ml_with_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__with__expr__frame__t" kindref="compound">mlc_with_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="919" column="13" bodyfile="src/ml_compiler.c" bodystart="919" bodyend="961"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1af550fd568cfb838cecd9961f5ceb31b4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_with_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_local_expr_t *Expr, int Flags)</argsstring>
        <name>ml_with_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="963" column="13" bodyfile="src/ml_compiler.c" bodystart="963" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a49729a68c648223a83c73ac12782879c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_for_expr_compile4</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_for_expr_frame_t *Frame)</argsstring>
        <name>ml_for_expr_compile4</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__for__expr__frame__t" kindref="compound">mlc_for_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="981" column="13" bodyfile="src/ml_compiler.c" bodystart="981" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a5c603c0d86ea6c7c1bab7921e0f39c20" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_for_expr_compile3</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_for_expr_frame_t *Frame)</argsstring>
        <name>ml_for_expr_compile3</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__for__expr__frame__t" kindref="compound">mlc_for_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="992" column="13" bodyfile="src/ml_compiler.c" bodystart="992" bodyend="1019"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ad11bf4293810fef656086a44d4a514aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_for_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_for_expr_frame_t *Frame)</argsstring>
        <name>ml_for_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__for__expr__frame__t" kindref="compound">mlc_for_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1021" column="13" bodyfile="src/ml_compiler.c" bodystart="1021" bodyend="1069"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a7d83daef266768ef962b913d29b21685" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_for_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_for_expr_t *Expr, int Flags)</argsstring>
        <name>ml_for_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__for__expr__t" kindref="compound">mlc_for_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1071" column="13" bodyfile="src/ml_compiler.c" bodystart="1071" bodyend="1079"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a553701ead5a41f1ebcb58c2df7dbd4b1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_each_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_parent_expr_frame_t *Frame)</argsstring>
        <name>ml_each_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1081" column="13" bodyfile="src/ml_compiler.c" bodystart="1081" bodyend="1098"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a1f443affe50de293791c2967558a7392" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_each_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_parent_expr_t *Expr, int Flags)</argsstring>
        <name>ml_each_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1100" column="13" bodyfile="src/ml_compiler.c" bodystart="1100" bodyend="1105"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ad14766f420a945a89959b1f14fbf13fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_var_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_local_expr_frame_t *Frame)</argsstring>
        <name>ml_var_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1125" column="13" bodyfile="src/ml_compiler.c" bodystart="1125" bodyend="1144"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a1e831f07ecf7a480715cada9fe00c008" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_var_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_local_expr_t *Expr, int Flags)</argsstring>
        <name>ml_var_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1146" column="13" bodyfile="src/ml_compiler.c" bodystart="1146" bodyend="1151"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aad9d5af21444b9d7f993f76201a74b4e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_var_type_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_local_expr_frame_t *Frame)</argsstring>
        <name>ml_var_type_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1153" column="13" bodyfile="src/ml_compiler.c" bodystart="1153" bodyend="1164"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a35990b7ea61bed6c4cdf3f3a3e913492" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_var_type_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_local_expr_t *Expr, int Flags)</argsstring>
        <name>ml_var_type_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1166" column="13" bodyfile="src/ml_compiler.c" bodystart="1166" bodyend="1171"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a8c9e44212be1a39ab9b113270a3442dd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_var_in_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_local_expr_frame_t *Frame)</argsstring>
        <name>ml_var_in_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1173" column="13" bodyfile="src/ml_compiler.c" bodystart="1173" bodyend="1199"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a07585bbb2161ae889dc4e7ec18808352" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_var_in_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_local_expr_t *Expr, int Flags)</argsstring>
        <name>ml_var_in_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1201" column="13" bodyfile="src/ml_compiler.c" bodystart="1201" bodyend="1206"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1afba03d84b563cf84dd2a1e1929414b36" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_var_unpack_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_local_expr_frame_t *Frame)</argsstring>
        <name>ml_var_unpack_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1208" column="13" bodyfile="src/ml_compiler.c" bodystart="1208" bodyend="1220"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aabac15291e33a62dbdb24113019412db" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_var_unpack_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_local_expr_t *Expr, int Flags)</argsstring>
        <name>ml_var_unpack_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1222" column="13" bodyfile="src/ml_compiler.c" bodystart="1222" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1af656e18639a42c8fa1d30e938cffb85e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_let_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_local_expr_frame_t *Frame)</argsstring>
        <name>ml_let_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1229" column="13" bodyfile="src/ml_compiler.c" bodystart="1229" bodyend="1247"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a6d716e29e2777ca3dafbc56f3b113311" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_let_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_local_expr_t *Expr, int Flags)</argsstring>
        <name>ml_let_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1249" column="13" bodyfile="src/ml_compiler.c" bodystart="1249" bodyend="1254"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a0c9794bc9d582dbf91458004d84f3e11" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_let_in_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_local_expr_frame_t *Frame)</argsstring>
        <name>ml_let_in_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1256" column="13" bodyfile="src/ml_compiler.c" bodystart="1256" bodyend="1287"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aee16be8d93cb02bff961106db4b9023c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_let_in_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_local_expr_t *Expr, int Flags)</argsstring>
        <name>ml_let_in_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1289" column="13" bodyfile="src/ml_compiler.c" bodystart="1289" bodyend="1294"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aa22443addb544da02ab1c66457f243fa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_let_unpack_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_local_expr_frame_t *Frame)</argsstring>
        <name>ml_let_unpack_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1296" column="13" bodyfile="src/ml_compiler.c" bodystart="1296" bodyend="1310"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a1b68408f1a3709f0a5c066cea120313d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_let_unpack_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_local_expr_t *Expr, int Flags)</argsstring>
        <name>ml_let_unpack_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1312" column="13" bodyfile="src/ml_compiler.c" bodystart="1312" bodyend="1317"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a4d1164d4d5b989d3743b1acd53597c92" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_ref_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_local_expr_frame_t *Frame)</argsstring>
        <name>ml_ref_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1319" column="13" bodyfile="src/ml_compiler.c" bodystart="1319" bodyend="1337"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a51132f12f323386105be059c2a3d22dc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_ref_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_local_expr_t *Expr, int Flags)</argsstring>
        <name>ml_ref_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1339" column="13" bodyfile="src/ml_compiler.c" bodystart="1339" bodyend="1344"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aca8461ae037ca7598003cada9a06f830" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_ref_in_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_local_expr_frame_t *Frame)</argsstring>
        <name>ml_ref_in_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1346" column="13" bodyfile="src/ml_compiler.c" bodystart="1346" bodyend="1377"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a3b5d68766a07decd8869394f73a54fa0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_ref_in_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_local_expr_t *Expr, int Flags)</argsstring>
        <name>ml_ref_in_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1379" column="13" bodyfile="src/ml_compiler.c" bodystart="1379" bodyend="1384"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a1778e92225738128ad61f854e938dd1d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_ref_unpack_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_local_expr_frame_t *Frame)</argsstring>
        <name>ml_ref_unpack_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1386" column="13" bodyfile="src/ml_compiler.c" bodystart="1386" bodyend="1400"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1abf9e8b695c89a6dafe55b6487451588f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_ref_unpack_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_local_expr_t *Expr, int Flags)</argsstring>
        <name>ml_ref_unpack_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1402" column="13" bodyfile="src/ml_compiler.c" bodystart="1402" bodyend="1407"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a399533ee71e468f1f0f93d67dc968b3e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_def_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_local_expr_frame_t *Frame)</argsstring>
        <name>ml_def_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1409" column="13" bodyfile="src/ml_compiler.c" bodystart="1409" bodyend="1426"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ac91ba52fa4e31dee8016df4432579b85" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_def_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_local_expr_t *Expr, int Flags)</argsstring>
        <name>ml_def_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1428" column="13" bodyfile="src/ml_compiler.c" bodystart="1428" bodyend="1433"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1adf7e8d4690360dcfc813983b42a51784" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_def_in_expr_compile3</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_def_in_expr_frame_t *Frame)</argsstring>
        <name>ml_def_in_expr_compile3</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__def__in__expr__frame__t" kindref="compound">mlc_def_in_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1443" column="13" bodyfile="src/ml_compiler.c" bodystart="1443" bodyend="1466"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1acebca11a7b8abd257d439886cfb12b73" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_def_in_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_def_in_expr_frame_t *Frame)</argsstring>
        <name>ml_def_in_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__def__in__expr__frame__t" kindref="compound">mlc_def_in_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1468" column="13" bodyfile="src/ml_compiler.c" bodystart="1468" bodyend="1481"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aeefda81c91eee842f681239906f812d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_def_in_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_local_expr_t *Expr, int Flags)</argsstring>
        <name>ml_def_in_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1483" column="13" bodyfile="src/ml_compiler.c" bodystart="1483" bodyend="1488"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a60c9faa878ff52adce9f16de110564b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_def_unpack_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Packed, mlc_local_expr_frame_t *Frame)</argsstring>
        <name>ml_def_unpack_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Packed</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1490" column="13" bodyfile="src/ml_compiler.c" bodystart="1490" bodyend="1510"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a2edaa20c4a9ad89970fd3780f2b13619" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_def_unpack_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_local_expr_t *Expr, int Flags)</argsstring>
        <name>ml_def_unpack_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1512" column="13" bodyfile="src/ml_compiler.c" bodystart="1512" bodyend="1517"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ab0bfc5d90742caa67e36bce915de136d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_block_expr_compile5</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_block_t *Frame)</argsstring>
        <name>ml_block_expr_compile5</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__block__t" kindref="compound">mlc_block_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1519" column="13" bodyfile="src/ml_compiler.c" bodystart="1519" bodyend="1529"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ad6db094ad64b63be2c0dc2f8c0338eea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_block_expr_compile4</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_block_t *Frame)</argsstring>
        <name>ml_block_expr_compile4</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__block__t" kindref="compound">mlc_block_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1531" column="13" bodyfile="src/ml_compiler.c" bodystart="1531" bodyend="1560"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a660e196240e3092f532318183684bd06" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_block_expr_compile3</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_block_t *Frame)</argsstring>
        <name>ml_block_expr_compile3</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__block__t" kindref="compound">mlc_block_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1562" column="13" bodyfile="src/ml_compiler.c" bodystart="1562" bodyend="1579"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1af76fdc1752d4713bc07a4d080e416ea5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_block_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_block_t *Frame)</argsstring>
        <name>ml_block_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__block__t" kindref="compound">mlc_block_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1581" column="13" bodyfile="src/ml_compiler.c" bodystart="1581" bodyend="1646"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a1a5a5a7617fab6c7870397b83b15ca0c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_block_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_block_expr_t *Expr, int Flags)</argsstring>
        <name>ml_block_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__block__expr__t" kindref="compound">mlc_block_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1648" column="13" bodyfile="src/ml_compiler.c" bodystart="1648" bodyend="1758"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a3e6152c742896c9e955e7dc3d4dbc38c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_assign_expr_compile4</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_parent_expr_frame_t *Frame)</argsstring>
        <name>ml_assign_expr_compile4</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1760" column="13" bodyfile="src/ml_compiler.c" bodystart="1760" bodyend="1771"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ac9adec3dd935d630daa921abfaf77ded" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_assign_expr_compile3</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_parent_expr_frame_t *Frame)</argsstring>
        <name>ml_assign_expr_compile3</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1773" column="13" bodyfile="src/ml_compiler.c" bodystart="1773" bodyend="1784"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a43fa38fa924cf7dc7270ae4fe5599290" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_assign_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_parent_expr_frame_t *Frame)</argsstring>
        <name>ml_assign_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1786" column="13" bodyfile="src/ml_compiler.c" bodystart="1786" bodyend="1796"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ab7b953fbe098a6ebbb9eb769ba97d214" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_assign_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_parent_expr_t *Expr, int Flags)</argsstring>
        <name>ml_assign_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1798" column="13" bodyfile="src/ml_compiler.c" bodystart="1798" bodyend="1805"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a480008f66221f341b44bbe56b103adc1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_old_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_expr_t *Expr, int Flags)</argsstring>
        <name>ml_old_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1807" column="13" bodyfile="src/ml_compiler.c" bodystart="1807" bodyend="1818"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aa8eb266bab525aab0cfade8d0b58670c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_it_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_expr_t *Expr, int Flags)</argsstring>
        <name>ml_it_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1820" column="13" bodyfile="src/ml_compiler.c" bodystart="1820" bodyend="1831"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ace2114e53779f09ffe7b18bc509dd43e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLExprT,(), &quot;expr&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLExprT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;expr&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1833" column="1" declfile="src/ml_compiler.c" declline="1833" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aa1072df20cadb64725f0316f7aca3bc2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_expr_value</definition>
        <argsstring>(mlc_expr_t *Expr)</argsstring>
        <name>ml_expr_value</name>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <briefdescription>
<para>macro </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1837" column="19" bodyfile="src/ml_compiler.c" bodystart="1837" bodyend="1840"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1af652184a61af6f9e7d32933de65bd0ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;$&quot;, MLExprT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;$&quot;</type>
        </param>
        <param>
          <type>MLExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1842" column="1" bodyfile="src/ml_compiler.c" bodystart="1842" bodyend="1872"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1abfe3a52b42c55e9191a324f05c168d75" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_delegate_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_parent_expr_t *Expr, int Flags)</argsstring>
        <name>ml_delegate_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1874" column="13" bodyfile="src/ml_compiler.c" bodystart="1874" bodyend="1876"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a8a6a51c3ed8a838a56cce7982beb3bc3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
        <definition>static mlc_expr_t * ml_delegate_expr</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_delegate_expr</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1878" column="19" bodyfile="src/ml_compiler.c" bodystart="1878" bodyend="1887"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a9831466e01eb98bc8d8709c51bbfbd5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;source&quot;, MLExprT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;source&quot;</type>
        </param>
        <param>
          <type>MLExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1889" column="1" bodyfile="src/ml_compiler.c" bodystart="1889" bodyend="1892"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a813b7cbb581b29a2fe0baa7eec684889" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;start&quot;, MLExprT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;start&quot;</type>
        </param>
        <param>
          <type>MLExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1894" column="1" bodyfile="src/ml_compiler.c" bodystart="1894" bodyend="1897"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aafb0de5a5631271dd6103677741c6abd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;end&quot;, MLExprT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;end&quot;</type>
        </param>
        <param>
          <type>MLExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1899" column="1" bodyfile="src/ml_compiler.c" bodystart="1899" bodyend="1902"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aa9f718644114e0371f525b790023fbfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLMacro)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLMacro</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1904" column="1" bodyfile="src/ml_compiler.c" bodystart="1904" bodyend="1916"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ab862b5d0ab3b706fa09937eb45e0db7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLMacroT,(), &quot;macro&quot;,.Constructor=(ml_value_t *) MLMacro)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLMacroT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;macro&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLMacro</defval>
          <briefdescription><para>macro </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1918" column="1" declfile="src/ml_compiler.c" declline="1918" declcolumn="1"/>
      </memberdef>
      <member refid="group__compiler_1gafc5b9b3b0ebd1b65fe5ae22188dfee5d" kind="function"><name>ml_macro</name></member>
      <memberdef kind="function" id="ml__compiler_8c_1adcaa25c2994a89f866a6c312e40d2a34" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_inline_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, ml_inline_expr_frame_t *Frame)</argsstring>
        <name>ml_inline_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__inline__expr__frame__t" kindref="compound">ml_inline_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1936" column="13" bodyfile="src/ml_compiler.c" bodystart="1936" bodyend="1958"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ad2428031379d0fa50896a5c474af4b49" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_inline_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_parent_expr_t *Expr, int Flags)</argsstring>
        <name>ml_inline_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1960" column="13" bodyfile="src/ml_compiler.c" bodystart="1960" bodyend="1965"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a66099feef2aa903bebbc7dc1e986e4a8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_call_expr_compile3</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, ml_call_expr_frame_t *Frame)</argsstring>
        <name>ml_call_expr_compile3</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__call__expr__frame__t" kindref="compound">ml_call_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1975" column="13" bodyfile="src/ml_compiler.c" bodystart="1975" bodyend="1994"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a9d7fd24f2d738eb16d7be047b58df434" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_call_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, ml_call_expr_frame_t *Frame)</argsstring>
        <name>ml_call_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__call__expr__frame__t" kindref="compound">ml_call_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="1996" column="13" bodyfile="src/ml_compiler.c" bodystart="1996" bodyend="2017"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a0e2738f13a640976515b3456a396e23a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_call_expr_compile5</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, ml_call_expr_frame_t *Frame)</argsstring>
        <name>ml_call_expr_compile5</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__call__expr__frame__t" kindref="compound">ml_call_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2019" column="13" bodyfile="src/ml_compiler.c" bodystart="2019" bodyend="2060"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1abcaf6c4d855350706be37c78fcbdceb7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_call_macro_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, ml_macro_frame_t *Frame)</argsstring>
        <name>ml_call_macro_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__macro__frame__t" kindref="compound">ml_macro_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2067" column="13" bodyfile="src/ml_compiler.c" bodystart="2067" bodyend="2073"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ad967536f6398dc809da4ff7974c5a55c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_call_macro_compile</definition>
        <argsstring>(mlc_function_t *Function, ml_macro_t *Macro, mlc_expr_t *Expr, mlc_expr_t *Child, int Flags)</argsstring>
        <name>ml_call_macro_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__macro__t" kindref="compound">ml_macro_t</ref> *</type>
          <declname>Macro</declname>
        </param>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
          <declname>Child</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2075" column="13" bodyfile="src/ml_compiler.c" bodystart="2075" bodyend="2095"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a8ea9e5bd3dacbba907e9c2daa45c133d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mlc_inline_call_expr_compile3</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_inline_call_frame_t *Frame)</argsstring>
        <name>mlc_inline_call_expr_compile3</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__inline__call__frame__t" kindref="compound">mlc_inline_call_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2104" column="13" bodyfile="src/ml_compiler.c" bodystart="2104" bodyend="2134"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aecb9f1ffbe7b20a6d77cabbfe3145eb8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mlc_inline_call_expr_compile2</definition>
        <argsstring>(mlc_function_t *Parent, ml_value_t *Value, mlc_expr_t *Expr, mlc_expr_t *Child)</argsstring>
        <name>mlc_inline_call_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Parent</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
          <declname>Child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2136" column="13" bodyfile="src/ml_compiler.c" bodystart="2136" bodyend="2160"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a0bc948ddfe96a0cbb116f4e28bf9b45b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void mlc_inline_call_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_expr_t *Expr, mlc_expr_t *Child, int Flags)</argsstring>
        <name>mlc_inline_call_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
          <declname>Child</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2162" column="13" bodyfile="src/ml_compiler.c" bodystart="2162" bodyend="2167"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aaee3bc94aedb4c55cea1f2646bff0dd4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_inline_call</definition>
        <argsstring>(ml_state_t *Caller, ml_inline_function_t *Inline, int Count, ml_value_t **Args)</argsstring>
        <name>ml_inline_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__inline__function__t" kindref="compound">ml_inline_function_t</ref> *</type>
          <declname>Inline</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2169" column="13" bodyfile="src/ml_compiler.c" bodystart="2169" bodyend="2171"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a17358e2b77d68915cdf94c65a0c1e7be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLFunctionInlineT,(MLFunctionT), &quot;inline&quot;,.call=(void *) ml_inline_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLFunctionInlineT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;inline&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_inline_call</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2173" column="1" declfile="src/ml_compiler.c" declline="2173" declcolumn="1"/>
      </memberdef>
      <member refid="group__compiler_1ga37c2bd6ded02705ed136763ef3f7d4e9" kind="function"><name>ml_inline_function</name></member>
      <memberdef kind="function" id="ml__compiler_8c_1aac3d17987194cebc3ed03af2ff9a8208" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_call_expr_compile4</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, ml_call_expr_frame_t *Frame)</argsstring>
        <name>ml_call_expr_compile4</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__call__expr__frame__t" kindref="compound">ml_call_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2184" column="13" bodyfile="src/ml_compiler.c" bodystart="2184" bodyend="2207"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a27f0a283fc4d16e783e66cf63ced02c9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_call_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_parent_expr_t *Expr, int Flags)</argsstring>
        <name>ml_call_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2211" column="13" bodyfile="src/ml_compiler.c" bodystart="2211" bodyend="2250"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a8d52345a54a742a893652907cab837bc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_const_call_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_parent_value_expr_t *Expr, int Flags)</argsstring>
        <name>ml_const_call_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__value__expr__t" kindref="compound">mlc_parent_value_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2252" column="13" bodyfile="src/ml_compiler.c" bodystart="2252" bodyend="2269"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aca4ce982285f7bdf3d92a02336a82a99" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_guard_expr_compile3</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, ml_guard_expr_frame_t *Frame)</argsstring>
        <name>ml_guard_expr_compile3</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__guard__expr__frame__t" kindref="compound">ml_guard_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2276" column="13" bodyfile="src/ml_compiler.c" bodystart="2276" bodyend="2285"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ac1ddc0da0819e441556fa7c186eb8ebd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_guard_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, ml_guard_expr_frame_t *Frame)</argsstring>
        <name>ml_guard_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__guard__expr__frame__t" kindref="compound">ml_guard_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2287" column="13" bodyfile="src/ml_compiler.c" bodystart="2287" bodyend="2292"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a53c34a6509dbee3ef2973fc5adcf6915" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_guard_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_parent_expr_t *Expr, int Flags)</argsstring>
        <name>ml_guard_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2294" column="13" bodyfile="src/ml_compiler.c" bodystart="2294" bodyend="2306"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a4f51814dceb72ddc4ceb175244d58ad6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_tuple_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_parent_expr_frame_t *Frame)</argsstring>
        <name>ml_tuple_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2308" column="13" bodyfile="src/ml_compiler.c" bodystart="2308" bodyend="2325"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aa9f0edae1ec190bd1d984680c00ecdf8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_tuple_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_parent_expr_t *Expr, int Flags)</argsstring>
        <name>ml_tuple_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2327" column="13" bodyfile="src/ml_compiler.c" bodystart="2327" bodyend="2371"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a29ae84ca4fc6620aa49ec3ecf2fa851b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_list_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_parent_expr_frame_t *Frame)</argsstring>
        <name>ml_list_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2373" column="13" bodyfile="src/ml_compiler.c" bodystart="2373" bodyend="2387"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a5241b11d1c6e25be7de006b17a6b1838" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLListOfArgs)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLListOfArgs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2389" column="1" bodyfile="src/ml_compiler.c" bodystart="2389" bodyend="2394"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a2171cefdcc1f5b41a99f252a55380d4d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_list_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_parent_expr_t *Expr, int Flags)</argsstring>
        <name>ml_list_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2396" column="13" bodyfile="src/ml_compiler.c" bodystart="2396" bodyend="2426"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a10452f9841b17a425b27f23a344706c1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_map_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_parent_expr_frame_t *Frame)</argsstring>
        <name>ml_map_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2448" column="13" bodyfile="src/ml_compiler.c" bodystart="2448" bodyend="2452" declfile="src/ml_compiler.c" declline="2428" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1af6c08d877107f9f9af8c5e1911d8d725" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_map_expr_compile3</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_parent_expr_frame_t *Frame)</argsstring>
        <name>ml_map_expr_compile3</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2430" column="13" bodyfile="src/ml_compiler.c" bodystart="2430" bodyend="2446"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aefd1f50c0cfe259b858d148093568d61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLMapOfArgs)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLMapOfArgs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2454" column="1" bodyfile="src/ml_compiler.c" bodystart="2454" bodyend="2459"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a884a67d0c72cc240aeb09a1d7a388e24" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_map_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_parent_expr_t *Expr, int Flags)</argsstring>
        <name>ml_map_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2461" column="13" bodyfile="src/ml_compiler.c" bodystart="2461" bodyend="2491"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a55ee439d42d007a57fd6a31a51c08481" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_scoped_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, ml_decl_t **Frame)</argsstring>
        <name>ml_scoped_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref> **</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2506" column="13" bodyfile="src/ml_compiler.c" bodystart="2506" bodyend="2510"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a6e4df99b67a9432d3c56807151817a8d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_scoped_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_scoped_expr_t *Expr, int Flags)</argsstring>
        <name>ml_scoped_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__scoped__expr__t" kindref="compound">mlc_scoped_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2512" column="13" bodyfile="src/ml_compiler.c" bodystart="2512" bodyend="2525"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a9ee1e8e7ddeaeaa0b55c5903f02a68cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(&quot;scoped&quot;, MLExprT, MLNamesT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>&quot;scoped&quot;</type>
        </param>
        <param>
          <type>MLExprT</type>
        </param>
        <param>
          <type>MLNamesT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2527" column="1" bodyfile="src/ml_compiler.c" bodystart="2527" bodyend="2549"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1af39cc9a168954369e5808648c4e42642" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;scoped&quot;, MLExprT, MLMapT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;scoped&quot;</type>
        </param>
        <param>
          <type>MLExprT</type>
        </param>
        <param>
          <type>MLMapT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2551" column="1" bodyfile="src/ml_compiler.c" bodystart="2551" bodyend="2572"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ae3e9af47a657c8884791d70413b6cd51" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_scoped_decl_add</definition>
        <argsstring>(const char *Name, ml_value_t *Value, mlc_scoped_decl_t **Decls)</argsstring>
        <name>ml_scoped_decl_add</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__scoped__decl__t" kindref="compound">mlc_scoped_decl_t</ref> **</type>
          <declname>Decls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2574" column="12" bodyfile="src/ml_compiler.c" bodystart="2574" bodyend="2579"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aac90d4081141353692a01a1a5ab6b730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;scoped&quot;, MLExprT, MLModuleT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;scoped&quot;</type>
        </param>
        <param>
          <type>MLExprT</type>
        </param>
        <param>
          <type>MLModuleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2581" column="1" bodyfile="src/ml_compiler.c" bodystart="2581" bodyend="2598"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1afd3e9be15ca0a9d012c2452b694b08e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;scoped&quot;, MLExprT, MLTypeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;scoped&quot;</type>
        </param>
        <param>
          <type>MLExprT</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2600" column="1" bodyfile="src/ml_compiler.c" bodystart="2600" bodyend="2617"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ae2dca0fdb3e68e9e3d62fc1a6ad2a5f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_subst_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_define_t **Frame)</argsstring>
        <name>ml_subst_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__define__t" kindref="compound">mlc_define_t</ref> **</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2627" column="13" bodyfile="src/ml_compiler.c" bodystart="2627" bodyend="2631"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a023eac9c97eb0c17972f56efbe0aeabc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_subst_define_fn</definition>
        <argsstring>(const char *Ident, mlc_expr_t *Expr, mlc_function_t *Function)</argsstring>
        <name>ml_subst_define_fn</name>
        <param>
          <type>const char *</type>
          <declname>Ident</declname>
        </param>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2633" column="12" bodyfile="src/ml_compiler.c" bodystart="2633" bodyend="2641"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a12f5f915bde8ec52056b2e92b8d52155" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_subst_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_subst_expr_t *Expr, int Flags)</argsstring>
        <name>ml_subst_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__subst__expr__t" kindref="compound">mlc_subst_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2643" column="13" bodyfile="src/ml_compiler.c" bodystart="2643" bodyend="2648"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a53312e18f829dd88197d60c1321327a3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_args_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_args_expr_frame_t *Frame)</argsstring>
        <name>ml_args_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__args__expr__frame__t" kindref="compound">mlc_args_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2663" column="13" bodyfile="src/ml_compiler.c" bodystart="2663" bodyend="2673"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ab1c64acbc308e3e04a4c21b8f1506973" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_args_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_args_expr_t *Expr, int Flags)</argsstring>
        <name>ml_args_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__args__expr__t" kindref="compound">mlc_args_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2675" column="13" bodyfile="src/ml_compiler.c" bodystart="2675" bodyend="2690"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a3e254b61f9425e15163e9254ecb39384" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(&quot;subst&quot;, MLExprT, MLNamesT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>&quot;subst&quot;</type>
        </param>
        <param>
          <type>MLExprT</type>
        </param>
        <param>
          <type>MLNamesT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2692" column="1" bodyfile="src/ml_compiler.c" bodystart="2692" bodyend="2730"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a9114aaec90e93a9c124d0c8040c3476d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;subst&quot;, MLExprT, MLListT, MLListT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;subst&quot;</type>
        </param>
        <param>
          <type>MLExprT</type>
        </param>
        <param>
          <type>MLListT</type>
        </param>
        <param>
          <type>MLListT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2732" column="1" bodyfile="src/ml_compiler.c" bodystart="2732" bodyend="2755"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a3fa5eb3e5f48b59f43cb5446074541f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(&quot;subst&quot;, MLExprT, MLMapT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>&quot;subst&quot;</type>
        </param>
        <param>
          <type>MLExprT</type>
        </param>
        <param>
          <type>MLMapT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2757" column="1" bodyfile="src/ml_compiler.c" bodystart="2757" bodyend="2776"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a65db52b96b9046f879adffbdb2f2bf3b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_resolve_expr_compile3</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, ml_resolve_expr_frame_t *Frame)</argsstring>
        <name>ml_resolve_expr_compile3</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__resolve__expr__frame__t" kindref="compound">ml_resolve_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2784" column="13" bodyfile="src/ml_compiler.c" bodystart="2784" bodyend="2820"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a47c8d2e9354745405a79894b9b22ab4e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_resolve_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, ml_resolve_expr_frame_t *Frame)</argsstring>
        <name>ml_resolve_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__resolve__expr__frame__t" kindref="compound">ml_resolve_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2822" column="13" bodyfile="src/ml_compiler.c" bodystart="2822" bodyend="2840"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aea860cb1a59a8708ed7382090040d5c5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_resolve_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_parent_value_expr_t *Expr, int Flags)</argsstring>
        <name>ml_resolve_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__parent__value__expr__t" kindref="compound">mlc_parent_value_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2842" column="13" bodyfile="src/ml_compiler.c" bodystart="2842" bodyend="2848"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a777bb68f1c89302be1d5fbe139dcd164" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_string_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, ml_string_expr_frame_t *Frame)</argsstring>
        <name>ml_string_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__string__expr__frame__t" kindref="compound">ml_string_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2857" column="13" bodyfile="src/ml_compiler.c" bodystart="2857" bodyend="2894"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ade483f37e1846e5ba29a8916e786b4e6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_string_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_string_expr_t *Expr, int Flags)</argsstring>
        <name>ml_string_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__string__expr__t" kindref="compound">mlc_string_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2896" column="13" bodyfile="src/ml_compiler.c" bodystart="2896" bodyend="2922"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a9e4197e006e3df5b8760c91a9e023129" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_fun_expr_compile4</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_fun_expr_frame_t *Frame)</argsstring>
        <name>ml_fun_expr_compile4</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__fun__expr__frame__t" kindref="compound">mlc_fun_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2933" column="13" bodyfile="src/ml_compiler.c" bodystart="2933" bodyend="2953"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a9d389b1a4e526fbcd9b9c7ccb7048eb2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_fun_expr_compile3</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_fun_expr_frame_t *Frame)</argsstring>
        <name>ml_fun_expr_compile3</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__fun__expr__frame__t" kindref="compound">mlc_fun_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2955" column="13" bodyfile="src/ml_compiler.c" bodystart="2955" bodyend="2986"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a7c93876502776c463f1debf996c5d7dc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_fun_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_fun_expr_frame_t *Frame)</argsstring>
        <name>ml_fun_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__fun__expr__frame__t" kindref="compound">mlc_fun_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="2988" column="13" bodyfile="src/ml_compiler.c" bodystart="2988" bodyend="3037"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a1c688351afd0a12fc18e6717493ca8ca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_subfunction_run</definition>
        <argsstring>(mlc_function_t *SubFunction, ml_value_t *Value, void *Frame)</argsstring>
        <name>ml_subfunction_run</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>SubFunction</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3039" column="13" bodyfile="src/ml_compiler.c" bodystart="3039" bodyend="3042"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aa1545d1cdeb991375b620f0c2ce8db75" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_fun_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_fun_expr_t *Expr, int Flags)</argsstring>
        <name>ml_fun_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__fun__expr__t" kindref="compound">mlc_fun_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3044" column="13" bodyfile="src/ml_compiler.c" bodystart="3044" bodyend="3114"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ad709ffa2b4bff8be86d0ceae376162ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_default_expr_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_default_expr_frame_t *Frame)</argsstring>
        <name>ml_default_expr_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__default__expr__frame__t" kindref="compound">mlc_default_expr_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3122" column="13" bodyfile="src/ml_compiler.c" bodystart="3122" bodyend="3130"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a8dac40d8fa122a51de426ef8097e57bd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_default_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_default_expr_t *Expr, int Flags)</argsstring>
        <name>ml_default_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__default__expr__t" kindref="compound">mlc_default_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3132" column="13" bodyfile="src/ml_compiler.c" bodystart="3132" bodyend="3140"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ae79efebc3df2aa4f73f7c6ee070e46ad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_upvalue_find</definition>
        <argsstring>(mlc_function_t *Function, ml_decl_t *Decl, mlc_function_t *Origin, int Line)</argsstring>
        <name>ml_upvalue_find</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref> *</type>
          <declname>Decl</declname>
        </param>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Origin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3142" column="12" bodyfile="src/ml_compiler.c" bodystart="3142" bodyend="3157"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a85e81ca84975ad9e5b9591aaa9da3938" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_ident_expr_finish</definition>
        <argsstring>(mlc_function_t *Function, mlc_ident_expr_t *Expr, ml_value_t *Value, int Flags)</argsstring>
        <name>ml_ident_expr_finish</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__ident__expr__t" kindref="compound">mlc_ident_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3159" column="13" bodyfile="src/ml_compiler.c" bodystart="3159" bodyend="3171"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1afbe4ab2e560b10309ba6a2f51b4aec4b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_ident_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_ident_expr_t *Expr, int Flags)</argsstring>
        <name>ml_ident_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__ident__expr__t" kindref="compound">mlc_ident_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3173" column="13" bodyfile="src/ml_compiler.c" bodystart="3173" bodyend="3221"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a28a42f4b32f57a9f65de84f28959ead4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLIdentExpr)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLIdentExpr</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3223" column="1" bodyfile="src/ml_compiler.c" bodystart="3223" bodyend="3238"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aaa39a8c80e569bac0e776aab23f3ab0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLValueExpr)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLValueExpr</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3240" column="1" bodyfile="src/ml_compiler.c" bodystart="3240" bodyend="3263"/>
      </memberdef>
      <member refid="group__compiler_1ga4cfb7ffa6b49913edd1651f902d37af4" kind="function"><name>ml_macro_subst</name></member>
      <memberdef kind="function" id="ml__compiler_8c_1a9847b4066b411f4f3bdfdb4f76bb9341" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_macro_subst_call</definition>
        <argsstring>(ml_state_t *Caller, ml_macro_subst_t *Subst, int Count, ml_value_t **Args)</argsstring>
        <name>ml_macro_subst_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__macro__subst__t" kindref="compound">ml_macro_subst_t</ref> *</type>
          <declname>Subst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3300" column="13" bodyfile="src/ml_compiler.c" bodystart="3300" bodyend="3316"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a5f5b1a168ea25e4588ad9da4f1c1b5fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLMacroSubstT,(MLFunctionT), &quot;macro::subst&quot;,.call=(void *) ml_macro_subst_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLMacroSubstT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;macro::subst&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_macro_subst_call</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3318" column="1" declfile="src/ml_compiler.c" declline="3318" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a37b408d4179ccc76c5efc476ae92586d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLMacroSubst)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLMacroSubst</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3322" column="1" bodyfile="src/ml_compiler.c" bodystart="3322" bodyend="3345"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ade5d98be13a022ea3cb5ee6f1b968c7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(VarMethod, &quot;var&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>VarMethod</type>
        </param>
        <param>
          <type>&quot;var&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3347" column="1" declfile="src/ml_compiler.c" declline="3347" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a6a8512724d7d497959aa6b362ab9d991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(RefMethod, &quot;ref&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>RefMethod</type>
        </param>
        <param>
          <type>&quot;ref&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3348" column="1" declfile="src/ml_compiler.c" declline="3348" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a15911e90d0be4545af7935ad183b264e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(LetMethod, &quot;let&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>LetMethod</type>
        </param>
        <param>
          <type>&quot;let&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3349" column="1" declfile="src/ml_compiler.c" declline="3349" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a42d6a1b88fe56ac6f7c52a58bd424e7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLFunExpr)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLFunExpr</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3351" column="1" bodyfile="src/ml_compiler.c" bodystart="3351" bodyend="3384"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a12926bb03aae67648508acd227dc014e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLBlockBuilderT,(), &quot;block-builder&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLBlockBuilderT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;block-builder&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3395" column="1" declfile="src/ml_compiler.c" declline="3395" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a90d5f22bdaf493ac238a4d0eca8a4d72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;var&quot;, MLBlockBuilderT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;var&quot;</type>
        </param>
        <param>
          <type>MLBlockBuilderT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
<para>macro </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3399" column="1" bodyfile="src/ml_compiler.c" bodystart="3399" bodyend="3410"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1af0899f3a784a1712acb8c85978fd670f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;var&quot;, MLBlockBuilderT, MLStringT, MLExprT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;var&quot;</type>
        </param>
        <param>
          <type>MLBlockBuilderT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3412" column="1" bodyfile="src/ml_compiler.c" bodystart="3412" bodyend="3433"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a935a2fc9c3ec2d723f6a6c8e880eb9f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;let&quot;, MLBlockBuilderT, MLStringT, MLExprT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;let&quot;</type>
        </param>
        <param>
          <type>MLBlockBuilderT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3435" column="1" bodyfile="src/ml_compiler.c" bodystart="3435" bodyend="3456"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ade172828cfa64ddd8d0a89e9383c4ec2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(&quot;do&quot;, MLBlockBuilderT, MLExprT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>&quot;do&quot;</type>
        </param>
        <param>
          <type>MLBlockBuilderT</type>
        </param>
        <param>
          <type>MLExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3458" column="1" bodyfile="src/ml_compiler.c" bodystart="3458" bodyend="3471"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a2a1472f127e6165952196fdf9caa5402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;end&quot;, MLBlockBuilderT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;end&quot;</type>
        </param>
        <param>
          <type>MLBlockBuilderT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3473" column="1" bodyfile="src/ml_compiler.c" bodystart="3473" bodyend="3496"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a4ca4802d3228a94b156babd5f88c6294" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLBlockBuilder)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLBlockBuilder</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3498" column="1" bodyfile="src/ml_compiler.c" bodystart="3498" bodyend="3516"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ae12e43c2877720cdf10f576934c9fa36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLExprBuilderT,(), &quot;expr-builder&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLExprBuilderT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;expr-builder&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3524" column="1" declfile="src/ml_compiler.c" declline="3524" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a774a9cfb522402a8a34673aae63e293e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLTupleBuilder)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLTupleBuilder</type>
        </param>
        <briefdescription>
<para>macro </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3528" column="1" bodyfile="src/ml_compiler.c" bodystart="3528" bodyend="3543"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a84181768c2ba3a6caccb8a78f1172447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLListBuilder)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLListBuilder</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3545" column="1" bodyfile="src/ml_compiler.c" bodystart="3545" bodyend="3560"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a75be2e1b300aaa014edbda7552d43ad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLMapBuilder)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLMapBuilder</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3562" column="1" bodyfile="src/ml_compiler.c" bodystart="3562" bodyend="3577"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1acc236afb1be8e1f40e93770fef9a8fa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLCallBuilder)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLCallBuilder</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3579" column="1" bodyfile="src/ml_compiler.c" bodystart="3579" bodyend="3594"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a25843726185a7abf58eb1e7d81068209" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(&quot;add&quot;, MLExprBuilderT, MLExprT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>&quot;add&quot;</type>
        </param>
        <param>
          <type>MLExprBuilderT</type>
        </param>
        <param>
          <type>MLExprT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3596" column="1" bodyfile="src/ml_compiler.c" bodystart="3596" bodyend="3609"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1af82224dceffd0256fd4930be8c69a8a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;end&quot;, MLExprBuilderT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;end&quot;</type>
        </param>
        <param>
          <type>MLExprBuilderT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>macro</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3611" column="1" bodyfile="src/ml_compiler.c" bodystart="3611" bodyend="3618"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1adce2133b7759452e5d6d06a243518e60" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_define_expr_compile</definition>
        <argsstring>(mlc_function_t *Function, mlc_ident_expr_t *Expr, int Flags)</argsstring>
        <name>ml_define_expr_compile</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structmlc__ident__expr__t" kindref="compound">mlc_ident_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3620" column="13" bodyfile="src/ml_compiler.c" bodystart="3620" bodyend="3633"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a1be5d792a603ab88422b70ab08589382" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_compiler_call</definition>
        <argsstring>(ml_state_t *Caller, ml_compiler_t *Compiler, int Count, ml_value_t **Args)</argsstring>
        <name>ml_compiler_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref> *</type>
          <declname>Compiler</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3703" column="13" bodyfile="src/ml_compiler.c" bodystart="3703" bodyend="3705"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1af512150c627d2ddbbd45db776cb18deb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_function_global_get</definition>
        <argsstring>(ml_value_t *Function, const char *Name, const char *Source, int Line, int Eval)</argsstring>
        <name>ml_function_global_get</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Eval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3707" column="19" bodyfile="src/ml_compiler.c" bodystart="3707" bodyend="3710"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a97cc740de8a3e8c0db72ba77e55f5290" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_map_global_get</definition>
        <argsstring>(ml_value_t *Map, const char *Name, const char *Source, int Line, int Eval)</argsstring>
        <name>ml_map_global_get</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Map</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Eval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3712" column="19" bodyfile="src/ml_compiler.c" bodystart="3712" bodyend="3714"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1add707f046151f41c7dec28eb10bff101" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLCompiler)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLCompiler</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3716" column="1" bodyfile="src/ml_compiler.c" bodystart="3716" bodyend="3724"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a6adf4c37063c2b2b66cd6c33a66d5673" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLCompilerT,(MLStateT), &quot;compiler&quot;,.call=(void *) ml_compiler_call,.Constructor=(ml_value_t *) MLCompiler)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLCompilerT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;compiler&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_compiler_call</defval>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLCompiler</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3726" column="1" declfile="src/ml_compiler.c" declline="3726" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ac192a06945404182f8edbb1f8f8da8b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(MLSource)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>MLSource</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3731" column="1" bodyfile="src/ml_compiler.c" bodystart="3731" bodyend="3737"/>
      </memberdef>
      <member refid="group__compiler_1gaceebb4b34496f860ad324a481160ad0e" kind="function"><name>ml_compiler</name></member>
      <member refid="group__compiler_1ga6722f8c4ed47f1afaf236d05a3cbdccc" kind="function"><name>ml_compiler_define</name></member>
      <member refid="group__compiler_1gaabd07d7c8fcde0f46187e19c511cc1b3" kind="function"><name>ml_compiler_lookup</name></member>
      <memberdef kind="function" id="ml__compiler_8c_1a58e2df3ce628399da394e01c1c552a4f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * ml_parser_no_input</definition>
        <argsstring>(void *Data)</argsstring>
        <name>ml_parser_no_input</name>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3759" column="19" bodyfile="src/ml_compiler.c" bodystart="3759" bodyend="3761"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a43192a9a3e70d12da0789c0bfa9c1877" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * ml_function_read</definition>
        <argsstring>(ml_value_t *Function)</argsstring>
        <name>ml_function_read</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3763" column="19" bodyfile="src/ml_compiler.c" bodystart="3763" bodyend="3767"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a792fdf78ecdbfd07aee427c9f2779bfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLParser)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLParser</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3769" column="1" bodyfile="src/ml_compiler.c" bodystart="3769" bodyend="3780"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1af858914edf34ef97301e548b1efc98cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLParserT,(), &quot;parser&quot;,.Constructor=(ml_value_t *) MLParser)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLParserT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;parser&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLParser</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3782" column="1" declfile="src/ml_compiler.c" declline="3782" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a355d0ba07979f159f0d89ea5cef10336" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_parser_default_escape</definition>
        <argsstring>(void *Data)</argsstring>
        <name>ml_parser_default_escape</name>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3786" column="19" bodyfile="src/ml_compiler.c" bodystart="3786" bodyend="3788"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ae2253cabde7aaf0f9e5dd0757d808e69" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_parser_default_special</definition>
        <argsstring>(void *Data)</argsstring>
        <name>ml_parser_default_special</name>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3790" column="19" bodyfile="src/ml_compiler.c" bodystart="3790" bodyend="3792"/>
      </memberdef>
      <member refid="group__compiler_1gab31c0e27d21db6f748c137bf13bd7e28" kind="function"><name>ml_parser</name></member>
      <memberdef kind="function" id="ml__compiler_8c_1a4bc6cf8ed0169162190aca3aaf86c283" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
        <definition>static mlc_expr_t * ml_accept_block</definition>
        <argsstring>(ml_parser_t *Parser)</argsstring>
        <name>ml_accept_block</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6285" column="19" bodyfile="src/ml_compiler.c" bodystart="6285" bodyend="6294" declfile="src/ml_compiler.c" declline="3809" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a10a106d0c173161edbedc1eeff0d088d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_accept_eoi</definition>
        <argsstring>(ml_parser_t *Parser)</argsstring>
        <name>ml_accept_eoi</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4566" column="13" bodyfile="src/ml_compiler.c" bodystart="4566" bodyend="4568" declfile="src/ml_compiler.c" declline="3810" declcolumn="13"/>
      </memberdef>
      <member refid="group__compiler_1ga59fcf65036575727bc7a96ff17cfdc0c" kind="function"><name>ml_parser_name</name></member>
      <member refid="group__compiler_1ga5052c7ae2f7124a36dfe7d1e9d2deccf" kind="function"><name>ml_parser_source</name></member>
      <member refid="group__compiler_1ga7d31978754889d76d09308e7d26d4a72" kind="function"><name>ml_parser_value</name></member>
      <member refid="group__compiler_1ga80d3e6fba963ca8b9e7638e278420df0" kind="function"><name>ml_parser_reset</name></member>
      <member refid="group__compiler_1gafed4e5a797e1833ecde721c5adf4f53d" kind="function"><name>ml_parser_permissive</name></member>
      <member refid="group__compiler_1ga6369c7daf2af887d0c6fa60c5121e569" kind="function"><name>ml_parser_warnings</name></member>
      <member refid="group__compiler_1ga21c894dfe870f9461194a9168b4dd2fc" kind="function"><name>ml_parser_input</name></member>
      <member refid="group__compiler_1ga2e099dfd7a9ea8fb2ccc9507d1eb4e77" kind="function"><name>ml_parser_clear</name></member>
      <member refid="group__compiler_1ga918fe73bcd762c02b77f3f60e3959745" kind="function"><name>ml_parse_warn</name></member>
      <member refid="group__compiler_1gad269e62dec932327a3da8c705c40c8bc" kind="function"><name>ml_parser_escape</name></member>
      <member refid="group__compiler_1gae99e4850da50bffac4cb32d47bc06552" kind="function"><name>ml_parser_special</name></member>
      <memberdef kind="function" id="ml__compiler_8c_1a42437c256ef1bf8f880886ddd0682f98" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_parse</definition>
        <argsstring>(ml_parser_t *Parser, ml_token_t Token)</argsstring>
        <name>ml_parse</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type>ml_token_t</type>
          <declname>Token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4525" column="19" bodyfile="src/ml_compiler.c" bodystart="4525" bodyend="4534" declfile="src/ml_compiler.c" declline="3901" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ad880b3d45f1f80a2d6e9af39d51e3f02" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_accept</definition>
        <argsstring>(ml_parser_t *Parser, ml_token_t Token)</argsstring>
        <name>ml_accept</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type>ml_token_t</type>
          <declname>Token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4553" column="13" bodyfile="src/ml_compiler.c" bodystart="4553" bodyend="4564" declfile="src/ml_compiler.c" declline="3902" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ae95fd26a84965ecd455fc8dca1bba012" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
        <definition>static mlc_expr_t * ml_parse_expression</definition>
        <argsstring>(ml_parser_t *Parser, ml_expr_level_t Level)</argsstring>
        <name>ml_parse_expression</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type>ml_expr_level_t</type>
          <declname>Level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5763" column="19" bodyfile="src/ml_compiler.c" bodystart="5763" bodyend="5861" declfile="src/ml_compiler.c" declline="3903" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a2378cbf084e5da6654392170cf3699dd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
        <definition>static mlc_expr_t * ml_accept_term</definition>
        <argsstring>(ml_parser_t *Parser, int MethDecl)</argsstring>
        <name>ml_accept_term</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type>int</type>
          <declname>MethDecl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5750" column="19" bodyfile="src/ml_compiler.c" bodystart="5750" bodyend="5761" declfile="src/ml_compiler.c" declline="3904" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a65e611bb4c95e84a13bebc0275230d06" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
        <definition>static mlc_expr_t * ml_accept_expression</definition>
        <argsstring>(ml_parser_t *Parser, ml_expr_level_t Level)</argsstring>
        <name>ml_accept_expression</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type>ml_expr_level_t</type>
          <declname>Level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5863" column="19" bodyfile="src/ml_compiler.c" bodystart="5863" bodyend="5874" declfile="src/ml_compiler.c" declline="3905" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a20aff2ff1444e825be220bca9d553dc4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_accept_arguments</definition>
        <argsstring>(ml_parser_t *Parser, ml_token_t EndToken, mlc_expr_t **ArgsSlot)</argsstring>
        <name>ml_accept_arguments</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type>ml_token_t</type>
          <declname>EndToken</declname>
        </param>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> **</type>
          <declname>ArgsSlot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4831" column="13" bodyfile="src/ml_compiler.c" bodystart="4831" bodyend="4873" declfile="src/ml_compiler.c" declline="3906" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a780ff38e1abe3c194e7c506adf3bbe19" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t ml_nibble</definition>
        <argsstring>(ml_parser_t *Parser, char C)</argsstring>
        <name>ml_nibble</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type>char</type>
          <declname>C</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3908" column="23" bodyfile="src/ml_compiler.c" bodystart="3908" bodyend="3917"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ad6f2f185c8bd80d3ddfa269f8357f3b3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ml_token_t</type>
        <definition>static ml_token_t ml_accept_string</definition>
        <argsstring>(ml_parser_t *Parser)</argsstring>
        <name>ml_accept_string</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="3919" column="19" bodyfile="src/ml_compiler.c" bodystart="3919" bodyend="4023"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a61ff66f36340d5cf03714b3d4928b45e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_isidstart</definition>
        <argsstring>(char C)</argsstring>
        <name>ml_isidstart</name>
        <param>
          <type>char</type>
          <declname>C</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4098" column="19" bodyfile="src/ml_compiler.c" bodystart="4098" bodyend="4100"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ab0b4934a5529261b80ceb2896bf8f238" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_isidchar</definition>
        <argsstring>(char C)</argsstring>
        <name>ml_isidchar</name>
        <param>
          <type>char</type>
          <declname>C</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4102" column="19" bodyfile="src/ml_compiler.c" bodystart="4102" bodyend="4104"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aed8dc0c2a19dc6da94bd24f6a5b49846" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_isoperator</definition>
        <argsstring>(char C)</argsstring>
        <name>ml_isoperator</name>
        <param>
          <type>char</type>
          <declname>C</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4106" column="19" bodyfile="src/ml_compiler.c" bodystart="4106" bodyend="4108"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ae9876489c966827f1c0feaae27ef0e59" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_isdigit</definition>
        <argsstring>(char C)</argsstring>
        <name>ml_isdigit</name>
        <param>
          <type>char</type>
          <declname>C</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4110" column="19" bodyfile="src/ml_compiler.c" bodystart="4110" bodyend="4112"/>
      </memberdef>
      <member refid="group__compiler_1gaf2aa481871fb57dc769e0e74bc87a514" kind="function"><name>ml_string_fn_register</name></member>
      <memberdef kind="function" id="ml__compiler_8c_1a6d2a69fa0df39b3d022297bac781a71b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>char *</type>
        <definition>static char * ml_scan_utf8</definition>
        <argsstring>(char *D, uint32_t Code)</argsstring>
        <name>ml_scan_utf8</name>
        <param>
          <type>char *</type>
          <declname>D</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4122" column="20" bodyfile="src/ml_compiler.c" bodystart="4122" bodyend="4134"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1af475352174d3f57ce4323db6e3417394" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_scan_string</definition>
        <argsstring>(ml_parser_t *Parser)</argsstring>
        <name>ml_scan_string</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4136" column="12" bodyfile="src/ml_compiler.c" bodystart="4136" bodyend="4206"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a5999be3cf62cf476b47ad227c5002797" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_scan_raw_string</definition>
        <argsstring>(ml_parser_t *Parser)</argsstring>
        <name>ml_scan_raw_string</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4208" column="12" bodyfile="src/ml_compiler.c" bodystart="4208" bodyend="4225"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aa8083691d3c22032d0145f01c15c97ca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * ml_ident</definition>
        <argsstring>(const char *Next, int Length)</argsstring>
        <name>ml_ident</name>
        <param>
          <type>const char *</type>
          <declname>Next</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4227" column="19" bodyfile="src/ml_compiler.c" bodystart="4227" bodyend="4247"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aeb193f00197c44cd1c1e635a13443768" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ml_token_t</type>
        <definition>static ml_token_t ml_scan</definition>
        <argsstring>(ml_parser_t *Parser)</argsstring>
        <name>ml_scan</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4249" column="19" bodyfile="src/ml_compiler.c" bodystart="4249" bodyend="4507"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a96c5a44c67311530cfdf0ac5d2d52f13" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ml_token_t</type>
        <definition>static ml_token_t ml_current</definition>
        <argsstring>(ml_parser_t *Parser)</argsstring>
        <name>ml_current</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4509" column="26" bodyfile="src/ml_compiler.c" bodystart="4509" bodyend="4512"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a17de24dbf42a50545f6fd790338f34af" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ml_token_t</type>
        <definition>static ml_token_t ml_current2</definition>
        <argsstring>(ml_parser_t *Parser)</argsstring>
        <name>ml_current2</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4514" column="26" bodyfile="src/ml_compiler.c" bodystart="4514" bodyend="4518"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a11c30315f297bcc6213dfbd04d99781a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_next</definition>
        <argsstring>(ml_parser_t *Parser)</argsstring>
        <name>ml_next</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4520" column="20" bodyfile="src/ml_compiler.c" bodystart="4520" bodyend="4523"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a1278fa487c048cf92199161c4e82645d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_skip_eol</definition>
        <argsstring>(ml_parser_t *Parser)</argsstring>
        <name>ml_skip_eol</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4536" column="20" bodyfile="src/ml_compiler.c" bodystart="4536" bodyend="4539"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1adb281c9c3667a3912d4bc3decb0416a5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_parse2</definition>
        <argsstring>(ml_parser_t *Parser, ml_token_t Token)</argsstring>
        <name>ml_parse2</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type>ml_token_t</type>
          <declname>Token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4541" column="19" bodyfile="src/ml_compiler.c" bodystart="4541" bodyend="4551"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ae869f6de79a1c5138ac70a87348ab7b1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
        <definition>static mlc_expr_t * ml_parse_factor</definition>
        <argsstring>(ml_parser_t *Parser, int MethDecl)</argsstring>
        <name>ml_parse_factor</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type>int</type>
          <declname>MethDecl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5221" column="19" bodyfile="src/ml_compiler.c" bodystart="5221" bodyend="5679" declfile="src/ml_compiler.c" declline="4570" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aa6e5bd34bc1fcc364fa128db941444ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
        <definition>static mlc_expr_t * ml_parse_term</definition>
        <argsstring>(ml_parser_t *Parser, int MethDecl)</argsstring>
        <name>ml_parse_term</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type>int</type>
          <declname>MethDecl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5744" column="19" bodyfile="src/ml_compiler.c" bodystart="5744" bodyend="5748" declfile="src/ml_compiler.c" declline="4571" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a08cef4e64972d9128409975aa41b451b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
        <definition>static mlc_expr_t * ml_accept_fun_expr</definition>
        <argsstring>(ml_parser_t *Parser, const char *Name, ml_token_t EndToken)</argsstring>
        <name>ml_accept_fun_expr</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type>ml_token_t</type>
          <declname>EndToken</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4574" column="19" bodyfile="src/ml_compiler.c" bodystart="4574" bodyend="4674"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ae06da132813f77f34f7c98bd06dd9878" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
        <definition>static mlc_expr_t * ml_accept_meth_expr</definition>
        <argsstring>(ml_parser_t *Parser)</argsstring>
        <name>ml_accept_meth_expr</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4678" column="19" bodyfile="src/ml_compiler.c" bodystart="4678" bodyend="4777"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a43f98ef2274110c9eeadd2a58278848a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_accept_named_arguments</definition>
        <argsstring>(ml_parser_t *Parser, ml_token_t EndToken, mlc_expr_t **ArgsSlot, ml_value_t *Names)</argsstring>
        <name>ml_accept_named_arguments</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type>ml_token_t</type>
          <declname>EndToken</declname>
        </param>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> **</type>
          <declname>ArgsSlot</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4779" column="13" bodyfile="src/ml_compiler.c" bodystart="4779" bodyend="4829"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a7e29e03af1023064fd2a46a474c8b59b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmlc__if__case__t" kindref="compound">mlc_if_case_t</ref> *</type>
        <definition>static mlc_if_case_t * ml_accept_if_case</definition>
        <argsstring>(ml_parser_t *Parser)</argsstring>
        <name>ml_accept_if_case</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4875" column="22" bodyfile="src/ml_compiler.c" bodystart="4875" bodyend="4909"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aa6515f955d1e545e2bee6bee1e45fd64" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
        <definition>static mlc_expr_t * ml_accept_with_expr</definition>
        <argsstring>(ml_parser_t *Parser, mlc_expr_t *Child)</argsstring>
        <name>ml_accept_with_expr</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
          <declname>Child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4911" column="19" bodyfile="src/ml_compiler.c" bodystart="4911" bodyend="4945"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a47aef3281ea60b4f948b979289901500" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_accept_for_decl</definition>
        <argsstring>(ml_parser_t *Parser, mlc_for_expr_t *Expr)</argsstring>
        <name>ml_accept_for_decl</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type><ref refid="structmlc__for__expr__t" kindref="compound">mlc_for_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4947" column="13" bodyfile="src/ml_compiler.c" bodystart="4947" bodyend="4972"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ad5cd3d06fb16d12e811f9d43b80cb690" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLCompilerZipT,(MLSequenceT), &quot;compiler::zip&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLCompilerZipT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;compiler::zip&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4981" column="1" declfile="src/ml_compiler.c" declline="4981" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a879baf1f7e6848826408a4f91f2b8135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLCompilerZip)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLCompilerZip</type>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="4984" column="1" bodyfile="src/ml_compiler.c" bodystart="4984" bodyend="5024"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1afe57baa55e3fedee48511a5b49c8aa1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLCompilerZipStateT,(), &quot;compiler::zip::state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLCompilerZipStateT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;compiler::zip::state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5033" column="1" declfile="src/ml_compiler.c" declline="5033" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a07063b7662c5c04d93ef068f8fe75d1a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_compiler_zip_iter_key</definition>
        <argsstring>(ml_compiler_zip_state_t *State, ml_value_t *Result)</argsstring>
        <name>ml_compiler_zip_iter_key</name>
        <param>
          <type><ref refid="structml__compiler__zip__state__t" kindref="compound">ml_compiler_zip_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5056" column="13" bodyfile="src/ml_compiler.c" bodystart="5056" bodyend="5063" declfile="src/ml_compiler.c" declline="5036" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aa3a2f4f5e8bd10b011392946c4d857ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_compiler_zip_iter_value</definition>
        <argsstring>(ml_compiler_zip_state_t *State, ml_value_t *Result)</argsstring>
        <name>ml_compiler_zip_iter_value</name>
        <param>
          <type><ref refid="structml__compiler__zip__state__t" kindref="compound">ml_compiler_zip_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5038" column="13" bodyfile="src/ml_compiler.c" bodystart="5038" bodyend="5054"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a5d6fbcb7410be07a1f3ea898537807f8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_compiler_zip_iter_next</definition>
        <argsstring>(ml_compiler_zip_state_t *State, ml_value_t *Result)</argsstring>
        <name>ml_compiler_zip_iter_next</name>
        <param>
          <type><ref refid="structml__compiler__zip__state__t" kindref="compound">ml_compiler_zip_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5065" column="13" bodyfile="src/ml_compiler.c" bodystart="5065" bodyend="5083"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ad92117d08d722ddfc4c7075443ab1b36" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLCompilerZipStateT, ml_state_t *Caller, ml_compiler_zip_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLCompilerZipStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__compiler__zip__state__t" kindref="compound">ml_compiler_zip_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5085" column="13" bodyfile="src/ml_compiler.c" bodystart="5085" bodyend="5089"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a5c8bfdafbfa816b4e5503f4e910cd29a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLCompilerZipStateT, ml_state_t *Caller, ml_compiler_zip_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLCompilerZipStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__compiler__zip__state__t" kindref="compound">ml_compiler_zip_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5091" column="13" bodyfile="src/ml_compiler.c" bodystart="5091" bodyend="5093"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a71ded3e30300d89e333726efa55ebf41" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLCompilerZipStateT, ml_state_t *Caller, ml_compiler_zip_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLCompilerZipStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__compiler__zip__state__t" kindref="compound">ml_compiler_zip_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5095" column="13" bodyfile="src/ml_compiler.c" bodystart="5095" bodyend="5097"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a3533169b67d4ee6524c5091cbf192d07" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_unpack, MLCompilerZipStateT, ml_compiler_zip_state_t *State, int Index)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_unpack</type>
        </param>
        <param>
          <type>MLCompilerZipStateT</type>
        </param>
        <param>
          <type><ref refid="structml__compiler__zip__state__t" kindref="compound">ml_compiler_zip_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5099" column="19" bodyfile="src/ml_compiler.c" bodystart="5099" bodyend="5110"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1af731eef8863a0302fb209bec0260e4d8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_compiler_zip_iterate</definition>
        <argsstring>(ml_compiler_zip_state_t *State, ml_value_t *Result)</argsstring>
        <name>ml_compiler_zip_iterate</name>
        <param>
          <type><ref refid="structml__compiler__zip__state__t" kindref="compound">ml_compiler_zip_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5112" column="13" bodyfile="src/ml_compiler.c" bodystart="5112" bodyend="5130"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ae61459d1013ccfac0d30a88cd5e74a98" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLCompilerZipT, ml_state_t *Caller, ml_compiler_zip_t *Zip)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLCompilerZipT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__compiler__zip__t" kindref="compound">ml_compiler_zip_t</ref> *</type>
          <declname>Zip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5132" column="13" bodyfile="src/ml_compiler.c" bodystart="5132" bodyend="5145"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a6a96943e182af813c81575ecf1ce931a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_accept_for_decls</definition>
        <argsstring>(ml_parser_t *Parser, mlc_for_expr_t *Expr)</argsstring>
        <name>ml_accept_for_decls</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type><ref refid="structmlc__for__expr__t" kindref="compound">mlc_for_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5147" column="13" bodyfile="src/ml_compiler.c" bodystart="5147" bodyend="5208"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a01328e7e162fd778092ef95b1b04869d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static ML_METHOD_DECL</definition>
        <argsstring>(MLInMethod, &quot;in&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>MLInMethod</type>
        </param>
        <param>
          <type>&quot;in&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5210" column="8" declfile="src/ml_compiler.c" declline="5210" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a2d45e2d42ecc5d5ac6bff2460446f1ab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static ML_METHOD_DECL</definition>
        <argsstring>(MLIsMethod, &quot;=&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>MLIsMethod</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5211" column="8" declfile="src/ml_compiler.c" declline="5211" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a5a8961b0d7bad351673cc483b0316c5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLNot)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLNot</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5214" column="1" bodyfile="src/ml_compiler.c" bodystart="5214" bodyend="5219"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a87897c62ed14d15f2b422f30bf76ba7f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
        <definition>static mlc_expr_t * ml_parse_term_postfix</definition>
        <argsstring>(ml_parser_t *Parser, int MethDecl, mlc_expr_t *Expr)</argsstring>
        <name>ml_parse_term_postfix</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type>int</type>
          <declname>MethDecl</declname>
        </param>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5681" column="19" bodyfile="src/ml_compiler.c" bodystart="5681" bodyend="5742"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ae9782d9b191c0b171e853f54aa8d6d5b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_accept_block_var</definition>
        <argsstring>(ml_parser_t *Parser, ml_accept_block_t *Accept)</argsstring>
        <name>ml_accept_block_var</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type><ref refid="structml__accept__block__t" kindref="compound">ml_accept_block_t</ref> *</type>
          <declname>Accept</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5883" column="13" bodyfile="src/ml_compiler.c" bodystart="5883" bodyend="5939"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a7204c44cda43fe8902b186d67d580eae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_accept_block_let</definition>
        <argsstring>(ml_parser_t *Parser, ml_accept_block_t *Accept)</argsstring>
        <name>ml_accept_block_let</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type><ref refid="structml__accept__block__t" kindref="compound">ml_accept_block_t</ref> *</type>
          <declname>Accept</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5941" column="13" bodyfile="src/ml_compiler.c" bodystart="5941" bodyend="5987"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a464237cdaa5fe3417213b7576d999617" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_accept_block_ref</definition>
        <argsstring>(ml_parser_t *Parser, ml_accept_block_t *Accept)</argsstring>
        <name>ml_accept_block_ref</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type><ref refid="structml__accept__block__t" kindref="compound">ml_accept_block_t</ref> *</type>
          <declname>Accept</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="5989" column="13" bodyfile="src/ml_compiler.c" bodystart="5989" bodyend="6035"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ae8fd08e945ce00460a86b6bb799813bc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_accept_block_def</definition>
        <argsstring>(ml_parser_t *Parser, ml_accept_block_t *Accept)</argsstring>
        <name>ml_accept_block_def</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type><ref refid="structml__accept__block__t" kindref="compound">ml_accept_block_t</ref> *</type>
          <declname>Accept</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6037" column="13" bodyfile="src/ml_compiler.c" bodystart="6037" bodyend="6105"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a9174101c56a605b331d1550b89a9dcc4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_accept_block_fun</definition>
        <argsstring>(ml_parser_t *Parser, ml_accept_block_t *Accept)</argsstring>
        <name>ml_accept_block_fun</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type><ref refid="structml__accept__block__t" kindref="compound">ml_accept_block_t</ref> *</type>
          <declname>Accept</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6107" column="13" bodyfile="src/ml_compiler.c" bodystart="6107" bodyend="6123"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a091418ea8ffc7642c2fac8422475ab32" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
        <definition>static mlc_expr_t * ml_accept_block_export</definition>
        <argsstring>(ml_parser_t *Parser, mlc_expr_t *Expr, mlc_local_t *Export)</argsstring>
        <name>ml_accept_block_export</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
          <declname>Expr</declname>
        </param>
        <param>
          <type><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref> *</type>
          <declname>Export</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6125" column="19" bodyfile="src/ml_compiler.c" bodystart="6125" bodyend="6142"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a308bc976f25f2e9ae2db4f4c47182566" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref> *</type>
        <definition>static mlc_expr_t * ml_parse_block_expr</definition>
        <argsstring>(ml_parser_t *Parser, ml_accept_block_t *Accept)</argsstring>
        <name>ml_parse_block_expr</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type><ref refid="structml__accept__block__t" kindref="compound">ml_accept_block_t</ref> *</type>
          <declname>Accept</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6144" column="19" bodyfile="src/ml_compiler.c" bodystart="6144" bodyend="6210"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1adafb6aeaefce3a4baf55b55d46adf8a8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmlc__block__expr__t" kindref="compound">mlc_block_expr_t</ref> *</type>
        <definition>static mlc_block_expr_t * ml_accept_block_body</definition>
        <argsstring>(ml_parser_t *Parser)</argsstring>
        <name>ml_accept_block_body</name>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6212" column="25" bodyfile="src/ml_compiler.c" bodystart="6212" bodyend="6283"/>
      </memberdef>
      <member refid="group__compiler_1ga24984cd2745e2a7855b6fe3bc97e616f" kind="function"><name>ml_accept_file</name></member>
      <member refid="group__compiler_1gad09d2507c55f652701547cec4179bfc9" kind="function"><name>ml_parse_expr</name></member>
      <memberdef kind="function" id="ml__compiler_8c_1aa85e5a6382a21b5e73c04420975307e4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_function_compile2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, mlc_compile_frame_t *Frame)</argsstring>
        <name>ml_function_compile2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structmlc__compile__frame__t" kindref="compound">mlc_compile_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6309" column="13" bodyfile="src/ml_compiler.c" bodystart="6309" bodyend="6321"/>
      </memberdef>
      <member refid="group__compiler_1ga7a6d0d3f8e6c7093f6c7504f66355f47" kind="function"><name>ml_function_compile</name></member>
      <memberdef kind="function" id="ml__compiler_8c_1a04c9bf5a65fab6b8d6c954b3c49f93dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;permissive&quot;, MLParserT, MLBooleanT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;permissive&quot;</type>
        </param>
        <param>
          <type>MLParserT</type>
        </param>
        <param>
          <type>MLBooleanT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6366" column="1" bodyfile="src/ml_compiler.c" bodystart="6366" bodyend="6377"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a83ccd046ead3dd93fdc731107b50f3c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;warnings&quot;, MLParserT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;warnings&quot;</type>
        </param>
        <param>
          <type>MLParserT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6379" column="1" bodyfile="src/ml_compiler.c" bodystart="6379" bodyend="6384"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a010139754145fa63fa72b52d77acfbad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;parse&quot;, MLParserT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;parse&quot;</type>
        </param>
        <param>
          <type>MLParserT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6386" column="1" bodyfile="src/ml_compiler.c" bodystart="6386" bodyend="6392"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a50fa4d8d95c45190be5f7c6f84d3a030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;compile&quot;, MLParserT, MLCompilerT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;compile&quot;</type>
        </param>
        <param>
          <type>MLParserT</type>
        </param>
        <param>
          <type>MLCompilerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6394" column="1" bodyfile="src/ml_compiler.c" bodystart="6394" bodyend="6403"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a2925d0a5b3f0c5c9317412fe1e5faba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;compile&quot;, MLParserT, MLCompilerT, MLListT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;compile&quot;</type>
        </param>
        <param>
          <type>MLParserT</type>
        </param>
        <param>
          <type>MLCompilerT</type>
        </param>
        <param>
          <type>MLListT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6405" column="1" bodyfile="src/ml_compiler.c" bodystart="6405" bodyend="6421"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a74bb8aa96318a02f1c291a4b829ef59d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;source&quot;, MLParserT, MLStringT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;source&quot;</type>
        </param>
        <param>
          <type>MLParserT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6423" column="1" bodyfile="src/ml_compiler.c" bodystart="6423" bodyend="6432"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a6ca7dcd9d331b48f8863359973bd82a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;reset&quot;, MLParserT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;reset&quot;</type>
        </param>
        <param>
          <type>MLParserT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6434" column="1" bodyfile="src/ml_compiler.c" bodystart="6434" bodyend="6440"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ae58424daaad77a67282c51dfff3a5017" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;input&quot;, MLParserT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;input&quot;</type>
        </param>
        <param>
          <type>MLParserT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6442" column="1" bodyfile="src/ml_compiler.c" bodystart="6442" bodyend="6449"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ad15e1b924a613010d630ffc9da65b713" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_parser_escape_fn</definition>
        <argsstring>(ml_value_t *Callback)</argsstring>
        <name>ml_parser_escape_fn</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6451" column="19" bodyfile="src/ml_compiler.c" bodystart="6451" bodyend="6453"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aff0353f2cdf445a8f9ec5b23dfa142eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;escape&quot;, MLParserT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;escape&quot;</type>
        </param>
        <param>
          <type>MLParserT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6455" column="1" bodyfile="src/ml_compiler.c" bodystart="6455" bodyend="6462"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ad94b219fdb9a560b0c317acf42f13360" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_parser_special_fn</definition>
        <argsstring>(ml_value_t *Callback)</argsstring>
        <name>ml_parser_special_fn</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6464" column="19" bodyfile="src/ml_compiler.c" bodystart="6464" bodyend="6466"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ad473f517714586e4f8bbed5f7da4b332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;special&quot;, MLParserT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;special&quot;</type>
        </param>
        <param>
          <type>MLParserT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6468" column="1" bodyfile="src/ml_compiler.c" bodystart="6468" bodyend="6475"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a701f22652b36d49ef5cd2d5bfd0ec1e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;special&quot;, MLParserT, MLListT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;special&quot;</type>
        </param>
        <param>
          <type>MLParserT</type>
        </param>
        <param>
          <type>MLListT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6477" column="1" bodyfile="src/ml_compiler.c" bodystart="6477" bodyend="6484"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a2137079b567359f961b16e74e36a7bea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;clear&quot;, MLParserT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;clear&quot;</type>
        </param>
        <param>
          <type>MLParserT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6486" column="1" bodyfile="src/ml_compiler.c" bodystart="6486" bodyend="6491"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a4e9f5137058160b25fd8f52af625db2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;evaluate&quot;, MLParserT, MLCompilerT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;evaluate&quot;</type>
        </param>
        <param>
          <type>MLParserT</type>
        </param>
        <param>
          <type>MLCompilerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6493" column="1" bodyfile="src/ml_compiler.c" bodystart="6493" bodyend="6500"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aff3e5a941ca646de0a4accf586993302" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_evaluate_state_run</definition>
        <argsstring>(ml_evaluate_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_evaluate_state_run</name>
        <param>
          <type><ref refid="structml__evaluate__state__t" kindref="compound">ml_evaluate_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6508" column="13" bodyfile="src/ml_compiler.c" bodystart="6508" bodyend="6511"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a8bbd852e62d0f89c22c636b4bdca51f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;run&quot;, MLParserT, MLCompilerT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;run&quot;</type>
        </param>
        <param>
          <type>MLParserT</type>
        </param>
        <param>
          <type>MLCompilerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6513" column="1" bodyfile="src/ml_compiler.c" bodystart="6513" bodyend="6526"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a3a488eb28905a59806c62996e4be8804" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;compile&quot;, MLExprT, MLCompilerT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;compile&quot;</type>
        </param>
        <param>
          <type>MLExprT</type>
        </param>
        <param>
          <type>MLCompilerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6528" column="1" bodyfile="src/ml_compiler.c" bodystart="6528" bodyend="6535"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a9a793c8f776401b1f40002cadb63d004" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;compile&quot;, MLExprT, MLCompilerT, MLListT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;compile&quot;</type>
        </param>
        <param>
          <type>MLExprT</type>
        </param>
        <param>
          <type>MLCompilerT</type>
        </param>
        <param>
          <type>MLListT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6537" column="1" bodyfile="src/ml_compiler.c" bodystart="6537" bodyend="6550"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aba65c694645a7e408fc461a1dcc6f5ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;[]&quot;, MLCompilerT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&quot;</type>
          <array>[]</array>
        </param>
        <param>
          <type>MLCompilerT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6552" column="1" bodyfile="src/ml_compiler.c" bodystart="6552" bodyend="6558"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ae8a5b8d679e780aea4acc6e94cfb114b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_stringmap_global</definition>
        <argsstring>(stringmap_t *Globals, int Count, ml_value_t **Args)</argsstring>
        <name>ml_stringmap_global</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Globals</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6563" column="19" bodyfile="src/ml_compiler.c" bodystart="6563" bodyend="6568"/>
      </memberdef>
      <member refid="group__compiler_1gac6d491e41f0debbe3329b73134e8d1d6" kind="function"><name>ml_stringmap_globals</name></member>
      <memberdef kind="function" id="ml__compiler_8c_1ad22d0ed37ede7a369d4255d8f39f6086" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;var&quot;, MLCompilerT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;var&quot;</type>
        </param>
        <param>
          <type>MLCompilerT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6574" column="1" bodyfile="src/ml_compiler.c" bodystart="6574" bodyend="6583"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ae8341de6df6a9b41e737ea51839dd8a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;var&quot;, MLCompilerT, MLStringT, MLTypeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;var&quot;</type>
        </param>
        <param>
          <type>MLCompilerT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6585" column="1" bodyfile="src/ml_compiler.c" bodystart="6585" bodyend="6595"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a30f81352ac2fbb8aefc3747cfbe951ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;let&quot;, MLCompilerT, MLStringT, MLAnyT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;let&quot;</type>
        </param>
        <param>
          <type>MLCompilerT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6597" column="1" bodyfile="src/ml_compiler.c" bodystart="6597" bodyend="6606"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a1731ef40f40645ab56c1612bbd1be711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;def&quot;, MLCompilerT, MLStringT, MLAnyT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;def&quot;</type>
        </param>
        <param>
          <type>MLCompilerT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6608" column="1" bodyfile="src/ml_compiler.c" bodystart="6608" bodyend="6617"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a2a91b7ba6c6a12553be8a2f2c3ee9475" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_compiler_var_fn</definition>
        <argsstring>(const char *Name, ml_value_t *Value, ml_value_t *Vars)</argsstring>
        <name>ml_compiler_var_fn</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Vars</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6619" column="12" bodyfile="src/ml_compiler.c" bodystart="6619" bodyend="6622"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a65bf109a9c0e9ef170b2e208f25377e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;vars&quot;, MLCompilerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;vars&quot;</type>
        </param>
        <param>
          <type>MLCompilerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6624" column="1" bodyfile="src/ml_compiler.c" bodystart="6624" bodyend="6631"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a83570b5afac2cd29ce2c90e2ae5d7431" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_global_deref</definition>
        <argsstring>(ml_global_t *Global)</argsstring>
        <name>ml_global_deref</name>
        <param>
          <type><ref refid="structml__global__t" kindref="compound">ml_global_t</ref> *</type>
          <declname>Global</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6639" column="19" bodyfile="src/ml_compiler.c" bodystart="6639" bodyend="6643"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aceb2f176ea5b87e635fc1286678a6a6f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_global_assign</definition>
        <argsstring>(ml_state_t *Caller, ml_global_t *Global, ml_value_t *Value)</argsstring>
        <name>ml_global_assign</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__global__t" kindref="compound">ml_global_t</ref> *</type>
          <declname>Global</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6645" column="13" bodyfile="src/ml_compiler.c" bodystart="6645" bodyend="6648"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ad122dd5760346ea5f850c305b83f667f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_global_call</definition>
        <argsstring>(ml_state_t *Caller, ml_global_t *Global, int Count, ml_value_t **Args)</argsstring>
        <name>ml_global_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__global__t" kindref="compound">ml_global_t</ref> *</type>
          <declname>Global</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6650" column="13" bodyfile="src/ml_compiler.c" bodystart="6650" bodyend="6653"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a4d220cc2a9039fc78831e29feba3b208" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLGlobalT,(), &quot;global&quot;,.deref=(void *) ml_global_deref,.assign=(void *) ml_global_assign,.call=(void *) ml_global_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLGlobalT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;global&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>deref</declname>
          <defval>(void *) ml_global_deref</defval>
          <briefdescription><para>compiler </para>
</briefdescription>
        </param>
        <param>
          <type>.</type>
          <declname>assign</declname>
          <defval>(void *) ml_global_assign</defval>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_global_call</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6655" column="1" declfile="src/ml_compiler.c" declline="6655" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a2452e644a255b436a254e82a5a221744" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_value_find_all, MLGlobalT, ml_global_t *Global, void *Data, ml_value_find_fn RefFn)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_value_find_all</type>
        </param>
        <param>
          <type>MLGlobalT</type>
        </param>
        <param>
          <type><ref refid="structml__global__t" kindref="compound">ml_global_t</ref> *</type>
          <declname>Global</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>ml_value_find_fn</type>
          <declname>RefFn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6662" column="13" bodyfile="src/ml_compiler.c" bodystart="6662" bodyend="6665"/>
      </memberdef>
      <member refid="group__compiler_1ga076b4ddab4f2553f5971f3bd6c512c44" kind="function"><name>ml_global</name></member>
      <member refid="group__compiler_1ga2a4581401ba4633e895544bd7cdc891c" kind="function"><name>ml_global_get</name></member>
      <member refid="group__compiler_1gad850ad9f0a14a8fffcc01d2115544531" kind="function"><name>ml_global_set</name></member>
      <memberdef kind="function" id="ml__compiler_8c_1a51fb6abeadc94adfa8fb37aaaae33c43" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_unpack, MLGlobalT, ml_global_t *Global, int Index)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_unpack</type>
        </param>
        <param>
          <type>MLGlobalT</type>
        </param>
        <param>
          <type><ref refid="structml__global__t" kindref="compound">ml_global_t</ref> *</type>
          <declname>Global</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6682" column="19" bodyfile="src/ml_compiler.c" bodystart="6682" bodyend="6684"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a8996cdc40397c8c3fd2c88fc492d129e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;command_var&quot;, MLCompilerT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;command_var&quot;</type>
        </param>
        <param>
          <type>MLCompilerT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6686" column="1" bodyfile="src/ml_compiler.c" bodystart="6686" bodyend="6697"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a4d8856574d84c10dad9e20fa08e2f824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;command_var&quot;, MLCompilerT, MLStringT, MLTypeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;command_var&quot;</type>
        </param>
        <param>
          <type>MLCompilerT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6699" column="1" bodyfile="src/ml_compiler.c" bodystart="6699" bodyend="6711"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a2bf47ce1d8bf3b258c9269b4ce71bd97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;command_let&quot;, MLCompilerT, MLStringT, MLAnyT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;command_let&quot;</type>
        </param>
        <param>
          <type>MLCompilerT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6713" column="1" bodyfile="src/ml_compiler.c" bodystart="6713" bodyend="6725"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a8ed97fce339d8d7c6c00bb8e32656b04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;command_def&quot;, MLCompilerT, MLStringT, MLAnyT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;command_def&quot;</type>
        </param>
        <param>
          <type>MLCompilerT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6727" column="1" bodyfile="src/ml_compiler.c" bodystart="6727" bodyend="6740"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aabe9663929a081307443248de737f855" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__global__t" kindref="compound">ml_global_t</ref> *</type>
        <definition>static ml_global_t * ml_command_global</definition>
        <argsstring>(stringmap_t *Globals, const char *Name)</argsstring>
        <name>ml_command_global</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Globals</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6742" column="20" bodyfile="src/ml_compiler.c" bodystart="6742" bodyend="6755"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1af85ab6b471aa906135f7845e75551430" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_command_idents_in2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, ml_command_idents_frame_t *Frame)</argsstring>
        <name>ml_command_idents_in2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__command__idents__frame__t" kindref="compound">ml_command_idents_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6764" column="13" bodyfile="src/ml_compiler.c" bodystart="6764" bodyend="6783"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1aff8d1e72e37c65c0938662db636d4089" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_command_idents_in</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, ml_command_idents_frame_t *Frame)</argsstring>
        <name>ml_command_idents_in</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__command__idents__frame__t" kindref="compound">ml_command_idents_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6785" column="13" bodyfile="src/ml_compiler.c" bodystart="6785" bodyend="6790"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ac31b83efb997dcc38b02961cd38c75cc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_command_idents_unpack</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Packed, ml_command_idents_frame_t *Frame)</argsstring>
        <name>ml_command_idents_unpack</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Packed</declname>
        </param>
        <param>
          <type><ref refid="structml__command__idents__frame__t" kindref="compound">ml_command_idents_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6792" column="13" bodyfile="src/ml_compiler.c" bodystart="6792" bodyend="6808"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1acc454f56012545aebd9b6da816535603" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__command__idents__frame__t" kindref="compound">ml_command_idents_frame_t</ref> *</type>
        <definition>static ml_command_idents_frame_t * ml_accept_command_idents</definition>
        <argsstring>(mlc_function_t *Function, ml_parser_t *Parser, int Index)</argsstring>
        <name>ml_accept_command_idents</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6810" column="34" bodyfile="src/ml_compiler.c" bodystart="6810" bodyend="6831"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a040b8597981584f43f84fe31be2cd223" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_command_var_type_run</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, ml_command_ident_frame_t *Frame)</argsstring>
        <name>ml_command_var_type_run</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__command__ident__frame__t" kindref="compound">ml_command_ident_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6840" column="13" bodyfile="src/ml_compiler.c" bodystart="6840" bodyend="6854"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a8c07b7276b4d796184ae1dfebce04b03" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_command_ident_run</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, ml_command_ident_frame_t *Frame)</argsstring>
        <name>ml_command_ident_run</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__command__ident__frame__t" kindref="compound">ml_command_ident_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6856" column="13" bodyfile="src/ml_compiler.c" bodystart="6856" bodyend="6889"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1acafdf461df9cb68849ad5ee175065ce9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_accept_command_decl2</definition>
        <argsstring>(mlc_function_t *Function, ml_parser_t *Parser, ml_token_t Type)</argsstring>
        <name>ml_accept_command_decl2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type>ml_token_t</type>
          <declname>Type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6891" column="13" bodyfile="src/ml_compiler.c" bodystart="6891" bodyend="6922"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a9cabdb0e0616e9c38c368d235b6f8313" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_command_decl_run</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, ml_command_decl_frame_t *Frame)</argsstring>
        <name>ml_command_decl_run</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__command__decl__frame__t" kindref="compound">ml_command_decl_frame_t</ref> *</type>
          <declname>Frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6929" column="13" bodyfile="src/ml_compiler.c" bodystart="6929" bodyend="6938"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a7e1ca298e206cbd82f9f1981439ab24b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_accept_command_decl</definition>
        <argsstring>(mlc_function_t *Function, ml_parser_t *Parser, ml_token_t Type)</argsstring>
        <name>ml_accept_command_decl</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type>ml_token_t</type>
          <declname>Type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6940" column="13" bodyfile="src/ml_compiler.c" bodystart="6940" bodyend="6945"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a1751a30631b7cba6f61005caa707ddd5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_accept_command_fun</definition>
        <argsstring>(mlc_function_t *Function, ml_parser_t *Parser)</argsstring>
        <name>ml_accept_command_fun</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6947" column="13" bodyfile="src/ml_compiler.c" bodystart="6947" bodyend="6972"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ac003a9948e2c69a1551ca397446f3144" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_accept_command_expr</definition>
        <argsstring>(mlc_function_t *Function, ml_parser_t *Parser)</argsstring>
        <name>ml_accept_command_expr</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6974" column="13" bodyfile="src/ml_compiler.c" bodystart="6974" bodyend="6994"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a4cf9527a0da2ca2253efdc10f9bfa5d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_command_evaluate2</definition>
        <argsstring>(mlc_function_t *Function, ml_value_t *Value, void *Data)</argsstring>
        <name>ml_command_evaluate2</name>
        <param>
          <type><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="6996" column="13" bodyfile="src/ml_compiler.c" bodystart="6996" bodyend="6999"/>
      </memberdef>
      <member refid="group__compiler_1ga4368e311e7391106a3a9c5908ce815fc" kind="function"><name>ml_command_evaluate</name></member>
      <member refid="group__compiler_1ga72a4bc63c6250cf271513e7d45311986" kind="function"><name>stringmap_global_get</name></member>
      <memberdef kind="function" id="ml__compiler_8c_1ac1175d6d50358c1f21fa1cf7da63a7ad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>static ssize_t ml_read_line</definition>
        <argsstring>(FILE *File, ssize_t Offset, char **Result)</argsstring>
        <name>ml_read_line</name>
        <param>
          <type>FILE *</type>
          <declname>File</declname>
        </param>
        <param>
          <type>ssize_t</type>
          <declname>Offset</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="7037" column="16" bodyfile="src/ml_compiler.c" bodystart="7037" bodyend="7050"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1a5322c6604e011b8a6f76e919dc7bbd8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ml_load_file_read</definition>
        <argsstring>(void *Data)</argsstring>
        <name>ml_load_file_read</name>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="7052" column="12" bodyfile="src/ml_compiler.c" bodystart="7052" bodyend="7059"/>
      </memberdef>
      <memberdef kind="function" id="ml__compiler_8c_1ab077ae4abf4ae8ebe9fc44df2f05bf0b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_load_file_state_run</definition>
        <argsstring>(ml_load_file_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_load_file_state_run</name>
        <param>
          <type><ref refid="structml__load__file__state__t" kindref="compound">ml_load_file_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="7066" column="13" bodyfile="src/ml_compiler.c" bodystart="7066" bodyend="7070"/>
      </memberdef>
      <member refid="group__compiler_1ga74a69436921639e9cb02c285852ce333" kind="function"><name>ml_load_file</name></member>
      <memberdef kind="function" id="ml__compiler_8c_1ab59afe8eb320d8750fb643a53ebdd521" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_inline_call_macro_fn</definition>
        <argsstring>(ml_state_t *Caller, void *Value, int Count, ml_value_t **Args)</argsstring>
        <name>ml_inline_call_macro_fn</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_compiler.c" line="7100" column="13" bodyfile="src/ml_compiler.c" bodystart="7100" bodyend="7120"/>
      </memberdef>
      <member refid="group__compiler_1ga055bce370b96527c2036d0a3442c6410" kind="function"><name>ml_inline_call_macro</name></member>
      <member refid="group__compiler_1gad4a469c6a89bb88079d70eb008b76493" kind="function"><name>ml_compiler_init</name></member>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;minilang.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_compiler2.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stringmap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_runtime.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_compiler2.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ML_CATEGORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;compiler&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="structmlc__upvalue__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmlc__upvalue__t" kindref="compound">mlc_upvalue_t</ref><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__upvalue__t" kindref="compound">mlc_upvalue_t</ref><sp/>*Next;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index,<sp/>Line;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="structmlc__try__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmlc__try__t" kindref="compound">mlc_try_t</ref><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__try__t" kindref="compound">mlc_try_t</ref><sp/>*Up;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*Retries;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Top;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_EXPR(EXPR,<sp/>TYPE,<sp/>COMP)<sp/>\</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>mlc_<sp/>##<sp/>TYPE<sp/>##<sp/>_expr_t<sp/>*EXPR<sp/>=<sp/>new(mlc_<sp/>##<sp/>TYPE<sp/>##<sp/>_expr_t);<sp/>\</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>EXPR-&gt;compile<sp/>=<sp/>ml_<sp/>##<sp/>COMP<sp/>##<sp/>_expr_compile;<sp/>\</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>EXPR-&gt;Source<sp/>=<sp/>Parser-&gt;Source.Name;<sp/>\</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>EXPR-&gt;StartLine<sp/>=<sp/>EXPR-&gt;EndLine<sp/>=<sp/>Parser-&gt;Source.Line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_EXPR_END(EXPR)<sp/>(((mlc_expr_t<sp/>*)EXPR)-&gt;EndLine<sp/>=<sp/>Parser-&gt;Source.Line,<sp/>(mlc_expr_t<sp/>*)EXPR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmlc__token__t" kindref="compound">mlc_token_t</ref><sp/><ref refid="structmlc__token__t" kindref="compound">mlc_token_t</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="structmlc__token__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmlc__token__t" kindref="compound">mlc_token_t</ref><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__token__t" kindref="compound">mlc_token_t</ref><sp/>*Next;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*General;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>Source;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_token_t<sp/>Token;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmlc__expected__delimiter__t" kindref="compound">mlc_expected_delimiter_t</ref><sp/><ref refid="structmlc__expected__delimiter__t" kindref="compound">mlc_expected_delimiter_t</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="structmlc__expected__delimiter__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmlc__expected__delimiter__t" kindref="compound">mlc_expected_delimiter_t</ref><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expected__delimiter__t" kindref="compound">mlc_expected_delimiter_t</ref><sp/>*Prev;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_token_t<sp/>Token;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="structml__parser__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Next;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ReadData,<sp/>*SpecialData,<sp/>*EscapeData;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*(*Read)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*(*Escape)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*(*Special)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Ident;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Warnings;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expected__delimiter__t" kindref="compound">mlc_expected_delimiter_t</ref><sp/>*ExpectedDelimiter;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>Source;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>jmp_buf<sp/>OnError;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_token_t<sp/>Token;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="structml__compiler__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_getter_t<sp/>GlobalGet;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Globals;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>Vars[1];</highlight></codeline>
<codeline lineno="76"><highlight class="normal">};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STRINGIFY(x)<sp/>#x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TOSTRING(x)<sp/>STRINGIFY(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*IndexMethod;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*SymbolMethod;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ml_ident_hash(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Ident)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Hash<sp/>=<sp/>5381;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*Ident)<sp/>Hash<sp/>=<sp/>((Hash<sp/>&lt;&lt;<sp/>5)<sp/>+<sp/>Hash)<sp/>+<sp/>*Ident++;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Hash;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mlc_function_run(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value)<sp/>&amp;&amp;<sp/>!Function-&gt;Frame-&gt;AllowErrors)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Function-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_error_trace_add(Value,<sp/>(<ref refid="structml__source__t" kindref="compound">ml_source_t</ref>){Function-&gt;Source,<sp/>Function-&gt;Frame-&gt;Line});</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run(Function,<sp/>Value,<sp/>Function-&gt;Frame-&gt;Data);</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">ML_TYPE(MLCompilerFunctionT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;compiler-function&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>ML_TYPED_FN(ml_debugger_source,<sp/>MLCompilerFunctionT,<sp/><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__source__t" kindref="compound">ml_source_t</ref>){Function-&gt;Source,<sp/>Function-&gt;Frame<sp/>?<sp/>Function-&gt;Frame-&gt;Line<sp/>:<sp/>0};</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FRAME_BLOCK_SIZE<sp/>2000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mlc_return(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__frame__t" kindref="compound">mlc_frame_t</ref><sp/>*Frame<sp/>=<sp/>Function-&gt;Frame;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Frame-&gt;run(Function,<sp/>Value,<sp/>Frame-&gt;Data);</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mlc_pop(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Frame<sp/>=<sp/>Function-&gt;Frame-&gt;Next;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mlc_link_frame_run(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**Limit)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Limit<sp/>=<sp/>*Limit;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Frame<sp/>=<sp/>Function-&gt;Frame-&gt;Next;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run(Function,<sp/>Value,<sp/>Function-&gt;Frame-&gt;Data);</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__attribute__<sp/>((noinline))<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mlc_frame_alloc(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size,<sp/>mlc_frame_fn<sp/>run)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>FrameSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structmlc__frame__t" kindref="compound">mlc_frame_t</ref>)<sp/>+<sp/>Size;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>FrameSize<sp/>=<sp/>(FrameSize<sp/>+<sp/>7)<sp/>&amp;<sp/>~7;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__frame__t" kindref="compound">mlc_frame_t</ref><sp/>*Frame<sp/>=<sp/>(<ref refid="structmlc__frame__t" kindref="compound">mlc_frame_t</ref><sp/>*)((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Function-&gt;Frame<sp/>-<sp/>FrameSize);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Function-&gt;Limit<sp/>||<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Frame<sp/>&lt;<sp/>Function-&gt;Limit)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>BlockSize<sp/>=<sp/>FrameSize<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BlockSize<sp/>&lt;<sp/>FRAME_BLOCK_SIZE)<sp/>BlockSize<sp/>=<sp/>FRAME_BLOCK_SIZE;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Limit<sp/>=<sp/>bnew(BlockSize);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>LinkFrameSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structmlc__frame__t" kindref="compound">mlc_frame_t</ref>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__frame__t" kindref="compound">mlc_frame_t</ref><sp/>*LinkFrame<sp/>=<sp/>(<ref refid="structmlc__frame__t" kindref="compound">mlc_frame_t</ref><sp/>*)((Limit<sp/>+<sp/>BlockSize)<sp/>-<sp/>LinkFrameSize);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LinkFrame-&gt;Next<sp/>=<sp/>Function-&gt;Frame;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LinkFrame-&gt;run<sp/>=<sp/>(mlc_frame_fn)mlc_link_frame_run;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LinkFrame-&gt;Data[0]<sp/>=<sp/>Function-&gt;Limit;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Limit<sp/>=<sp/>Limit;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame<sp/>=<sp/>(<ref refid="structmlc__frame__t" kindref="compound">mlc_frame_t</ref><sp/>*)((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)LinkFrame<sp/>-<sp/>FrameSize);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Next<sp/>=<sp/>LinkFrame;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Next<sp/>=<sp/>Function-&gt;Frame;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;AllowErrors<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;run<sp/>=<sp/>run;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Frame<sp/>=<sp/>Frame;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Frame-&gt;Data;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*ml_inst_alloc(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line,<sp/>ml_opcode_t<sp/>Opcode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>N<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function-&gt;Space<sp/>&lt;<sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*GotoInst<sp/>=<sp/>Function-&gt;Next;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GotoInst-&gt;Opcode<sp/>=<sp/>MLI_LINK;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GotoInst-&gt;Line<sp/>=<sp/>Line;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GotoInst[1].Inst<sp/>=<sp/>Function-&gt;Next<sp/>=<sp/>anew(<ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref>,<sp/>128);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Space<sp/>=<sp/>126;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*Inst<sp/>=<sp/>Function-&gt;Next;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Next<sp/>+=<sp/>Count;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Space<sp/>-=<sp/>Count;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>Inst-&gt;Opcode<sp/>=<sp/>Opcode;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>Inst-&gt;Line<sp/>=<sp/>Line;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Inst;</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mlc_fix_links(<ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*Start,<sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*Target)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Start)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*Next<sp/>=<sp/>Start-&gt;Inst;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Start-&gt;Inst<sp/>=<sp/>Target;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Start<sp/>=<sp/>Next;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mlc_inc_top(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++Function-&gt;Top<sp/>&gt;=<sp/>Function-&gt;Size)<sp/>Function-&gt;Size<sp/>=<sp/>Function-&gt;Top<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mlc_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;compile(Function,<sp/>Expr,<sp/>Flags);</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mlc_expr_error(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_error_trace_add(Error,<sp/>(<ref refid="structml__source__t" kindref="compound">ml_source_t</ref>){Function-&gt;Source,<sp/>Expr-&gt;StartLine});</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(Function-&gt;Base.Caller,<sp/>Error);</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*mlc_local_new(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Ident,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>Local-&gt;Ident<sp/>=<sp/>Ident;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>Local-&gt;Line<sp/>=<sp/>Line;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Local;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="structmlc__compile__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__closure__info__t" kindref="compound">ml_closure_info_t</ref><sp/>*Info;</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}<sp/><ref refid="structmlc__compile__frame__t" kindref="compound">mlc_compile_frame_t</ref>;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mlc_expr_call2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__compile__frame__t" kindref="compound">mlc_compile_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__closure__info__t" kindref="compound">ml_closure_info_t</ref><sp/>*Info<sp/>=<sp/>Frame-&gt;Info;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Function-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function-&gt;UpValues)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error<sp/>=<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;EvalError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>of<sp/>non-constant<sp/>value<sp/>%s<sp/>in<sp/>constant<sp/>expression&quot;</highlight><highlight class="normal">,<sp/>Function-&gt;UpValues-&gt;Decl-&gt;Ident);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_error_trace_add(Error,<sp/>(<ref refid="structml__source__t" kindref="compound">ml_source_t</ref>){Function-&gt;Source,<sp/>Expr-&gt;EndLine});</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Error);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Return<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_RETURN,<sp/>0);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_LINK(Function-&gt;Returns,<sp/>Info-&gt;Return);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Halt<sp/>=<sp/>Function-&gt;Next;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Source<sp/>=<sp/>Function-&gt;Source;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;StartLine<sp/>=<sp/>Expr-&gt;StartLine;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;EndLine<sp/>=<sp/>Expr-&gt;EndLine;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_asprintf((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)&amp;Info-&gt;Name,<sp/></highlight><highlight class="stringliteral">&quot;@%s:%d&quot;</highlight><highlight class="normal">,<sp/>Info-&gt;Source,<sp/>Info-&gt;StartLine);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;FrameSize<sp/>=<sp/>Function-&gt;Size;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;NumParams<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_call(Caller,<sp/>ml_closure(Info),<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mlc_expr_call(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Parent,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>Parent-&gt;Frame-&gt;Line<sp/>=<sp/>Expr-&gt;EndLine;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref>);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Base.Type<sp/>=<sp/>MLCompilerFunctionT;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Base.Caller<sp/>=<sp/>(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Parent;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Base.Context<sp/>=<sp/>Parent-&gt;Base.Context;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Base.run<sp/>=<sp/>(ml_state_fn)mlc_function_run;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Compiler<sp/>=<sp/>Parent-&gt;Compiler;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Eval<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Source<sp/>=<sp/>Parent-&gt;Source;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Old<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;It<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Up<sp/>=<sp/>Parent;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Size<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Next<sp/>=<sp/>anew(<ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref>,<sp/>128);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Space<sp/>=<sp/>126;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Returns<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__compile__frame__t" kindref="compound">mlc_compile_frame_t</ref>,<sp/>mlc_expr_call2);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Info<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__closure__info__t" kindref="compound">ml_closure_info_t</ref>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Info-&gt;Entry<sp/>=<sp/>Function-&gt;Next;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>mlc_compile(Function,<sp/>Expr,<sp/>MLCF_RETURN);</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">ML_TYPE(MLExprGotoT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;expr::goto&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal">ML_VALUE(MLExprGoto,<sp/>MLExprGotoT);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_unknown_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_EXPR_ERROR(Expr,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CompilerError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>expression<sp/>cannot<sp/>be<sp/>compiled&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_register_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>MLBlank[];</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_blank_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*Inst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_LOAD,<sp/>1);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>Inst[1].Value<sp/>=<sp/>MLBlank;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst-&gt;Opcode<sp/>=<sp/>MLI_LOAD_PUSH;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_nil_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*Inst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_NIL,<sp/>0);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst-&gt;Opcode<sp/>=<sp/>MLI_NIL_PUSH;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_value_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__value__expr__t" kindref="compound">mlc_value_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>MLCF_CONSTANT)<sp/>MLC_RETURN(Expr-&gt;Value);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*Inst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_LOAD,<sp/>1);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>Inst[1].Value<sp/>=<sp/>Expr-&gt;Value;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst-&gt;Opcode<sp/>=<sp/>MLI_LOAD_PUSH;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="structmlc__if__expr__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__if__expr__t" kindref="compound">mlc_if_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__if__case__t" kindref="compound">mlc_if_case_t</ref><sp/>*Case;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decls;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*Exits,<sp/>*IfInst;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags,<sp/>Goto;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}<sp/><ref refid="structmlc__if__expr__frame__t" kindref="compound">mlc_if_expr_frame_t</ref>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_if_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__if__expr__frame__t" kindref="compound">mlc_if_expr_frame_t</ref><sp/>*Frame);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_if_expr_compile4(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__if__expr__frame__t" kindref="compound">mlc_if_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__if__expr__t" kindref="compound">mlc_if_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_LINK(Frame-&gt;Exits,<sp/>Function-&gt;Next);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Goto<sp/>=<sp/>Frame-&gt;Goto<sp/>&amp;&amp;<sp/>(Value<sp/>==<sp/>MLExprGoto);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(Goto<sp/>?<sp/>MLExprGoto<sp/>:<sp/>NULL);</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_if_expr_compile3(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__if__expr__frame__t" kindref="compound">mlc_if_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__if__case__t" kindref="compound">mlc_if_case_t</ref><sp/>*Case<sp/>=<sp/>Frame-&gt;Case;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Case-&gt;Local-&gt;Ident)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Decls<sp/>=<sp/>Frame-&gt;Decls;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*ExitInst<sp/>=<sp/>MLC_EMIT(Case-&gt;Body-&gt;EndLine,<sp/>MLI_EXIT,<sp/>2);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Case-&gt;Local-&gt;Index)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Top<sp/>-=<sp/>Case-&gt;Local-&gt;Index;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExitInst[1].Count<sp/>=<sp/>Case-&gt;Local-&gt;Index;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Function-&gt;Top;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExitInst[1].Count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExitInst[2].Decls<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__if__expr__t" kindref="compound">mlc_if_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Case-&gt;Next<sp/>||<sp/>Expr-&gt;Else)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>!=<sp/>MLExprGoto)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Goto<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*GotoInst<sp/>=<sp/>MLC_EMIT(Case-&gt;Body-&gt;EndLine,<sp/>MLI_GOTO,<sp/>1);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GotoInst[1].Inst<sp/>=<sp/>Frame-&gt;Exits;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Exits<sp/>=<sp/>GotoInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;IfInst[1].Inst<sp/>=<sp/>Function-&gt;Next;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Case-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Case<sp/>=<sp/>Case<sp/>=<sp/>Case-&gt;Next;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_if_expr_compile2;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Case-&gt;Condition,<sp/>0);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expr-&gt;Else)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_if_expr_compile4;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Else,<sp/>Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_RETURN);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_LINK(Frame-&gt;Exits,<sp/>Function-&gt;Next);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Goto<sp/>=<sp/>Frame-&gt;Goto;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(Goto<sp/>?<sp/>MLExprGoto<sp/>:<sp/>NULL);</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_if_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__if__expr__frame__t" kindref="compound">mlc_if_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__if__case__t" kindref="compound">mlc_if_case_t</ref><sp/>*Case<sp/>=<sp/>Frame-&gt;Case;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CaseLine<sp/>=<sp/>Case-&gt;Condition-&gt;EndLine;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;IfInst<sp/>=<sp/>MLC_EMIT(CaseLine,<sp/>MLI_AND,<sp/>1);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Case-&gt;Local-&gt;Ident)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Case-&gt;Local;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref>);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Source.Name<sp/>=<sp/>Function-&gt;Source;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Source.Line<sp/>=<sp/>Local-&gt;Line;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Ident<sp/>=<sp/>Local-&gt;Ident;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Hash<sp/>=<sp/>ml_ident_hash(Local-&gt;Ident);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Index<sp/>=<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Next<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Decls<sp/>=<sp/>Decl;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Local<sp/>=<sp/>Local-&gt;Next;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Local);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*EnterInst<sp/>=<sp/>MLC_EMIT(CaseLine,<sp/>MLI_ENTER,<sp/>3);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Case-&gt;Local-&gt;Index)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Case-&gt;Token<sp/>==<sp/>MLT_VAR)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnterInst[1].Count<sp/>=<sp/>Case-&gt;Local-&gt;Index;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnterInst[2].Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnterInst[1].Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnterInst[2].Count<sp/>=<sp/>Case-&gt;Local-&gt;Index;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Case-&gt;Token<sp/>==<sp/>MLT_VAR)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnterInst[1].Count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnterInst[2].Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnterInst[1].Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnterInst[2].Count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnterInst[3].Decls<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Case-&gt;Local-&gt;Index)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*Inst<sp/>=<sp/>MLC_EMIT(CaseLine,<sp/>Case-&gt;Token<sp/>==<sp/>MLT_VAR<sp/>?<sp/>MLI_VARX<sp/>:<sp/>MLI_LETX,<sp/>2);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst[1].Count<sp/>=<sp/>-Case-&gt;Local-&gt;Index;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst[2].Count<sp/>=<sp/>Case-&gt;Local-&gt;Index;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*Inst<sp/>=<sp/>MLC_EMIT(CaseLine,<sp/>Case-&gt;Token<sp/>==<sp/>MLT_VAR<sp/>?<sp/>MLI_VAR<sp/>:<sp/>MLI_LET,<sp/>1);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Inst[1].Count<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_if_expr_compile3;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Case-&gt;Body,<sp/>Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_RETURN);</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_if_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__if__expr__t" kindref="compound">mlc_if_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__if__expr__frame__t" kindref="compound">mlc_if_expr_frame_t</ref>,<sp/>ml_if_expr_compile2);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Decls<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Goto<sp/>=<sp/>!!Expr-&gt;Else;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Exits<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;IfInst<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__if__case__t" kindref="compound">mlc_if_case_t</ref><sp/>*Case<sp/>=<sp/>Frame-&gt;Case<sp/>=<sp/>Expr-&gt;Cases;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Case-&gt;Condition,<sp/>0);</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="structmlc__parent__expr__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags,<sp/>Count;</highlight></codeline>
<codeline lineno="424"><highlight class="normal">}<sp/><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref>;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426" refid="structmlc__link__expr__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*Exits;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags;</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}<sp/><ref refid="structmlc__link__expr__frame__t" kindref="compound">mlc_link_expr_frame_t</ref>;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_or_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__link__expr__frame__t" kindref="compound">mlc_link_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Frame-&gt;Child;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*AndInst<sp/>=<sp/>MLC_EMIT(Child-&gt;EndLine,<sp/>MLI_OR,<sp/>1);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child<sp/>=<sp/>Child-&gt;Next;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AndInst[1].Inst<sp/>=<sp/>Frame-&gt;Exits;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Exits<sp/>=<sp/>AndInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>0);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_LINK(Frame-&gt;Exits,<sp/>Function-&gt;Next);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Child-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_or_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__link__expr__frame__t" kindref="compound">mlc_link_expr_frame_t</ref>,<sp/>ml_or_expr_compile2);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Exits<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Frame-&gt;Child<sp/>=<sp/>Expr-&gt;Child;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>0);</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_and_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__link__expr__frame__t" kindref="compound">mlc_link_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Frame-&gt;Child;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*AndInst<sp/>=<sp/>MLC_EMIT(Child-&gt;EndLine,<sp/>MLI_AND,<sp/>1);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child<sp/>=<sp/>Child-&gt;Next;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AndInst[1].Inst<sp/>=<sp/>Frame-&gt;Exits;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Exits<sp/>=<sp/>AndInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>0);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_LINK(Frame-&gt;Exits,<sp/>Function-&gt;Next);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Child-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_and_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__link__expr__frame__t" kindref="compound">mlc_link_expr_frame_t</ref>,<sp/>ml_and_expr_compile2);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Exits<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Frame-&gt;Child<sp/>=<sp/>Expr-&gt;Child;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>0);</highlight></codeline>
<codeline lineno="485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_debug_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__link__expr__frame__t" kindref="compound">mlc_link_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Exits[1].Inst<sp/>=<sp/>Function-&gt;Next;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Frame-&gt;Expr-&gt;EndLine,<sp/>MLI_NIL_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_debug_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__link__expr__frame__t" kindref="compound">mlc_link_expr_frame_t</ref>,<sp/>ml_debug_expr_compile2);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Exits<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_IF_CONFIG,<sp/>1);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>0);</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505" refid="structmlc__config__expr__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__if__config__expr__t" kindref="compound">mlc_if_config_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*Exits;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags;</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}<sp/><ref refid="structmlc__config__expr__frame__t" kindref="compound">mlc_config_expr_frame_t</ref>;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_if_config_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__config__expr__frame__t" kindref="compound">mlc_config_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Exits[1].Inst<sp/>=<sp/>Function-&gt;Next;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Frame-&gt;Expr-&gt;EndLine,<sp/>MLI_NIL_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_if_config_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__if__config__expr__t" kindref="compound">mlc_if_config_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__config__expr__frame__t" kindref="compound">mlc_config_expr_frame_t</ref>,<sp/>ml_if_config_expr_compile2);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*ConfigInst<sp/>=<sp/>Frame-&gt;Exits<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_IF_CONFIG,<sp/>2);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_config_fn<sp/>Fn<sp/>=<sp/>ml_config_lookup(Expr-&gt;Config);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Fn)<sp/>MLC_EXPR_ERROR(Expr,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CompilerError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>config<sp/>name<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Expr-&gt;Config));</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>ConfigInst[2].Data<sp/>=<sp/>Fn;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>0);</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_not_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_NOT,<sp/>0);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Frame-&gt;Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_not_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref>,<sp/>ml_not_expr_compile2);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>0);</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551" refid="structmlc__switch__expr__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*Exits;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>**Insts;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags;</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}<sp/><ref refid="structmlc__switch__expr__frame__t" kindref="compound">mlc_switch_expr_frame_t</ref>;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_switch_expr_compile3(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__switch__expr__frame__t" kindref="compound">mlc_switch_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Frame-&gt;Child;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*GotoInst<sp/>=<sp/>MLC_EMIT(Child-&gt;EndLine,<sp/>MLI_GOTO,<sp/>1);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child<sp/>=<sp/>Child-&gt;Next;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GotoInst[1].Inst<sp/>=<sp/>Frame-&gt;Exits;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Exits<sp/>=<sp/>GotoInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Frame-&gt;Insts++<sp/>=<sp/>Function-&gt;Next;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_RETURN);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_LINK(Frame-&gt;Exits,<sp/>Function-&gt;Next);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Child-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_switch_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__switch__expr__frame__t" kindref="compound">mlc_switch_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Frame-&gt;Child;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Next<sp/>=<sp/>Child-&gt;Next;<sp/>Next;<sp/>Next<sp/>=<sp/>Next-&gt;Next)<sp/>++Count;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*SwitchInst<sp/>=<sp/>MLC_EMIT(Child-&gt;EndLine,<sp/>MLI_SWITCH,<sp/>2);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>SwitchInst[1].Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Insts<sp/>=<sp/>SwitchInst[2].Insts<sp/>=<sp/>anew(<ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*,<sp/>Count);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child<sp/>=<sp/>Child-&gt;Next;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_switch_expr_compile3;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>*Frame-&gt;Insts++<sp/>=<sp/>Function-&gt;Next;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_RETURN);</highlight></codeline>
<codeline lineno="589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_switch_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__switch__expr__frame__t" kindref="compound">mlc_switch_expr_frame_t</ref>,<sp/>ml_switch_expr_compile2);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Exits<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Frame-&gt;Child<sp/>=<sp/>Expr-&gt;Child;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>0);</highlight></codeline>
<codeline lineno="598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600" refid="structmlc__must__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmlc__must__t" kindref="compound">mlc_must_t</ref><sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__must__t" kindref="compound">mlc_must_t</ref><sp/>*Next;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decls;</highlight></codeline>
<codeline lineno="604"><highlight class="normal">};</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606" refid="structmlc__must__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__must__t" kindref="compound">mlc_must_t</ref><sp/>*Must,<sp/>*End;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decls;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line;</highlight></codeline>
<codeline lineno="610"><highlight class="normal">}<sp/><ref refid="structmlc__must__frame__t" kindref="compound">mlc_must_frame_t</ref>;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_must_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__must__frame__t" kindref="compound">mlc_must_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__must__t" kindref="compound">mlc_must_t</ref><sp/>*Must<sp/>=<sp/>Frame-&gt;Must;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Must<sp/>!=<sp/>Frame-&gt;End)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Must<sp/>=<sp/>Must-&gt;Next;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Line<sp/>=<sp/>Must-&gt;Expr-&gt;EndLine;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Decls<sp/>=<sp/>Must-&gt;Decls;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Must-&gt;Expr,<sp/>0);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_EMIT(Frame-&gt;Line,<sp/>MLI_POP,<sp/>0);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>--Function-&gt;Top;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Decls<sp/>=<sp/>Frame-&gt;Decls;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_must_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__must__t" kindref="compound">mlc_must_t</ref><sp/>*Must,<sp/><ref refid="structmlc__must__t" kindref="compound">mlc_must_t</ref><sp/>*End)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__must__frame__t" kindref="compound">mlc_must_frame_t</ref>,<sp/>ml_must_compile2);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Decls<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Must<sp/>=<sp/>Must-&gt;Next;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;End<sp/>=<sp/>End;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Line<sp/>=<sp/>Must-&gt;Expr-&gt;EndLine;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_EMIT(Must-&gt;Expr-&gt;StartLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Decls<sp/>=<sp/>Must-&gt;Decls;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Must-&gt;Expr,<sp/>0);</highlight></codeline>
<codeline lineno="637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639" refid="structmlc__loop__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmlc__loop__t" kindref="compound">mlc_loop_t</ref><sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__loop__t" kindref="compound">mlc_loop_t</ref><sp/>*Up;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__try__t" kindref="compound">mlc_try_t</ref><sp/>*Try;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__must__t" kindref="compound">mlc_must_t</ref><sp/>*Must;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decls;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*Nexts,<sp/>*Exits;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NextTop,<sp/>ExitTop;</highlight></codeline>
<codeline lineno="647"><highlight class="normal">};</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649" refid="structmlc__loop__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*Next;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__loop__t" kindref="compound">mlc_loop_t</ref><sp/>Loop[1];</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags;</highlight></codeline>
<codeline lineno="654"><highlight class="normal">}<sp/><ref refid="structmlc__loop__frame__t" kindref="compound">mlc_loop_frame_t</ref>;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_loop_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__loop__frame__t" kindref="compound">mlc_loop_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_LINK(Frame-&gt;Loop-&gt;Nexts,<sp/>Frame-&gt;Next);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>!=<sp/>MLExprGoto)<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*GotoInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_GOTO,<sp/>1);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GotoInst[1].Inst<sp/>=<sp/>Frame-&gt;Next;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_LINK(Frame-&gt;Loop-&gt;Exits,<sp/>Function-&gt;Next);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Loop<sp/>=<sp/>Frame-&gt;Loop-&gt;Up;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_loop_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__loop__frame__t" kindref="compound">mlc_loop_frame_t</ref>,<sp/>ml_loop_expr_compile2);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Loop-&gt;Up<sp/>=<sp/>Function-&gt;Loop;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Loop-&gt;Name<sp/>=<sp/>Expr-&gt;Name;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Loop-&gt;Try<sp/>=<sp/>Function-&gt;Try;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Loop-&gt;Must<sp/>=<sp/>Function-&gt;Must;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Loop-&gt;Decls<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Loop-&gt;Exits<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Loop-&gt;Nexts<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Loop-&gt;ExitTop<sp/>=<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Loop-&gt;NextTop<sp/>=<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Loop<sp/>=<sp/>Frame-&gt;Loop;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Next<sp/>=<sp/>Function-&gt;Next;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>0);</highlight></codeline>
<codeline lineno="689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_next_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>**Frame)<sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame[0];</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__loop__t" kindref="compound">mlc_loop_t</ref><sp/>*Loop<sp/>=<sp/>Function-&gt;Loop;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expr-&gt;Name)<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Loop)<sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Loop-&gt;Name<sp/>&amp;&amp;<sp/>!strcmp(Loop-&gt;Name,<sp/>Expr-&gt;Name))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Loop<sp/>=<sp/>Loop-&gt;Up;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Loop)<sp/>MLC_EXPR_ERROR(Expr,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CompilerError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Exit<sp/>not<sp/>in<sp/>loop<sp/>named<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Expr-&gt;Name));</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function-&gt;Top<sp/>&gt;<sp/>Loop-&gt;NextTop)<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*ExitInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_EXIT,<sp/>2);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExitInst[1].Count<sp/>=<sp/>Function-&gt;Top<sp/>-<sp/>Loop-&gt;NextTop;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExitInst[2].Decls<sp/>=<sp/>Loop-&gt;Decls;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*GotoInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_GOTO,<sp/>1);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>GotoInst[1].Inst<sp/>=<sp/>Loop-&gt;Nexts;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>Loop-&gt;Nexts<sp/>=<sp/>GotoInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(MLExprGoto);</highlight></codeline>
<codeline lineno="711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_next_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__loop__t" kindref="compound">mlc_loop_t</ref><sp/>*Loop<sp/>=<sp/>Function-&gt;Loop;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Loop)<sp/>MLC_EXPR_ERROR(Expr,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CompilerError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Next<sp/>not<sp/>in<sp/>loop&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expr-&gt;Name)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Loop)<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Loop-&gt;Name<sp/>&amp;&amp;<sp/>!strcmp(Loop-&gt;Name,<sp/>Expr-&gt;Name))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Loop<sp/>=<sp/>Loop-&gt;Up;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Loop)<sp/>MLC_EXPR_ERROR(Expr,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CompilerError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Exit<sp/>not<sp/>in<sp/>loop<sp/>named<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Expr-&gt;Name));</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function-&gt;Try<sp/>!=<sp/>Loop-&gt;Try)<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*TryInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_TRY,<sp/>1);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Loop-&gt;Try)<sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TryInst[1].Inst<sp/>=<sp/>Loop-&gt;Try-&gt;Retries;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Loop-&gt;Try-&gt;Retries<sp/>=<sp/>TryInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TryInst[1].Inst<sp/>=<sp/>Function-&gt;Returns;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Returns<sp/>=<sp/>TryInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function-&gt;Must<sp/>!=<sp/>Loop-&gt;Must)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*,<sp/>ml_next_expr_compile2);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame[0]<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_must_compile(Function,<sp/>Function-&gt;Must,<sp/>Loop-&gt;Must);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function-&gt;Top<sp/>&gt;<sp/>Loop-&gt;NextTop)<sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*ExitInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_EXIT,<sp/>2);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExitInst[1].Count<sp/>=<sp/>Function-&gt;Top<sp/>-<sp/>Loop-&gt;NextTop;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExitInst[2].Decls<sp/>=<sp/>Loop-&gt;Decls;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*GotoInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_GOTO,<sp/>1);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>GotoInst[1].Inst<sp/>=<sp/>Loop-&gt;Nexts;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>Loop-&gt;Nexts<sp/>=<sp/>GotoInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(MLExprGoto);</highlight></codeline>
<codeline lineno="747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749" refid="structmlc__exit__expr__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__loop__t" kindref="compound">mlc_loop_t</ref><sp/>*OldLoop,<sp/>*Target;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__try__t" kindref="compound">mlc_try_t</ref><sp/>*OldTry;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags;</highlight></codeline>
<codeline lineno="754"><highlight class="normal">}<sp/><ref refid="structmlc__exit__expr__frame__t" kindref="compound">mlc_exit_expr_frame_t</ref>;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_exit_expr_compile3(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__exit__expr__frame__t" kindref="compound">mlc_exit_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__loop__t" kindref="compound">mlc_loop_t</ref><sp/>*Target<sp/>=<sp/>Frame-&gt;Target;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Loop<sp/>=<sp/>Frame-&gt;OldLoop;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Try<sp/>=<sp/>Frame-&gt;OldTry;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function-&gt;Top<sp/>&gt;<sp/>Target-&gt;ExitTop)<sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*ExitInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_EXIT,<sp/>2);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExitInst[1].Count<sp/>=<sp/>Function-&gt;Top<sp/>-<sp/>Target-&gt;ExitTop;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExitInst[2].Decls<sp/>=<sp/>Target-&gt;Decls;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*GotoInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_GOTO,<sp/>1);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>GotoInst[1].Inst<sp/>=<sp/>Target-&gt;Exits;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>Target-&gt;Exits<sp/>=<sp/>GotoInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(MLExprGoto);</highlight></codeline>
<codeline lineno="775"><highlight class="normal">}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_exit_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__exit__expr__frame__t" kindref="compound">mlc_exit_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__loop__t" kindref="compound">mlc_loop_t</ref><sp/>*Target<sp/>=<sp/>Frame-&gt;Target;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLExprGoto)<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Loop<sp/>=<sp/>Frame-&gt;OldLoop;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Try<sp/>=<sp/>Frame-&gt;OldTry;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_RETURN(Value);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function-&gt;Must<sp/>!=<sp/>Target-&gt;Must)<sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_exit_expr_compile3;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_must_compile(Function,<sp/>Function-&gt;Must,<sp/>Target-&gt;Must);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_exit_expr_compile3(Function,<sp/>Value,<sp/>Frame);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_exit_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__exit__expr__frame__t" kindref="compound">mlc_exit_expr_frame_t</ref>,<sp/>ml_exit_expr_compile2);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__loop__t" kindref="compound">mlc_loop_t</ref><sp/>*Loop<sp/>=<sp/>Function-&gt;Loop;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Loop)<sp/>MLC_EXPR_ERROR(Expr,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CompilerError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Exit<sp/>not<sp/>in<sp/>loop&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expr-&gt;Name)<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Loop)<sp/>{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Loop-&gt;Name<sp/>&amp;&amp;<sp/>!strcmp(Loop-&gt;Name,<sp/>Expr-&gt;Name))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Loop<sp/>=<sp/>Loop-&gt;Up;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Loop)<sp/>MLC_EXPR_ERROR(Expr,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CompilerError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Exit<sp/>not<sp/>in<sp/>loop<sp/>named<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Expr-&gt;Name));</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function-&gt;Try<sp/>!=<sp/>Loop-&gt;Try)<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*TryInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_TRY,<sp/>1);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Loop-&gt;Try)<sp/>{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TryInst[1].Inst<sp/>=<sp/>Loop-&gt;Try-&gt;Retries;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Loop-&gt;Try-&gt;Retries<sp/>=<sp/>TryInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TryInst[1].Inst<sp/>=<sp/>Function-&gt;Returns;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Returns<sp/>=<sp/>TryInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Target<sp/>=<sp/>Loop;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;OldLoop<sp/>=<sp/>Function-&gt;Loop;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;OldTry<sp/>=<sp/>Function-&gt;Try;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Loop<sp/>=<sp/>Loop-&gt;Up;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Try<sp/>=<sp/>Loop-&gt;Try;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expr-&gt;Child)<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>0);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_NIL,<sp/>0);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_exit_expr_compile2(Function,<sp/>NULL,<sp/>Frame);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_return_expr_compile3(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_RETURN,<sp/>0);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(MLExprGoto);</highlight></codeline>
<codeline lineno="834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_return_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function-&gt;Must)<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_return_expr_compile3;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_must_compile(Function,<sp/>Function-&gt;Must,<sp/>NULL);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>!=<sp/>MLExprGoto)<sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_RETURN,<sp/>0);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(MLExprGoto);</highlight></codeline>
<codeline lineno="847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_return_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expr-&gt;Child)<sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref>,<sp/>ml_return_expr_compile2);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>Function-&gt;Try<sp/>?<sp/>0<sp/>:<sp/>MLCF_RETURN);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_NIL,<sp/>0);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_RETURN,<sp/>0);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_RETURN(MLExprGoto);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_suspend_expr_compile3(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_SUSPEND,<sp/>0);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_RESUME,<sp/>0);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Top<sp/>-=<sp/>2;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_suspend_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_suspend_expr_compile3;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>mlc_compile(Function,<sp/>Frame-&gt;Child,<sp/>MLCF_PUSH);</highlight></codeline>
<codeline lineno="878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_suspend_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref>,<sp/>ml_suspend_expr_compile2);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Expr-&gt;Child;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child-&gt;Next;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>MLCF_PUSH);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_NIL_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_suspend_expr_compile2(Function,<sp/>NULL,<sp/>Frame);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896" refid="structmlc__with__expr__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decls;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags,<sp/>Top;</highlight></codeline>
<codeline lineno="902"><highlight class="normal">}<sp/><ref refid="structmlc__with__expr__frame__t" kindref="compound">mlc_with_expr_frame_t</ref>;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_with_expr_compile3(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__with__expr__frame__t" kindref="compound">mlc_with_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*ExitInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_EXIT,<sp/>2);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>ExitInst[1].Count<sp/>=<sp/>Function-&gt;Top<sp/>-<sp/>Frame-&gt;Top;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>ExitInst[2].Decls<sp/>=<sp/>Frame-&gt;Decls;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Decls<sp/>=<sp/>Frame-&gt;Decls;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Top<sp/>=<sp/>Frame-&gt;Top;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_with_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__with__expr__frame__t" kindref="compound">mlc_with_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Frame-&gt;Child;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Frame-&gt;Local;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>Local-&gt;Index;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count)<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref>);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Source.Name<sp/>=<sp/>Function-&gt;Source;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Source.Line<sp/>=<sp/>Local-&gt;Line;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Ident<sp/>=<sp/>Local-&gt;Ident;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Hash<sp/>=<sp/>ml_ident_hash(Local-&gt;Ident);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Index<sp/>=<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Next<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Decls<sp/>=<sp/>Decl;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Local<sp/>=<sp/>Local-&gt;Next;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--I<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*PushInst<sp/>=<sp/>MLC_EMIT(Child-&gt;EndLine,<sp/>MLI_WITHX,<sp/>2);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PushInst[1].Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PushInst[2].Decls<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref>);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Source.Name<sp/>=<sp/>Function-&gt;Source;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Source.Line<sp/>=<sp/>Local-&gt;Line;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Ident<sp/>=<sp/>Local-&gt;Ident;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Hash<sp/>=<sp/>ml_ident_hash(Local-&gt;Ident);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Index<sp/>=<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Next<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Decls<sp/>=<sp/>Decl;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Local<sp/>=<sp/>Local-&gt;Next;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*PushInst<sp/>=<sp/>MLC_EMIT(Child-&gt;EndLine,<sp/>MLI_WITH,<sp/>1);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PushInst[1].Decls<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>Child<sp/>=<sp/>Frame-&gt;Child<sp/>=<sp/>Child-&gt;Next;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Local)<sp/>{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Local<sp/>=<sp/>Local;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>0);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_with_expr_compile3;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>0);</highlight></codeline>
<codeline lineno="961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_with_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__with__expr__frame__t" kindref="compound">mlc_with_expr_frame_t</ref>,<sp/>ml_with_expr_compile2);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Top<sp/>=<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Decls<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Frame-&gt;Child<sp/>=<sp/>Expr-&gt;Child;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Local<sp/>=<sp/>Expr-&gt;Local;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>0);</highlight></codeline>
<codeline lineno="972"><highlight class="normal">}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974" refid="structmlc__for__expr__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__for__expr__t" kindref="compound">mlc_for_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*IterInst;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__loop__t" kindref="compound">mlc_loop_t</ref><sp/>Loop[1];</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags;</highlight></codeline>
<codeline lineno="979"><highlight class="normal">}<sp/><ref refid="structmlc__for__expr__frame__t" kindref="compound">mlc_for_expr_frame_t</ref>;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_for_expr_compile4(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__for__expr__frame__t" kindref="compound">mlc_for_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__for__expr__t" kindref="compound">mlc_for_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_LINK(Frame-&gt;Loop-&gt;Exits,<sp/>Function-&gt;Next);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_for_expr_compile3(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__for__expr__frame__t" kindref="compound">mlc_for_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__for__expr__t" kindref="compound">mlc_for_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*ExitInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_EXIT,<sp/>2);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expr-&gt;Unpack)<sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExitInst[1].Count<sp/>=<sp/>Expr-&gt;Unpack<sp/>+<sp/>!!Expr-&gt;Key;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExitInst[1].Count<sp/>=<sp/>1<sp/>+<sp/>!!Expr-&gt;Key;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>ExitInst[2].Decls<sp/>=<sp/>Frame-&gt;Loop-&gt;Decls;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*NextInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_NEXT,<sp/>1);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>NextInst[1].Inst<sp/>=<sp/>Frame-&gt;IterInst;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_LINK(Frame-&gt;Loop-&gt;Nexts,<sp/>NextInst);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;IterInst[1].Inst<sp/>=<sp/>Function-&gt;Next;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Loop<sp/>=<sp/>Frame-&gt;Loop-&gt;Up;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Top<sp/>=<sp/>Frame-&gt;Loop-&gt;ExitTop;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Decls<sp/>=<sp/>Frame-&gt;Loop-&gt;Decls;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expr-&gt;Body-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_for_expr_compile4;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Body-&gt;Next,<sp/>0);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_LINK(Frame-&gt;Loop-&gt;Exits,<sp/>Function-&gt;Next);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_for_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__for__expr__frame__t" kindref="compound">mlc_for_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__for__expr__t" kindref="compound">mlc_for_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Sequence<sp/>=<sp/>Expr-&gt;Sequence;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_EMIT(Sequence-&gt;EndLine,<sp/>MLI_FOR,<sp/>0);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;IterInst<sp/>=<sp/>MLC_EMIT(Sequence-&gt;EndLine,<sp/>MLI_ITER,<sp/>1);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expr-&gt;Key)<sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref>);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Source.Name<sp/>=<sp/>Function-&gt;Source;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Source.Line<sp/>=<sp/>Expr-&gt;StartLine;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Ident<sp/>=<sp/>Expr-&gt;Key;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Hash<sp/>=<sp/>ml_ident_hash(Decl-&gt;Ident);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Index<sp/>=<sp/>Function-&gt;Top++;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Next<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Decls<sp/>=<sp/>Decl;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Sequence-&gt;EndLine,<sp/>MLI_KEY,<sp/>0);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*WithInst<sp/>=<sp/>MLC_EMIT(Sequence-&gt;EndLine,<sp/>MLI_WITH,<sp/>1);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WithInst[1].Decls<sp/>=<sp/>Decl;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Expr-&gt;Local;<sp/>Local;<sp/>Local<sp/>=<sp/>Local-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref>);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Source.Name<sp/>=<sp/>Function-&gt;Source;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Source.Line<sp/>=<sp/>Local-&gt;Line;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Ident<sp/>=<sp/>Local-&gt;Ident;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Hash<sp/>=<sp/>ml_ident_hash(Local-&gt;Ident);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Index<sp/>=<sp/>Function-&gt;Top++;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Next<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Decls<sp/>=<sp/>Decl;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_EMIT(Sequence-&gt;EndLine,<sp/>Expr-&gt;Key<sp/>?<sp/>MLI_VALUE_2<sp/>:<sp/>MLI_VALUE_1,<sp/>0);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expr-&gt;Unpack)<sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*WithInst<sp/>=<sp/>MLC_EMIT(Sequence-&gt;EndLine,<sp/>MLI_WITHX,<sp/>2);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WithInst[1].Count<sp/>=<sp/>Expr-&gt;Unpack;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WithInst[2].Decls<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*WithInst<sp/>=<sp/>MLC_EMIT(Sequence-&gt;EndLine,<sp/>MLI_WITH,<sp/>1);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WithInst[1].Decls<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Loop-&gt;Up<sp/>=<sp/>Function-&gt;Loop;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Loop-&gt;Name<sp/>=<sp/>Expr-&gt;Name;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Loop-&gt;Try<sp/>=<sp/>Function-&gt;Try;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Loop-&gt;Must<sp/>=<sp/>Function-&gt;Must;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Loop-&gt;Exits<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Loop-&gt;Nexts<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function-&gt;Top<sp/>&gt;=<sp/>Function-&gt;Size)<sp/>Function-&gt;Size<sp/>=<sp/>Function-&gt;Top<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Loop<sp/>=<sp/>Frame-&gt;Loop;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_for_expr_compile3;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Body,<sp/>0);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_for_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__for__expr__t" kindref="compound">mlc_for_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__for__expr__frame__t" kindref="compound">mlc_for_expr_frame_t</ref>,<sp/>ml_for_expr_compile2);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Loop-&gt;ExitTop<sp/>=<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Loop-&gt;NextTop<sp/>=<sp/>Function-&gt;Top<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Loop-&gt;Decls<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Sequence,<sp/>0);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_each_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Expr-&gt;Child;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_EMIT(Child-&gt;EndLine,<sp/>MLI_FOR,<sp/>0);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*AndInst<sp/>=<sp/>MLC_EMIT(Child-&gt;EndLine,<sp/>MLI_ITER,<sp/>1);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_EMIT(Child-&gt;EndLine,<sp/>MLI_VALUE_1,<sp/>0);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*NextInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_NEXT,<sp/>1);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>NextInst[1].Inst<sp/>=<sp/>AndInst;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>AndInst[1].Inst<sp/>=<sp/>Function-&gt;Next;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>--Function-&gt;Top;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_each_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref>,<sp/>ml_each_expr_compile2);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>0);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107" refid="structmlc__block__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmlc__block__t" kindref="compound">mlc_block_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__block__t" kindref="compound">mlc_block_t</ref><sp/>*Up;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*OldDecls;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__block__expr__t" kindref="compound">mlc_block_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*Exits;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinthash__t" kindref="compound">inthash_t</ref><sp/>DeclHashes;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__try__t" kindref="compound">mlc_try_t</ref><sp/>Try;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__must__t" kindref="compound">mlc_must_t</ref><sp/>Must,<sp/>*OldMust;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags,<sp/>Size,<sp/>Top;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decls[];</highlight></codeline>
<codeline lineno="1118"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120" refid="structmlc__local__expr__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal">}<sp/><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref>;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_var_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Expr-&gt;Local;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/>Function-&gt;Block-&gt;Decls[Local-&gt;Index];</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value)<sp/>{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*VarInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_LOAD_VAR,<sp/>2);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarInst[1].Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarInst[2].Count<sp/>=<sp/>Function-&gt;Block-&gt;Top<sp/>+<sp/>Local-&gt;Index<sp/>-<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*VarInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_VAR,<sp/>1);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarInst[1].Count<sp/>=<sp/>Function-&gt;Block-&gt;Top<sp/>+<sp/>Local-&gt;Index<sp/>-<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>Decl-&gt;Flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_var_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref>,<sp/>ml_var_expr_compile2);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>MLCF_CONSTANT);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_var_type_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Expr-&gt;Local;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*TypeInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_VAR_TYPE,<sp/>1);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>TypeInst[1].Count<sp/>=<sp/>Function-&gt;Block-&gt;Top<sp/>+<sp/>Local-&gt;Index<sp/>-<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_var_type_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref>,<sp/>ml_var_type_expr_compile2);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>0);</highlight></codeline>
<codeline lineno="1171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_var_in_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Expr-&gt;Local;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>**Decls<sp/>=<sp/>Function-&gt;Block-&gt;Decls<sp/>+<sp/>Local-&gt;Index;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Expr-&gt;Count;<sp/>++I,<sp/>Local<sp/>=<sp/>Local-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*PushInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_LOCAL_PUSH,<sp/>1);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PushInst[1].Count<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*ValueInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_LOAD_PUSH,<sp/>1);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueInst[1].Value<sp/>=<sp/>ml_string(Local-&gt;Ident,<sp/>-1);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*CallInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_CALL_CONST,<sp/>2);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallInst[1].Value<sp/>=<sp/>SymbolMethod;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallInst[2].Count<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Top<sp/>-=<sp/>2;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/>Decls[I];</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*VarInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_VAR,<sp/>1);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarInst[1].Count<sp/>=<sp/>Function-&gt;Block-&gt;Top<sp/>+<sp/>Local-&gt;Index<sp/>-<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH))<sp/>{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_POP,<sp/>0);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Function-&gt;Top;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_var_in_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref>,<sp/>ml_var_in_expr_compile2);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>MLCF_PUSH);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_var_unpack_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Expr-&gt;Local;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*VarInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_VARX,<sp/>2);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/>VarInst[1].Count<sp/>=<sp/>Function-&gt;Block-&gt;Top<sp/>+<sp/>Local-&gt;Index<sp/>-<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>VarInst[2].Count<sp/>=<sp/>Expr-&gt;Count;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_var_unpack_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref>,<sp/>ml_var_unpack_expr_compile2);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>0);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_let_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Expr-&gt;Local;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/>Function-&gt;Block-&gt;Decls[Local-&gt;Index];</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*LetInst;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Decl-&gt;Flags<sp/>&amp;<sp/>MLC_DECL_BACKFILL)<sp/>{</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LetInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_LETI,<sp/>1);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LetInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_LET,<sp/>1);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>LetInst[1].Count<sp/>=<sp/>Function-&gt;Block-&gt;Top<sp/>+<sp/>Local-&gt;Index<sp/>-<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>Decl-&gt;Flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_let_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref>,<sp/>ml_let_expr_compile2);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>0);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_let_in_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Expr-&gt;Local;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>**Decls<sp/>=<sp/>Function-&gt;Block-&gt;Decls<sp/>+<sp/>Local-&gt;Index;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Expr-&gt;Count;<sp/>++I,<sp/>Local<sp/>=<sp/>Local-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*PushInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_LOCAL_PUSH,<sp/>1);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PushInst[1].Count<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*ValueInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_LOAD_PUSH,<sp/>1);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueInst[1].Value<sp/>=<sp/>ml_string(Local-&gt;Ident,<sp/>-1);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*CallInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_CALL_CONST,<sp/>2);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallInst[1].Value<sp/>=<sp/>SymbolMethod;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallInst[2].Count<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Top<sp/>-=<sp/>2;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/>Decls[I];</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*LetInst;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Decl-&gt;Flags<sp/>&amp;<sp/>MLC_DECL_BACKFILL)<sp/>{</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LetInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_LETI,<sp/>1);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LetInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_LET,<sp/>1);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LetInst[1].Count<sp/>=<sp/>Function-&gt;Block-&gt;Top<sp/>+<sp/>Local-&gt;Index<sp/>-<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH))<sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_POP,<sp/>0);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Function-&gt;Top;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="1287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_let_in_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref>,<sp/>ml_let_in_expr_compile2);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>MLCF_PUSH);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_let_unpack_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Expr-&gt;Local;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>**Decls<sp/>=<sp/>Function-&gt;Block-&gt;Decls<sp/>+<sp/>Local-&gt;Index;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*LetInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_LETX,<sp/>2);</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/>LetInst[1].Count<sp/>=<sp/>Function-&gt;Block-&gt;Top<sp/>+<sp/>Local-&gt;Index<sp/>-<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>LetInst[2].Count<sp/>=<sp/>Expr-&gt;Count;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Expr-&gt;Count;<sp/>++I)<sp/>Decls[I]-&gt;Flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_let_unpack_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref>,<sp/>ml_let_unpack_expr_compile2);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>0);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_ref_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Expr-&gt;Local;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/>Function-&gt;Block-&gt;Decls[Local-&gt;Index];</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*LetInst;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Decl-&gt;Flags<sp/>&amp;<sp/>MLC_DECL_BACKFILL)<sp/>{</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LetInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_REFI,<sp/>1);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LetInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_REF,<sp/>1);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>LetInst[1].Count<sp/>=<sp/>Function-&gt;Block-&gt;Top<sp/>+<sp/>Local-&gt;Index<sp/>-<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>Decl-&gt;Flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_ref_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref>,<sp/>ml_ref_expr_compile2);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>0);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_ref_in_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Expr-&gt;Local;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>**Decls<sp/>=<sp/>Function-&gt;Block-&gt;Decls<sp/>+<sp/>Local-&gt;Index;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Expr-&gt;Count;<sp/>++I,<sp/>Local<sp/>=<sp/>Local-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*PushInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_LOCAL_PUSH,<sp/>1);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PushInst[1].Count<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*ValueInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_LOAD_PUSH,<sp/>1);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueInst[1].Value<sp/>=<sp/>ml_string(Local-&gt;Ident,<sp/>-1);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*CallInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_CALL_CONST,<sp/>2);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallInst[1].Value<sp/>=<sp/>SymbolMethod;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallInst[2].Count<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Top<sp/>-=<sp/>2;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/>Decls[I];</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*LetInst;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Decl-&gt;Flags<sp/>&amp;<sp/>MLC_DECL_BACKFILL)<sp/>{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LetInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_REFI,<sp/>1);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LetInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_REF,<sp/>1);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LetInst[1].Count<sp/>=<sp/>Function-&gt;Block-&gt;Top<sp/>+<sp/>Local-&gt;Index<sp/>-<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH))<sp/>{</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_POP,<sp/>0);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Function-&gt;Top;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_ref_in_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref>,<sp/>ml_ref_in_expr_compile2);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>MLCF_PUSH);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_ref_unpack_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Expr-&gt;Local;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>**Decls<sp/>=<sp/>Function-&gt;Block-&gt;Decls<sp/>+<sp/>Local-&gt;Index;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*LetInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_REFX,<sp/>2);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/>LetInst[1].Count<sp/>=<sp/>Function-&gt;Block-&gt;Top<sp/>+<sp/>Local-&gt;Index<sp/>-<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>LetInst[2].Count<sp/>=<sp/>Expr-&gt;Count;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Expr-&gt;Count;<sp/>++I)<sp/>Decls[I]-&gt;Flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="1400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_ref_unpack_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref>,<sp/>ml_ref_unpack_expr_compile2);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>0);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_def_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Function-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Expr-&gt;Local;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/>Function-&gt;Block-&gt;Decls[Local-&gt;Index];</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Decl-&gt;Value)<sp/>ml_uninitialized_set(Decl-&gt;Value,<sp/>Value);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/>Decl-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_value_set_name(Value,<sp/>Local-&gt;Ident);</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_NIL_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_def_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref>,<sp/>ml_def_expr_compile2);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_expr_call(Function,<sp/>Expr-&gt;Child);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435" refid="structmlc__def__in__expr__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[2];</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>**Decls;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags,<sp/>Index;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal">}<sp/><ref refid="structmlc__def__in__expr__frame__t" kindref="compound">mlc_def_in_expr_frame_t</ref>;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_def_in_expr_compile3(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__def__in__expr__frame__t" kindref="compound">mlc_def_in_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Function-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>Frame-&gt;Index;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Frame-&gt;Local;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/>Frame-&gt;Decls[Index];</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Decl-&gt;Value)<sp/>ml_uninitialized_set(Decl-&gt;Value,<sp/>Value);</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/>Decl-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++Index<sp/>&lt;<sp/>Expr-&gt;Count)<sp/>{</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Index<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Local<sp/>=<sp/>Frame-&gt;Local<sp/>=<sp/>Local-&gt;Next;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Args[1]<sp/>=<sp/>ml_string(Local-&gt;Ident,<sp/>-1);</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Function,<sp/>SymbolMethod,<sp/>2,<sp/>Frame-&gt;Args);</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_NIL_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_def_in_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__def__in__expr__frame__t" kindref="compound">mlc_def_in_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Function-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Frame-&gt;Local<sp/>=<sp/>Expr-&gt;Local;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Decls<sp/>=<sp/>Function-&gt;Block-&gt;Decls<sp/>+<sp/>Local-&gt;Index;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Args[1]<sp/>=<sp/>ml_string(Local-&gt;Ident,<sp/>-1);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_def_in_expr_compile3;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Function,<sp/>SymbolMethod,<sp/>2,<sp/>Frame-&gt;Args);</highlight></codeline>
<codeline lineno="1481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_def_in_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__def__in__expr__frame__t" kindref="compound">mlc_def_in_expr_frame_t</ref>,<sp/>ml_def_in_expr_compile2);</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_expr_call(Function,<sp/>Expr-&gt;Child);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_def_unpack_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Packed,<sp/><ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Packed))<sp/>{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Function-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Packed);</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Expr-&gt;Local;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>**Decls<sp/>=<sp/>Function-&gt;Block-&gt;Decls<sp/>+<sp/>Local-&gt;Index;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Expr-&gt;Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>ml_unpack(Packed,<sp/>I<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/>Decls[I];</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Decl-&gt;Value)<sp/>ml_uninitialized_set(Decl-&gt;Value,<sp/>Value);</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_NIL_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_def_unpack_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__local__expr__frame__t" kindref="compound">mlc_local_expr_frame_t</ref>,<sp/>ml_def_unpack_expr_compile2);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_expr_call(Function,<sp/>Expr-&gt;Child);</highlight></codeline>
<codeline lineno="1517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_block_expr_compile5(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__block__t" kindref="compound">mlc_block_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__block__expr__t" kindref="compound">mlc_block_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_RETRY,<sp/>0);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_LINK(Frame-&gt;Exits,<sp/>Function-&gt;Next);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_block_expr_compile4(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__block__t" kindref="compound">mlc_block_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__block__expr__t" kindref="compound">mlc_block_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Must<sp/>=<sp/>Frame-&gt;OldMust;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Exits<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Try<sp/>=<sp/>Function-&gt;Try-&gt;Up;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*TryInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_TRY,<sp/>1);</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function-&gt;Try)<sp/>{</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TryInst[1].Inst<sp/>=<sp/>Function-&gt;Try-&gt;Retries;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Try-&gt;Retries<sp/>=<sp/>TryInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TryInst[1].Inst<sp/>=<sp/>Function-&gt;Returns;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Returns<sp/>=<sp/>TryInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*GotoInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_GOTO,<sp/>1);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/>GotoInst[1].Inst<sp/>=<sp/>Frame-&gt;Exits;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Exits<sp/>=<sp/>GotoInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_LINK(Frame-&gt;Try.Retries,<sp/>Function-&gt;Next);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*PopInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;Must-&gt;StartLine,<sp/>MLI_CATCHX,<sp/>3);</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function-&gt;Try)<sp/>{</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PopInst[1].Inst<sp/>=<sp/>Function-&gt;Try-&gt;Retries;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Try-&gt;Retries<sp/>=<sp/>PopInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PopInst[1].Inst<sp/>=<sp/>Function-&gt;Returns;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Returns<sp/>=<sp/>PopInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>PopInst[2].Count<sp/>=<sp/>Frame-&gt;Top;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/>PopInst[3].Decls<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_block_expr_compile5;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_must_compile(Function,<sp/>&amp;Frame-&gt;Must,<sp/>Frame-&gt;OldMust);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_block_expr_compile3(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__block__t" kindref="compound">mlc_block_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__block__expr__t" kindref="compound">mlc_block_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*ExitInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;CatchBody-&gt;EndLine,<sp/>MLI_EXIT,<sp/>2);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/>ExitInst[1].Count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/>ExitInst[2].Decls<sp/>=<sp/>Frame-&gt;OldDecls;</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Decls<sp/>=<sp/>Frame-&gt;OldDecls;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Top<sp/>=<sp/>Frame-&gt;Top;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*GotoInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;CatchBody-&gt;EndLine,<sp/>MLI_GOTO,<sp/>1);</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/>GotoInst[1].Inst<sp/>=<sp/>Frame-&gt;Exits;</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Exits<sp/>=<sp/>GotoInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_LINK(Frame-&gt;Exits,<sp/>Function-&gt;Next);</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="1579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_block_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__block__t" kindref="compound">mlc_block_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Frame-&gt;Child;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child)<sp/>{</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child-&gt;Next;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_RETURN)<sp/>&amp;&amp;<sp/>!Child-&gt;Next<sp/>&amp;&amp;<sp/>!Function-&gt;Try)<sp/>{</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>MLCF_RETURN);</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>0);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__block__expr__t" kindref="compound">mlc_block_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expr-&gt;NumVars<sp/>+<sp/>Expr-&gt;NumLets)<sp/>{</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*ExitInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_EXIT,<sp/>2);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExitInst[1].Count<sp/>=<sp/>Expr-&gt;NumVars<sp/>+<sp/>Expr-&gt;NumLets;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExitInst[2].Decls<sp/>=<sp/>Frame-&gt;OldDecls;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Decls<sp/>=<sp/>Frame-&gt;OldDecls;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Block<sp/>=<sp/>Frame-&gt;Up;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Top<sp/>=<sp/>Frame-&gt;Top;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expr-&gt;CatchBody)<sp/>{</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Exits<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Try<sp/>=<sp/>Function-&gt;Try-&gt;Up;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*TryInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_TRY,<sp/>1);</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function-&gt;Try)<sp/>{</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TryInst[1].Inst<sp/>=<sp/>Function-&gt;Try-&gt;Retries;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Try-&gt;Retries<sp/>=<sp/>TryInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TryInst[1].Inst<sp/>=<sp/>Function-&gt;Returns;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Returns<sp/>=<sp/>TryInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*GotoInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_GOTO,<sp/>1);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GotoInst[1].Inst<sp/>=<sp/>Frame-&gt;Exits;</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Exits<sp/>=<sp/>GotoInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_LINK(Frame-&gt;Try.Retries,<sp/>Function-&gt;Next);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref>);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Source.Name<sp/>=<sp/>Function-&gt;Source;</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Source.Line<sp/>=<sp/>Expr-&gt;CatchBody-&gt;StartLine;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Ident<sp/>=<sp/>Expr-&gt;CatchIdent;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Hash<sp/>=<sp/>ml_ident_hash(Expr-&gt;CatchIdent);</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Index<sp/>=<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Next<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Decls<sp/>=<sp/>Decl;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*CatchInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;CatchBody-&gt;StartLine,<sp/>MLI_CATCH,<sp/>3);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function-&gt;Try)<sp/>{</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CatchInst[1].Inst<sp/>=<sp/>Function-&gt;Try-&gt;Retries;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Try-&gt;Retries<sp/>=<sp/>CatchInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CatchInst[1].Inst<sp/>=<sp/>Function-&gt;Returns;</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Returns<sp/>=<sp/>CatchInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CatchInst[2].Count<sp/>=<sp/>Frame-&gt;Top;</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CatchInst[3].Decls<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_block_expr_compile3;</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;CatchBody,<sp/>0);</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expr-&gt;Must)<sp/>{</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_block_expr_compile4;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_must_compile(Function,<sp/>&amp;Frame-&gt;Must,<sp/>Frame-&gt;OldMust);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(Value);</highlight></codeline>
<codeline lineno="1646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_block_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__block__expr__t" kindref="compound">mlc_block_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumDecls<sp/>=<sp/>Expr-&gt;NumVars<sp/>+<sp/>Expr-&gt;NumLets<sp/>+<sp/>Expr-&gt;NumDefs;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_XFRAME(<ref refid="structmlc__block__t" kindref="compound">mlc_block_t</ref>,<sp/>NumDecls,<sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*,<sp/>ml_block_expr_compile2);</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Top<sp/>=<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;OldDecls<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expr-&gt;CatchBody)<sp/>{</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*TryInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_TRY,<sp/>1);</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TryInst[1].Inst<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Try.Up<sp/>=<sp/>Function-&gt;Try;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Try.Retries<sp/>=<sp/>TryInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Try.Top<sp/>=<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Try<sp/>=<sp/>&amp;Frame-&gt;Try;</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expr-&gt;Must)<sp/>{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*TryInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_TRY,<sp/>1);</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TryInst[1].Inst<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Try.Up<sp/>=<sp/>Function-&gt;Try;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Try.Retries<sp/>=<sp/>TryInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Try.Top<sp/>=<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Try<sp/>=<sp/>&amp;Frame-&gt;Try;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;OldMust<sp/>=<sp/>Function-&gt;Must;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Must.Next<sp/>=<sp/>Function-&gt;Must;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Must.Expr<sp/>=<sp/>Expr-&gt;Must;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Must.Decls<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Must<sp/>=<sp/>&amp;Frame-&gt;Must;</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Top<sp/>=<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Last<sp/>=<sp/>Function-&gt;Decls,<sp/>*Decls<sp/>=<sp/>Last;</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;DeclHashes<sp/>=<sp/>(<ref refid="structinthash__t" kindref="compound">inthash_t</ref>)INTHASH_INIT;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinthash__t" kindref="compound">inthash_t</ref><sp/>*DeclHashes<sp/>=<sp/>&amp;Frame-&gt;DeclHashes;</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Up<sp/>=<sp/>Function-&gt;Block;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Block<sp/>=<sp/>Frame;</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Expr-&gt;Vars;<sp/>Local;<sp/>Local<sp/>=<sp/>Local-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref>);</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Source.Name<sp/>=<sp/>Function-&gt;Source;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Source.Line<sp/>=<sp/>Local-&gt;Line;</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Ident<sp/>=<sp/>Local-&gt;Ident;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Hash<sp/>=<sp/>ml_ident_hash(Local-&gt;Ident);</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Index<sp/>=<sp/>Top++;</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Decls[Local-&gt;Index]<sp/>=<sp/>Decl;</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Local-&gt;Ident[0]<sp/>&amp;&amp;<sp/>inthash_insert(DeclHashes,<sp/>(uintptr_t)Decl-&gt;Hash,<sp/>Decl))<sp/>{</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Prev<sp/>=<sp/>Decls;<sp/>Prev<sp/>!=<sp/>Last;<sp/>Prev<sp/>=<sp/>Prev-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Prev-&gt;Ident,<sp/>Decl-&gt;Ident))<sp/>{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EXPR_ERROR(Expr,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;NameError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Identifier<sp/>%s<sp/>redefined<sp/>in<sp/>line<sp/>%d,<sp/>previously<sp/>declared<sp/>on<sp/>line<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>Decl-&gt;Ident,<sp/>Decl-&gt;Source.Line,<sp/>Prev-&gt;Source.Line));</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Next<sp/>=<sp/>Decls;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decls<sp/>=<sp/>Decl;</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Expr-&gt;Lets;<sp/>Local;<sp/>Local<sp/>=<sp/>Local-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref>);</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Source.Name<sp/>=<sp/>Function-&gt;Source;</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Source.Line<sp/>=<sp/>Local-&gt;Line;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Ident<sp/>=<sp/>Local-&gt;Ident;</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Hash<sp/>=<sp/>ml_ident_hash(Local-&gt;Ident);</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Index<sp/>=<sp/>Top++;</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Flags<sp/>=<sp/>MLC_DECL_FORWARD;</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Decls[Local-&gt;Index]<sp/>=<sp/>Decl;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Local-&gt;Ident[0]<sp/>&amp;&amp;<sp/>inthash_insert(DeclHashes,<sp/>(uintptr_t)Decl-&gt;Hash,<sp/>Decl))<sp/>{</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Prev<sp/>=<sp/>Decls;<sp/>Prev<sp/>!=<sp/>Last;<sp/>Prev<sp/>=<sp/>Prev-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Prev-&gt;Ident,<sp/>Decl-&gt;Ident))<sp/>{</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EXPR_ERROR(Expr,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;NameError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Identifier<sp/>%s<sp/>redefined<sp/>in<sp/>line<sp/>%d,<sp/>previously<sp/>declared<sp/>on<sp/>line<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>Decl-&gt;Ident,<sp/>Decl-&gt;Source.Line,<sp/>Prev-&gt;Source.Line));</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Next<sp/>=<sp/>Decls;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decls<sp/>=<sp/>Decl;</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Expr-&gt;Defs;<sp/>Local;<sp/>Local<sp/>=<sp/>Local-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref>);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Source.Name<sp/>=<sp/>Function-&gt;Source;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Source.Line<sp/>=<sp/>Local-&gt;Line;</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Ident<sp/>=<sp/>Local-&gt;Ident;</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Hash<sp/>=<sp/>ml_ident_hash(Local-&gt;Ident);</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Flags<sp/>=<sp/>MLC_DECL_CONSTANT;</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Decls[Local-&gt;Index]<sp/>=<sp/>Decl;</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Local-&gt;Ident[0]<sp/>&amp;&amp;<sp/>inthash_insert(DeclHashes,<sp/>(uintptr_t)Decl-&gt;Hash,<sp/>Decl))<sp/>{</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Prev<sp/>=<sp/>Decls;<sp/>Prev<sp/>!=<sp/>Last;<sp/>Prev<sp/>=<sp/>Prev-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Prev-&gt;Ident,<sp/>Decl-&gt;Ident))<sp/>{</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EXPR_ERROR(Expr,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;NameError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Identifier<sp/>%s<sp/>redefined<sp/>in<sp/>line<sp/>%d,<sp/>previously<sp/>declared<sp/>on<sp/>line<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>Decl-&gt;Ident,<sp/>Decl-&gt;Source.Line,<sp/>Prev-&gt;Source.Line));</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Next<sp/>=<sp/>Decls;</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decls<sp/>=<sp/>Decl;</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Top<sp/>&gt;=<sp/>Function-&gt;Size)<sp/>Function-&gt;Size<sp/>=<sp/>Top<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Top<sp/>=<sp/>Top;</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Decls<sp/>=<sp/>Decls;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expr-&gt;NumVars<sp/>+<sp/>Expr-&gt;NumLets)<sp/>{</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*EnterInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_ENTER,<sp/>3);</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnterInst[1].Count<sp/>=<sp/>Expr-&gt;NumVars;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnterInst[2].Count<sp/>=<sp/>Expr-&gt;NumLets;</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnterInst[3].Decls<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Expr-&gt;Child;</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child)<sp/>{</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child-&gt;Next;</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_RETURN)<sp/>&amp;&amp;<sp/>!Child-&gt;Next<sp/>&amp;&amp;<sp/>!Function-&gt;Try)<sp/>{</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>MLCF_RETURN);</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>0);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_NIL,<sp/>0);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_block_expr_compile2(Function,<sp/>NULL,<sp/>Frame);</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_assign_expr_compile4(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_ASSIGN,<sp/>0);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>--Function-&gt;Top;</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Old<sp/>=<sp/>Frame-&gt;Count;</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="1771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_assign_expr_compile3(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*AssignInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_ASSIGN_LOCAL,<sp/>1);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/>AssignInst[1].Count<sp/>=<sp/>Function-&gt;Old<sp/>-<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Old<sp/>=<sp/>Frame-&gt;Count;</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="1784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_assign_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Count<sp/>=<sp/>Function-&gt;Old;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value)<sp/>{</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Old<sp/>=<sp/>ml_integer_value_fast(Value);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_assign_expr_compile3;</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Old<sp/>=<sp/>Function-&gt;Top<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_assign_expr_compile4;</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Frame-&gt;Child,<sp/>0);</highlight></codeline>
<codeline lineno="1796"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_assign_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref>,<sp/>ml_assign_expr_compile2);</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Expr-&gt;Child;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child-&gt;Next;</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>MLCF_LOCAL<sp/>|<sp/>MLCF_PUSH);</highlight></codeline>
<codeline lineno="1805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_old_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function-&gt;Old<sp/>&lt;<sp/>0)<sp/>MLC_EXPR_ERROR(Expr,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CompilerError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Old<sp/>must<sp/>be<sp/>used<sp/>in<sp/>assigment<sp/>expression&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*LocalInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_LOCAL_PUSH,<sp/>1);</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalInst[1].Count<sp/>=<sp/>Function-&gt;Old<sp/>-<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*LocalInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_LOCAL,<sp/>1);</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalInst[1].Count<sp/>=<sp/>Function-&gt;Old<sp/>-<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="1818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_it_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function-&gt;It<sp/>&lt;<sp/>0)<sp/>MLC_EXPR_ERROR(Expr,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CompilerError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;It<sp/>must<sp/>be<sp/>used<sp/>in<sp/>guard<sp/>expression&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*LocalInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_LOCAL_PUSH,<sp/>1);</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalInst[1].Count<sp/>=<sp/>Function-&gt;It<sp/>-<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*LocalInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_LOCAL,<sp/>1);</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalInst[1].Count<sp/>=<sp/>Function-&gt;It<sp/>-<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="1831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal">ML_TYPE(MLExprT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1835"><highlight class="comment">//<sp/>An<sp/>expression<sp/>value<sp/>used<sp/>by<sp/>the<sp/>compiler<sp/>to<sp/>implement<sp/>macros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_expr_value(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr)<sp/>{</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Type<sp/>=<sp/>MLExprT;</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Expr;</highlight></codeline>
<codeline lineno="1840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;$&quot;</highlight><highlight class="normal">,<sp/>MLExprT)<sp/>{</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Parent<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>Caller;<sp/>State;<sp/>State<sp/>=<sp/>State-&gt;Caller)<sp/>{</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Type<sp/>==<sp/>MLCompilerFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parent<sp/>=<sp/>(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*)State;</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Parent)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;MacroError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expression<sp/>has<sp/>no<sp/>function<sp/>for<sp/>evaluation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref>);</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Base.Type<sp/>=<sp/>MLCompilerFunctionT;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Base.run<sp/>=<sp/>(ml_state_fn)mlc_function_run;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Compiler<sp/>=<sp/>Parent-&gt;Compiler;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Eval<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Source<sp/>=<sp/>Parent-&gt;Source;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Old<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;It<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Up<sp/>=<sp/>Parent;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Size<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Next<sp/>=<sp/>anew(<ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref>,<sp/>128);</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Space<sp/>=<sp/>126;</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Returns<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__compile__frame__t" kindref="compound">mlc_compile_frame_t</ref>,<sp/>mlc_expr_call2);</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Info<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__closure__info__t" kindref="compound">ml_closure_info_t</ref>);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Info-&gt;Entry<sp/>=<sp/>Function-&gt;Next;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr,<sp/>0);</highlight></codeline>
<codeline lineno="1872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_delegate_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>Flags);</highlight></codeline>
<codeline lineno="1876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ml_delegate_expr(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref>);</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_delegate_expr_compile;</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/>Child-&gt;Source;</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>Child-&gt;StartLine;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;EndLine<sp/>=<sp/>Child-&gt;EndLine;</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">,<sp/>MLExprT)<sp/>{</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Child-&gt;Source,<sp/>-1);</highlight></codeline>
<codeline lineno="1892"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;start&quot;</highlight><highlight class="normal">,<sp/>MLExprT)<sp/>{</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Child-&gt;StartLine);</highlight></codeline>
<codeline lineno="1897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;end&quot;</highlight><highlight class="normal">,<sp/>MLExprT)<sp/>{</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Child-&gt;EndLine);</highlight></codeline>
<codeline lineno="1902"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal">ML_FUNCTION(MLMacro)<sp/>{</highlight></codeline>
<codeline lineno="1906"><highlight class="comment">//@macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight><highlight class="comment">//&lt;Function:function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight><highlight class="comment">//&gt;macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>macro<sp/>which<sp/>applies<sp/>:mini:`Function`<sp/>when<sp/>compiled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"></highlight><highlight class="comment">//<sp/>:mini:`Function`<sp/>should<sp/>have<sp/>the<sp/>following<sp/>signature:<sp/>:mini:`Function(Expr/1:<sp/>expr,<sp/>Expr/2:<sp/>expr,<sp/>...):<sp/>expr`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__macro__t" kindref="compound">ml_macro_t</ref><sp/>*Macro<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__macro__t" kindref="compound">ml_macro_t</ref>);</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/>Macro-&gt;Type<sp/>=<sp/>MLMacroT;</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/>Macro-&gt;Function<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Macro;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal">ML_TYPE(MLMacroT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;macro&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1920"><highlight class="comment">//<sp/>A<sp/>macro.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLMacro</highlight></codeline>
<codeline lineno="1922"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_macro(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function)<sp/>{</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__macro__t" kindref="compound">ml_macro_t</ref><sp/>*Macro<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__macro__t" kindref="compound">ml_macro_t</ref>);</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/>Macro-&gt;Type<sp/>=<sp/>MLMacroT;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/>Macro-&gt;Function<sp/>=<sp/>Function;</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Macro;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight></codeline>
<codeline lineno="1931" refid="structml__inline__expr__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags;</highlight></codeline>
<codeline lineno="1934"><highlight class="normal">}<sp/><ref refid="structml__inline__expr__frame__t" kindref="compound">ml_inline_expr_frame_t</ref>;</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_inline_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__inline__expr__frame__t" kindref="compound">ml_inline_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>{</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Function-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags<sp/>=<sp/>Frame-&gt;Flags;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>MLCF_CONSTANT)<sp/>{</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_RETURN(Value);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*ValueInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_LOAD,<sp/>1);</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_typeof(Value)<sp/>==<sp/>MLUninitializedT)<sp/>{</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_uninitialized_use(Value,<sp/>&amp;ValueInst[1].Value);</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/>ValueInst[1].Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueInst-&gt;Opcode<sp/>=<sp/>MLI_LOAD_PUSH;</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="1958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_inline_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structml__inline__expr__frame__t" kindref="compound">ml_inline_expr_frame_t</ref>,<sp/>ml_inline_expr_compile2);</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr;</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/>mlc_expr_call(Function,<sp/>Expr-&gt;Child);</highlight></codeline>
<codeline lineno="1965"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight></codeline>
<codeline lineno="1967" refid="structml__call__expr__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child;</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*NilInst;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/>Index,<sp/>Flags;</highlight></codeline>
<codeline lineno="1973"><highlight class="normal">}<sp/><ref refid="structml__call__expr__frame__t" kindref="compound">ml_call_expr_frame_t</ref>;</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_call_expr_compile3(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__call__expr__frame__t" kindref="compound">ml_call_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Frame-&gt;Child;</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*SetInst<sp/>=<sp/>MLC_EMIT(Child-&gt;EndLine,<sp/>MLI_PARTIAL_SET,<sp/>1);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>SetInst[1].Count<sp/>=<sp/>Frame-&gt;Index;</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((Child<sp/>=<sp/>Child-&gt;Next))<sp/>{</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Index;</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child-&gt;compile<sp/>!=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_blank_expr_compile)<sp/>{</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Index<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>0);</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH))<sp/>{</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_POP,<sp/>0);</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Function-&gt;Top;</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="1994"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_call_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__call__expr__frame__t" kindref="compound">ml_call_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*PartialInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_PARTIAL_NEW,<sp/>1);</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/>PartialInst[1].Count<sp/>=<sp/>Frame-&gt;Count;</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Frame-&gt;Child;<sp/>Child;<sp/>Child<sp/>=<sp/>Child-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child-&gt;compile<sp/>!=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_blank_expr_compile)<sp/>{</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_call_expr_compile3;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Index<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>0);</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Index;</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH))<sp/>{</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_POP,<sp/>0);</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Function-&gt;Top;</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="2017"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_call_expr_compile5(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__call__expr__frame__t" kindref="compound">ml_call_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Frame-&gt;Child;</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child)<sp/>{</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Frame-&gt;Index;</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Child<sp/>=<sp/>Child-&gt;Next))<sp/>{</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>MLCF_PUSH);</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TailCall<sp/>=<sp/>Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_RETURN;</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(TailCall)<sp/>fprintf(stderr,<sp/>&quot;Found<sp/>a<sp/>tail<sp/>call<sp/>at<sp/>%s:%d!\n&quot;,<sp/>Expr-&gt;Source,<sp/>Expr-&gt;EndLine);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Value)<sp/>{</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>Frame-&gt;Count;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_typeof(Frame-&gt;Value)<sp/>==<sp/>MLMethodT)<sp/>{</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*CallInst;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>(TailCall<sp/>?<sp/>MLI_TAIL_CALL_METHOD<sp/>:<sp/>MLI_CALL_METHOD),<sp/>3);</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallInst[2].Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallInst[1].Value<sp/>=<sp/>Frame-&gt;Value;</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*CallInst;</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>(TailCall<sp/>?<sp/>MLI_TAIL_CALL_CONST<sp/>:<sp/>MLI_CALL_CONST),<sp/>2);</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallInst[2].Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Frame-&gt;Value;</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallInst[1].Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_typeof(Value)<sp/>==<sp/>MLUninitializedT)<sp/>ml_uninitialized_use(Value,<sp/>&amp;CallInst[1].Value);</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Top<sp/>-=<sp/>Count;</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*CallInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>(TailCall<sp/>?<sp/>MLI_TAIL_CALL<sp/>:<sp/>MLI_CALL),<sp/>1);</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallInst[1].Count<sp/>=<sp/>Frame-&gt;Count;</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Top<sp/>-=<sp/>Frame-&gt;Count<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;NilInst)<sp/>TailCall<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_LINK(Frame-&gt;NilInst,<sp/>Function-&gt;Next);</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(TailCall<sp/>?<sp/>MLExprGoto<sp/>:<sp/>NULL);</highlight></codeline>
<codeline lineno="2060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight></codeline>
<codeline lineno="2062" refid="structml__macro__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal">}<sp/><ref refid="structml__macro__frame__t" kindref="compound">ml_macro_frame_t</ref>;</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_call_macro_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__macro__frame__t" kindref="compound">ml_macro_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Value,<sp/>MLExprT))<sp/>MLC_EXPR_ERROR(Frame-&gt;Expr,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;MacroError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Macro<sp/>returned<sp/>%s<sp/>instead<sp/>of<sp/>expr&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Value)-&gt;Name));</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr,<sp/>Frame-&gt;Flags);</highlight></codeline>
<codeline lineno="2073"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_call_macro_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__macro__t" kindref="compound">ml_macro_t</ref><sp/>*Macro,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*E<sp/>=<sp/>Child;<sp/>E;<sp/>E<sp/>=<sp/>E-&gt;Next)<sp/>++Count;</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args<sp/>=<sp/>ml_alloc_args(Count);</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/>Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*E<sp/>=<sp/>Child;<sp/>E;<sp/>E<sp/>=<sp/>E-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(E-&gt;compile<sp/>==<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_value_expr_compile)<sp/>{</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__value__expr__t" kindref="compound">mlc_value_expr_t</ref><sp/>*ValueExpr<sp/>=<sp/>(<ref refid="structmlc__value__expr__t" kindref="compound">mlc_value_expr_t</ref><sp/>*)E;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_typeof(ValueExpr-&gt;Value)<sp/>==<sp/>MLNamesT)<sp/>{</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[Count++]<sp/>=<sp/>ValueExpr-&gt;Value;</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[Count++]<sp/>=<sp/>ml_expr_value(E);</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structml__macro__frame__t" kindref="compound">ml_macro_frame_t</ref>,<sp/>ml_call_macro_compile2);</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_call_macro_compile2;</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Function,<sp/>Macro-&gt;Function,<sp/>Count,<sp/>Args);</highlight></codeline>
<codeline lineno="2095"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight></codeline>
<codeline lineno="2097" refid="structmlc__inline__call__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child;</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__closure__info__t" kindref="compound">ml_closure_info_t</ref><sp/>*Info;</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/>Line;</highlight></codeline>
<codeline lineno="2102"><highlight class="normal">}<sp/><ref refid="structmlc__inline__call__frame__t" kindref="compound">mlc_inline_call_frame_t</ref>;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mlc_inline_call_expr_compile3(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__inline__call__frame__t" kindref="compound">mlc_inline_call_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Frame-&gt;Child;</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child)<sp/>{</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child-&gt;Next;</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Frame-&gt;Count;</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>MLCF_PUSH);</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>Frame-&gt;Count;</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*CallInst;</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/>CallInst<sp/>=<sp/>MLC_EMIT(Frame-&gt;Line,<sp/>MLI_TAIL_CALL_CONST,<sp/>2);</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/>CallInst[2].Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/>CallInst[1].Value<sp/>=<sp/>Frame-&gt;Value;</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__closure__info__t" kindref="compound">ml_closure_info_t</ref><sp/>*Info<sp/>=<sp/>Frame-&gt;Info;</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Function-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function-&gt;UpValues)<sp/>{</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error<sp/>=<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;EvalError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>of<sp/>non-constant<sp/>value<sp/>%s<sp/>in<sp/>constant<sp/>expression&quot;</highlight><highlight class="normal">,<sp/>Function-&gt;UpValues-&gt;Decl-&gt;Ident);</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_error_trace_add(Error,<sp/>(<ref refid="structml__source__t" kindref="compound">ml_source_t</ref>){Function-&gt;Source,<sp/>Frame-&gt;Line});</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Error);</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Return<sp/>=<sp/>MLC_EMIT(Frame-&gt;Line,<sp/>MLI_RETURN,<sp/>0);</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_LINK(Function-&gt;Returns,<sp/>Info-&gt;Return);</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Halt<sp/>=<sp/>Function-&gt;Next;</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Source<sp/>=<sp/>Function-&gt;Source;</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;StartLine<sp/>=<sp/>Frame-&gt;Line;</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;EndLine<sp/>=<sp/>Frame-&gt;Line;</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_asprintf((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)&amp;Info-&gt;Name,<sp/></highlight><highlight class="stringliteral">&quot;@%s:%d&quot;</highlight><highlight class="normal">,<sp/>Info-&gt;Source,<sp/>Info-&gt;StartLine);</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;FrameSize<sp/>=<sp/>Function-&gt;Size;</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;NumParams<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_call(Caller,<sp/>ml_closure(Info),<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="2134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mlc_inline_call_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Parent,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child)<sp/>{</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/>Parent-&gt;Frame-&gt;Line<sp/>=<sp/>Expr-&gt;EndLine;</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref>);</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Base.Type<sp/>=<sp/>MLCompilerFunctionT;</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Base.Caller<sp/>=<sp/>(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Parent;</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Base.Context<sp/>=<sp/>Parent-&gt;Base.Context;</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Base.run<sp/>=<sp/>(ml_state_fn)mlc_function_run;</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Compiler<sp/>=<sp/>Parent-&gt;Compiler;</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Eval<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Source<sp/>=<sp/>Parent-&gt;Source;</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Old<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;It<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Up<sp/>=<sp/>Parent;</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Size<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Next<sp/>=<sp/>anew(<ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref>,<sp/>128);</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Space<sp/>=<sp/>126;</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Returns<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__inline__call__frame__t" kindref="compound">mlc_inline_call_frame_t</ref>,<sp/>mlc_inline_call_expr_compile3);</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Line<sp/>=<sp/>Expr-&gt;EndLine;</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Info<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__closure__info__t" kindref="compound">ml_closure_info_t</ref>);</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Info-&gt;Entry<sp/>=<sp/>Function-&gt;Next;</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_inline_call_expr_compile3(Function,<sp/>NULL,<sp/>Frame);</highlight></codeline>
<codeline lineno="2160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mlc_inline_call_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structml__inline__expr__frame__t" kindref="compound">ml_inline_expr_frame_t</ref>,<sp/>ml_inline_expr_compile2);</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_inline_call_expr_compile2(Function,<sp/>Value,<sp/>Expr,<sp/>Child);</highlight></codeline>
<codeline lineno="2167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_inline_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__inline__function__t" kindref="compound">ml_inline_function_t</ref><sp/>*Inline,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>Inline-&gt;Value,<sp/>Count,<sp/>Args);</highlight></codeline>
<codeline lineno="2171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"></highlight></codeline>
<codeline lineno="2173"><highlight class="normal">ML_TYPE(MLFunctionInlineT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;inline&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_inline_call</highlight></codeline>
<codeline lineno="2175"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_inline_function(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__inline__function__t" kindref="compound">ml_inline_function_t</ref><sp/>*Inline<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__inline__function__t" kindref="compound">ml_inline_function_t</ref>);</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/>Inline-&gt;Type<sp/>=<sp/>MLFunctionInlineT;</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/>Inline-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Inline;</highlight></codeline>
<codeline lineno="2182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_call_expr_compile4(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__call__expr__frame__t" kindref="compound">ml_call_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value)<sp/>{</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Deref<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_typeof(Deref)<sp/>==<sp/>MLMacroT)<sp/>{</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__macro__t" kindref="compound">ml_macro_t</ref><sp/>*Macro<sp/>=<sp/>(<ref refid="structml__macro__t" kindref="compound">ml_macro_t</ref><sp/>*)Deref;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call_macro_compile(Function,<sp/>Macro,<sp/>Expr,<sp/>Frame-&gt;Child,<sp/>Frame-&gt;Flags);</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_typeof(Deref)<sp/>==<sp/>MLFunctionInlineT)<sp/>{</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__inline__function__t" kindref="compound">ml_inline_function_t</ref><sp/>*Inline<sp/>=<sp/>(<ref refid="structml__inline__function__t" kindref="compound">ml_inline_function_t</ref><sp/>*)Deref;</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_inline_call_expr_compile(Function,<sp/>Inline-&gt;Value,<sp/>Expr,<sp/>Frame-&gt;Child,<sp/>Frame-&gt;Flags);</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Frame-&gt;Child;</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_call_expr_compile5;</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Index<sp/>=<sp/>!Value;</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child)<sp/>{</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>MLCF_PUSH);</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call_expr_compile5(Function,<sp/>NULL,<sp/>Frame);</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref><sp/>MLCall[];</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_call_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structml__call__expr__frame__t" kindref="compound">ml_call_expr_frame_t</ref>,<sp/>ml_call_expr_compile4);</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr;</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Expr-&gt;Child-&gt;Next;</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Expr-&gt;Child-&gt;Next;<sp/>Child;<sp/>Child<sp/>=<sp/>Child-&gt;Next)<sp/>++Count;</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;NilInst<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expr-&gt;Child-&gt;compile<sp/>==<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_blank_expr_compile)<sp/>{</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*LoadInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_LOAD,<sp/>1);</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LoadInst[1].Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLCall;</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*PartialInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_PARTIAL_NEW,<sp/>1);</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PartialInst[1].Count<sp/>=<sp/>Frame-&gt;Count<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_call_expr_compile3;</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Expr-&gt;Child-&gt;Next;<sp/>Child;<sp/>Child<sp/>=<sp/>Child-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Index;</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child-&gt;compile<sp/>!=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_blank_expr_compile)<sp/>{</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Index<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>0);</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(Flags<sp/>&amp;<sp/>MLCF_PUSH))<sp/>{</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_POP,<sp/>0);</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Function-&gt;Top;</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Expr-&gt;Child-&gt;Next;<sp/>Child;<sp/>Child<sp/>=<sp/>Child-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child-&gt;compile<sp/>==<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_blank_expr_compile)<sp/>{</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_call_expr_compile2;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>0);</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>MLCF_CONSTANT<sp/>|<sp/>MLCF_PUSH);</highlight></codeline>
<codeline lineno="2250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_const_call_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__parent__value__expr__t" kindref="compound">mlc_parent_value_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structml__call__expr__frame__t" kindref="compound">ml_call_expr_frame_t</ref>,<sp/>ml_call_expr_compile4);</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr;</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Expr-&gt;Child;</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Expr-&gt;Child;<sp/>Child;<sp/>Child<sp/>=<sp/>Child-&gt;Next)<sp/>++Count;</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;NilInst<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Expr-&gt;Child;<sp/>Child;<sp/>Child<sp/>=<sp/>Child-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child-&gt;compile<sp/>==<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_blank_expr_compile)<sp/>{</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*LoadInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_LOAD,<sp/>1);</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LoadInst[1].Value<sp/>=<sp/>Expr-&gt;Value;</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call_expr_compile2(Function,<sp/>Expr-&gt;Value,<sp/>Frame);</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call_expr_compile4(Function,<sp/>Expr-&gt;Value,<sp/>Frame);</highlight></codeline>
<codeline lineno="2269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"></highlight></codeline>
<codeline lineno="2271" refid="structml__guard__expr__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Guard;</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>OldIt;</highlight></codeline>
<codeline lineno="2274"><highlight class="normal">}<sp/><ref refid="structml__guard__expr__frame__t" kindref="compound">ml_guard_expr_frame_t</ref>;</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_guard_expr_compile3(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__guard__expr__frame__t" kindref="compound">ml_guard_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;It<sp/>=<sp/>Frame-&gt;OldIt;</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__call__expr__frame__t" kindref="compound">ml_call_expr_frame_t</ref><sp/>*Caller<sp/>=<sp/>(<ref refid="structml__call__expr__frame__t" kindref="compound">ml_call_expr_frame_t</ref><sp/>*)&amp;Function-&gt;Frame-&gt;Data;</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*CheckInst<sp/>=<sp/>MLC_EMIT(Frame-&gt;Guard-&gt;EndLine,<sp/>MLI_AND_POP,<sp/>2);</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckInst[2].Count<sp/>=<sp/>Caller-&gt;Index<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckInst[1].Inst<sp/>=<sp/>Caller-&gt;NilInst;</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/>Caller-&gt;NilInst<sp/>=<sp/>CheckInst<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="2285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_guard_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__guard__expr__frame__t" kindref="compound">ml_guard_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;OldIt<sp/>=<sp/>Function-&gt;It;</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;It<sp/>=<sp/>Function-&gt;Top<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_guard_expr_compile3;</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Frame-&gt;Guard,<sp/>0);</highlight></codeline>
<codeline lineno="2292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_guard_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function-&gt;Frame-&gt;run<sp/>==<sp/>(mlc_frame_fn)ml_call_expr_compile4)<sp/>{</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structml__guard__expr__frame__t" kindref="compound">ml_guard_expr_frame_t</ref>,<sp/>ml_guard_expr_compile2);</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Guard<sp/>=<sp/>Expr-&gt;Child-&gt;Next;</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>MLCF_PUSH);</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function-&gt;Frame-&gt;run<sp/>==<sp/>(mlc_frame_fn)ml_call_expr_compile5)<sp/>{</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structml__guard__expr__frame__t" kindref="compound">ml_guard_expr_frame_t</ref>,<sp/>ml_guard_expr_compile2);</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Guard<sp/>=<sp/>Expr-&gt;Child-&gt;Next;</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>MLCF_PUSH);</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EXPR_ERROR(Expr,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CompilerError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Guard<sp/>expression<sp/>used<sp/>outside<sp/>of<sp/>function<sp/>call&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_tuple_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Frame-&gt;Child;</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Child<sp/>=<sp/>Child-&gt;Next))<sp/>{</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Frame-&gt;Count;</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>MLCF_PUSH);</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*TupleInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_TUPLE_NEW,<sp/>1);</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/>TupleInst[1].Count<sp/>=<sp/>Frame-&gt;Count;</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Top<sp/>-=<sp/>Frame-&gt;Count;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="2325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_tuple_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Expr-&gt;Child;<sp/>Child;<sp/>Child<sp/>=<sp/>Child-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child-&gt;compile<sp/>==<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_blank_expr_compile)<sp/>{</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structml__call__expr__frame__t" kindref="compound">ml_call_expr_frame_t</ref>,<sp/>ml_call_expr_compile4);</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr;</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Expr-&gt;Child;</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Expr-&gt;Child;<sp/>Child;<sp/>Child<sp/>=<sp/>Child-&gt;Next)<sp/>++Count;</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*LoadInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_LOAD,<sp/>1);</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LoadInst[1].Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLTupleT;</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call_expr_compile2(Function,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLTupleT,<sp/>Frame);</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Expr-&gt;Child;<sp/>Child;<sp/>Child<sp/>=<sp/>Child-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child-&gt;compile<sp/>==<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_guard_expr_compile)<sp/>{</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structml__call__expr__frame__t" kindref="compound">ml_call_expr_frame_t</ref>,<sp/>ml_call_expr_compile4);</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr;</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Expr-&gt;Child;</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Expr-&gt;Child;<sp/>Child;<sp/>Child<sp/>=<sp/>Child-&gt;Next)<sp/>++Count;</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;NilInst<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call_expr_compile4(Function,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLTupleT,<sp/>Frame);</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Expr-&gt;Child;</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child)<sp/>{</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref>,<sp/>ml_tuple_expr_compile2);</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>MLCF_PUSH);</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*TupleInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_TUPLE_NEW,<sp/>1);</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/>TupleInst[1].Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="2371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_list_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Frame-&gt;Child;</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_EMIT(Child-&gt;EndLine,<sp/>MLI_LIST_APPEND,<sp/>0);</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Child<sp/>=<sp/>Child-&gt;Next))<sp/>{</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>0);</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH))<sp/>{</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_POP,<sp/>0);</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Function-&gt;Top;</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="2387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal">ML_FUNCTION(MLListOfArgs)<sp/>{</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ml_list_put(List,<sp/>Args[I]);</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>List;</highlight></codeline>
<codeline lineno="2394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"></highlight></codeline>
<codeline lineno="2396"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_list_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Expr-&gt;Child;<sp/>Child;<sp/>Child<sp/>=<sp/>Child-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child-&gt;compile<sp/>==<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_blank_expr_compile)<sp/>{</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structml__call__expr__frame__t" kindref="compound">ml_call_expr_frame_t</ref>,<sp/>ml_call_expr_compile4);</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr;</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Expr-&gt;Child;</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Expr-&gt;Child;<sp/>Child;<sp/>Child<sp/>=<sp/>Child-&gt;Next)<sp/>++Count;</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*LoadInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_LOAD,<sp/>1);</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LoadInst[1].Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLListOfArgs;</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call_expr_compile2(Function,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLListOfArgs,<sp/>Frame);</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_LIST_NEW,<sp/>0);</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Expr-&gt;Child;</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child)<sp/>{</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref>,<sp/>ml_list_expr_compile2);</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>0);</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(Flags<sp/>&amp;<sp/>MLCF_PUSH))<sp/>{</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_POP,<sp/>0);</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Function-&gt;Top;</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="2426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_map_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref><sp/>*Frame);</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_map_expr_compile3(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Frame-&gt;Child;</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_EMIT(Child-&gt;EndLine,<sp/>MLI_MAP_INSERT,<sp/>0);</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/>--Function-&gt;Top;</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Child<sp/>=<sp/>Child-&gt;Next))<sp/>{</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_map_expr_compile2;</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>MLCF_PUSH);</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH))<sp/>{</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_POP,<sp/>0);</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Function-&gt;Top;</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="2446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_map_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_map_expr_compile3;</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Frame-&gt;Child<sp/>=<sp/>Frame-&gt;Child-&gt;Next;</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/>mlc_compile(Function,<sp/>Child,<sp/>0);</highlight></codeline>
<codeline lineno="2452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal">ML_FUNCTION(MLMapOfArgs)<sp/>{</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Map<sp/>=<sp/>ml_map();</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>I<sp/>+=<sp/>2)<sp/>ml_map_insert(Map,<sp/>Args[I<sp/>-<sp/>1],<sp/>Args[I]);</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Map;</highlight></codeline>
<codeline lineno="2459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_map_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Expr-&gt;Child;<sp/>Child;<sp/>Child<sp/>=<sp/>Child-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child-&gt;compile<sp/>==<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_blank_expr_compile)<sp/>{</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structml__call__expr__frame__t" kindref="compound">ml_call_expr_frame_t</ref>,<sp/>ml_call_expr_compile4);</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr;</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Expr-&gt;Child;</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Expr-&gt;Child;<sp/>Child;<sp/>Child<sp/>=<sp/>Child-&gt;Next)<sp/>++Count;</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*LoadInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_LOAD,<sp/>1);</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LoadInst[1].Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLMapOfArgs;</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call_expr_compile2(Function,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLMapOfArgs,<sp/>Frame);</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_MAP_NEW,<sp/>0);</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Expr-&gt;Child;</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child)<sp/>{</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__parent__expr__frame__t" kindref="compound">mlc_parent_expr_frame_t</ref>,<sp/>ml_map_expr_compile2);</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>MLCF_PUSH);</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(Flags<sp/>&amp;<sp/>MLCF_PUSH))<sp/>{</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_POP,<sp/>0);</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Function-&gt;Top;</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="2491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmlc__scoped__expr__t" kindref="compound">mlc_scoped_expr_t</ref><sp/><ref refid="structmlc__scoped__expr__t" kindref="compound">mlc_scoped_expr_t</ref>;</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight></codeline>
<codeline lineno="2495" refid="structmlc__scoped__decl__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name;</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="2498"><highlight class="normal">}<sp/><ref refid="structmlc__scoped__decl__t" kindref="compound">mlc_scoped_decl_t</ref>;</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"></highlight></codeline>
<codeline lineno="2500" refid="structmlc__scoped__expr__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmlc__scoped__expr__t" kindref="compound">mlc_scoped_expr_t</ref><sp/>{</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_EXPR_FIELDS(scoped);</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child;</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__scoped__decl__t" kindref="compound">mlc_scoped_decl_t</ref><sp/>Decls[];</highlight></codeline>
<codeline lineno="2504"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"></highlight></codeline>
<codeline lineno="2506"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_scoped_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>**Frame)<sp/>{</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Decls<sp/>=<sp/>Frame[0];</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="2510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_scoped_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__scoped__expr__t" kindref="compound">mlc_scoped_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*,<sp/>ml_scoped_expr_compile2);</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame[0]<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__scoped__decl__t" kindref="compound">mlc_scoped_decl_t</ref><sp/>*Scoped<sp/>=<sp/>Expr-&gt;Decls;<sp/>Scoped-&gt;Name;<sp/>++Scoped)<sp/>{</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref>);</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Ident<sp/>=<sp/>Scoped-&gt;Name;</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Hash<sp/>=<sp/>ml_ident_hash(Scoped-&gt;Name);</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Value<sp/>=<sp/>Scoped-&gt;Value;</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Flags<sp/>=<sp/>MLC_DECL_CONSTANT;</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Next<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Decls<sp/>=<sp/>Decl;</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>Flags);</highlight></codeline>
<codeline lineno="2525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;scoped&quot;</highlight><highlight class="normal">,<sp/>MLExprT,<sp/>MLNamesT)<sp/>{</highlight></codeline>
<codeline lineno="2529"><highlight class="comment">//&lt;Expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name,Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"></highlight><highlight class="comment">//&gt;expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>expression<sp/>which<sp/>wraps<sp/>:mini:`Expr`<sp/>with<sp/>the<sp/>constant<sp/>definitions<sp/>from<sp/>:mini:`Names`<sp/>and<sp/>:mini:`Values`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__scoped__expr__t" kindref="compound">mlc_scoped_expr_t</ref><sp/>*Expr<sp/>=<sp/>xnew(<ref refid="structmlc__scoped__expr__t" kindref="compound">mlc_scoped_expr_t</ref>,<sp/>ml_names_length(Args[1])<sp/>+<sp/>1,<sp/><ref refid="structmlc__scoped__decl__t" kindref="compound">mlc_scoped_decl_t</ref>);</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/>Child-&gt;Source;</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>Child-&gt;StartLine;</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;EndLine<sp/>=<sp/>Child-&gt;EndLine;</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_scoped_expr_compile;</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__scoped__decl__t" kindref="compound">mlc_scoped_decl_t</ref><sp/>*Decl<sp/>=<sp/>Expr-&gt;Decls;</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_FOREACH(Args[1],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Name<sp/>=<sp/>ml_string_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Value<sp/>=<sp/>Args[I++];</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Decl;</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_expr_value((<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="2549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"></highlight></codeline>
<codeline lineno="2551"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;scoped&quot;</highlight><highlight class="normal">,<sp/>MLExprT,<sp/>MLMapT)<sp/>{</highlight></codeline>
<codeline lineno="2553"><highlight class="comment">//&lt;Expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2554"><highlight class="normal"></highlight><highlight class="comment">//&lt;Definitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2555"><highlight class="normal"></highlight><highlight class="comment">//&gt;expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2556"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>expression<sp/>which<sp/>wraps<sp/>:mini:`Expr`<sp/>with<sp/>the<sp/>constant<sp/>definitions<sp/>from<sp/>:mini:`Definitions`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__scoped__expr__t" kindref="compound">mlc_scoped_expr_t</ref><sp/>*Expr<sp/>=<sp/>xnew(<ref refid="structmlc__scoped__expr__t" kindref="compound">mlc_scoped_expr_t</ref>,<sp/>ml_map_size(Args[1])<sp/>+<sp/>1,<sp/><ref refid="structmlc__scoped__decl__t" kindref="compound">mlc_scoped_decl_t</ref>);</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/>Child-&gt;Source;</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>Child-&gt;StartLine;</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;EndLine<sp/>=<sp/>Child-&gt;EndLine;</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_scoped_expr_compile;</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__scoped__decl__t" kindref="compound">mlc_scoped_decl_t</ref><sp/>*Decl<sp/>=<sp/>Expr-&gt;Decls;</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_MAP_FOREACH(Args[1],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter-&gt;Key,<sp/>MLStringT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;MacroError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>definition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Name<sp/>=<sp/>ml_string_value(Iter-&gt;Key);</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Value<sp/>=<sp/>Iter-&gt;Value;</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Decl;</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_expr_value((<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="2572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"></highlight></codeline>
<codeline lineno="2574"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_scoped_decl_add(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__scoped__decl__t" kindref="compound">mlc_scoped_decl_t</ref><sp/>**Decls)<sp/>{</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/>Decls[0]-&gt;Name<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/>Decls[0]-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/>++Decls[0];</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"></highlight></codeline>
<codeline lineno="2581"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;scoped&quot;</highlight><highlight class="normal">,<sp/>MLExprT,<sp/>MLModuleT)<sp/>{</highlight></codeline>
<codeline lineno="2583"><highlight class="comment">//&lt;Expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2584"><highlight class="normal"></highlight><highlight class="comment">//&lt;Module</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2585"><highlight class="normal"></highlight><highlight class="comment">//&gt;expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2586"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>expression<sp/>which<sp/>wraps<sp/>:mini:`Expr`<sp/>with<sp/>the<sp/>exports<sp/>from<sp/>:mini:`Module`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__module__t" kindref="compound">ml_module_t</ref><sp/>*Module<sp/>=<sp/>(<ref refid="structml__module__t" kindref="compound">ml_module_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__scoped__expr__t" kindref="compound">mlc_scoped_expr_t</ref><sp/>*Expr<sp/>=<sp/>xnew(<ref refid="structmlc__scoped__expr__t" kindref="compound">mlc_scoped_expr_t</ref>,<sp/>Module-&gt;Exports-&gt;Size<sp/>+<sp/>1,<sp/><ref refid="structmlc__scoped__decl__t" kindref="compound">mlc_scoped_decl_t</ref>);</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/>Child-&gt;Source;</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>Child-&gt;StartLine;</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;EndLine<sp/>=<sp/>Child-&gt;EndLine;</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_scoped_expr_compile;</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__scoped__decl__t" kindref="compound">mlc_scoped_decl_t</ref><sp/>*Decl<sp/>=<sp/>Expr-&gt;Decls;</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_foreach(Module-&gt;Exports,<sp/>&amp;Decl,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_scoped_decl_add);</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_expr_value((<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="2598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"></highlight></codeline>
<codeline lineno="2600"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;scoped&quot;</highlight><highlight class="normal">,<sp/>MLExprT,<sp/>MLTypeT)<sp/>{</highlight></codeline>
<codeline lineno="2602"><highlight class="comment">//&lt;Expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2603"><highlight class="normal"></highlight><highlight class="comment">//&lt;Module</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2604"><highlight class="normal"></highlight><highlight class="comment">//&gt;expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2605"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>expression<sp/>which<sp/>wraps<sp/>:mini:`Expr`<sp/>with<sp/>the<sp/>exports<sp/>from<sp/>:mini:`Module`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__scoped__expr__t" kindref="compound">mlc_scoped_expr_t</ref><sp/>*Expr<sp/>=<sp/>xnew(<ref refid="structmlc__scoped__expr__t" kindref="compound">mlc_scoped_expr_t</ref>,<sp/>Type-&gt;Exports-&gt;Size<sp/>+<sp/>1,<sp/><ref refid="structmlc__scoped__decl__t" kindref="compound">mlc_scoped_decl_t</ref>);</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/>Child-&gt;Source;</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>Child-&gt;StartLine;</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;EndLine<sp/>=<sp/>Child-&gt;EndLine;</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_scoped_expr_compile;</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__scoped__decl__t" kindref="compound">mlc_scoped_decl_t</ref><sp/>*Decl<sp/>=<sp/>Expr-&gt;Decls;</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_foreach(Type-&gt;Exports,<sp/>&amp;Decl,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_scoped_decl_add);</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_expr_value((<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="2617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"></highlight></codeline>
<codeline lineno="2619"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmlc__subst__expr__t" kindref="compound">mlc_subst_expr_t</ref><sp/><ref refid="structmlc__subst__expr__t" kindref="compound">mlc_subst_expr_t</ref>;</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"></highlight></codeline>
<codeline lineno="2621" refid="structmlc__subst__expr__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmlc__subst__expr__t" kindref="compound">mlc_subst_expr_t</ref><sp/>{</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_EXPR_FIELDS(subst);</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child;</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>Subst[1];</highlight></codeline>
<codeline lineno="2625"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"></highlight></codeline>
<codeline lineno="2627"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_subst_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__define__t" kindref="compound">mlc_define_t</ref><sp/>**Frame)<sp/>{</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Defines<sp/>=<sp/>Frame[0];</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="2631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"></highlight></codeline>
<codeline lineno="2633"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_subst_define_fn(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Ident,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr,<sp/><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function)<sp/>{</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__define__t" kindref="compound">mlc_define_t</ref><sp/>*Define<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__define__t" kindref="compound">mlc_define_t</ref>);</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/>Define-&gt;Ident<sp/>=<sp/>Ident;</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/>Define-&gt;Hash<sp/>=<sp/>ml_ident_hash(Ident);</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/>Define-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/>Define-&gt;Next<sp/>=<sp/>Function-&gt;Defines;</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Defines<sp/>=<sp/>Define;</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_subst_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__subst__expr__t" kindref="compound">mlc_subst_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__define__t" kindref="compound">mlc_define_t</ref><sp/>*,<sp/>ml_subst_expr_compile2);</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame[0]<sp/>=<sp/>Function-&gt;Defines;</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_foreach(Expr-&gt;Subst,<sp/>Function,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_subst_define_fn);</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>Flags);</highlight></codeline>
<codeline lineno="2648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"></highlight></codeline>
<codeline lineno="2650"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmlc__args__expr__t" kindref="compound">mlc_args_expr_t</ref><sp/><ref refid="structmlc__args__expr__t" kindref="compound">mlc_args_expr_t</ref>;</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"></highlight></codeline>
<codeline lineno="2652" refid="structmlc__args__expr__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmlc__args__expr__t" kindref="compound">mlc_args_expr_t</ref><sp/>{</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_EXPR_FIELDS(args);</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Args[];</highlight></codeline>
<codeline lineno="2655"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"></highlight></codeline>
<codeline lineno="2657" refid="structmlc__args__expr__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__args__expr__t" kindref="compound">mlc_args_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__call__expr__frame__t" kindref="compound">ml_call_expr_frame_t</ref><sp/>*Parent;</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>**Arg;</highlight></codeline>
<codeline lineno="2661"><highlight class="normal">}<sp/><ref refid="structmlc__args__expr__frame__t" kindref="compound">mlc_args_expr_frame_t</ref>;</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"></highlight></codeline>
<codeline lineno="2663"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_args_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__args__expr__frame__t" kindref="compound">mlc_args_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/>++Frame-&gt;Parent-&gt;Index;</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/>++Frame-&gt;Parent-&gt;Count;</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>**Arg<sp/>=<sp/>Frame-&gt;Arg<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Arg[0])<sp/>{</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Arg<sp/>=<sp/>Arg;</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Arg[0],<sp/>MLCF_PUSH);</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="2673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"></highlight></codeline>
<codeline lineno="2675"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_args_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__args__expr__t" kindref="compound">mlc_args_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Function-&gt;Frame)<sp/>MLC_EXPR_ERROR(Expr,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CompilerError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>use<sp/>of<sp/>expression<sp/>list&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Function-&gt;Frame-&gt;run<sp/>==<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_call_expr_compile5)<sp/>{</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__call__expr__frame__t" kindref="compound">ml_call_expr_frame_t</ref><sp/>*Parent<sp/>=<sp/>(<ref refid="structml__call__expr__frame__t" kindref="compound">ml_call_expr_frame_t</ref><sp/>*)Function-&gt;Frame-&gt;Data;</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Parent-&gt;Index;</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Parent-&gt;Count;</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Expr-&gt;Args[0])<sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__args__expr__frame__t" kindref="compound">mlc_args_expr_frame_t</ref>,<sp/>ml_args_expr_compile2);</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Parent<sp/>=<sp/>Parent;</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Arg<sp/>=<sp/>Expr-&gt;Args;</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Args[0],<sp/>MLCF_PUSH);</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EXPR_ERROR(Expr,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CompilerError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>use<sp/>of<sp/>expression<sp/>list&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"></highlight></codeline>
<codeline lineno="2692"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;subst&quot;</highlight><highlight class="normal">,<sp/>MLExprT,<sp/>MLNamesT)<sp/>{</highlight></codeline>
<codeline lineno="2694"><highlight class="comment">//&lt;Expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2695"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name,Sub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2696"><highlight class="normal"></highlight><highlight class="comment">//&gt;expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2697"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>expression<sp/>which<sp/>substitutes<sp/>macro<sp/>references<sp/>to<sp/>:mini:`:$Name/i`<sp/>with<sp/>the<sp/>corresponding<sp/>expression<sp/>:mini:`Sub/i`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__subst__expr__t" kindref="compound">mlc_subst_expr_t</ref><sp/>*Expr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__subst__expr__t" kindref="compound">mlc_subst_expr_t</ref>);</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/>Child-&gt;Source;</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>Child-&gt;StartLine;</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;EndLine<sp/>=<sp/>Child-&gt;EndLine;</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_subst_expr_compile;</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_FOREACH(Args[1],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Arg,<sp/>MLListT))<sp/>{</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__args__expr__t" kindref="compound">mlc_args_expr_t</ref><sp/>*ArgsExpr<sp/>=<sp/>xnew(<ref refid="structmlc__args__expr__t" kindref="compound">mlc_args_expr_t</ref>,<sp/>ml_list_length(Arg)<sp/>+<sp/>1,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsExpr-&gt;Source<sp/>=<sp/>Child-&gt;Source;</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsExpr-&gt;StartLine<sp/>=<sp/>Child-&gt;StartLine;</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsExpr-&gt;EndLine<sp/>=<sp/>Child-&gt;EndLine;</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsExpr-&gt;compile<sp/>=<sp/>ml_args_expr_compile;</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Arg,<sp/>Iter2)<sp/>{</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter2-&gt;Value,<sp/>MLExprT))<sp/>{</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CompilerError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>expression<sp/>not<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Iter2-&gt;Value)-&gt;Name);</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsExpr-&gt;Args[J++]<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Iter2-&gt;Value;</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Arg<sp/>=<sp/>ml_expr_value((<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)ArgsExpr);</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLExprT);</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Expr-&gt;Subst,<sp/>ml_string_value(Iter-&gt;Value),<sp/>Arg);</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++I;</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_expr_value((<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="2730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"></highlight></codeline>
<codeline lineno="2732"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;subst&quot;</highlight><highlight class="normal">,<sp/>MLExprT,<sp/>MLListT,<sp/>MLListT)<sp/>{</highlight></codeline>
<codeline lineno="2734"><highlight class="comment">//&lt;Expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2735"><highlight class="normal"></highlight><highlight class="comment">//&lt;Names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2736"><highlight class="normal"></highlight><highlight class="comment">//&lt;Subs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2737"><highlight class="normal"></highlight><highlight class="comment">//&gt;expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2738"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>expression<sp/>which<sp/>substitutes<sp/>macro<sp/>references<sp/>to<sp/>:mini:`:$Name/i`<sp/>with<sp/>the<sp/>corresponding<sp/>expressions<sp/>:mini:`Sub/i`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_list_length(Args[2])<sp/>&lt;<sp/>ml_list_length(Args[1]))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;MacroError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Insufficient<sp/>arguments<sp/>to<sp/>macro&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__subst__expr__t" kindref="compound">mlc_subst_expr_t</ref><sp/>*Expr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__subst__expr__t" kindref="compound">mlc_subst_expr_t</ref>);</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/>Child-&gt;Source;</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>Child-&gt;StartLine;</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;EndLine<sp/>=<sp/>Child-&gt;EndLine;</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_subst_expr_compile;</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__list__node__t" kindref="compound">ml_list_node_t</ref><sp/>*Node<sp/>=<sp/>((<ref refid="structml__list__t" kindref="compound">ml_list_t</ref><sp/>*)Args[2])-&gt;Head;</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[1],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter-&gt;Value,<sp/>MLStringT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;MacroError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Substitution<sp/>name<sp/>must<sp/>be<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Node-&gt;Value,<sp/>MLExprT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;MacroError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Substitution<sp/>value<sp/>must<sp/>be<sp/>expr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Expr-&gt;Subst,<sp/>ml_string_value(Iter-&gt;Value),<sp/>Node-&gt;Value);</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node<sp/>=<sp/>Node-&gt;Next;</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_expr_value((<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="2755"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"></highlight></codeline>
<codeline lineno="2757"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;subst&quot;</highlight><highlight class="normal">,<sp/>MLExprT,<sp/>MLMapT)<sp/>{</highlight></codeline>
<codeline lineno="2759"><highlight class="comment">//&lt;Expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2760"><highlight class="normal"></highlight><highlight class="comment">//&lt;Subs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2761"><highlight class="normal"></highlight><highlight class="comment">//&gt;expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2762"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>expression<sp/>which<sp/>substitutes<sp/>macro<sp/>references<sp/>to<sp/>:mini:`:$Name/i`<sp/>with<sp/>the<sp/>corresponding<sp/>expression<sp/>:mini:`Sub/i`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__subst__expr__t" kindref="compound">mlc_subst_expr_t</ref><sp/>*Expr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__subst__expr__t" kindref="compound">mlc_subst_expr_t</ref>);</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/>Child-&gt;Source;</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>Child-&gt;StartLine;</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;EndLine<sp/>=<sp/>Child-&gt;EndLine;</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_subst_expr_compile;</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_MAP_FOREACH(Args[1],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter-&gt;Key,<sp/>MLStringT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;MacroError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Substitution<sp/>name<sp/>must<sp/>be<sp/>a<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter-&gt;Value,<sp/>MLExprT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;MacroError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Substitution<sp/>value<sp/>must<sp/>be<sp/>expr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Expr-&gt;Subst,<sp/>ml_string_value(Iter-&gt;Key),<sp/>Iter-&gt;Value);</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_expr_value((<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="2776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"></highlight></codeline>
<codeline lineno="2778" refid="structml__resolve__expr__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__value__expr__t" kindref="compound">mlc_parent_value_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[2];</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags;</highlight></codeline>
<codeline lineno="2782"><highlight class="normal">}<sp/><ref refid="structml__resolve__expr__frame__t" kindref="compound">ml_resolve_expr_frame_t</ref>;</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"></highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_resolve_expr_compile3(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__resolve__expr__frame__t" kindref="compound">ml_resolve_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__value__expr__t" kindref="compound">mlc_parent_value_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>{</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*LoadInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_LOAD,<sp/>1);</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LoadInst[1].Value<sp/>=<sp/>Frame-&gt;Args[0];</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*ResolveInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_RESOLVE,<sp/>1);</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResolveInst[1].Value<sp/>=<sp/>Expr-&gt;Value;</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags<sp/>=<sp/>Frame-&gt;Flags;</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>MLCF_CONSTANT)<sp/>{</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_RETURN(Value);</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*ValueInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_LOAD_PUSH,<sp/>1);</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_typeof(Value)<sp/>==<sp/>MLUninitializedT)<sp/>{</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_uninitialized_use(Value,<sp/>&amp;ValueInst[1].Value);</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueInst[1].Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*ValueInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_LOAD,<sp/>1);</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_typeof(Value)<sp/>==<sp/>MLUninitializedT)<sp/>{</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_uninitialized_use(Value,<sp/>&amp;ValueInst[1].Value);</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueInst[1].Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_resolve_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__resolve__expr__frame__t" kindref="compound">ml_resolve_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__value__expr__t" kindref="compound">mlc_parent_value_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value)<sp/>{</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Args[1]<sp/>=<sp/>Expr-&gt;Value;</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;AllowErrors<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_resolve_expr_compile3;</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Function,<sp/>SymbolMethod,<sp/>2,<sp/>Frame-&gt;Args);</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*ResolveInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_RESOLVE,<sp/>1);</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResolveInst[1].Value<sp/>=<sp/>Expr-&gt;Value;</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"></highlight></codeline>
<codeline lineno="2842"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_resolve_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__parent__value__expr__t" kindref="compound">mlc_parent_value_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structml__resolve__expr__frame__t" kindref="compound">ml_resolve_expr_frame_t</ref>,<sp/>ml_resolve_expr_compile2);</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;Line<sp/>=<sp/>Expr-&gt;StartLine;</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>MLCF_CONSTANT);</highlight></codeline>
<codeline lineno="2848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"></highlight></codeline>
<codeline lineno="2850" refid="structml__string__expr__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__string__expr__t" kindref="compound">mlc_string_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__string__part__t" kindref="compound">mlc_string_part_t</ref><sp/>*Part;</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child;</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumArgs,<sp/>Flags;</highlight></codeline>
<codeline lineno="2855"><highlight class="normal">}<sp/><ref refid="structml__string__expr__frame__t" kindref="compound">ml_string_expr_frame_t</ref>;</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"></highlight></codeline>
<codeline lineno="2857"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_string_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__string__expr__frame__t" kindref="compound">ml_string_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Frame-&gt;Child;</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child)<sp/>{</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Frame-&gt;NumArgs;</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child-&gt;Next;</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>MLCF_PUSH);</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__string__part__t" kindref="compound">mlc_string_part_t</ref><sp/>*Part<sp/>=<sp/>Frame-&gt;Part;</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;NumArgs<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*AddInst<sp/>=<sp/>MLC_EMIT(Part-&gt;Line,<sp/>MLI_STRING_ADD,<sp/>1);</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddInst[1].Count<sp/>=<sp/>Frame-&gt;NumArgs;</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Part-&gt;Line,<sp/>MLI_STRING_ADD_1,<sp/>0);</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Top<sp/>-=<sp/>Frame-&gt;NumArgs;</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((Part<sp/>=<sp/>Part-&gt;Next))<sp/>{</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Part-&gt;Length)<sp/>{</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*AddInst<sp/>=<sp/>MLC_EMIT(Part-&gt;Line,<sp/>MLI_STRING_ADDS,<sp/>2);</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddInst[1].Count<sp/>=<sp/>Part-&gt;Length;</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddInst[2].Chars<sp/>=<sp/>Part-&gt;Chars;</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Part<sp/>=<sp/>Part;</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Part-&gt;Child;</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child-&gt;Next;</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;NumArgs<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>MLCF_PUSH);</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__string__expr__t" kindref="compound">mlc_string_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_STRING_END,<sp/>0);</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_STRING_POP,<sp/>0);</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Function-&gt;Top;</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="2894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"></highlight></codeline>
<codeline lineno="2896"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_string_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__string__expr__t" kindref="compound">mlc_string_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_STRING_NEW,<sp/>0);</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__string__part__t" kindref="compound">mlc_string_part_t</ref><sp/>*Part<sp/>=<sp/>Expr-&gt;Parts;<sp/>Part;<sp/>Part<sp/>=<sp/>Part-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Part-&gt;Length)<sp/>{</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*AddInst<sp/>=<sp/>MLC_EMIT(Part-&gt;Line,<sp/>MLI_STRING_ADDS,<sp/>2);</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddInst[1].Count<sp/>=<sp/>Part-&gt;Length;</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddInst[2].Chars<sp/>=<sp/>Part-&gt;Chars;</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structml__string__expr__frame__t" kindref="compound">ml_string_expr_frame_t</ref>,<sp/>ml_string_expr_compile2);</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Part<sp/>=<sp/>Part;</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Part-&gt;Child;</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Child<sp/>=<sp/>Child-&gt;Next;</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;NumArgs<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Child,<sp/>MLCF_PUSH);</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_STRING_END,<sp/>0);</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_STRING_POP,<sp/>0);</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Function-&gt;Top;</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="2922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"></highlight></codeline>
<codeline lineno="2924" refid="structmlc__fun__expr__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__fun__expr__t" kindref="compound">mlc_fun_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__closure__info__t" kindref="compound">ml_closure_info_t</ref><sp/>*Info;</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*SubFunction;</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__param__t" kindref="compound">mlc_param_t</ref><sp/>*Param;</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HasParamTypes,<sp/>Index,<sp/>Flags;</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_opcode_t<sp/>OpCode;</highlight></codeline>
<codeline lineno="2931"><highlight class="normal">}<sp/><ref refid="structmlc__fun__expr__frame__t" kindref="compound">mlc_fun_expr_frame_t</ref>;</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"></highlight></codeline>
<codeline lineno="2933"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_fun_expr_compile4(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__fun__expr__frame__t" kindref="compound">mlc_fun_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__fun__expr__t" kindref="compound">mlc_fun_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__param__t" kindref="compound">mlc_param_t</ref><sp/>*Param<sp/>=<sp/>Frame-&gt;Param;</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>Frame-&gt;Index;</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*TypeInst<sp/>=<sp/>MLC_EMIT(Param-&gt;Line,<sp/>MLI_PARAM_TYPE,<sp/>1);</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/>TypeInst[1].Count<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((Param<sp/>=<sp/>Param-&gt;Next))<sp/>{</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Index;</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Param-&gt;Type)<sp/>{</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Param<sp/>=<sp/>Param;</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Index<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Param-&gt;Type,<sp/>0);</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH))<sp/>{</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_POP,<sp/>0);</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Function-&gt;Top;</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="2953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"></highlight></codeline>
<codeline lineno="2955"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_fun_expr_compile3(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__fun__expr__frame__t" kindref="compound">mlc_fun_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__fun__expr__t" kindref="compound">mlc_fun_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__closure__info__t" kindref="compound">ml_closure_info_t</ref><sp/>*Info<sp/>=<sp/>Frame-&gt;Info;</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*SubFunction<sp/>=<sp/>Frame-&gt;SubFunction;</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumUpValues<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__upvalue__t" kindref="compound">mlc_upvalue_t</ref><sp/>*UpValue<sp/>=<sp/>SubFunction-&gt;UpValues;<sp/>UpValue;<sp/>UpValue<sp/>=<sp/>UpValue-&gt;Next)<sp/>++NumUpValues;</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*ClosureInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>Frame-&gt;OpCode,<sp/>NumUpValues<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;NumUpValues<sp/>=<sp/>NumUpValues;</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/>ClosureInst[1].ClosureInfo<sp/>=<sp/>Info;</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__upvalue__t" kindref="compound">mlc_upvalue_t</ref><sp/>*UpValue<sp/>=<sp/>SubFunction-&gt;UpValues;<sp/>UpValue;<sp/>UpValue<sp/>=<sp/>UpValue-&gt;Next)<sp/>ClosureInst[++Index].Count<sp/>=<sp/>UpValue-&gt;Index;</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;HasParamTypes)<sp/>{</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__param__t" kindref="compound">mlc_param_t</ref><sp/>*Param<sp/>=<sp/>Expr-&gt;Params;</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!Param-&gt;Type)<sp/>{</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param<sp/>=<sp/>Param-&gt;Next;</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Index;</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Param<sp/>=<sp/>Param;</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Index<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_fun_expr_compile4;</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Param-&gt;Type,<sp/>0);</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="2986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"></highlight></codeline>
<codeline lineno="2988"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_fun_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__fun__expr__frame__t" kindref="compound">mlc_fun_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__fun__expr__t" kindref="compound">mlc_fun_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__closure__info__t" kindref="compound">ml_closure_info_t</ref><sp/>*Info<sp/>=<sp/>Frame-&gt;Info;</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*SubFunction<sp/>=<sp/>Frame-&gt;SubFunction;</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Return<sp/>=<sp/>ml_inst_alloc(SubFunction,<sp/>Expr-&gt;EndLine,<sp/>MLI_RETURN,<sp/>0);</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_LINK(SubFunction-&gt;Returns,<sp/>Info-&gt;Return);</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Halt<sp/>=<sp/>SubFunction-&gt;Next;</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>**UpValueSlot<sp/>=<sp/>&amp;SubFunction-&gt;Decls;</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(UpValueSlot[0])<sp/>UpValueSlot<sp/>=<sp/>&amp;UpValueSlot[0]-&gt;Next;</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__upvalue__t" kindref="compound">mlc_upvalue_t</ref><sp/>*UpValue<sp/>=<sp/>SubFunction-&gt;UpValues;<sp/>UpValue;<sp/>UpValue<sp/>=<sp/>UpValue-&gt;Next,<sp/>++Index)<sp/>{</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref>);</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Source.Name<sp/>=<sp/>Function-&gt;Source;</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Source.Line<sp/>=<sp/>UpValue-&gt;Line;</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Ident<sp/>=<sp/>UpValue-&gt;Decl-&gt;Ident;</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Hash<sp/>=<sp/>UpValue-&gt;Decl-&gt;Hash;</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Value<sp/>=<sp/>UpValue-&gt;Decl-&gt;Value;</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Index<sp/>=<sp/>~Index;</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpValueSlot[0]<sp/>=<sp/>Decl;</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpValueSlot<sp/>=<sp/>&amp;Decl-&gt;Next;</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;FrameSize<sp/>=<sp/>SubFunction-&gt;Size;</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SubFunction-&gt;UpValues<sp/>||<sp/>Frame-&gt;HasParamTypes<sp/>||<sp/>Expr-&gt;ReturnType)<sp/>{</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expr-&gt;ReturnType)<sp/>{</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;OpCode<sp/>=<sp/>MLI_CLOSURE_TYPED;</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_fun_expr_compile3;</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;ReturnType,<sp/>0);</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;OpCode<sp/>=<sp/>MLI_CLOSURE;</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_fun_expr_compile3(Function,<sp/>NULL,<sp/>Frame);</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Info-&gt;NumUpValues<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Closure<sp/>=<sp/>ml_closure(Info);</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*LoadInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_LOAD_PUSH,<sp/>1);</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LoadInst[1].Value<sp/>=<sp/>Closure;</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*LoadInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_LOAD,<sp/>1);</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LoadInst[1].Value<sp/>=<sp/>Closure;</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3037"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"></highlight></codeline>
<codeline lineno="3039"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_subfunction_run(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*SubFunction,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function<sp/>=<sp/>SubFunction-&gt;Up;</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="3042"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"></highlight></codeline>
<codeline lineno="3044"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_fun_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__fun__expr__t" kindref="compound">mlc_fun_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*SubFunction<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref>);</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/>SubFunction-&gt;Base.Type<sp/>=<sp/>MLCompilerFunctionT;</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/>SubFunction-&gt;Base.Caller<sp/>=<sp/>(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Function;</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/>SubFunction-&gt;Base.Context<sp/>=<sp/>Function-&gt;Base.Context;</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/>SubFunction-&gt;Base.run<sp/>=<sp/>(ml_state_fn)mlc_function_run;</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/>SubFunction-&gt;Compiler<sp/>=<sp/>Function-&gt;Compiler;</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/>SubFunction-&gt;Eval<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/>SubFunction-&gt;Up<sp/>=<sp/>Function;</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/>SubFunction-&gt;Source<sp/>=<sp/>Expr-&gt;Source;</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/>SubFunction-&gt;Old<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/>SubFunction-&gt;It<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__closure__info__t" kindref="compound">ml_closure_info_t</ref><sp/>*Info<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__closure__info__t" kindref="compound">ml_closure_info_t</ref>);</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Source<sp/>=<sp/>Expr-&gt;Source;</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;StartLine<sp/>=<sp/>Expr-&gt;StartLine;</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;EndLine<sp/>=<sp/>Expr-&gt;EndLine;</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expr-&gt;Name)<sp/>{</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Info-&gt;Name<sp/>=<sp/>Expr-&gt;Name;</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GC_asprintf((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)&amp;Info-&gt;Name,<sp/></highlight><highlight class="stringliteral">&quot;@%s:%d&quot;</highlight><highlight class="normal">,<sp/>Info-&gt;Source,<sp/>Info-&gt;StartLine);</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumParams<sp/>=<sp/>0,<sp/>HasParamTypes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>**DeclSlot<sp/>=<sp/>&amp;SubFunction-&gt;Decls;</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__param__t" kindref="compound">mlc_param_t</ref><sp/>*Param<sp/>=<sp/>Expr-&gt;Params;<sp/>Param;<sp/>Param<sp/>=<sp/>Param-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/>DeclSlot[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref>);</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Source.Name<sp/>=<sp/>Function-&gt;Source;</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Source.Line<sp/>=<sp/>Param-&gt;Line;</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Ident<sp/>=<sp/>Param-&gt;Ident;</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Hash<sp/>=<sp/>ml_ident_hash(Param-&gt;Ident);</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Index<sp/>=<sp/>NumParams++;</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Param-&gt;Kind)<sp/>{</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_PARAM_EXTRA:</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Info-&gt;Flags<sp/>|=<sp/>ML_CLOSURE_EXTRA_ARGS;</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_PARAM_NAMED:</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Info-&gt;Flags<sp/>|=<sp/>ML_CLOSURE_NAMED_ARGS;</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_PARAM_BYREF:</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Flags<sp/>|=<sp/>MLC_DECL_BYREF;</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Info-&gt;Params,<sp/>Param-&gt;Ident,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(intptr_t)NumParams);</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ML_PARAM_ASVAR:</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Decl-&gt;Flags<sp/>|=<sp/>MLC_DECL_ASVAR;</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Info-&gt;Params,<sp/>Param-&gt;Ident,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(intptr_t)NumParams);</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Info-&gt;Params,<sp/>Param-&gt;Ident,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(intptr_t)NumParams);</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Param-&gt;Type)<sp/>HasParamTypes<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeclSlot<sp/>=<sp/>&amp;Decl-&gt;Next;</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_RELAX_NAMES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Flags<sp/>|=<sp/>ML_CLOSURE_RELAX_NAMES;</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;NumParams<sp/>=<sp/>NumParams;</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/>SubFunction-&gt;Top<sp/>=<sp/>SubFunction-&gt;Size<sp/>=<sp/>NumParams;</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/>SubFunction-&gt;Next<sp/>=<sp/>anew(<ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref>,<sp/>128);</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/>SubFunction-&gt;Space<sp/>=<sp/>126;</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/>SubFunction-&gt;Returns<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/>mlc_frame_alloc(SubFunction,<sp/>0,<sp/>ml_subfunction_run);</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Decls<sp/>=<sp/>SubFunction-&gt;Decls;</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Entry<sp/>=<sp/>SubFunction-&gt;Next;</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__fun__expr__frame__t" kindref="compound">mlc_fun_expr_frame_t</ref>,<sp/>ml_fun_expr_compile2);</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Info<sp/>=<sp/>Info;</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;HasParamTypes<sp/>=<sp/>HasParamTypes;</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;SubFunction<sp/>=<sp/>SubFunction;</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/>mlc_compile(SubFunction,<sp/>Expr-&gt;Body,<sp/>MLCF_RETURN);</highlight></codeline>
<codeline lineno="3114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"></highlight></codeline>
<codeline lineno="3116" refid="structmlc__default__expr__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__default__expr__t" kindref="compound">mlc_default_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*AndInst;</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags;</highlight></codeline>
<codeline lineno="3120"><highlight class="normal">}<sp/><ref refid="structmlc__default__expr__frame__t" kindref="compound">mlc_default_expr_frame_t</ref>;</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"></highlight></codeline>
<codeline lineno="3122"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_default_expr_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__default__expr__frame__t" kindref="compound">mlc_default_expr_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__default__expr__t" kindref="compound">mlc_default_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags<sp/>=<sp/>Frame-&gt;Flags;</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*AssignInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>Expr-&gt;Flags<sp/>&amp;<sp/>ML_PARAM_ASVAR<sp/>?<sp/>MLI_VAR<sp/>:<sp/>MLI_LET,<sp/>1);</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/>AssignInst[1].Count<sp/>=<sp/>Expr-&gt;Index<sp/>-<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;AndInst[1].Inst<sp/>=<sp/>Function-&gt;Next;</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Next,<sp/>Flags);</highlight></codeline>
<codeline lineno="3130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"></highlight></codeline>
<codeline lineno="3132"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_default_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__default__expr__t" kindref="compound">mlc_default_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__default__expr__frame__t" kindref="compound">mlc_default_expr_frame_t</ref>,<sp/>ml_default_expr_compile2);</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*LocalInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_LOCAL,<sp/>1);</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/>LocalInst[1].Count<sp/>=<sp/>Expr-&gt;Index<sp/>-<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;AndInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_OR,<sp/>1);</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Expr-&gt;Child,<sp/>0);</highlight></codeline>
<codeline lineno="3140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"></highlight></codeline>
<codeline lineno="3142"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_upvalue_find(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl,<sp/><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Origin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line)<sp/>{</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function<sp/>==<sp/>Origin)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Decl-&gt;Index;</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__upvalue__t" kindref="compound">mlc_upvalue_t</ref><sp/>**UpValueSlot<sp/>=<sp/>&amp;Function-&gt;UpValues;</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(UpValueSlot[0])<sp/>{</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(UpValueSlot[0]-&gt;Decl<sp/>==<sp/>Decl)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>~Index;</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpValueSlot<sp/>=<sp/>&amp;UpValueSlot[0]-&gt;Next;</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Index;</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__upvalue__t" kindref="compound">mlc_upvalue_t</ref><sp/>*UpValue<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__upvalue__t" kindref="compound">mlc_upvalue_t</ref>);</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/>UpValue-&gt;Decl<sp/>=<sp/>Decl;</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/>UpValue-&gt;Index<sp/>=<sp/>ml_upvalue_find(Function-&gt;Up,<sp/>Decl,<sp/>Origin,<sp/>Line);</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/>UpValue-&gt;Line<sp/>=<sp/>Line;</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/>UpValueSlot[0]<sp/>=<sp/>UpValue;</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>~Index;</highlight></codeline>
<codeline lineno="3157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"></highlight></codeline>
<codeline lineno="3159"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_ident_expr_finish(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__ident__expr__t" kindref="compound">mlc_ident_expr_t</ref><sp/>*Expr,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>MLCF_CONSTANT)<sp/>MLC_RETURN(Value);</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*ValueInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_LOAD,<sp/>1);</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_typeof(Value)<sp/>==<sp/>MLUninitializedT)<sp/>{</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_uninitialized_use(Value,<sp/>&amp;ValueInst[1].Value);</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/>ValueInst[1].Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueInst-&gt;Opcode<sp/>=<sp/>MLI_LOAD_PUSH;</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="3171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"></highlight></codeline>
<codeline lineno="3173"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_ident_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__ident__expr__t" kindref="compound">mlc_ident_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Hash<sp/>=<sp/>ml_ident_hash(Expr-&gt;Ident);</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;#&lt;%s&gt;<sp/>-&gt;<sp/>%ld\n&quot;,<sp/>Expr-&gt;Ident,<sp/>Hash);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*UpFunction<sp/>=<sp/>Function;<sp/>UpFunction;<sp/>UpFunction<sp/>=<sp/>UpFunction-&gt;Up)<sp/>{</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/>UpFunction-&gt;Decls;<sp/>Decl;<sp/>Decl<sp/>=<sp/>Decl-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hash<sp/>==<sp/>Decl-&gt;Hash<sp/>&amp;&amp;<sp/>!strcmp(Decl-&gt;Ident,<sp/>Expr-&gt;Ident))<sp/>{</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Decl-&gt;Flags<sp/>==<sp/>MLC_DECL_CONSTANT)<sp/>{</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Decl-&gt;Value)<sp/>Decl-&gt;Value<sp/>=<sp/>ml_uninitialized(Decl-&gt;Ident,<sp/>(<ref refid="structml__source__t" kindref="compound">ml_source_t</ref>){Expr-&gt;Source,<sp/>Expr-&gt;StartLine});</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_ident_expr_finish(Function,<sp/>Expr,<sp/>Decl-&gt;Value,<sp/>Flags);</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>ml_upvalue_find(Function,<sp/>Decl,<sp/>UpFunction,<sp/>Expr-&gt;StartLine);</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Decl-&gt;Flags<sp/>&amp;<sp/>MLC_DECL_FORWARD)<sp/>Decl-&gt;Flags<sp/>|=<sp/>MLC_DECL_BACKFILL;</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*LocalInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_UPVALUE,<sp/>1);</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalInst[1].Count<sp/>=<sp/>~Index;</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Decl-&gt;Flags<sp/>&amp;<sp/>MLC_DECL_FORWARD)<sp/>{</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*LocalInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_LOCALI,<sp/>2);</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalInst[1].Count<sp/>=<sp/>Index<sp/>-<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalInst[2].Chars<sp/>=<sp/>Decl-&gt;Ident;</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>MLCF_LOCAL)<sp/>{</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_RETURN(ml_integer(Index));</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*LocalInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_LOCAL_PUSH,<sp/>1);</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalInst[1].Count<sp/>=<sp/>Index<sp/>-<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref><sp/>*LocalInst<sp/>=<sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_LOCAL,<sp/>1);</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalInst[1].Count<sp/>=<sp/>Index<sp/>-<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>MLCF_PUSH)<sp/>{</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EMIT(Expr-&gt;StartLine,<sp/>MLI_PUSH,<sp/>0);</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mlc_inc_top(Function);</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_RETURN(NULL);</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)stringmap_search(Function-&gt;Compiler-&gt;Vars,<sp/>Expr-&gt;Ident);</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Value)<sp/>Value<sp/>=<sp/>Function-&gt;Compiler-&gt;GlobalGet(Function-&gt;Compiler-&gt;Globals,<sp/>Expr-&gt;Ident,<sp/>Expr-&gt;Source,<sp/>Expr-&gt;StartLine,<sp/>Function-&gt;Eval);</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Value)<sp/>{</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_EXPR_ERROR(Expr,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CompilerError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Identifier<sp/>%s<sp/>not<sp/>declared&quot;</highlight><highlight class="normal">,<sp/>Expr-&gt;Ident));</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>MLC_EXPR_ERROR(Expr,<sp/>Value);</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_ident_expr_finish(Function,<sp/>Expr,<sp/>Value,<sp/>Flags);</highlight></codeline>
<codeline lineno="3221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"></highlight></codeline>
<codeline lineno="3223"><highlight class="normal">ML_FUNCTION(MLIdentExpr)<sp/>{</highlight></codeline>
<codeline lineno="3225"><highlight class="comment">//@macro::ident</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3226"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name:string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3227"><highlight class="normal"></highlight><highlight class="comment">//&gt;expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>identifier<sp/>expression.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__ident__expr__t" kindref="compound">mlc_ident_expr_t</ref><sp/>*Expr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__ident__expr__t" kindref="compound">mlc_ident_expr_t</ref>);</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_ident_expr_compile;</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;macro&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;EndLine<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Ident<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_expr_value((<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="3238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"></highlight></codeline>
<codeline lineno="3240"><highlight class="normal">ML_FUNCTION(MLValueExpr)<sp/>{</highlight></codeline>
<codeline lineno="3242"><highlight class="comment">//@macro::value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3243"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3244"><highlight class="normal"></highlight><highlight class="comment">//&gt;expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>value<sp/>expression.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Args[0]<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref>);</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_nil_expr_compile;</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;macro&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;EndLine<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_expr_value(Expr);</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__value__expr__t" kindref="compound">mlc_value_expr_t</ref><sp/>*Expr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__value__expr__t" kindref="compound">mlc_value_expr_t</ref>);</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_value_expr_compile;</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;macro&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;EndLine<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_expr_value((<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"></highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_macro_subst(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**Names,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Exprs)<sp/>{</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__subst__expr__t" kindref="compound">mlc_subst_expr_t</ref><sp/>*Expr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__subst__expr__t" kindref="compound">mlc_subst_expr_t</ref>);</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/>Child-&gt;Source;</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>Child-&gt;StartLine;</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;EndLine<sp/>=<sp/>Child-&gt;EndLine;</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_subst_expr_compile;</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg<sp/>=<sp/>Exprs[I];</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Arg,<sp/>MLListT))<sp/>{</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__args__expr__t" kindref="compound">mlc_args_expr_t</ref><sp/>*ArgsExpr<sp/>=<sp/>xnew(<ref refid="structmlc__args__expr__t" kindref="compound">mlc_args_expr_t</ref>,<sp/>ml_list_length(Arg)<sp/>+<sp/>1,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsExpr-&gt;Source<sp/>=<sp/>Child-&gt;Source;</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsExpr-&gt;StartLine<sp/>=<sp/>Child-&gt;StartLine;</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsExpr-&gt;EndLine<sp/>=<sp/>Child-&gt;EndLine;</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsExpr-&gt;compile<sp/>=<sp/>ml_args_expr_compile;</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Arg,<sp/>Iter2)<sp/>{</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter2-&gt;Value,<sp/>MLExprT))<sp/>{</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CompilerError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>expression<sp/>not<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Iter2-&gt;Value)-&gt;Name);</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsExpr-&gt;Args[J++]<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Iter2-&gt;Value;</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Arg<sp/>=<sp/>ml_expr_value((<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)ArgsExpr);</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Expr-&gt;Subst,<sp/>Names[I],<sp/>Arg);</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_expr_value((<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="3292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"></highlight></codeline>
<codeline lineno="3294" refid="structml__macro__subst__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__param__t" kindref="compound">mlc_param_t</ref><sp/>*Params;</highlight></codeline>
<codeline lineno="3298"><highlight class="normal">}<sp/><ref refid="structml__macro__subst__t" kindref="compound">ml_macro_subst_t</ref>;</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"></highlight></codeline>
<codeline lineno="3300"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_macro_subst_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__macro__subst__t" kindref="compound">ml_macro_subst_t</ref><sp/>*Subst,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__subst__expr__t" kindref="compound">mlc_subst_expr_t</ref><sp/>*Expr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__subst__expr__t" kindref="compound">mlc_subst_expr_t</ref>);</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Subst-&gt;Expr;</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/>Child-&gt;Source;</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>Child-&gt;StartLine;</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;EndLine<sp/>=<sp/>Child-&gt;EndLine;</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_subst_expr_compile;</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__param__t" kindref="compound">mlc_param_t</ref><sp/>*Param<sp/>=<sp/>Subst-&gt;Params;<sp/>Param;<sp/>Param<sp/>=<sp/>Param-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(I<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(I,<sp/>MLExprT);</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Expr-&gt;Subst,<sp/>Param-&gt;Ident,<sp/>Args[I]);</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++I;</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_expr_value((<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr));</highlight></codeline>
<codeline lineno="3316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"></highlight></codeline>
<codeline lineno="3318"><highlight class="normal">ML_TYPE(MLMacroSubstT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;macro::subst&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_macro_subst_call</highlight></codeline>
<codeline lineno="3320"><highlight class="normal">);</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"></highlight></codeline>
<codeline lineno="3322"><highlight class="normal">ML_FUNCTION(MLMacroSubst)<sp/>{</highlight></codeline>
<codeline lineno="3324"><highlight class="comment">//@macro::subst</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3325"><highlight class="normal"></highlight><highlight class="comment">//&lt;Expr:expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3326"><highlight class="normal"></highlight><highlight class="comment">//&gt;macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3327"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>macro<sp/>which<sp/>substitutes<sp/>its<sp/>arguments<sp/>into<sp/>:mini:`Expr`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLExprT);</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__fun__expr__t" kindref="compound">mlc_fun_expr_t</ref><sp/>*FunExpr<sp/>=<sp/>(<ref refid="structmlc__fun__expr__t" kindref="compound">mlc_fun_expr_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FunExpr-&gt;compile<sp/>!=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_fun_expr_compile)<sp/>{</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;MacroError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Function<sp/>expression<sp/>required<sp/>for<sp/>substitution&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__macro__subst__t" kindref="compound">ml_macro_subst_t</ref><sp/>*Subst<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__macro__subst__t" kindref="compound">ml_macro_subst_t</ref>);</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/>Subst-&gt;Type<sp/>=<sp/>MLMacroSubstT;</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/>Subst-&gt;Expr<sp/>=<sp/>FunExpr-&gt;Body;</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/>Subst-&gt;Params<sp/>=<sp/>FunExpr-&gt;Params;</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__value__expr__t" kindref="compound">mlc_value_expr_t</ref><sp/>*Expr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__value__expr__t" kindref="compound">mlc_value_expr_t</ref>);</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_value_expr_compile;</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/>FunExpr-&gt;Source;</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>FunExpr-&gt;StartLine;</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;EndLine<sp/>=<sp/>FunExpr-&gt;EndLine;</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Value<sp/>=<sp/>ml_macro((<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Subst);</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_expr_value((<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="3345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"></highlight></codeline>
<codeline lineno="3347"><highlight class="normal">ML_METHOD_DECL(VarMethod,<sp/></highlight><highlight class="stringliteral">&quot;var&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3348"><highlight class="normal">ML_METHOD_DECL(RefMethod,<sp/></highlight><highlight class="stringliteral">&quot;ref&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3349"><highlight class="normal">ML_METHOD_DECL(LetMethod,<sp/></highlight><highlight class="stringliteral">&quot;let&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"></highlight></codeline>
<codeline lineno="3351"><highlight class="normal">ML_FUNCTION(MLFunExpr)<sp/>{</highlight></codeline>
<codeline lineno="3353"><highlight class="comment">//@macro::fun</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3354"><highlight class="normal"></highlight><highlight class="comment">//&lt;Params:map[string,method|nil]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3355"><highlight class="normal"></highlight><highlight class="comment">//&gt;expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3356"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>function<sp/>expression.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLMapT);</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>MLExprT);</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__param__t" kindref="compound">mlc_param_t</ref><sp/>*Params<sp/>=<sp/>NULL,<sp/>**Slot<sp/>=<sp/>&amp;Params;</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_MAP_FOREACH(Args[0],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__param__t" kindref="compound">mlc_param_t</ref><sp/>*Param<sp/>=<sp/>Slot[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__param__t" kindref="compound">mlc_param_t</ref>);</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot<sp/>=<sp/>&amp;Param-&gt;Next;</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter-&gt;Key,<sp/>MLStringT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Parameter<sp/>name<sp/>must<sp/>be<sp/>a<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Ident<sp/>=<sp/>ml_string_value(Iter-&gt;Key);</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iter-&gt;Value<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLListT)<sp/>{</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Kind<sp/>=<sp/>ML_PARAM_EXTRA;</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iter-&gt;Value<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLMapT)<sp/>{</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Kind<sp/>=<sp/>ML_PARAM_NAMED;</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iter-&gt;Value<sp/>==<sp/>RefMethod)<sp/>{</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Kind<sp/>=<sp/>ML_PARAM_BYREF;</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iter-&gt;Value<sp/>==<sp/>VarMethod)<sp/>{</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Kind<sp/>=<sp/>ML_PARAM_ASVAR;</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__fun__expr__t" kindref="compound">mlc_fun_expr_t</ref><sp/>*Expr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__fun__expr__t" kindref="compound">mlc_fun_expr_t</ref>);</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_fun_expr_compile;</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;macro&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;EndLine<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Params<sp/>=<sp/>Params;</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Body<sp/>=<sp/>ml_delegate_expr(Args[1]);</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_expr_value((<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="3384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"></highlight></codeline>
<codeline lineno="3386" refid="structmlc__block__builder__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__block__expr__t" kindref="compound">mlc_block_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>**ExprSlot;</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>**VarsSlot;</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>**LetsSlot;</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>**DefsSlot;</highlight></codeline>
<codeline lineno="3393"><highlight class="normal">}<sp/><ref refid="structmlc__block__builder__t" kindref="compound">mlc_block_builder_t</ref>;</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"></highlight></codeline>
<codeline lineno="3395"><highlight class="normal">ML_TYPE(MLBlockBuilderT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;block-builder&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3397"><highlight class="comment">//<sp/>Utility<sp/>object<sp/>for<sp/>building<sp/>a<sp/>block<sp/>expression.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3398"><highlight class="normal"></highlight></codeline>
<codeline lineno="3399"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;var&quot;</highlight><highlight class="normal">,<sp/>MLBlockBuilderT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="3401"><highlight class="comment">//&lt;Builder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3402"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3403"><highlight class="normal"></highlight><highlight class="comment">//&gt;blockbuilder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3404"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>:mini:`var`-declaration<sp/>to<sp/>a<sp/>block.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__block__builder__t" kindref="compound">mlc_block_builder_t</ref><sp/>*Builder<sp/>=<sp/>(<ref refid="structmlc__block__builder__t" kindref="compound">mlc_block_builder_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Builder-&gt;VarsSlot[0]<sp/>=<sp/>mlc_local_new(ml_string_value(Args[1]),<sp/>1);</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;VarsSlot<sp/>=<sp/>&amp;Local-&gt;Next;</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>add<sp/>support<sp/>for<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="3410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"></highlight></codeline>
<codeline lineno="3412"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;var&quot;</highlight><highlight class="normal">,<sp/>MLBlockBuilderT,<sp/>MLStringT,<sp/>MLExprT)<sp/>{</highlight></codeline>
<codeline lineno="3414"><highlight class="comment">//&lt;Builder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3415"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3416"><highlight class="normal"></highlight><highlight class="comment">//&lt;Expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3417"><highlight class="normal"></highlight><highlight class="comment">//&gt;blockbuilder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>:mini:`var`-declaration<sp/>to<sp/>a<sp/>block<sp/>with<sp/>initializer<sp/>:mini:`Expr`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__block__builder__t" kindref="compound">mlc_block_builder_t</ref><sp/>*Builder<sp/>=<sp/>(<ref refid="structmlc__block__builder__t" kindref="compound">mlc_block_builder_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Builder-&gt;VarsSlot[0]<sp/>=<sp/>mlc_local_new(ml_string_value(Args[1]),<sp/>1);</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;VarsSlot<sp/>=<sp/>&amp;Local-&gt;Next;</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>add<sp/>support<sp/>for<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*LocalExpr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref>);</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/>LocalExpr-&gt;compile<sp/>=<sp/>ml_var_expr_compile;</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/>LocalExpr-&gt;Source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;macro&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/>LocalExpr-&gt;StartLine<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/>LocalExpr-&gt;EndLine<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/>LocalExpr-&gt;Local<sp/>=<sp/>Local;</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/>LocalExpr-&gt;Child<sp/>=<sp/>ml_delegate_expr(Args[2]);</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;ExprSlot[0]<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)LocalExpr;</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;ExprSlot<sp/>=<sp/>&amp;LocalExpr-&gt;Next;</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="3433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"></highlight></codeline>
<codeline lineno="3435"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;let&quot;</highlight><highlight class="normal">,<sp/>MLBlockBuilderT,<sp/>MLStringT,<sp/>MLExprT)<sp/>{</highlight></codeline>
<codeline lineno="3437"><highlight class="comment">//&lt;Builder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3438"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3439"><highlight class="normal"></highlight><highlight class="comment">//&lt;Expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3440"><highlight class="normal"></highlight><highlight class="comment">//&gt;blockbuilder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3441"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>:mini:`let`-declaration<sp/>to<sp/>a<sp/>block<sp/>with<sp/>initializer<sp/>:mini:`Expr`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__block__builder__t" kindref="compound">mlc_block_builder_t</ref><sp/>*Builder<sp/>=<sp/>(<ref refid="structmlc__block__builder__t" kindref="compound">mlc_block_builder_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Builder-&gt;LetsSlot[0]<sp/>=<sp/>mlc_local_new(ml_string_value(Args[1]),<sp/>1);</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;LetsSlot<sp/>=<sp/>&amp;Local-&gt;Next;</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>add<sp/>support<sp/>for<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref><sp/>*LocalExpr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__local__expr__t" kindref="compound">mlc_local_expr_t</ref>);</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/>LocalExpr-&gt;compile<sp/>=<sp/>ml_let_expr_compile;</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/>LocalExpr-&gt;Source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;macro&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/>LocalExpr-&gt;StartLine<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/>LocalExpr-&gt;EndLine<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/>LocalExpr-&gt;Local<sp/>=<sp/>Local;</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/>LocalExpr-&gt;Child<sp/>=<sp/>ml_delegate_expr(Args[2]);</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;ExprSlot[0]<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)LocalExpr;</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;ExprSlot<sp/>=<sp/>&amp;LocalExpr-&gt;Next;</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="3456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"></highlight></codeline>
<codeline lineno="3458"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;do&quot;</highlight><highlight class="normal">,<sp/>MLBlockBuilderT,<sp/>MLExprT)<sp/>{</highlight></codeline>
<codeline lineno="3460"><highlight class="comment">//&lt;Builder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3461"><highlight class="normal"></highlight><highlight class="comment">//&lt;Expr/i...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3462"><highlight class="normal"></highlight><highlight class="comment">//&gt;blockbuilder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3463"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>each<sp/>expression<sp/>:mini:`Expr/i`<sp/>to<sp/>a<sp/>block.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__block__builder__t" kindref="compound">mlc_block_builder_t</ref><sp/>*Builder<sp/>=<sp/>(<ref refid="structmlc__block__builder__t" kindref="compound">mlc_block_builder_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Delegate<sp/>=<sp/>ml_delegate_expr(Args[I]);</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Builder-&gt;ExprSlot[0]<sp/>=<sp/>Delegate;</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Builder-&gt;ExprSlot<sp/>=<sp/>&amp;Delegate-&gt;Next;</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="3471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"></highlight></codeline>
<codeline lineno="3473"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;end&quot;</highlight><highlight class="normal">,<sp/>MLBlockBuilderT)<sp/>{</highlight></codeline>
<codeline lineno="3475"><highlight class="comment">//&lt;Builder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3476"><highlight class="normal"></highlight><highlight class="comment">//&gt;expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3477"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Finishes<sp/>a<sp/>block<sp/>and<sp/>returns<sp/>it<sp/>as<sp/>an<sp/>expression.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__block__builder__t" kindref="compound">mlc_block_builder_t</ref><sp/>*Builder<sp/>=<sp/>(<ref refid="structmlc__block__builder__t" kindref="compound">mlc_block_builder_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__block__expr__t" kindref="compound">mlc_block_expr_t</ref><sp/>*Expr<sp/>=<sp/>Builder-&gt;Expr;</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>0,<sp/>First<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Expr-&gt;Vars;<sp/>Local;<sp/>Local<sp/>=<sp/>Local-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Local-&gt;Index<sp/>=<sp/>Index++;</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;NumVars<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/>First<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Expr-&gt;Lets;<sp/>Local;<sp/>Local<sp/>=<sp/>Local-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Local-&gt;Index<sp/>=<sp/>Index++;</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;NumLets<sp/>=<sp/>Index<sp/>-<sp/>First;</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/>First<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Expr-&gt;Defs;<sp/>Local;<sp/>Local<sp/>=<sp/>Local-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Local-&gt;Index<sp/>=<sp/>Index++;</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;NumDefs<sp/>=<sp/>Index<sp/>-<sp/>First;</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_expr_value((<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Expr);</highlight></codeline>
<codeline lineno="3496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"></highlight></codeline>
<codeline lineno="3498"><highlight class="normal">ML_FUNCTION(MLBlockBuilder)<sp/>{</highlight></codeline>
<codeline lineno="3500"><highlight class="comment">//@macro::block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3501"><highlight class="normal"></highlight><highlight class="comment">//&gt;blockbuilder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3502"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>block<sp/>builder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__block__expr__t" kindref="compound">mlc_block_expr_t</ref><sp/>*Expr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__block__expr__t" kindref="compound">mlc_block_expr_t</ref>);</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_block_expr_compile;</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;macro&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;EndLine<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__block__builder__t" kindref="compound">mlc_block_builder_t</ref><sp/>*Builder<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__block__builder__t" kindref="compound">mlc_block_builder_t</ref>);</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;Type<sp/>=<sp/>MLBlockBuilderT;</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;ExprSlot<sp/>=<sp/>&amp;Expr-&gt;Child;</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;VarsSlot<sp/>=<sp/>&amp;Expr-&gt;Vars;</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;LetsSlot<sp/>=<sp/>&amp;Expr-&gt;Lets;</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;DefsSlot<sp/>=<sp/>&amp;Expr-&gt;Defs;</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Builder;</highlight></codeline>
<codeline lineno="3516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"></highlight></codeline>
<codeline lineno="3518" refid="structmlc__expr__builder__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr;</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>**ExprSlot;</highlight></codeline>
<codeline lineno="3522"><highlight class="normal">}<sp/><ref refid="structmlc__expr__builder__t" kindref="compound">mlc_expr_builder_t</ref>;</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"></highlight></codeline>
<codeline lineno="3524"><highlight class="normal">ML_TYPE(MLExprBuilderT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;expr-builder&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3526"><highlight class="comment">//<sp/>Utility<sp/>object<sp/>for<sp/>building<sp/>a<sp/>block<sp/>expression.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3527"><highlight class="normal"></highlight></codeline>
<codeline lineno="3528"><highlight class="normal">ML_FUNCTION(MLTupleBuilder)<sp/>{</highlight></codeline>
<codeline lineno="3530"><highlight class="comment">//@macro::tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3531"><highlight class="normal"></highlight><highlight class="comment">//&gt;exprbuilder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>list<sp/>builder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref>);</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_tuple_expr_compile;</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;macro&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;EndLine<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__builder__t" kindref="compound">mlc_expr_builder_t</ref><sp/>*Builder<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__expr__builder__t" kindref="compound">mlc_expr_builder_t</ref>);</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;Type<sp/>=<sp/>MLExprBuilderT;</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;ExprSlot<sp/>=<sp/>&amp;Expr-&gt;Child;</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Builder;</highlight></codeline>
<codeline lineno="3543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"></highlight></codeline>
<codeline lineno="3545"><highlight class="normal">ML_FUNCTION(MLListBuilder)<sp/>{</highlight></codeline>
<codeline lineno="3547"><highlight class="comment">//@macro::list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3548"><highlight class="normal"></highlight><highlight class="comment">//&gt;exprbuilder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3549"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>list<sp/>builder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref>);</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_list_expr_compile;</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;macro&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;EndLine<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__builder__t" kindref="compound">mlc_expr_builder_t</ref><sp/>*Builder<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__expr__builder__t" kindref="compound">mlc_expr_builder_t</ref>);</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;Type<sp/>=<sp/>MLExprBuilderT;</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;ExprSlot<sp/>=<sp/>&amp;Expr-&gt;Child;</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Builder;</highlight></codeline>
<codeline lineno="3560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"></highlight></codeline>
<codeline lineno="3562"><highlight class="normal">ML_FUNCTION(MLMapBuilder)<sp/>{</highlight></codeline>
<codeline lineno="3564"><highlight class="comment">//@macro::map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3565"><highlight class="normal"></highlight><highlight class="comment">//&gt;exprbuilder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3566"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>list<sp/>builder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref>);</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_map_expr_compile;</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;macro&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;EndLine<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__builder__t" kindref="compound">mlc_expr_builder_t</ref><sp/>*Builder<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__expr__builder__t" kindref="compound">mlc_expr_builder_t</ref>);</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;Type<sp/>=<sp/>MLExprBuilderT;</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;ExprSlot<sp/>=<sp/>&amp;Expr-&gt;Child;</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Builder;</highlight></codeline>
<codeline lineno="3577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"></highlight></codeline>
<codeline lineno="3579"><highlight class="normal">ML_FUNCTION(MLCallBuilder)<sp/>{</highlight></codeline>
<codeline lineno="3581"><highlight class="comment">//@macro::call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3582"><highlight class="normal"></highlight><highlight class="comment">//&gt;exprbuilder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3583"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>call<sp/>builder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*Expr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref>);</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_call_expr_compile;</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;macro&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;EndLine<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__builder__t" kindref="compound">mlc_expr_builder_t</ref><sp/>*Builder<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__expr__builder__t" kindref="compound">mlc_expr_builder_t</ref>);</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;Type<sp/>=<sp/>MLExprBuilderT;</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/>Builder-&gt;ExprSlot<sp/>=<sp/>&amp;Expr-&gt;Child;</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Builder;</highlight></codeline>
<codeline lineno="3594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"></highlight></codeline>
<codeline lineno="3596"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;add&quot;</highlight><highlight class="normal">,<sp/>MLExprBuilderT,<sp/>MLExprT)<sp/>{</highlight></codeline>
<codeline lineno="3598"><highlight class="comment">//&lt;Builder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3599"><highlight class="normal"></highlight><highlight class="comment">//&lt;Expr...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3600"><highlight class="normal"></highlight><highlight class="comment">//&gt;blockbuilder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3601"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>the<sp/>expression<sp/>:mini:`Expr`<sp/>to<sp/>a<sp/>block.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__block__builder__t" kindref="compound">mlc_block_builder_t</ref><sp/>*Builder<sp/>=<sp/>(<ref refid="structmlc__block__builder__t" kindref="compound">mlc_block_builder_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Delegate<sp/>=<sp/>ml_delegate_expr(Args[I]);</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Builder-&gt;ExprSlot[0]<sp/>=<sp/>Delegate;</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Builder-&gt;ExprSlot<sp/>=<sp/>&amp;Delegate-&gt;Next;</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="3609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"></highlight></codeline>
<codeline lineno="3611"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;end&quot;</highlight><highlight class="normal">,<sp/>MLExprBuilderT)<sp/>{</highlight></codeline>
<codeline lineno="3613"><highlight class="comment">//&lt;Builder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3614"><highlight class="normal"></highlight><highlight class="comment">//&gt;expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3615"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Finishes<sp/>a<sp/>block<sp/>and<sp/>returns<sp/>it<sp/>as<sp/>an<sp/>expression.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__builder__t" kindref="compound">mlc_expr_builder_t</ref><sp/>*Builder<sp/>=<sp/>(<ref refid="structmlc__expr__builder__t" kindref="compound">mlc_expr_builder_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_expr_value((<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Builder-&gt;Expr);</highlight></codeline>
<codeline lineno="3618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"></highlight></codeline>
<codeline lineno="3620"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_define_expr_compile(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structmlc__ident__expr__t" kindref="compound">mlc_ident_expr_t</ref><sp/>*Expr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Hash<sp/>=<sp/>ml_ident_hash(Expr-&gt;Ident);</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*UpFunction<sp/>=<sp/>Function;<sp/>UpFunction;<sp/>UpFunction<sp/>=<sp/>UpFunction-&gt;Up)<sp/>{</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__define__t" kindref="compound">mlc_define_t</ref><sp/>*Define<sp/>=<sp/>UpFunction-&gt;Defines;<sp/>Define;<sp/>Define<sp/>=<sp/>Define-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hash<sp/>==<sp/>Define-&gt;Hash)<sp/>{</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;\tTesting<sp/>&lt;%s&gt;\n&quot;,<sp/>Decl-&gt;Ident);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Define-&gt;Ident,<sp/>Expr-&gt;Ident))<sp/>{</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_compile(Function,<sp/>Define-&gt;Expr,<sp/>Flags);</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_EXPR_ERROR(Expr,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;CompilerError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Identifier<sp/>%s<sp/>not<sp/>defined&quot;</highlight><highlight class="normal">,<sp/>Expr-&gt;Ident));</highlight></codeline>
<codeline lineno="3633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"></highlight></codeline>
<codeline lineno="3635"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_expr_types.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3636"><highlight class="normal"></highlight></codeline>
<codeline lineno="3637"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*MLTokens[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_NONE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;end<sp/>of<sp/>line&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_EOL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;end<sp/>of<sp/>input&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_EOI,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_AND,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;case&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_CASE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;def&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_DEF,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;do&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_DO,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;each&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_EACH,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;else&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_ELSE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;elseif&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_ELSEIF,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;end&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_END,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exit&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_EXIT,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;for&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_FOR,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fun&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_FUN,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;if&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_IF,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ifConfig&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_IF_CONFIG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_IN,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;is&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_IS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;it&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_IT,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;let&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_LET,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;loop&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_LOOP,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;meth&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_METH,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;must&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_MUST,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;next&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_NEXT,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;nil&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_NIL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;not&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_NOT,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;old&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_OLD,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;on&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_ON,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;or&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_OR,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ref&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_REF,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ret&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_RET,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;seq&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_SEQ,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;susp&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_SUSP,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;switch&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_SWITCH,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;then&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_THEN,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;to&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_TO,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;until&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_UNTIL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;var&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_VAR,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;when&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_WHEN,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;while&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_WHILE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;with&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_WITH,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;identifier&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_IDENT,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_BLANK,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_LEFT_PAREN,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_RIGHT_PAREN,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_LEFT_SQUARE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_RIGHT_SQUARE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_LEFT_BRACE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_RIGHT_BRACE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_SEMICOLON,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_COLON,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_COMMA,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;:=&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_ASSIGN,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;:-&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_NAMED,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;escape&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_ESCAPE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;import&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_IMPORT,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;value&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_VALUE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;expr&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_EXPR,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;inline&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_INLINE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;expand&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_EXPAND,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;expr_value&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_EXPR_VALUE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;operator&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>MLT_OPERATOR,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;method&gt;&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>MLT_METHOD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3701"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"></highlight></codeline>
<codeline lineno="3703"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_compiler_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="3705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"></highlight></codeline>
<codeline lineno="3707"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_function_global_get(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Eval)<sp/>{</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>ml_simple_inline(Function,<sp/>3,<sp/>ml_string(Name,<sp/>-1),<sp/>ml_string(Source,<sp/>-1),<sp/>ml_integer(Line),<sp/>ml_integer(Eval));</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Value<sp/>!=<sp/>MLNotFound)<sp/>?<sp/>Value<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="3710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"></highlight></codeline>
<codeline lineno="3712"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_map_global_get(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Map,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Eval)<sp/>{</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_map_search0(Map,<sp/>ml_string(Name,<sp/>-1));</highlight></codeline>
<codeline lineno="3714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"></highlight></codeline>
<codeline lineno="3716"><highlight class="normal">ML_FUNCTION(MLCompiler)<sp/>{</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"></highlight><highlight class="comment">//@compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3718"><highlight class="normal"></highlight><highlight class="comment">//&lt;Global:function|map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3719"><highlight class="normal"></highlight><highlight class="comment">//&gt;compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_getter_t<sp/>GlobalGet<sp/>=<sp/>(ml_getter_t)ml_function_global_get;</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Args[0],<sp/>MLMapT))<sp/>GlobalGet<sp/>=<sp/>(ml_getter_t)ml_map_global_get;</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)ml_compiler(GlobalGet,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="3724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"></highlight></codeline>
<codeline lineno="3726"><highlight class="normal">ML_TYPE(MLCompilerT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;compiler&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_compiler_call,</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLCompiler</highlight></codeline>
<codeline lineno="3729"><highlight class="normal">);</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"></highlight></codeline>
<codeline lineno="3731"><highlight class="normal">ML_FUNCTIONX(MLSource)<sp/>{</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"></highlight><highlight class="comment">//@source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3733"><highlight class="normal"></highlight><highlight class="comment">//&gt;tuple[string,integer]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3734"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>caller<sp/>source<sp/>location.<sp/>Evaluated<sp/>at<sp/>compile<sp/>time<sp/>if<sp/>possible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>Source<sp/>=<sp/>ml_debugger_source(Caller);</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_tuplev(2,<sp/>ml_string(Source.Name,<sp/>-1),<sp/>ml_integer(Source.Line)));</highlight></codeline>
<codeline lineno="3737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"></highlight></codeline>
<codeline lineno="3739"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__inline__function__t" kindref="compound">ml_inline_function_t</ref><sp/>MLSourceInline[1]<sp/>=<sp/>{{MLFunctionInlineT,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLSource}};</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"></highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*ml_compiler(ml_getter_t<sp/>GlobalGet,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Globals)<sp/>{</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref>);</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/>Compiler-&gt;Type<sp/>=<sp/>MLCompilerT;</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/>Compiler-&gt;GlobalGet<sp/>=<sp/>GlobalGet;</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/>Compiler-&gt;Globals<sp/>=<sp/>Globals;</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Compiler;</highlight></codeline>
<codeline lineno="3747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"></highlight></codeline>
<codeline lineno="3749"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_compiler_define(<ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Compiler-&gt;Vars,<sp/>Name,<sp/>Value);</highlight></codeline>
<codeline lineno="3751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"></highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_compiler_lookup(<ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Eval)<sp/>{</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)stringmap_search(Compiler-&gt;Vars,<sp/>Name);</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Value)<sp/>Value<sp/>=<sp/>Compiler-&gt;GlobalGet(Compiler-&gt;Globals,<sp/>Name,<sp/>Source,<sp/>Line,<sp/>Eval);</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value;</highlight></codeline>
<codeline lineno="3757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"></highlight></codeline>
<codeline lineno="3759"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_parser_no_input(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data)<sp/>{</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3761"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"></highlight></codeline>
<codeline lineno="3763"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_function_read(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function)<sp/>{</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>ml_simple_call(Function,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Result,<sp/>MLStringT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string_value(Result);</highlight></codeline>
<codeline lineno="3767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"></highlight></codeline>
<codeline lineno="3769"><highlight class="normal">ML_FUNCTION(MLParser)<sp/>{</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"></highlight><highlight class="comment">//@parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3771"><highlight class="normal"></highlight><highlight class="comment">//&lt;Read?:function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3772"><highlight class="normal"></highlight><highlight class="comment">//&gt;parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Input<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_reader_t<sp/>Reader<sp/>=<sp/>ml_parser_no_input;</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader<sp/>=<sp/>(ml_reader_t)ml_function_read;</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)<ref refid="group__compiler_1gab31c0e27d21db6f748c137bf13bd7e28" kindref="member">ml_parser</ref>(Reader,<sp/>Input);</highlight></codeline>
<codeline lineno="3780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"></highlight></codeline>
<codeline lineno="3782"><highlight class="normal">ML_TYPE(MLParserT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;parser&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLParser</highlight></codeline>
<codeline lineno="3784"><highlight class="normal">);</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"></highlight></codeline>
<codeline lineno="3786"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_parser_default_escape(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data)<sp/>{</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Parser<sp/>does<sp/>support<sp/>escaping&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3788"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"></highlight></codeline>
<codeline lineno="3790"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_parser_default_special(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data)<sp/>{</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Parser<sp/>does<sp/>support<sp/>special<sp/>values&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"></highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*<ref refid="group__compiler_1gab31c0e27d21db6f748c137bf13bd7e28" kindref="member">ml_parser</ref>(ml_reader_t<sp/>Read,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data)<sp/>{</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref>);</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Type<sp/>=<sp/>MLParserT;</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_NONE;</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Source.Name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Source.Line<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Line<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;ReadData<sp/>=<sp/>Data;</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Read<sp/>=<sp/>Read<sp/>?:<sp/>ml_parser_no_input;</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Escape<sp/>=<sp/>ml_parser_default_escape;</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Special<sp/>=<sp/>ml_parser_default_special;</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser;</highlight></codeline>
<codeline lineno="3807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"></highlight></codeline>
<codeline lineno="3809"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ml_accept_block(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser);</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_accept_eoi(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser);</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"></highlight></codeline>
<codeline lineno="3812"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_parser_name(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Source.Name;</highlight></codeline>
<codeline lineno="3814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"></highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>ml_parser_source(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>Source)<sp/>{</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>OldSource<sp/>=<sp/>Parser-&gt;Source;</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Source<sp/>=<sp/>Source;</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Line<sp/>=<sp/>Source.Line;</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OldSource;</highlight></codeline>
<codeline lineno="3821"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"></highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_parser_value(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Value;</highlight></codeline>
<codeline lineno="3825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"></highlight></codeline>
<codeline lineno="3827"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__compiler_1ga80d3e6fba963ca8b9e7638e278420df0" kindref="member">ml_parser_reset</ref>(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_NONE;</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"></highlight></codeline>
<codeline lineno="3832"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__compiler_1gafed4e5a797e1833ecde721c5adf4f53d" kindref="member">ml_parser_permissive</ref>(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Permissive)<sp/>{</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Warnings<sp/>=<sp/>Permissive<sp/>?<sp/>ml_list()<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="3834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"></highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*<ref refid="group__compiler_1ga6369c7daf2af887d0c6fa60c5121e569" kindref="member">ml_parser_warnings</ref>(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Warnings;</highlight></codeline>
<codeline lineno="3838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"></highlight></codeline>
<codeline lineno="3840"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__compiler_1ga21c894dfe870f9461194a9168b4dd2fc" kindref="member">ml_parser_input</ref>(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Text)<sp/>{</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>Text;</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/>++Parser-&gt;Line;</highlight></codeline>
<codeline lineno="3843"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"></highlight></codeline>
<codeline lineno="3845"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_parser_clear(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Next<sp/>=<sp/>Parser-&gt;Next;</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Next;</highlight></codeline>
<codeline lineno="3849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"></highlight></codeline>
<codeline lineno="3851"><highlight class="normal"></highlight><highlight class="comment">/*void<sp/>ml_parse_error(ml_parser_t<sp/>*Parser,<sp/>const<sp/>char<sp/>*Error,<sp/>const<sp/>char<sp/>*Format,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="3852"><highlight class="comment"><sp/><sp/><sp/><sp/>va_list<sp/>Args;</highlight></codeline>
<codeline lineno="3853"><highlight class="comment"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>Format);</highlight></codeline>
<codeline lineno="3854"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_value_t<sp/>*Value<sp/>=<sp/>ml_errorv(Error,<sp/>Format,<sp/>Args);</highlight></codeline>
<codeline lineno="3855"><highlight class="comment"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="3856"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_error_trace_add(Value,<sp/>Parser-&gt;Source);</highlight></codeline>
<codeline lineno="3857"><highlight class="comment"><sp/><sp/><sp/><sp/>Parser-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="3858"><highlight class="comment"><sp/><sp/><sp/><sp/>longjmp(Parser-&gt;OnError,<sp/>1);</highlight></codeline>
<codeline lineno="3859"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3860"><highlight class="normal"></highlight></codeline>
<codeline lineno="3861"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_parse_warn(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Error,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Format,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Parser-&gt;Warnings)<sp/>{</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_list<sp/>Args;</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_start(Args,<sp/>Format);</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>ml_errorv(Error,<sp/>Format,<sp/>Args);</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_error_trace_add(Value,<sp/>Parser-&gt;Source);</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>longjmp(Parser-&gt;OnError,<sp/>1);</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Message;</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>Args;</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>Format);</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>GC_vasprintf(&amp;Message,<sp/>Format,<sp/>Args);</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_put(Parser-&gt;Warnings,<sp/>ml_tuplev(3,</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_string(Parser-&gt;Source.Name,<sp/>-1),</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_integer(Parser-&gt;Line),</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_string(Message,<sp/>Length)</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="3881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"></highlight></codeline>
<codeline lineno="3883"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_parser_escape(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*(*Escape)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data)<sp/>{</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Escape<sp/>=<sp/>Escape;</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;EscapeData<sp/>=<sp/>Data;</highlight></codeline>
<codeline lineno="3886"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"></highlight></codeline>
<codeline lineno="3888"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_parser_special(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*(*Special)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data)<sp/>{</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Special<sp/>=<sp/>Special;</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;SpecialData<sp/>=<sp/>Data;</highlight></codeline>
<codeline lineno="3891"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"></highlight></codeline>
<codeline lineno="3893"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPR_SIMPLE,</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPR_AND,</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPR_OR,</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPR_FOR,</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPR_DEFAULT</highlight></codeline>
<codeline lineno="3899"><highlight class="normal">}<sp/>ml_expr_level_t;</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"></highlight></codeline>
<codeline lineno="3901"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_parse(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/>ml_token_t<sp/>Token);</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_accept(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/>ml_token_t<sp/>Token);</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ml_parse_expression(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/>ml_expr_level_t<sp/>Level);</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ml_accept_term(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MethDecl);</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ml_accept_expression(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/>ml_expr_level_t<sp/>Level);</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_accept_arguments(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/>ml_token_t<sp/>EndToken,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>**ArgsSlot);</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"></highlight></codeline>
<codeline lineno="3908"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint8_t<sp/>ml_nibble(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>C)<sp/>{</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(C)<sp/>{</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>...<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>C<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>...<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(C<sp/>-<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">)<sp/>+<sp/>10;</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>...<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(C<sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">)<sp/>+<sp/>10;</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>character<sp/>in<sp/>escape<sp/>sequence&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"></highlight></codeline>
<codeline lineno="3919"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ml_token_t<sp/>ml_accept_string(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__string__part__t" kindref="compound">mlc_string_part_t</ref><sp/>*Parts<sp/>=<sp/>NULL,<sp/>**Slot<sp/>=<sp/>&amp;Parts;</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Parser-&gt;Next;</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>C<sp/>=<sp/>*End++;</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!C)<sp/>{</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>End<sp/>=<sp/>Parser-&gt;Read(Parser-&gt;ReadData);</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!End)<sp/>{</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>input<sp/>while<sp/>parsing<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>eoi;</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Parser-&gt;Line;</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(C<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>End;</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(C<sp/>==<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Buffer-&gt;Length)<sp/>{</highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__string__part__t" kindref="compound">mlc_string_part_t</ref><sp/>*Part<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__string__part__t" kindref="compound">mlc_string_part_t</ref>);</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Part-&gt;Length<sp/>=<sp/>Buffer-&gt;Length;</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Part-&gt;Chars<sp/>=<sp/>ml_stringbuffer_get_string(Buffer);</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Part-&gt;Line<sp/>=<sp/>Parser-&gt;Source.Line;</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>Part;</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot<sp/>=<sp/>&amp;Part-&gt;Next;</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>End;</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__string__part__t" kindref="compound">mlc_string_part_t</ref><sp/>*Part<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__string__part__t" kindref="compound">mlc_string_part_t</ref>);</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept_arguments(Parser,<sp/>MLT_RIGHT_BRACE,<sp/>&amp;Part-&gt;Child);</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Part-&gt;Child)<sp/>{</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParserError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>string<sp/>expression&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Part-&gt;Line<sp/>=<sp/>Parser-&gt;Source.Line;</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>End<sp/>=<sp/>Parser-&gt;Next;</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>Part;</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot<sp/>=<sp/>&amp;Part-&gt;Next;</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(C<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C<sp/>=<sp/>*End++;</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(C)<sp/>{</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">:<sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">:<sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">:<sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">:<sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;\e&apos;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/>ml_nibble(Parser,<sp/>*End++)<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Char<sp/>+=<sp/>ml_nibble(Parser,<sp/>*End++);</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_put(Buffer,<sp/>Char);</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>Code<sp/>=<sp/>ml_nibble(Parser,<sp/>*End++)<sp/>&lt;&lt;<sp/>12;</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>+=<sp/>ml_nibble(Parser,<sp/>*End++)<sp/>&lt;&lt;<sp/>8;</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>+=<sp/>ml_nibble(Parser,<sp/>*End++)<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>+=<sp/>ml_nibble(Parser,<sp/>*End++);</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_put32(Buffer,<sp/>Code);</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;U&apos;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>Code<sp/>=<sp/>ml_nibble(Parser,<sp/>*End++)<sp/>&lt;&lt;<sp/>28;</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>+=<sp/>ml_nibble(Parser,<sp/>*End++)<sp/>&lt;&lt;<sp/>24;</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>+=<sp/>ml_nibble(Parser,<sp/>*End++)<sp/>&lt;&lt;<sp/>20;</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>+=<sp/>ml_nibble(Parser,<sp/>*End++)<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>+=<sp/>ml_nibble(Parser,<sp/>*End++)<sp/>&lt;&lt;<sp/>12;</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>+=<sp/>ml_nibble(Parser,<sp/>*End++)<sp/>&lt;&lt;<sp/>8;</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>+=<sp/>ml_nibble(Parser,<sp/>*End++)<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>+=<sp/>ml_nibble(Parser,<sp/>*End++);</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_put32(Buffer,<sp/>Code);</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">:<sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">:<sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:<sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">:<sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">:<sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">:<sp/>Parser-&gt;Line++;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>line<sp/>while<sp/>parsing<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>eoi;</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(C<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Line++;</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>End<sp/>-<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>End<sp/>-<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4006"><highlight class="normal">eoi:</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Parts)<sp/>{</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Value<sp/>=<sp/>ml_stringbuffer_get_value(Buffer);</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Parser-&gt;Token<sp/>=<sp/>MLT_VALUE);</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Buffer-&gt;Length)<sp/>{</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__string__part__t" kindref="compound">mlc_string_part_t</ref><sp/>*Part<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__string__part__t" kindref="compound">mlc_string_part_t</ref>);</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Part-&gt;Length<sp/>=<sp/>Buffer-&gt;Length;</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Part-&gt;Chars<sp/>=<sp/>ml_stringbuffer_get_string(Buffer);</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Part-&gt;Line<sp/>=<sp/>Parser-&gt;Source.Line;</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>Part;</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(Expr,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;Parts<sp/>=<sp/>Parts;</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Expr<sp/>=<sp/>ML_EXPR_END(Expr);</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Parser-&gt;Token<sp/>=<sp/>MLT_EXPR);</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4023"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"></highlight></codeline>
<codeline lineno="4025"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHAR_OTHER,</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHAR_EOI,</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHAR_SPACE,</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHAR_LINE,</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHAR_ALPHA,</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHAR_DIGIT,</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHAR_OPER,</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHAR_DELIM,</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHAR_COLON,</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHAR_SQUOTE,</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHAR_DQUOTE,</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHAR_SPECIAL</highlight></codeline>
<codeline lineno="4038"><highlight class="normal">}<sp/>ml_char_type_t;</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"></highlight></codeline>
<codeline lineno="4040"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>CharTypes[256]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHAR_OTHER,</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/><sp/><sp/>[0]<sp/>=<sp/>ML_CHAR_EOI,</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/><sp/>[1<sp/>...<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_SPACE,</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_LINE,</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>...<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_DIGIT,</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_ALPHA,</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>...<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_ALPHA,</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>...<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_ALPHA,</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_OPER,</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_OPER,</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_OPER,</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_OPER,</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_OPER,</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;^&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_OPER,</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_OPER,</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_OPER,</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_OPER,</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_OPER,</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_OPER,</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;|&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_OPER,</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_OPER,</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_OPER,</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;`&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_OPER,</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_OPER,</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_OPER,</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_OPER,</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_OPER,</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_OPER,</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_COLON,</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_DELIM,</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_DELIM,</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_DELIM,</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_DELIM,</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_DELIM,</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_DELIM,</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_DELIM,</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_DELIM,</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_SQUOTE,</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">]<sp/>=<sp/>ML_CHAR_DQUOTE,</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/>[128<sp/>...<sp/>238]<sp/>=<sp/>ML_CHAR_ALPHA,</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/><sp/><sp/>[239]<sp/>=<sp/>ML_CHAR_SPECIAL,</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/><sp/><sp/>[240<sp/>...<sp/>253]<sp/>=<sp/>ML_CHAR_ALPHA</highlight></codeline>
<codeline lineno="4083"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"></highlight></codeline>
<codeline lineno="4085"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ml_token_t<sp/>CharTokens[256]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">]<sp/>=<sp/>MLT_LEFT_PAREN,</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">]<sp/>=<sp/>MLT_RIGHT_PAREN,</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">]<sp/>=<sp/>MLT_LEFT_SQUARE,</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">]<sp/>=<sp/>MLT_RIGHT_SQUARE,</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">]<sp/>=<sp/>MLT_LEFT_BRACE,</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">]<sp/>=<sp/>MLT_RIGHT_BRACE,</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">]<sp/>=<sp/>MLT_SEMICOLON,</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">]<sp/>=<sp/>MLT_COLON,</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">]<sp/>=<sp/>MLT_COMMA</highlight></codeline>
<codeline lineno="4096"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"></highlight></codeline>
<codeline lineno="4098"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_isidstart(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>C)<sp/>{</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CharTypes[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)C]<sp/>==<sp/>ML_CHAR_ALPHA;</highlight></codeline>
<codeline lineno="4100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"></highlight></codeline>
<codeline lineno="4102"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_isidchar(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>C)<sp/>{</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CharTypes[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)C]<sp/>==<sp/>ML_CHAR_ALPHA<sp/>||<sp/>CharTypes[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)C]<sp/>==<sp/>ML_CHAR_DIGIT;</highlight></codeline>
<codeline lineno="4104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"></highlight></codeline>
<codeline lineno="4106"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_isoperator(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>C)<sp/>{</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CharTypes[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)C]<sp/>==<sp/>ML_CHAR_OPER;</highlight></codeline>
<codeline lineno="4108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"></highlight></codeline>
<codeline lineno="4110"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_isdigit(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>C)<sp/>{</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CharTypes[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)C]<sp/>==<sp/>ML_CHAR_DIGIT;</highlight></codeline>
<codeline lineno="4112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"></highlight></codeline>
<codeline lineno="4114"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;keywords.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4115"><highlight class="normal"></highlight></codeline>
<codeline lineno="4116"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>StringFns[1]<sp/>=<sp/>{STRINGMAP_INIT};</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"></highlight></codeline>
<codeline lineno="4118"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_string_fn_register(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Prefix,<sp/>string_fn_t<sp/>Fn)<sp/>{</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(StringFns,<sp/>Prefix,<sp/>Fn);</highlight></codeline>
<codeline lineno="4120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"></highlight></codeline>
<codeline lineno="4122"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_scan_utf8(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*D,<sp/>uint32_t<sp/>Code)<sp/>{</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Val[8];</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>LeadByteMax<sp/>=<sp/>0x7F;</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Code<sp/>&gt;<sp/>LeadByteMax)<sp/>{</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Val[I++]<sp/>=<sp/>(Code<sp/>&amp;<sp/>0x3F)<sp/>|<sp/>0x80;</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>&gt;&gt;=<sp/>6;</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LeadByteMax<sp/>&gt;&gt;=<sp/>(I<sp/>==<sp/>1<sp/>?<sp/>2<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/>Val[I++]<sp/>=<sp/>(Code<sp/>&amp;<sp/>LeadByteMax)<sp/>|<sp/>(~LeadByteMax<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(I--)<sp/>*D++<sp/>=<sp/>Val[I];</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>D;</highlight></codeline>
<codeline lineno="4134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"></highlight></codeline>
<codeline lineno="4136"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_scan_string(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Parser-&gt;Next;</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Closed<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(End[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!End[0])<sp/>{</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>input<sp/>while<sp/>parsing<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Closed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++End;</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!End[0])<sp/>{</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>input<sp/>while<sp/>parsing<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Closed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++End;</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>End<sp/>-<sp/>Parser-&gt;Next;</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Quoted<sp/>=<sp/>snew(Length<sp/>+<sp/>1),<sp/>*D<sp/>=<sp/>Quoted;</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*S<sp/>=<sp/>Parser-&gt;Next;<sp/>S<sp/>&lt;<sp/>End;<sp/>++S)<sp/>{</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*S<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*++S)<sp/>{</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">:<sp/>*D++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">:<sp/>*D++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">:<sp/>*D++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">:<sp/>*D++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\e&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/>ml_nibble(Parser,<sp/>*++S)<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Char<sp/>+=<sp/>ml_nibble(Parser,<sp/>*++S);</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*D++<sp/>=<sp/>Char;</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>Code<sp/>=<sp/>ml_nibble(Parser,<sp/>*++S)<sp/>&lt;&lt;<sp/>12;</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>+=<sp/>ml_nibble(Parser,<sp/>*++S)<sp/>&lt;&lt;<sp/>8;</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>+=<sp/>ml_nibble(Parser,<sp/>*++S)<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>+=<sp/>ml_nibble(Parser,<sp/>*++S);</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D<sp/>=<sp/>ml_scan_utf8(D,<sp/>Code);</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;U&apos;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>Code<sp/>=<sp/>ml_nibble(Parser,<sp/>*++S)<sp/>&lt;&lt;<sp/>28;</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>+=<sp/>ml_nibble(Parser,<sp/>*++S)<sp/>&lt;&lt;<sp/>24;</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>+=<sp/>ml_nibble(Parser,<sp/>*++S)<sp/>&lt;&lt;<sp/>20;</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>+=<sp/>ml_nibble(Parser,<sp/>*++S)<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>+=<sp/>ml_nibble(Parser,<sp/>*++S)<sp/>&lt;&lt;<sp/>12;</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>+=<sp/>ml_nibble(Parser,<sp/>*++S)<sp/>&lt;&lt;<sp/>8;</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>+=<sp/>ml_nibble(Parser,<sp/>*++S)<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Code<sp/>+=<sp/>ml_nibble(Parser,<sp/>*++S);</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D<sp/>=<sp/>ml_scan_utf8(D,<sp/>Code);</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">:<sp/>*D++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">:<sp/>*D++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:<sp/>*D++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">:<sp/>*D++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>eoi;</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>*D++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;<sp/>*D++<sp/>=<sp/>*S;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*D++<sp/>=<sp/>*S;</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4201"><highlight class="normal">eoi:</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/><sp/>*D<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Ident<sp/>=<sp/>Quoted;</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>End<sp/>+<sp/>Closed;</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>D<sp/>-<sp/>Quoted;</highlight></codeline>
<codeline lineno="4206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"></highlight></codeline>
<codeline lineno="4208"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_scan_raw_string(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Parser-&gt;Next;</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(End[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!End[0])<sp/>{</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>input<sp/>while<sp/>parsing<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>++End;</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++End;</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>End<sp/>-<sp/>Parser-&gt;Next;</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Raw<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(Raw,<sp/>Parser-&gt;Next,<sp/>Length);</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/>Raw[Length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Ident<sp/>=<sp/>Raw;</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>End<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Length;</highlight></codeline>
<codeline lineno="4225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"></highlight></codeline>
<codeline lineno="4227"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_ident(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Next,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length)<sp/>{</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Shift<sp/>=<sp/>8<sp/>-<sp/>Length;</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Shift<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Ident<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Ident,<sp/>Next,<sp/>Length);</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ident[Length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Ident;</highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structinthash__t" kindref="compound">inthash_t</ref><sp/>Idents[1]<sp/>=<sp/>{INTHASH_INIT};</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>Key<sp/>=<sp/>*(uintptr_t<sp/>*)Next;</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/>Key<sp/>&amp;=<sp/>(uintptr_t)-1<sp/>&gt;&gt;<sp/>(8<sp/>*<sp/>Shift);</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Ident<sp/>=<sp/>inthash_search_inline(Idents,<sp/>Key);</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Ident)<sp/>{</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ident<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Ident,<sp/>Next,<sp/>Length);</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ident[Length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inthash_insert(Idents,<sp/>Key,<sp/>Ident);</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//fprintf(stderr,<sp/>&quot;%s<sp/>-&gt;<sp/>0x%lx\n&quot;,<sp/>Ident,<sp/>Ident);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Ident;</highlight></codeline>
<codeline lineno="4247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"></highlight></codeline>
<codeline lineno="4249"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ml_token_t<sp/>ml_scan(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Next<sp/>=<sp/>Parser-&gt;Next;</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/>Next[0];</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Labels[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;DO_CHAR_OTHER,</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;DO_CHAR_EOI,</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;DO_CHAR_SPACE,</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;DO_CHAR_LINE,</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;DO_CHAR_ALPHA,</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;DO_CHAR_DIGIT,</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;DO_CHAR_OPER,</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;DO_CHAR_DELIM,</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;DO_CHAR_COLON,</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;DO_CHAR_SQUOTE,</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;DO_CHAR_DQUOTE,</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;DO_CHAR_SPECIAL</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>*Labels[CharTypes[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)Char]];</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DO_CHAR_EOI:</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next<sp/>=<sp/>Parser-&gt;Read(Parser-&gt;ReadData);</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Next)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_EOI;</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DO_CHAR_LINE:</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>Next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Parser-&gt;Line;</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_EOL;</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DO_CHAR_SPACE:</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Next;</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DO_CHAR_SPECIAL:<sp/>{</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)Next[1]<sp/>==<sp/>0xBF<sp/>&amp;&amp;<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)Next[2]<sp/>==<sp/>0xBC)<sp/>{</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>Next<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Value<sp/>=<sp/>Parser-&gt;Special(Parser-&gt;SpecialData);</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_VALUE;</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DO_CHAR_ALPHA:<sp/>{</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_isidchar(*End))<sp/>++End;</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>End<sp/>-<sp/>Next;</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structkeyword__t" kindref="compound">keyword_t</ref><sp/>*Keyword<sp/>=<sp/>lookup(Next,<sp/>Length);</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Keyword)<sp/>{</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>Keyword-&gt;Token;</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Ident<sp/>=<sp/>MLTokens[Parser-&gt;Token];</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>End;</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Ident<sp/>=<sp/>ml_ident(Next,<sp/>Length);</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//char<sp/>*Ident<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//memcpy(Ident,<sp/>Next,<sp/>Length);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Ident[Length]<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(End[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_fn_t<sp/>StringFn<sp/>=<sp/>stringmap_search(StringFns,<sp/>Ident);</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!StringFn)<sp/>{</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>string<sp/>prefix:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Ident);</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringFn<sp/>=<sp/>ml_string;</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>End<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_scan_raw_string(Parser);</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>StringFn(Parser-&gt;Ident,<sp/>Length);</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>{</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_error_trace_add(Value,<sp/>Parser-&gt;Source);</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>longjmp(Parser-&gt;OnError,<sp/>1);</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_VALUE;</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>End;</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Ident<sp/>=<sp/>Ident;</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_IDENT;</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DO_CHAR_DIGIT:<sp/>{</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End;</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Double<sp/>=<sp/>strtod(Next,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)&amp;End);</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*End<sp/>==<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Value<sp/>=<sp/>ml_complex(Double<sp/>*<sp/>1i);</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_VALUE;</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>End<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*P<sp/>=<sp/>Next;<sp/>P<sp/>&lt;<sp/>End;<sp/>++P)<sp/>{</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(P[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"><sp/>||<sp/>P[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal"><sp/>||<sp/>P[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Value<sp/>=<sp/>ml_real(Double);</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_VALUE;</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>End;</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Integer<sp/>=<sp/>strtol(Next,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)&amp;End,<sp/>10);</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Value<sp/>=<sp/>ml_integer(Integer);</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_VALUE;</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>End;</highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DO_CHAR_SQUOTE:</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>Next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_accept_string(Parser);</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DO_CHAR_DQUOTE:<sp/>{</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>Next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_scan_string(Parser);;</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Value<sp/>=<sp/>ml_string(Parser-&gt;Ident,<sp/>Length);</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_VALUE;</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DO_CHAR_COLON:<sp/>{</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Char<sp/>=<sp/>*++Next;</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Char<sp/>==<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_ASSIGN;</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>Next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Char<sp/>==<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_IMPORT;</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Char<sp/>=<sp/>*++Next;</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_isidchar(Char))<sp/>{</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_isidchar(*End))<sp/>++End;</highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>End<sp/>-<sp/>Next;</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//char<sp/>*Ident<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//memcpy(Ident,<sp/>Next,<sp/>Length);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Ident[Length]<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Parser-&gt;Ident<sp/>=<sp/>Ident;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Ident<sp/>=<sp/>ml_ident(Next,<sp/>Length);</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>End;</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Char<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>Next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_scan_string(Parser);</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_isoperator(Char))<sp/>{</highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_isoperator(*End))<sp/>++End;</highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>End<sp/>-<sp/>Next;</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//char<sp/>*Operator<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//memcpy(Operator,<sp/>Next,<sp/>Length);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Operator[Length]<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Parser-&gt;Ident<sp/>=<sp/>Operator;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Ident<sp/>=<sp/>ml_ident(Next,<sp/>Length);</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>End;</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>Next;</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Ident<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_OPERATOR;</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_isidchar(Char))<sp/>{</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_isidchar(*End))<sp/>++End;</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>End<sp/>-<sp/>Next;</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//char<sp/>*Ident<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//memcpy(Ident,<sp/>Next,<sp/>Length);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Ident[Length]<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Parser-&gt;Ident<sp/>=<sp/>Ident;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Ident<sp/>=<sp/>ml_ident(Next,<sp/>Length);</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_METHOD;</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>End;</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Char<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>Next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_scan_string(Parser);</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_METHOD;</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Char<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_NAMED;</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>Next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Char<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_ESCAPE;</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>Next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Char<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(End[0]<sp/>&amp;&amp;<sp/>End[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>++End;</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next<sp/>=<sp/>End;</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Char<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Next;</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Level<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*Next++)<sp/>{</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Parser-&gt;Line;</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next<sp/>=<sp/>Parser-&gt;Read(Parser-&gt;ReadData);</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Next)<sp/>{</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>Next<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>input<sp/>in<sp/>comment&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Level<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Next[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Next;</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Level;</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Next[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Next;</highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Level;</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Level);</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Char<sp/>==<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_INLINE;</highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>Next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Char<sp/>==<sp/></highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_EXPAND;</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>Next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Char<sp/>==<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_EXPR_VALUE;</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>Next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_COLON;</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>Next;</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DO_CHAR_DELIM:</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>Next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>CharTokens[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)Char];</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DO_CHAR_OPER:<sp/>{</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Char<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>||<sp/>Char<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_isdigit(Next[1]))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>DO_CHAR_DIGIT;</highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*End<sp/>=<sp/>Next<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_isoperator(*End))<sp/>++End;</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>End<sp/>-<sp/>Next;</highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//char<sp/>*Operator<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//memcpy(Operator,<sp/>Next,<sp/>Length);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Operator[Length]<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Parser-&gt;Ident<sp/>=<sp/>Operator;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Ident<sp/>=<sp/>ml_ident(Next,<sp/>Length);</highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_OPERATOR;</highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>End;</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DO_CHAR_OTHER:<sp/>{</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>character<sp/>&lt;%c&gt;&quot;</highlight><highlight class="normal">,<sp/>Char);</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Next;</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"></highlight></codeline>
<codeline lineno="4509"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ml_token_t<sp/>ml_current(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parser-&gt;Token<sp/>==<sp/>MLT_NONE)<sp/>ml_scan(Parser);</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"></highlight></codeline>
<codeline lineno="4514"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ml_token_t<sp/>ml_current2(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parser-&gt;Token<sp/>==<sp/>MLT_NONE)<sp/>ml_scan(Parser);</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Parser-&gt;Token<sp/>==<sp/>MLT_EOL)<sp/>ml_scan(Parser);</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Token;</highlight></codeline>
<codeline lineno="4518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"></highlight></codeline>
<codeline lineno="4520"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_next(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_NONE;</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Source.Line<sp/>=<sp/>Parser-&gt;Line;</highlight></codeline>
<codeline lineno="4523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"></highlight></codeline>
<codeline lineno="4525"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_parse(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/>ml_token_t<sp/>Token)<sp/>{</highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parser-&gt;Token<sp/>==<sp/>MLT_NONE)<sp/>ml_scan(Parser);</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parser-&gt;Token<sp/>==<sp/>Token)<sp/>{</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_NONE;</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Source.Line<sp/>=<sp/>Parser-&gt;Line;</highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4535"><highlight class="normal"></highlight></codeline>
<codeline lineno="4536"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_skip_eol(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parser-&gt;Token<sp/>==<sp/>MLT_NONE)<sp/>ml_scan(Parser);</highlight></codeline>
<codeline lineno="4538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Parser-&gt;Token<sp/>==<sp/>MLT_EOL)<sp/>ml_scan(Parser);</highlight></codeline>
<codeline lineno="4539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"></highlight></codeline>
<codeline lineno="4541"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_parse2(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/>ml_token_t<sp/>Token)<sp/>{</highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parser-&gt;Token<sp/>==<sp/>MLT_NONE)<sp/>ml_scan(Parser);</highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Parser-&gt;Token<sp/>==<sp/>MLT_EOL)<sp/>ml_scan(Parser);</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parser-&gt;Token<sp/>==<sp/>Token)<sp/>{</highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_NONE;</highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Source.Line<sp/>=<sp/>Parser-&gt;Line;</highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"></highlight></codeline>
<codeline lineno="4553"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_accept(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/>ml_token_t<sp/>Token)<sp/>{</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>Token))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parser-&gt;Token<sp/>==<sp/>MLT_IDENT)<sp/>{</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>%s<sp/>not<sp/>%s<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>MLTokens[Token],<sp/>MLTokens[Parser-&gt;Token],<sp/>Parser-&gt;Ident);</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>%s<sp/>not<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>MLTokens[Token],<sp/>MLTokens[Parser-&gt;Token]);</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Token<sp/>==<sp/>MLT_IDENT)<sp/>{</highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Token<sp/>=<sp/>MLT_NONE;</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Ident<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;?&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4565"><highlight class="normal"></highlight></codeline>
<codeline lineno="4566"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_accept_eoi(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_EOI);</highlight></codeline>
<codeline lineno="4568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4569"><highlight class="normal"></highlight></codeline>
<codeline lineno="4570"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ml_parse_factor(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MethDecl);</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ml_parse_term(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MethDecl);</highlight></codeline>
<codeline lineno="4572"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ml_accept_block(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser);</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"></highlight></codeline>
<codeline lineno="4574"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ml_accept_fun_expr(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/>ml_token_t<sp/>EndToken)<sp/>{</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_EXPR(FunExpr,<sp/>fun,<sp/>fun);</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/>FunExpr-&gt;Name<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/><sp/><sp/>FunExpr-&gt;Source<sp/>=<sp/>Parser-&gt;Source.Name;</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>**BodySlot<sp/>=<sp/>&amp;FunExpr-&gt;Body;</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_parse2(Parser,<sp/>EndToken))<sp/>{</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__param__t" kindref="compound">mlc_param_t</ref><sp/>**ParamSlot<sp/>=<sp/>&amp;FunExpr-&gt;Params;</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__param__t" kindref="compound">mlc_param_t</ref><sp/>*Param<sp/>=<sp/>ParamSlot[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__param__t" kindref="compound">mlc_param_t</ref>);</highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Line<sp/>=<sp/>Parser-&gt;Source.Line;</highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParamSlot<sp/>=<sp/>&amp;Param-&gt;Next;</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_LEFT_SQUARE))<sp/>{</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Ident<sp/>=<sp/>Parser-&gt;Ident;</highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Kind<sp/>=<sp/>ML_PARAM_EXTRA;</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_RIGHT_SQUARE);</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COMMA))<sp/>{</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_LEFT_BRACE);</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__param__t" kindref="compound">mlc_param_t</ref><sp/>*Param<sp/>=<sp/>ParamSlot[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__param__t" kindref="compound">mlc_param_t</ref>);</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Line<sp/>=<sp/>Parser-&gt;Source.Line;</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Ident<sp/>=<sp/>Parser-&gt;Ident;</highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Kind<sp/>=<sp/>ML_PARAM_NAMED;</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_RIGHT_BRACE);</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_LEFT_BRACE))<sp/>{</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Ident<sp/>=<sp/>Parser-&gt;Ident;</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Kind<sp/>=<sp/>ML_PARAM_NAMED;</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_RIGHT_BRACE);</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_BLANK))<sp/>{</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Ident<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_REF))<sp/>{</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Kind<sp/>=<sp/>ML_PARAM_BYREF;</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_VAR))<sp/>{</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Kind<sp/>=<sp/>ML_PARAM_ASVAR;</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_LET))<sp/>{</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_LEFT_PAREN))<sp/>{</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GC_asprintf((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)&amp;Param-&gt;Ident,<sp/></highlight><highlight class="stringliteral">&quot;(%d)&quot;</highlight><highlight class="normal">,<sp/>Index);</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(UnpackExpr,<sp/>block,<sp/>block);</highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>UnpackExpr-&gt;Lets<sp/>=<sp/>mlc_local_new(Parser-&gt;Ident,<sp/>Parser-&gt;Source.Line);</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COMMA))<sp/>{</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Local<sp/>=<sp/>Local-&gt;Next<sp/>=<sp/>mlc_local_new(Parser-&gt;Ident,<sp/>Parser-&gt;Source.Line);</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Local-&gt;Index<sp/>=<sp/>Count++;</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(IdentExpr,<sp/>ident,<sp/>ident);</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IdentExpr-&gt;Ident<sp/>=<sp/>Param-&gt;Ident;</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(LocalExpr,<sp/>local,<sp/>let_unpack);</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Param-&gt;Kind<sp/>==<sp/>ML_PARAM_BYREF)<sp/>{</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;compile<sp/>=<sp/>ml_ref_unpack_expr_compile;</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Param-&gt;Kind<sp/>==<sp/>ML_PARAM_ASVAR)<sp/>{</highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;compile<sp/>=<sp/>ml_var_unpack_expr_compile;</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Kind<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Local<sp/>=<sp/>UnpackExpr-&gt;Lets;</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Child<sp/>=<sp/>ML_EXPR_END(IdentExpr);</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnpackExpr-&gt;NumLets<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnpackExpr-&gt;Child<sp/>=<sp/>ML_EXPR_END(LocalExpr);</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BodySlot[0]<sp/>=<sp/>ML_EXPR_END(UnpackExpr);</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BodySlot<sp/>=<sp/>&amp;LocalExpr-&gt;Next;</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Ident<sp/>=<sp/>Parser-&gt;Ident;</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COLON))<sp/>Param-&gt;Type<sp/>=<sp/>ml_accept_term(Parser,<sp/>0);</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_ASSIGN))<sp/>{</highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(DefaultExpr,<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DefaultExpr-&gt;Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DefaultExpr-&gt;Index<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DefaultExpr-&gt;Flags<sp/>=<sp/>Param-&gt;Kind;</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BodySlot[0]<sp/>=<sp/>ML_EXPR_END(DefaultExpr);</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BodySlot<sp/>=<sp/>&amp;DefaultExpr-&gt;Next;</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Index;</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COMMA));</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>EndToken);</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expected__delimiter__t" kindref="compound">mlc_expected_delimiter_t</ref><sp/>*Expected<sp/>=<sp/>Parser-&gt;ExpectedDelimiter;</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Expected<sp/>&amp;&amp;<sp/>ml_current2(Parser)<sp/>==<sp/>Expected-&gt;Token)<sp/>{</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expected-&gt;Token<sp/>=<sp/>MLT_NONE;</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expected<sp/>=<sp/>Expected-&gt;Prev;</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COLON))<sp/>FunExpr-&gt;ReturnType<sp/>=<sp/>ml_accept_term(Parser,<sp/>0);</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Body<sp/>=<sp/>BodySlot[0]<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/>FunExpr-&gt;StartLine<sp/>=<sp/>Body-&gt;StartLine;</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(FunExpr);</highlight></codeline>
<codeline lineno="4674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"></highlight></codeline>
<codeline lineno="4676"><highlight class="normal"></highlight><highlight class="comment">//extern<sp/>ml_cfunctionx_t<sp/>MLMethodSet[];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4677"><highlight class="normal"></highlight></codeline>
<codeline lineno="4678"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ml_accept_meth_expr(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_EXPR(MethodExpr,<sp/>parent_value,<sp/>const_call);</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//MethodExpr-&gt;Value<sp/>=<sp/>(ml_value_t<sp/>*)MLMethodSet;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><sp/><sp/>MethodExpr-&gt;Value<sp/>=<sp/>MLMethodDefine;</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Method<sp/>=<sp/>ml_accept_term(Parser,<sp/>1);</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Method)<sp/>{</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>&lt;factor&gt;<sp/>not<sp/>&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/>MLTokens[Parser-&gt;Token]);</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Method<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref>);</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Method-&gt;Source<sp/>=<sp/>Parser-&gt;Source.Name;</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Method-&gt;StartLine<sp/>=<sp/>Method-&gt;EndLine<sp/>=<sp/>Parser-&gt;Source.Line;</highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Method-&gt;compile<sp/>=<sp/>ml_unknown_expr_compile;</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"><sp/><sp/><sp/><sp/>MethodExpr-&gt;Child<sp/>=<sp/>Method;</highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>**ArgsSlot<sp/>=<sp/>&amp;Method-&gt;Next;</highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_LEFT_PAREN);</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_EXPR(FunExpr,<sp/>fun,<sp/>fun);</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/><sp/><sp/>FunExpr-&gt;Source<sp/>=<sp/>Parser-&gt;Source.Name;</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_parse2(Parser,<sp/>MLT_RIGHT_PAREN))<sp/>{</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__param__t" kindref="compound">mlc_param_t</ref><sp/>**ParamSlot<sp/>=<sp/>&amp;FunExpr-&gt;Params;</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_OPERATOR))<sp/>{</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Parser-&gt;Ident,<sp/></highlight><highlight class="stringliteral">&quot;..&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(ValueExpr,<sp/>value,<sp/>value);</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueExpr-&gt;Value<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Arg<sp/>=<sp/>ArgsSlot[0]<sp/>=<sp/>ML_EXPR_END(ValueExpr);</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsSlot<sp/>=<sp/>&amp;Arg-&gt;Next;</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>&lt;identfier&gt;<sp/>not<sp/>%s<sp/>(%s)&quot;</highlight><highlight class="normal">,<sp/>MLTokens[Parser-&gt;Token],<sp/>Parser-&gt;Ident);</highlight></codeline>
<codeline lineno="4707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__param__t" kindref="compound">mlc_param_t</ref><sp/>*Param<sp/>=<sp/>ParamSlot[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__param__t" kindref="compound">mlc_param_t</ref>);</highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Line<sp/>=<sp/>Parser-&gt;Source.Line;</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParamSlot<sp/>=<sp/>&amp;Param-&gt;Next;</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_LEFT_SQUARE))<sp/>{</highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Ident<sp/>=<sp/>Parser-&gt;Ident;</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Kind<sp/>=<sp/>ML_PARAM_EXTRA;</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Arg;</highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COLON))<sp/>{</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(ListExpr,<sp/>parent,<sp/>list);</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ListExpr-&gt;Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Arg<sp/>=<sp/>ML_EXPR_END(ListExpr);</highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(ValueExpr,<sp/>value,<sp/>value);</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueExpr-&gt;Value<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Arg<sp/>=<sp/>ML_EXPR_END(ValueExpr);</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsSlot[0]<sp/>=<sp/>Arg;</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsSlot<sp/>=<sp/>&amp;Arg-&gt;Next;</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_RIGHT_SQUARE);</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COMMA))<sp/>{</highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_LEFT_BRACE);</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__param__t" kindref="compound">mlc_param_t</ref><sp/>*Param<sp/>=<sp/>ParamSlot[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__param__t" kindref="compound">mlc_param_t</ref>);</highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Line<sp/>=<sp/>Parser-&gt;Source.Line;</highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Ident<sp/>=<sp/>Parser-&gt;Ident;</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Kind<sp/>=<sp/>ML_PARAM_NAMED;</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_RIGHT_BRACE);</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_LEFT_BRACE))<sp/>{</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Ident<sp/>=<sp/>Parser-&gt;Ident;</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Kind<sp/>=<sp/>ML_PARAM_NAMED;</highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_RIGHT_BRACE);</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(ValueExpr,<sp/>value,<sp/>value);</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueExpr-&gt;Value<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Arg<sp/>=<sp/>ArgsSlot[0]<sp/>=<sp/>ML_EXPR_END(ValueExpr);</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsSlot<sp/>=<sp/>&amp;Arg-&gt;Next;</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_BLANK))<sp/>{</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Ident<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_REF))<sp/>{</highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Kind<sp/>=<sp/>ML_PARAM_BYREF;</highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_VAR))<sp/>{</highlight></codeline>
<codeline lineno="4756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Kind<sp/>=<sp/>ML_PARAM_ASVAR;</highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_LET))<sp/>{</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Ident<sp/>=<sp/>Parser-&gt;Ident;</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_COLON);</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Arg<sp/>=<sp/>ArgsSlot[0]<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsSlot<sp/>=<sp/>&amp;Arg-&gt;Next;</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COMMA));</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_ASSIGN))<sp/>{</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsSlot[0]<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COLON))<sp/>FunExpr-&gt;ReturnType<sp/>=<sp/>ml_accept_term(Parser,<sp/>0);</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FunExpr-&gt;Body<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsSlot[0]<sp/>=<sp/>ML_EXPR_END(FunExpr);</highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(MethodExpr);</highlight></codeline>
<codeline lineno="4777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"></highlight></codeline>
<codeline lineno="4779"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_accept_named_arguments(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/>ml_token_t<sp/>EndToken,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>**ArgsSlot,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Names)<sp/>{</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>**NamesSlot<sp/>=<sp/>ArgsSlot;</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Arg<sp/>=<sp/>ArgsSlot[0];</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/><sp/><sp/>ArgsSlot<sp/>=<sp/>&amp;Arg-&gt;Next;</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_SEMICOLON))<sp/>{</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsSlot[0]<sp/>=<sp/>ml_accept_fun_expr(Parser,<sp/>NULL,<sp/>EndToken);</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expected__delimiter__t" kindref="compound">mlc_expected_delimiter_t</ref><sp/>Expected<sp/>=<sp/>{Parser-&gt;ExpectedDelimiter,<sp/>EndToken};</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;ExpectedDelimiter<sp/>=<sp/>&amp;Expected;</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/><sp/><sp/>Arg<sp/>=<sp/>ArgsSlot[0]<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expected.Token<sp/>!=<sp/>EndToken)<sp/>{</highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;ExpectedDelimiter<sp/>=<sp/>Expected.Prev;</highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/><sp/><sp/>ArgsSlot<sp/>=<sp/>&amp;Arg-&gt;Next;</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COMMA))<sp/>{</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_token_t<sp/>Token<sp/>=<sp/>ml_current2(Parser);</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Token<sp/>==<sp/>MLT_IDENT)<sp/>{</highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_names_add(Names,<sp/>ml_string(Parser-&gt;Ident,<sp/>-1));</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Token<sp/>==<sp/>MLT_VALUE<sp/>&amp;&amp;<sp/>ml_typeof(Parser-&gt;Value)<sp/>==<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_names_add(Names,<sp/>Parser-&gt;Value);</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Argument<sp/>names<sp/>must<sp/>be<sp/>identifiers<sp/>or<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>resume;</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_parse2(Parser,<sp/>MLT_COLON))<sp/>ml_accept(Parser,<sp/>MLT_IS);</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_SEMICOLON))<sp/>{</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;ExpectedDelimiter<sp/>=<sp/>Expected.Prev;</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsSlot[0]<sp/>=<sp/>ml_accept_fun_expr(Parser,<sp/>NULL,<sp/>EndToken);</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Arg<sp/>=<sp/>ArgsSlot[0]<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expected.Token<sp/>!=<sp/>EndToken)<sp/>{</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;ExpectedDelimiter<sp/>=<sp/>Expected.Prev;</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsSlot<sp/>=<sp/>&amp;Arg-&gt;Next;</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4820"><highlight class="normal">resume:</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;ExpectedDelimiter<sp/>=<sp/>Expected.Prev;</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_SEMICOLON))<sp/>{</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*FunExpr<sp/>=<sp/>ml_accept_fun_expr(Parser,<sp/>NULL,<sp/>EndToken);</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FunExpr-&gt;Next<sp/>=<sp/>NamesSlot[0];</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NamesSlot[0]<sp/>=<sp/>FunExpr;</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>EndToken);</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"></highlight></codeline>
<codeline lineno="4831"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_accept_arguments(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/>ml_token_t<sp/>EndToken,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>**ArgsSlot)<sp/>{</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_SEMICOLON))<sp/>{</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsSlot[0]<sp/>=<sp/>ml_accept_fun_expr(Parser,<sp/>NULL,<sp/>EndToken);</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_parse2(Parser,<sp/>EndToken))<sp/>{</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expected__delimiter__t" kindref="compound">mlc_expected_delimiter_t</ref><sp/>Expected<sp/>=<sp/>{Parser-&gt;ExpectedDelimiter,<sp/>EndToken};</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;ExpectedDelimiter<sp/>=<sp/>&amp;Expected;</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Arg<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expected.Token<sp/>!=<sp/>EndToken)<sp/>{</highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsSlot[0]<sp/>=<sp/>Arg;</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;ExpectedDelimiter<sp/>=<sp/>Expected.Prev;</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COLON)<sp/>||<sp/>ml_parse2(Parser,<sp/>MLT_IS))<sp/>{</highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Names<sp/>=<sp/>ml_names();</highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Arg-&gt;compile<sp/>==<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_ident_expr_compile)<sp/>{</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_names_add(Names,<sp/>ml_string(((<ref refid="structmlc__ident__expr__t" kindref="compound">mlc_ident_expr_t</ref><sp/>*)Arg)-&gt;Ident,<sp/>-1));</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Arg-&gt;compile<sp/>==<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_value_expr_compile)<sp/>{</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Name<sp/>=<sp/>((<ref refid="structmlc__value__expr__t" kindref="compound">mlc_value_expr_t</ref><sp/>*)Arg)-&gt;Value;</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_typeof(Name)<sp/>!=<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Argument<sp/>names<sp/>must<sp/>be<sp/>identifiers<sp/>or<sp/>strings&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_names_add(Names,<sp/>Name);</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Argument<sp/>names<sp/>must<sp/>be<sp/>identifiers<sp/>or<sp/>strings&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(NamesArg,<sp/>value,<sp/>value);</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NamesArg-&gt;Value<sp/>=<sp/>Names;</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsSlot[0]<sp/>=<sp/>ML_EXPR_END(NamesArg);</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;ExpectedDelimiter<sp/>=<sp/>Expected.Prev;</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_accept_named_arguments(Parser,<sp/>EndToken,<sp/>ArgsSlot,<sp/>Names);</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsSlot[0]<sp/>=<sp/>Arg;</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsSlot<sp/>=<sp/>&amp;Arg-&gt;Next;</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COMMA));</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;ExpectedDelimiter<sp/>=<sp/>Expected.Prev;</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_SEMICOLON))<sp/>{</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsSlot[0]<sp/>=<sp/>ml_accept_fun_expr(Parser,<sp/>NULL,<sp/>EndToken);</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>EndToken);</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"></highlight></codeline>
<codeline lineno="4875"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmlc__if__case__t" kindref="compound">mlc_if_case_t</ref><sp/>*ml_accept_if_case(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__if__case__t" kindref="compound">mlc_if_case_t</ref><sp/>*Case<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__if__case__t" kindref="compound">mlc_if_case_t</ref>);</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><sp/><sp/>Case-&gt;Local-&gt;Line<sp/>=<sp/>Parser-&gt;Source.Line;</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_VAR))<sp/>{</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Token<sp/>=<sp/>MLT_VAR;</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_LET))<sp/>{</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Token<sp/>=<sp/>MLT_LET;</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Case-&gt;Token)<sp/>{</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_LEFT_PAREN))<sp/>{</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_parse2(Parser,<sp/>MLT_BLANK))<sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Local-&gt;Line<sp/>=<sp/>Parser-&gt;Source.Line;</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Local-&gt;Ident<sp/>=<sp/>Parser-&gt;Ident;</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>**LocalSlot<sp/>=<sp/>&amp;Case-&gt;Local-&gt;Next;</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COMMA))<sp/>{</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_parse2(Parser,<sp/>MLT_BLANK))<sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Count;</highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>LocalSlot[0]<sp/>=<sp/>mlc_local_new(Parser-&gt;Ident,<sp/>Parser-&gt;Source.Line);</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalSlot<sp/>=<sp/>&amp;Local-&gt;Next;</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Local-&gt;Index<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Local-&gt;Ident<sp/>=<sp/>Parser-&gt;Ident;</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"></highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_ASSIGN);</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/><sp/><sp/>Case-&gt;Condition<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_THEN);</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/><sp/><sp/>Case-&gt;Body<sp/>=<sp/>ml_accept_block(Parser);</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Case;</highlight></codeline>
<codeline lineno="4909"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"></highlight></codeline>
<codeline lineno="4911"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ml_accept_with_expr(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child)<sp/>{</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_EXPR(WithExpr,<sp/>local,<sp/>with);</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>**LocalSlot<sp/>=<sp/>&amp;WithExpr-&gt;Local;</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>**ExprSlot<sp/>=<sp/>&amp;WithExpr-&gt;Child;</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_LEFT_PAREN))<sp/>{</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>**First<sp/>=<sp/>LocalSlot;</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_parse2(Parser,<sp/>MLT_BLANK))<sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Count;</highlight></codeline>
<codeline lineno="4922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>LocalSlot[0]<sp/>=<sp/>mlc_local_new(Parser-&gt;Ident,<sp/>Parser-&gt;Source.Line);</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalSlot<sp/>=<sp/>&amp;Local-&gt;Next;</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COMMA));</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>First[0]-&gt;Index<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>LocalSlot[0]<sp/>=<sp/>mlc_local_new(Parser-&gt;Ident,<sp/>Parser-&gt;Source.Line);</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalSlot<sp/>=<sp/>&amp;Local-&gt;Next;</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Local-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_ASSIGN);</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>ExprSlot[0]<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExprSlot<sp/>=<sp/>&amp;Expr-&gt;Next;</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COMMA));</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child)<sp/>{</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExprSlot[0]<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_DO);</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExprSlot[0]<sp/>=<sp/>ml_accept_block(Parser);</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_END);</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(WithExpr);</highlight></codeline>
<codeline lineno="4945"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"></highlight></codeline>
<codeline lineno="4947"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_accept_for_decl(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/><ref refid="structmlc__for__expr__t" kindref="compound">mlc_for_expr_t</ref><sp/>*Expr)<sp/>{</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_IDENT))<sp/>{</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Ident<sp/>=<sp/>Parser-&gt;Ident;</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COMMA))<sp/>{</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;Key<sp/>=<sp/>Ident;</highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;Local<sp/>=<sp/>mlc_local_new(Ident,<sp/>Parser-&gt;Source.Line);</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_LEFT_PAREN))<sp/>{</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>**Slot<sp/>=<sp/>&amp;Expr-&gt;Local;</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_parse2(Parser,<sp/>MLT_BLANK))<sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Count;</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Slot[0]<sp/>=<sp/>mlc_local_new(Parser-&gt;Ident,<sp/>Parser-&gt;Source.Line);</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot<sp/>=<sp/>&amp;Local-&gt;Next;</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COMMA));</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;Unpack<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="4970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;Local<sp/>=<sp/>mlc_local_new(Parser-&gt;Ident,<sp/>Parser-&gt;Source.Line);</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4972"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"></highlight></codeline>
<codeline lineno="4974" refid="structml__compiler__zip__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Iters;</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Keys,<sp/>*Vars;</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumIters,<sp/>NumVars;</highlight></codeline>
<codeline lineno="4979"><highlight class="normal">}<sp/><ref refid="structml__compiler__zip__t" kindref="compound">ml_compiler_zip_t</ref>;</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"></highlight></codeline>
<codeline lineno="4981"><highlight class="normal">ML_TYPE(MLCompilerZipT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;compiler::zip&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"></highlight></codeline>
<codeline lineno="4984"><highlight class="normal">ML_FUNCTION(MLCompilerZip)<sp/>{</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumIters<sp/>=<sp/>Count<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compiler__zip__t" kindref="compound">ml_compiler_zip_t</ref><sp/>*Zip<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__compiler__zip__t" kindref="compound">ml_compiler_zip_t</ref>);</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/><sp/><sp/>Zip-&gt;Type<sp/>=<sp/>MLCompilerZipT;</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/><sp/><sp/>Zip-&gt;NumIters<sp/>=<sp/>NumIters;</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Iters<sp/>=<sp/>Zip-&gt;Iters<sp/>=<sp/>anew(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*,<sp/>NumIters);</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumVars<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Keys<sp/>=<sp/>Zip-&gt;Keys<sp/>=<sp/>anew(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>NumIters);</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>I<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flag<sp/>=<sp/>Keys[I<sp/>/<sp/>2]<sp/>=<sp/>ml_integer_value(Args[I]);</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flag<sp/>&amp;<sp/>1)<sp/>NumVars<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flag<sp/>&gt;&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumVars<sp/>+=<sp/>Flag<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumVars<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iters[I<sp/>/<sp/>2]<sp/>=<sp/>Args[I<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/><sp/><sp/>Zip-&gt;NumVars<sp/>=<sp/>NumVars;</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Vars<sp/>=<sp/>Zip-&gt;Vars<sp/>=<sp/>anew(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>2<sp/>*<sp/>NumVars);</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NumIters;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flag<sp/>=<sp/>Keys[I];</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Keys[I]<sp/>=<sp/>Flag<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Unpack<sp/>=<sp/>Flag<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flag<sp/>&amp;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Vars++<sp/>=<sp/>I;</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Vars++<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Unpack)<sp/>{</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>1;<sp/>K<sp/>&lt;=<sp/>Unpack;<sp/>++K)<sp/>{</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Vars++<sp/>=<sp/>I;</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Vars++<sp/>=<sp/>K;</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Vars++<sp/>=<sp/>I;</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Vars++<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Zip;</highlight></codeline>
<codeline lineno="5024"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"></highlight></codeline>
<codeline lineno="5026" refid="structml__compiler__zip__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Keys,<sp/>*Vars;</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index,<sp/>NumIters,<sp/>NumVars;</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[];</highlight></codeline>
<codeline lineno="5031"><highlight class="normal">}<sp/><ref refid="structml__compiler__zip__state__t" kindref="compound">ml_compiler_zip_state_t</ref>;</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"></highlight></codeline>
<codeline lineno="5033"><highlight class="normal">ML_TYPE(MLCompilerZipStateT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;compiler::zip::state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"></highlight></codeline>
<codeline lineno="5036"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_compiler_zip_iter_key(<ref refid="structml__compiler__zip__state__t" kindref="compound">ml_compiler_zip_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result);</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"></highlight></codeline>
<codeline lineno="5038"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_compiler_zip_iter_value(<ref refid="structml__compiler__zip__state__t" kindref="compound">ml_compiler_zip_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>State-&gt;Index;</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[3<sp/>*<sp/>Index<sp/>+<sp/>2]<sp/>=<sp/>Result;</highlight></codeline>
<codeline lineno="5043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++Index<sp/>&lt;<sp/>State-&gt;NumIters)<sp/>{</highlight></codeline>
<codeline lineno="5044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Keys[Index])<sp/>{</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_compiler_zip_iter_key;</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Args[3<sp/>*<sp/>Index]);</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_compiler_zip_iter_value;</highlight></codeline>
<codeline lineno="5050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Args[3<sp/>*<sp/>Index]);</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(State);</highlight></codeline>
<codeline lineno="5054"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"></highlight></codeline>
<codeline lineno="5056"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_compiler_zip_iter_key(<ref refid="structml__compiler__zip__state__t" kindref="compound">ml_compiler_zip_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>State-&gt;Index;</highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[3<sp/>*<sp/>Index<sp/>+<sp/>1]<sp/>=<sp/>Result;</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_compiler_zip_iter_value;</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Args[3<sp/>*<sp/>Index]);</highlight></codeline>
<codeline lineno="5063"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5064"><highlight class="normal"></highlight></codeline>
<codeline lineno="5065"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_compiler_zip_iter_next(<ref refid="structml__compiler__zip__state__t" kindref="compound">ml_compiler_zip_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="5066"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result<sp/>==<sp/>MLNil)<sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>State-&gt;Index;</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[3<sp/>*<sp/>Index]<sp/>=<sp/>Result;</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++Index<sp/>&lt;<sp/>State-&gt;NumIters)<sp/>{</highlight></codeline>
<codeline lineno="5072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Args[3<sp/>*<sp/>Index]);</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Keys[0])<sp/>{</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_compiler_zip_iter_key;</highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Args[0]);</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_compiler_zip_iter_value;</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Args[0]);</highlight></codeline>
<codeline lineno="5082"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5084"><highlight class="normal"></highlight></codeline>
<codeline lineno="5085"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLCompilerZipStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__compiler__zip__state__t" kindref="compound">ml_compiler_zip_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5087"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_compiler_zip_iter_next;</highlight></codeline>
<codeline lineno="5088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Args[0]);</highlight></codeline>
<codeline lineno="5089"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"></highlight></codeline>
<codeline lineno="5091"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLCompilerZipStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__compiler__zip__state__t" kindref="compound">ml_compiler_zip_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="5092"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="5093"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5094"><highlight class="normal"></highlight></codeline>
<codeline lineno="5095"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLCompilerZipStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__compiler__zip__state__t" kindref="compound">ml_compiler_zip_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="5096"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(State);</highlight></codeline>
<codeline lineno="5097"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5098"><highlight class="normal"></highlight></codeline>
<codeline lineno="5099"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_unpack,<sp/>MLCompilerZipStateT,<sp/><ref refid="structml__compiler__zip__state__t" kindref="compound">ml_compiler_zip_state_t</ref><sp/>*State,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index)<sp/>{</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--Index<sp/>&gt;=<sp/>State-&gt;NumVars)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="5101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Iter<sp/>=<sp/>State-&gt;Vars[2<sp/>*<sp/>Index];</highlight></codeline>
<codeline lineno="5102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Unpack<sp/>=<sp/>State-&gt;Vars[2<sp/>*<sp/>Index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Unpack)<sp/>{</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;Args[3<sp/>*<sp/>Iter<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Unpack<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;Args[3<sp/>*<sp/>Iter<sp/>+<sp/>1]<sp/>?:<sp/>MLNil;</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_unpack(State-&gt;Args[3<sp/>*<sp/>Iter<sp/>+<sp/>2],<sp/>Unpack);</highlight></codeline>
<codeline lineno="5109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5111"><highlight class="normal"></highlight></codeline>
<codeline lineno="5112"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_compiler_zip_iterate(<ref refid="structml__compiler__zip__state__t" kindref="compound">ml_compiler_zip_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result<sp/>==<sp/>MLNil)<sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="5116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>State-&gt;Index;</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[3<sp/>*<sp/>Index]<sp/>=<sp/>Result;</highlight></codeline>
<codeline lineno="5118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++Index<sp/>&lt;<sp/>State-&gt;NumIters)<sp/>{</highlight></codeline>
<codeline lineno="5119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="5120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Args[3<sp/>*<sp/>Index]);</highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Keys[0])<sp/>{</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_compiler_zip_iter_key;</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Args[0]);</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_compiler_zip_iter_value;</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Args[0]);</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"></highlight></codeline>
<codeline lineno="5132"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLCompilerZipT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__compiler__zip__t" kindref="compound">ml_compiler_zip_t</ref><sp/>*Zip)<sp/>{</highlight></codeline>
<codeline lineno="5133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compiler__zip__state__t" kindref="compound">ml_compiler_zip_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__compiler__zip__state__t" kindref="compound">ml_compiler_zip_state_t</ref>,<sp/>Zip-&gt;NumIters<sp/>*<sp/>3,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLCompilerZipStateT;</highlight></codeline>
<codeline lineno="5135"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Keys<sp/>=<sp/>Zip-&gt;Keys;</highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Vars<sp/>=<sp/>Zip-&gt;Vars;</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumIters<sp/>=<sp/>State-&gt;NumIters<sp/>=<sp/>Zip-&gt;NumIters;</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;NumVars<sp/>=<sp/>Zip-&gt;NumVars;</highlight></codeline>
<codeline lineno="5139"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NumIters;<sp/>++I)<sp/>State-&gt;Args[3<sp/>*<sp/>I]<sp/>=<sp/>Zip-&gt;Iters[I];</highlight></codeline>
<codeline lineno="5141"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_compiler_zip_iterate;</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Args[0]);</highlight></codeline>
<codeline lineno="5145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"></highlight></codeline>
<codeline lineno="5147"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_accept_for_decls(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/><ref refid="structmlc__for__expr__t" kindref="compound">mlc_for_expr_t</ref><sp/>*Expr)<sp/>{</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_EXPR(CallExpr,<sp/>parent_value,<sp/>const_call);</highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/><sp/><sp/>CallExpr-&gt;Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLCompilerZip;</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expr-&gt;Key)<sp/>{</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>mlc_local_new(Expr-&gt;Key,<sp/>Expr-&gt;StartLine);</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Local-&gt;Next<sp/>=<sp/>Expr-&gt;Local;</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;Local<sp/>=<sp/>Local;</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Total<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>**LocalSlot<sp/>=<sp/>&amp;Expr-&gt;Local;</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(LocalSlot[0])<sp/>{</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Total;</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalSlot<sp/>=<sp/>&amp;LocalSlot[0]-&gt;Next;</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_EXPR(FlagExpr,<sp/>value,<sp/>value);</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/><sp/><sp/>FlagExpr-&gt;Value<sp/>=<sp/>ml_integer(!!Expr-&gt;Key<sp/>+<sp/>(Expr-&gt;Unpack<sp/>&lt;&lt;<sp/>1));</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"><sp/><sp/><sp/><sp/>FlagExpr-&gt;Next<sp/>=<sp/>Expr-&gt;Sequence;</highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/><sp/><sp/>CallExpr-&gt;Child<sp/>=<sp/>ML_EXPR_END(FlagExpr);</highlight></codeline>
<codeline lineno="5165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>**ArgSlot<sp/>=<sp/>&amp;FlagExpr-&gt;Next-&gt;Next;</highlight></codeline>
<codeline lineno="5166"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Sequence<sp/>=<sp/>ML_EXPR_END(CallExpr);</highlight></codeline>
<codeline lineno="5167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flag<sp/>=<sp/>0,<sp/>Done<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_IDENT))<sp/>{</highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Total;</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>mlc_local_new(Parser-&gt;Ident,<sp/>Parser-&gt;Source.Line);</highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalSlot[0]<sp/>=<sp/>Local;</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalSlot<sp/>=<sp/>&amp;Local-&gt;Next;</highlight></codeline>
<codeline lineno="5174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COMMA))<sp/>{</highlight></codeline>
<codeline lineno="5175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Flag<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Done<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Done)<sp/>{</highlight></codeline>
<codeline lineno="5181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_LEFT_PAREN))<sp/>{</highlight></codeline>
<codeline lineno="5182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Total;</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_parse2(Parser,<sp/>MLT_BLANK))<sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Flag<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>LocalSlot[0]<sp/>=<sp/>mlc_local_new(Parser-&gt;Ident,<sp/>Parser-&gt;Source.Line);</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalSlot<sp/>=<sp/>&amp;Local-&gt;Next;</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COMMA));</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Total;</highlight></codeline>
<codeline lineno="5192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>mlc_local_new(Parser-&gt;Ident,<sp/>Parser-&gt;Source.Line);</highlight></codeline>
<codeline lineno="5194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalSlot[0]<sp/>=<sp/>Local;</highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalSlot<sp/>=<sp/>&amp;Local-&gt;Next;</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(FlagExpr,<sp/>value,<sp/>value);</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlagExpr-&gt;Value<sp/>=<sp/>ml_integer(Flag);</highlight></codeline>
<codeline lineno="5199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlagExpr-&gt;Next<sp/>=<sp/>Expr-&gt;Sequence;</highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgSlot[0]<sp/>=<sp/>ML_EXPR_END(FlagExpr);</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IN);</highlight></codeline>
<codeline lineno="5202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlagExpr-&gt;Next<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgSlot<sp/>=<sp/>&amp;FlagExpr-&gt;Next-&gt;Next;</highlight></codeline>
<codeline lineno="5204"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_SEMICOLON));</highlight></codeline>
<codeline lineno="5205"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Key<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Unpack<sp/>=<sp/>Total;</highlight></codeline>
<codeline lineno="5207"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Sequence<sp/>=<sp/>ML_EXPR_END(CallExpr);</highlight></codeline>
<codeline lineno="5208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5209"><highlight class="normal"></highlight></codeline>
<codeline lineno="5210"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ML_METHOD_DECL(MLInMethod,<sp/></highlight><highlight class="stringliteral">&quot;in&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ML_METHOD_DECL(MLIsMethod,<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5212"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLFunctionSequenceT[];</highlight></codeline>
<codeline lineno="5213"><highlight class="normal"></highlight></codeline>
<codeline lineno="5214"><highlight class="normal">ML_FUNCTION(MLNot)<sp/>{</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"></highlight><highlight class="comment">//@not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5216"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="5217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Args[0]<sp/>==<sp/>MLNil)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="5218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="5219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5220"><highlight class="normal"></highlight></codeline>
<codeline lineno="5221"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ml_parse_factor(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MethDecl)<sp/>{</highlight></codeline>
<codeline lineno="5222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*CompileFns[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="5223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[MLT_EACH]<sp/>=<sp/>ml_each_expr_compile,</highlight></codeline>
<codeline lineno="5224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[MLT_NOT]<sp/>=<sp/>ml_not_expr_compile,</highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[MLT_WHILE]<sp/>=<sp/>ml_or_expr_compile,</highlight></codeline>
<codeline lineno="5226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[MLT_UNTIL]<sp/>=<sp/>ml_and_expr_compile,</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[MLT_EXIT]<sp/>=<sp/>ml_exit_expr_compile,</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[MLT_RET]<sp/>=<sp/>ml_return_expr_compile,</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[MLT_NEXT]<sp/>=<sp/>ml_next_expr_compile,</highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[MLT_NIL]<sp/>=<sp/>ml_nil_expr_compile,</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[MLT_BLANK]<sp/>=<sp/>ml_blank_expr_compile,</highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[MLT_OLD]<sp/>=<sp/>ml_old_expr_compile,</highlight></codeline>
<codeline lineno="5233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[MLT_IT]<sp/>=<sp/>ml_it_expr_compile</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ExprName<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5236"><highlight class="normal">with_name:</highlight></codeline>
<codeline lineno="5237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ml_current(Parser))<sp/>{</highlight></codeline>
<codeline lineno="5238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_NOT:<sp/>{</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>ml_parse_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child)<sp/>{</highlight></codeline>
<codeline lineno="5242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(ParentExpr,<sp/>parent,<sp/>not);</highlight></codeline>
<codeline lineno="5243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParentExpr-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(ParentExpr);</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(ValueExpr,<sp/>value,<sp/>value);</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueExpr-&gt;Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLNot;</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(ValueExpr);</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_EACH:</highlight></codeline>
<codeline lineno="5252"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*ParentExpr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref>);</highlight></codeline>
<codeline lineno="5254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParentExpr-&gt;compile<sp/>=<sp/>CompileFns[Parser-&gt;Token];</highlight></codeline>
<codeline lineno="5255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParentExpr-&gt;StartLine<sp/>=<sp/>Parser-&gt;Source.Line;</highlight></codeline>
<codeline lineno="5257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParentExpr-&gt;Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(ParentExpr);</highlight></codeline>
<codeline lineno="5259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_WHILE:</highlight></codeline>
<codeline lineno="5261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_UNTIL:</highlight></codeline>
<codeline lineno="5262"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*ParentExpr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref>);</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParentExpr-&gt;compile<sp/>=<sp/>CompileFns[Parser-&gt;Token];</highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParentExpr-&gt;StartLine<sp/>=<sp/>Parser-&gt;Source.Line;</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParentExpr-&gt;Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(ExitExpr,<sp/>parent,<sp/>exit);</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExitExpr-&gt;Name<sp/>=<sp/>ExprName;</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_COMMA))<sp/>{</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExitExpr-&gt;Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*RegisterExpr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref>);</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RegisterExpr-&gt;compile<sp/>=<sp/>ml_register_expr_compile;</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RegisterExpr-&gt;StartLine<sp/>=<sp/>RegisterExpr-&gt;EndLine<sp/>=<sp/>Parser-&gt;Source.Line;</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExitExpr-&gt;Child<sp/>=<sp/>RegisterExpr;</highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParentExpr-&gt;Child-&gt;Next<sp/>=<sp/>ML_EXPR_END(ExitExpr);</highlight></codeline>
<codeline lineno="5279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(ParentExpr);</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_EXIT:</highlight></codeline>
<codeline lineno="5282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_RET:</highlight></codeline>
<codeline lineno="5283"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*ParentExpr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref>);</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParentExpr-&gt;compile<sp/>=<sp/>CompileFns[Parser-&gt;Token];</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParentExpr-&gt;StartLine<sp/>=<sp/>Parser-&gt;Source.Line;</highlight></codeline>
<codeline lineno="5288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParentExpr-&gt;Name<sp/>=<sp/>ExprName;</highlight></codeline>
<codeline lineno="5289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParentExpr-&gt;Child<sp/>=<sp/>ml_parse_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(ParentExpr);</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_NEXT:<sp/>{</highlight></codeline>
<codeline lineno="5293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*ParentExpr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref>);</highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParentExpr-&gt;compile<sp/>=<sp/>CompileFns[Parser-&gt;Token];</highlight></codeline>
<codeline lineno="5295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParentExpr-&gt;StartLine<sp/>=<sp/>Parser-&gt;Source.Line;</highlight></codeline>
<codeline lineno="5297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParentExpr-&gt;Name<sp/>=<sp/>ExprName;</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(ParentExpr);</highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_NIL:</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_BLANK:</highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_OLD:</highlight></codeline>
<codeline lineno="5303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_IT:</highlight></codeline>
<codeline lineno="5304"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref>);</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>CompileFns[Parser-&gt;Token];</highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/>Parser-&gt;Source.Name;</highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>Expr-&gt;EndLine<sp/>=<sp/>Parser-&gt;Source.Line;</highlight></codeline>
<codeline lineno="5310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Expr;</highlight></codeline>
<codeline lineno="5311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_DO:<sp/>{</highlight></codeline>
<codeline lineno="5313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*BlockExpr<sp/>=<sp/>ml_accept_block(Parser);</highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_END);</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BlockExpr;</highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_IF:<sp/>{</highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(IfExpr,<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__if__case__t" kindref="compound">mlc_if_case_t</ref><sp/>**CaseSlot<sp/>=<sp/>&amp;IfExpr-&gt;Cases;</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__if__case__t" kindref="compound">mlc_if_case_t</ref><sp/>*Case<sp/>=<sp/>CaseSlot[0]<sp/>=<sp/>ml_accept_if_case(Parser);</highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CaseSlot<sp/>=<sp/>&amp;Case-&gt;Next;</highlight></codeline>
<codeline lineno="5325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_ELSEIF));</highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_ELSE))<sp/>IfExpr-&gt;Else<sp/>=<sp/>ml_accept_block(Parser);</highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_END);</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(IfExpr);</highlight></codeline>
<codeline lineno="5329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_SWITCH:<sp/>{</highlight></codeline>
<codeline lineno="5331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(CaseExpr,<sp/>parent,<sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>**CaseExprs<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_COLON))<sp/>{</highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(ProviderExpr,<sp/>parent_value,<sp/>const_call);</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProviderExpr-&gt;Value<sp/>=<sp/>MLCompilerSwitch;</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProviderExpr-&gt;Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(InlineExpr,<sp/>parent,<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InlineExpr-&gt;Child<sp/>=<sp/>ML_EXPR_END(ProviderExpr);</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CaseExprs<sp/>=<sp/>&amp;InlineExpr-&gt;Next;</highlight></codeline>
<codeline lineno="5342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(SwitchExpr,<sp/>parent,<sp/>call);</highlight></codeline>
<codeline lineno="5343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwitchExpr-&gt;Child<sp/>=<sp/>ML_EXPR_END(InlineExpr);</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwitchExpr-&gt;Next<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(CallExpr,<sp/>parent,<sp/>call);</highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallExpr-&gt;Child<sp/>=<sp/>ML_EXPR_END(SwitchExpr);</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Child<sp/>=<sp/>ML_EXPR_END(CallExpr);</highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CaseExpr-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_CASE))<sp/>{</highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CaseExprs)<sp/>{</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(ListExpr,<sp/>parent,<sp/>list);</highlight></codeline>
<codeline lineno="5353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ListChild<sp/>=<sp/>ListExpr-&gt;Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_COMMA))<sp/>{</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ListChild<sp/>=<sp/>ListChild-&gt;Next<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CaseExprs[0]<sp/>=<sp/>ML_EXPR_END(ListExpr);</highlight></codeline>
<codeline lineno="5358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CaseExprs<sp/>=<sp/>&amp;ListExpr-&gt;Next;</highlight></codeline>
<codeline lineno="5359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_DO);</highlight></codeline>
<codeline lineno="5360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Child<sp/>=<sp/>Child-&gt;Next<sp/>=<sp/>ml_accept_block(Parser);</highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_ELSE))<sp/>{</highlight></codeline>
<codeline lineno="5364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Child-&gt;Next<sp/>=<sp/>ml_accept_block(Parser);</highlight></codeline>
<codeline lineno="5365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*NilExpr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref>);</highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NilExpr-&gt;compile<sp/>=<sp/>ml_nil_expr_compile;</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NilExpr-&gt;StartLine<sp/>=<sp/>NilExpr-&gt;EndLine<sp/>=<sp/>Parser-&gt;Source.Line;</highlight></codeline>
<codeline lineno="5369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Child-&gt;Next<sp/>=<sp/>NilExpr;</highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_END);</highlight></codeline>
<codeline lineno="5372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(CaseExpr);</highlight></codeline>
<codeline lineno="5373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_WHEN:<sp/>{</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(WhenExpr,<sp/>local,<sp/>with);</highlight></codeline>
<codeline lineno="5377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Ident;</highlight></codeline>
<codeline lineno="5378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GC_asprintf(&amp;Ident,<sp/></highlight><highlight class="stringliteral">&quot;when:%d&quot;</highlight><highlight class="normal">,<sp/>Parser-&gt;Source.Line);</highlight></codeline>
<codeline lineno="5379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WhenExpr-&gt;Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WhenExpr-&gt;Local<sp/>=<sp/>mlc_local_new(Ident,<sp/>Parser-&gt;Source.Line);</highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(IfExpr,<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__if__case__t" kindref="compound">mlc_if_case_t</ref><sp/>**CaseSlot<sp/>=<sp/>&amp;IfExpr-&gt;Cases;</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__if__case__t" kindref="compound">mlc_if_case_t</ref><sp/>*Case<sp/>=<sp/>CaseSlot[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__if__case__t" kindref="compound">mlc_if_case_t</ref>);</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CaseSlot<sp/>=<sp/>&amp;Case-&gt;Next;</highlight></codeline>
<codeline lineno="5386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>**ConditionSlot<sp/>=<sp/>&amp;Case-&gt;Condition;</highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IS);</highlight></codeline>
<codeline lineno="5388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Method<sp/>=<sp/>MLIsMethod;</highlight></codeline>
<codeline lineno="5389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(IdentExpr,<sp/>ident,<sp/>ident);</highlight></codeline>
<codeline lineno="5391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IdentExpr-&gt;Ident<sp/>=<sp/>Ident;</highlight></codeline>
<codeline lineno="5392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_NIL))<sp/>{</highlight></codeline>
<codeline lineno="5393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(NotExpr,<sp/>parent,<sp/>not);</highlight></codeline>
<codeline lineno="5394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NotExpr-&gt;Child<sp/>=<sp/>ML_EXPR_END(IdentExpr);</highlight></codeline>
<codeline lineno="5395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConditionSlot[0]<sp/>=<sp/>ML_EXPR_END(NotExpr);</highlight></codeline>
<codeline lineno="5396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConditionSlot<sp/>=<sp/>&amp;NotExpr-&gt;Next;</highlight></codeline>
<codeline lineno="5397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Method<sp/>=<sp/>MLIsMethod;</highlight></codeline>
<codeline lineno="5398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_IN))<sp/>{</highlight></codeline>
<codeline lineno="5400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Method<sp/>=<sp/>MLInMethod;</highlight></codeline>
<codeline lineno="5401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_OPERATOR))<sp/>{</highlight></codeline>
<codeline lineno="5402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Method<sp/>=<sp/>ml_method(Parser-&gt;Ident);</highlight></codeline>
<codeline lineno="5403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Method)<sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>operator<sp/>not<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>MLTokens[Parser-&gt;Token]);</highlight></codeline>
<codeline lineno="5405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IdentExpr-&gt;Next<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(CallExpr,<sp/>parent_value,<sp/>const_call);</highlight></codeline>
<codeline lineno="5407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallExpr-&gt;Value<sp/>=<sp/>Method;</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallExpr-&gt;Child<sp/>=<sp/>ML_EXPR_END(IdentExpr);</highlight></codeline>
<codeline lineno="5409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConditionSlot[0]<sp/>=<sp/>ML_EXPR_END(CallExpr);</highlight></codeline>
<codeline lineno="5410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConditionSlot<sp/>=<sp/>&amp;CallExpr-&gt;Next;</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COMMA));</highlight></codeline>
<codeline lineno="5413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Case-&gt;Condition-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="5414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(OrExpr,<sp/>parent,<sp/>or);</highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OrExpr-&gt;Child<sp/>=<sp/>Case-&gt;Condition;</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Condition<sp/>=<sp/>ML_EXPR_END(OrExpr);</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_DO);</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Body<sp/>=<sp/>ml_accept_block(Parser);</highlight></codeline>
<codeline lineno="5420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_ELSE))<sp/>{</highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IfExpr-&gt;Else<sp/>=<sp/>ml_accept_block(Parser);</highlight></codeline>
<codeline lineno="5422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_END);</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!ml_parse2(Parser,<sp/>MLT_END));</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WhenExpr-&gt;Child-&gt;Next<sp/>=<sp/>ML_EXPR_END(IfExpr);</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(WhenExpr);</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_LOOP:<sp/>{</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(LoopExpr,<sp/>parent,<sp/>loop);</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LoopExpr-&gt;Name<sp/>=<sp/>ExprName;</highlight></codeline>
<codeline lineno="5433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LoopExpr-&gt;Child<sp/>=<sp/>ml_accept_block(Parser);</highlight></codeline>
<codeline lineno="5434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_END);</highlight></codeline>
<codeline lineno="5435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(LoopExpr);</highlight></codeline>
<codeline lineno="5436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_FOR:<sp/>{</highlight></codeline>
<codeline lineno="5438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(ForExpr,<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ForExpr-&gt;Name<sp/>=<sp/>ExprName;</highlight></codeline>
<codeline lineno="5441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept_for_decl(Parser,<sp/>ForExpr);</highlight></codeline>
<codeline lineno="5442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IN);</highlight></codeline>
<codeline lineno="5443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ForExpr-&gt;Sequence<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_SEMICOLON))<sp/>ml_accept_for_decls(Parser,<sp/>ForExpr);</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_DO);</highlight></codeline>
<codeline lineno="5446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ForExpr-&gt;Body<sp/>=<sp/>ml_accept_block(Parser);</highlight></codeline>
<codeline lineno="5447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_ELSE))<sp/>{</highlight></codeline>
<codeline lineno="5448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ForExpr-&gt;Body-&gt;Next<sp/>=<sp/>ml_accept_block(Parser);</highlight></codeline>
<codeline lineno="5449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_END);</highlight></codeline>
<codeline lineno="5451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(ForExpr);</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_FUN:<sp/>{</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_LEFT_PAREN))<sp/>{</highlight></codeline>
<codeline lineno="5456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_accept_fun_expr(Parser,<sp/>NULL,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="5457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(FunExpr,<sp/>fun,<sp/>fun);</highlight></codeline>
<codeline lineno="5459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FunExpr-&gt;Source<sp/>=<sp/>Parser-&gt;Source.Name;</highlight></codeline>
<codeline lineno="5460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FunExpr-&gt;Body<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(FunExpr);</highlight></codeline>
<codeline lineno="5462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_METH:<sp/>{</highlight></codeline>
<codeline lineno="5465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_accept_meth_expr(Parser);</highlight></codeline>
<codeline lineno="5467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_SEQ:<sp/>{</highlight></codeline>
<codeline lineno="5469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(FunExpr,<sp/>fun,<sp/>fun);</highlight></codeline>
<codeline lineno="5471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FunExpr-&gt;Source<sp/>=<sp/>Parser-&gt;Source.Name;</highlight></codeline>
<codeline lineno="5472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FunExpr-&gt;Body<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(SequenceExpr,<sp/>parent_value,<sp/>const_call);</highlight></codeline>
<codeline lineno="5474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SequenceExpr-&gt;Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLFunctionSequenceT;</highlight></codeline>
<codeline lineno="5475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SequenceExpr-&gt;Child<sp/>=<sp/>ML_EXPR_END(FunExpr);</highlight></codeline>
<codeline lineno="5476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(SequenceExpr);</highlight></codeline>
<codeline lineno="5477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_SUSP:<sp/>{</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(SuspendExpr,<sp/>parent,<sp/>suspend);</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SuspendExpr-&gt;Child<sp/>=<sp/>ml_parse_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_COMMA))<sp/>{</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SuspendExpr-&gt;Child-&gt;Next<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(SuspendExpr);</highlight></codeline>
<codeline lineno="5486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_WITH:<sp/>{</highlight></codeline>
<codeline lineno="5488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_accept_with_expr(Parser,<sp/>NULL);</highlight></codeline>
<codeline lineno="5490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_IF_CONFIG:<sp/>{</highlight></codeline>
<codeline lineno="5492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_VALUE);</highlight></codeline>
<codeline lineno="5494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Config<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Parser-&gt;Value,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="5496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Config<sp/>=<sp/>ml_string_value(Parser-&gt;Value);</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParserError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>string<sp/>not<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>MLTokens[Parser-&gt;Token]);</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(IfConfigExpr,<sp/>if_config,<sp/>if_config);</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IfConfigExpr-&gt;Config<sp/>=<sp/>Config;</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IfConfigExpr-&gt;Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(IfConfigExpr);</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_IDENT:<sp/>{</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Ident<sp/>=<sp/>Parser-&gt;Ident;</highlight></codeline>
<codeline lineno="5508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_NAMED))<sp/>{</highlight></codeline>
<codeline lineno="5509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExprName<sp/>=<sp/>Ident;</highlight></codeline>
<codeline lineno="5510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>with_name;</highlight></codeline>
<codeline lineno="5511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(IdentExpr,<sp/>ident,<sp/>ident);</highlight></codeline>
<codeline lineno="5513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IdentExpr-&gt;Ident<sp/>=<sp/>Ident;</highlight></codeline>
<codeline lineno="5514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(IdentExpr);</highlight></codeline>
<codeline lineno="5515"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_IMPORT:<sp/>{</highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(ValueExpr,<sp/>value,<sp/>value);</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueExpr-&gt;Value<sp/>=<sp/>ml_symbol(Parser-&gt;Ident);</highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(ValueExpr);</highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_VALUE:<sp/>{</highlight></codeline>
<codeline lineno="5523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(ValueExpr,<sp/>value,<sp/>value);</highlight></codeline>
<codeline lineno="5525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueExpr-&gt;Value<sp/>=<sp/>Parser-&gt;Value;</highlight></codeline>
<codeline lineno="5526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(ValueExpr);</highlight></codeline>
<codeline lineno="5527"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_EXPR:<sp/>{</highlight></codeline>
<codeline lineno="5529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Expr;</highlight></codeline>
<codeline lineno="5531"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_ESCAPE:<sp/>{</highlight></codeline>
<codeline lineno="5533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Parser-&gt;Escape(Parser-&gt;EscapeData);</highlight></codeline>
<codeline lineno="5535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLExprT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="5536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>{</highlight></codeline>
<codeline lineno="5537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/>ml_error_type(Value),<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ml_error_message(Value));</highlight></codeline>
<codeline lineno="5538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>expression<sp/>not<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Value)-&gt;Name);</highlight></codeline>
<codeline lineno="5540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref>);</highlight></codeline>
<codeline lineno="5542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/>Parser-&gt;Source.Name;</highlight></codeline>
<codeline lineno="5543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>Expr-&gt;EndLine<sp/>=<sp/>Parser-&gt;Source.Line;</highlight></codeline>
<codeline lineno="5544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_unknown_expr_compile;</highlight></codeline>
<codeline lineno="5545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Expr;</highlight></codeline>
<codeline lineno="5546"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_INLINE:<sp/>{</highlight></codeline>
<codeline lineno="5548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(InlineExpr,<sp/>parent,<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InlineExpr-&gt;Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="5552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(InlineExpr);</highlight></codeline>
<codeline lineno="5553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_EXPAND:<sp/>{</highlight></codeline>
<codeline lineno="5555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_VALUE))<sp/>{</highlight></codeline>
<codeline lineno="5557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Parser-&gt;Value;</highlight></codeline>
<codeline lineno="5558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLExprT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="5559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>expression<sp/>not<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Value)-&gt;Name);</highlight></codeline>
<codeline lineno="5560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref>);</highlight></codeline>
<codeline lineno="5561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/>Parser-&gt;Source.Name;</highlight></codeline>
<codeline lineno="5562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>Expr-&gt;EndLine<sp/>=<sp/>Parser-&gt;Source.Line;</highlight></codeline>
<codeline lineno="5563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_unknown_expr_compile;</highlight></codeline>
<codeline lineno="5564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Expr;</highlight></codeline>
<codeline lineno="5565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="5567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(DefineExpr,<sp/>ident,<sp/>define);</highlight></codeline>
<codeline lineno="5568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DefineExpr-&gt;Ident<sp/>=<sp/>Parser-&gt;Ident;</highlight></codeline>
<codeline lineno="5569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(DefineExpr);</highlight></codeline>
<codeline lineno="5570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_EXPR_VALUE:<sp/>{</highlight></codeline>
<codeline lineno="5572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(ValueExpr,<sp/>value,<sp/>value);</highlight></codeline>
<codeline lineno="5574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueExpr-&gt;Value<sp/>=<sp/>ml_expr_value(ml_accept_expression(Parser,<sp/>EXPR_DEFAULT));</highlight></codeline>
<codeline lineno="5575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>ML_EXPR_END(ValueExpr);</highlight></codeline>
<codeline lineno="5576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_COMMA))<sp/>{</highlight></codeline>
<codeline lineno="5577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(CallExpr,<sp/>parent_value,<sp/>const_call);</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallExpr-&gt;Value<sp/>=<sp/>ml_method(</highlight><highlight class="stringliteral">&quot;subst&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallExpr-&gt;Child<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept_arguments(Parser,<sp/>MLT_RIGHT_BRACE,<sp/>&amp;Expr-&gt;Next);</highlight></codeline>
<codeline lineno="5581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/>ML_EXPR_END(CallExpr);</highlight></codeline>
<codeline lineno="5582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_RIGHT_BRACE);</highlight></codeline>
<codeline lineno="5584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Expr;</highlight></codeline>
<codeline lineno="5586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_LEFT_PAREN:<sp/>{</highlight></codeline>
<codeline lineno="5588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_SEMICOLON))<sp/>{</highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(TupleExpr,<sp/>parent,<sp/>tuple);</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TupleExpr-&gt;Child<sp/>=<sp/>ml_accept_fun_expr(Parser,<sp/>NULL,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(TupleExpr);</highlight></codeline>
<codeline lineno="5593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COMMA))<sp/>{</highlight></codeline>
<codeline lineno="5596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(TupleExpr,<sp/>parent,<sp/>tuple);</highlight></codeline>
<codeline lineno="5597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TupleExpr-&gt;Child<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="5598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept_arguments(Parser,<sp/>MLT_RIGHT_PAREN,<sp/>&amp;Expr-&gt;Next);</highlight></codeline>
<codeline lineno="5599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/>ML_EXPR_END(TupleExpr);</highlight></codeline>
<codeline lineno="5600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_SEMICOLON))<sp/>{</highlight></codeline>
<codeline lineno="5601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(TupleExpr,<sp/>parent,<sp/>tuple);</highlight></codeline>
<codeline lineno="5602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TupleExpr-&gt;Child<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="5603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;Next<sp/>=<sp/>ml_accept_fun_expr(Parser,<sp/>NULL,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="5604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/>ML_EXPR_END(TupleExpr);</highlight></codeline>
<codeline lineno="5605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="5607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Expr;</highlight></codeline>
<codeline lineno="5609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_LEFT_SQUARE:<sp/>{</highlight></codeline>
<codeline lineno="5611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(ListExpr,<sp/>parent,<sp/>list);</highlight></codeline>
<codeline lineno="5613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>**ArgsSlot<sp/>=<sp/>&amp;ListExpr-&gt;Child;</highlight></codeline>
<codeline lineno="5614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_parse2(Parser,<sp/>MLT_RIGHT_SQUARE))<sp/>{</highlight></codeline>
<codeline lineno="5615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Arg<sp/>=<sp/>ArgsSlot[0]<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsSlot<sp/>=<sp/>&amp;Arg-&gt;Next;</highlight></codeline>
<codeline lineno="5618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COMMA));</highlight></codeline>
<codeline lineno="5619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_RIGHT_SQUARE);</highlight></codeline>
<codeline lineno="5620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(ListExpr);</highlight></codeline>
<codeline lineno="5622"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_LEFT_BRACE:<sp/>{</highlight></codeline>
<codeline lineno="5624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(MapExpr,<sp/>parent,<sp/>map);</highlight></codeline>
<codeline lineno="5626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>**ArgsSlot<sp/>=<sp/>&amp;MapExpr-&gt;Child;</highlight></codeline>
<codeline lineno="5627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_parse2(Parser,<sp/>MLT_RIGHT_BRACE))<sp/>{</highlight></codeline>
<codeline lineno="5628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Arg<sp/>=<sp/>ArgsSlot[0]<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsSlot<sp/>=<sp/>&amp;Arg-&gt;Next;</highlight></codeline>
<codeline lineno="5631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COLON)<sp/>||<sp/>ml_parse2(Parser,<sp/>MLT_IS))<sp/>{</highlight></codeline>
<codeline lineno="5632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ArgExpr<sp/>=<sp/>ArgsSlot[0]<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsSlot<sp/>=<sp/>&amp;ArgExpr-&gt;Next;</highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(ArgExpr,<sp/>value,<sp/>value);</highlight></codeline>
<codeline lineno="5636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgExpr-&gt;Value<sp/>=<sp/>MLSome;</highlight></codeline>
<codeline lineno="5637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsSlot[0]<sp/>=<sp/>ML_EXPR_END(ArgExpr);</highlight></codeline>
<codeline lineno="5638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsSlot<sp/>=<sp/>&amp;ArgExpr-&gt;Next;</highlight></codeline>
<codeline lineno="5639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COMMA));</highlight></codeline>
<codeline lineno="5641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_RIGHT_BRACE);</highlight></codeline>
<codeline lineno="5642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(MapExpr);</highlight></codeline>
<codeline lineno="5644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_OPERATOR:<sp/>{</highlight></codeline>
<codeline lineno="5646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Operator<sp/>=<sp/>ml_method(Parser-&gt;Ident);</highlight></codeline>
<codeline lineno="5648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MethDecl)<sp/>{</highlight></codeline>
<codeline lineno="5649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(ValueExpr,<sp/>value,<sp/>value);</highlight></codeline>
<codeline lineno="5650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueExpr-&gt;Value<sp/>=<sp/>Operator;</highlight></codeline>
<codeline lineno="5651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(ValueExpr);</highlight></codeline>
<codeline lineno="5652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_LEFT_PAREN))<sp/>{</highlight></codeline>
<codeline lineno="5653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(CallExpr,<sp/>parent_value,<sp/>const_call);</highlight></codeline>
<codeline lineno="5654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallExpr-&gt;Value<sp/>=<sp/>Operator;</highlight></codeline>
<codeline lineno="5655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept_arguments(Parser,<sp/>MLT_RIGHT_PAREN,<sp/>&amp;CallExpr-&gt;Child);</highlight></codeline>
<codeline lineno="5656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(CallExpr);</highlight></codeline>
<codeline lineno="5657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>ml_parse_term(Parser,<sp/>0);</highlight></codeline>
<codeline lineno="5659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child)<sp/>{</highlight></codeline>
<codeline lineno="5660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(CallExpr,<sp/>parent_value,<sp/>const_call);</highlight></codeline>
<codeline lineno="5661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallExpr-&gt;Value<sp/>=<sp/>Operator;</highlight></codeline>
<codeline lineno="5662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallExpr-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="5663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(CallExpr);</highlight></codeline>
<codeline lineno="5664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(ValueExpr,<sp/>value,<sp/>value);</highlight></codeline>
<codeline lineno="5666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueExpr-&gt;Value<sp/>=<sp/>Operator;</highlight></codeline>
<codeline lineno="5667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(ValueExpr);</highlight></codeline>
<codeline lineno="5668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5670"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_METHOD:<sp/>{</highlight></codeline>
<codeline lineno="5672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(ValueExpr,<sp/>value,<sp/>value);</highlight></codeline>
<codeline lineno="5674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueExpr-&gt;Value<sp/>=<sp/>ml_method(Parser-&gt;Ident);</highlight></codeline>
<codeline lineno="5675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(ValueExpr);</highlight></codeline>
<codeline lineno="5676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5678"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5680"><highlight class="normal"></highlight></codeline>
<codeline lineno="5681"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ml_parse_term_postfix(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MethDecl,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr)<sp/>{</highlight></codeline>
<codeline lineno="5682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="5683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ml_current(Parser))<sp/>{</highlight></codeline>
<codeline lineno="5684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_LEFT_PAREN:<sp/>{</highlight></codeline>
<codeline lineno="5685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MethDecl)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Expr;</highlight></codeline>
<codeline lineno="5686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(CallExpr,<sp/>parent,<sp/>call);</highlight></codeline>
<codeline lineno="5688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallExpr-&gt;Child<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="5689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept_arguments(Parser,<sp/>MLT_RIGHT_PAREN,<sp/>&amp;Expr-&gt;Next);</highlight></codeline>
<codeline lineno="5690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/>ML_EXPR_END(CallExpr);</highlight></codeline>
<codeline lineno="5691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_LEFT_SQUARE:<sp/>{</highlight></codeline>
<codeline lineno="5694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(IndexExpr,<sp/>parent_value,<sp/>const_call);</highlight></codeline>
<codeline lineno="5696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexExpr-&gt;Value<sp/>=<sp/>IndexMethod;</highlight></codeline>
<codeline lineno="5697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexExpr-&gt;Child<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="5698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept_arguments(Parser,<sp/>MLT_RIGHT_SQUARE,<sp/>&amp;Expr-&gt;Next);</highlight></codeline>
<codeline lineno="5699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/>ML_EXPR_END(IndexExpr);</highlight></codeline>
<codeline lineno="5700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_METHOD:<sp/>{</highlight></codeline>
<codeline lineno="5703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(CallExpr,<sp/>parent_value,<sp/>const_call);</highlight></codeline>
<codeline lineno="5705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallExpr-&gt;Value<sp/>=<sp/>ml_method(Parser-&gt;Ident);</highlight></codeline>
<codeline lineno="5706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallExpr-&gt;Child<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="5707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_LEFT_PAREN))<sp/>{</highlight></codeline>
<codeline lineno="5708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept_arguments(Parser,<sp/>MLT_RIGHT_PAREN,<sp/>&amp;Expr-&gt;Next);</highlight></codeline>
<codeline lineno="5709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/>ML_EXPR_END(CallExpr);</highlight></codeline>
<codeline lineno="5711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_IMPORT:<sp/>{</highlight></codeline>
<codeline lineno="5714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(ResolveExpr,<sp/>parent_value,<sp/>resolve);</highlight></codeline>
<codeline lineno="5716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResolveExpr-&gt;Value<sp/>=<sp/>ml_string(Parser-&gt;Ident,<sp/>-1);</highlight></codeline>
<codeline lineno="5717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResolveExpr-&gt;Child<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="5718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/>ML_EXPR_END(ResolveExpr);</highlight></codeline>
<codeline lineno="5719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_LEFT_BRACE:<sp/>{</highlight></codeline>
<codeline lineno="5722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(GuardExpr,<sp/>parent,<sp/>guard);</highlight></codeline>
<codeline lineno="5724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GuardExpr-&gt;Child<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="5725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Guard<sp/>=<sp/>ml_parse_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Guard)<sp/>{</highlight></codeline>
<codeline lineno="5727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guard<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref>);</highlight></codeline>
<codeline lineno="5728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guard-&gt;compile<sp/>=<sp/>ml_it_expr_compile;</highlight></codeline>
<codeline lineno="5729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guard-&gt;StartLine<sp/>=<sp/>Guard-&gt;EndLine<sp/>=<sp/>Parser-&gt;Source.Line;</highlight></codeline>
<codeline lineno="5730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;Next<sp/>=<sp/>Guard;</highlight></codeline>
<codeline lineno="5732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_RIGHT_BRACE);</highlight></codeline>
<codeline lineno="5733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/>ML_EXPR_END(GuardExpr);</highlight></codeline>
<codeline lineno="5734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="5737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Expr;</highlight></codeline>
<codeline lineno="5738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5740"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>Unreachable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5743"><highlight class="normal"></highlight></codeline>
<codeline lineno="5744"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ml_parse_term(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MethDecl)<sp/>{</highlight></codeline>
<codeline lineno="5745"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>ml_parse_factor(Parser,<sp/>MethDecl);</highlight></codeline>
<codeline lineno="5746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Expr)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_parse_term_postfix(Parser,<sp/>MethDecl,<sp/>Expr);</highlight></codeline>
<codeline lineno="5748"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5749"><highlight class="normal"></highlight></codeline>
<codeline lineno="5750"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ml_accept_term(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MethDecl)<sp/>{</highlight></codeline>
<codeline lineno="5751"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_skip_eol(Parser);</highlight></codeline>
<codeline lineno="5752"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>ml_parse_term(Parser,<sp/>MethDecl);</highlight></codeline>
<codeline lineno="5753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Expr)<sp/>{</highlight></codeline>
<codeline lineno="5754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>&lt;expression&gt;<sp/>not<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>MLTokens[Parser-&gt;Token]);</highlight></codeline>
<codeline lineno="5755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref>);</highlight></codeline>
<codeline lineno="5756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/>Parser-&gt;Source.Name;</highlight></codeline>
<codeline lineno="5757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>Expr-&gt;EndLine<sp/>=<sp/>Parser-&gt;Source.Line;</highlight></codeline>
<codeline lineno="5758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_unknown_expr_compile;</highlight></codeline>
<codeline lineno="5759"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Expr;</highlight></codeline>
<codeline lineno="5761"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5762"><highlight class="normal"></highlight></codeline>
<codeline lineno="5763"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ml_parse_expression(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/>ml_expr_level_t<sp/>Level)<sp/>{</highlight></codeline>
<codeline lineno="5764"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>ml_parse_term(Parser,<sp/>0);</highlight></codeline>
<codeline lineno="5765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Expr)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ml_current(Parser))<sp/>{</highlight></codeline>
<codeline lineno="5767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_OPERATOR:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_IDENT:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_IN:<sp/>{</highlight></codeline>
<codeline lineno="5768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(CallExpr,<sp/>parent_value,<sp/>const_call);</highlight></codeline>
<codeline lineno="5770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallExpr-&gt;Value<sp/>=<sp/>ml_method(Parser-&gt;Ident);</highlight></codeline>
<codeline lineno="5771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallExpr-&gt;Child<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="5772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_LEFT_PAREN))<sp/>{</highlight></codeline>
<codeline lineno="5773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ml_accept_arguments(Parser,<sp/>MLT_RIGHT_PAREN,<sp/>&amp;Expr-&gt;Next);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr2<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept_arguments(Parser,<sp/>MLT_RIGHT_PAREN,<sp/>&amp;Expr2);</highlight></codeline>
<codeline lineno="5776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expr2)<sp/>{</highlight></codeline>
<codeline lineno="5777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Expr2-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="5778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;Next<sp/>=<sp/>Expr2;</highlight></codeline>
<codeline lineno="5779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;Next<sp/>=<sp/>ml_parse_term_postfix(Parser,<sp/>0,<sp/>Expr2);</highlight></codeline>
<codeline lineno="5781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;Next<sp/>=<sp/>ml_accept_term(Parser,<sp/>0);</highlight></codeline>
<codeline lineno="5785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/>ML_EXPR_END(CallExpr);</highlight></codeline>
<codeline lineno="5787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5788"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_ASSIGN:<sp/>{</highlight></codeline>
<codeline lineno="5790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="5791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(AssignExpr,<sp/>parent,<sp/>assign);</highlight></codeline>
<codeline lineno="5792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssignExpr-&gt;Child<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="5793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;Next<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/>ML_EXPR_END(AssignExpr);</highlight></codeline>
<codeline lineno="5795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5796"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="5798"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5799"><highlight class="normal">done:</highlight></codeline>
<codeline lineno="5800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Level<sp/>&gt;=<sp/>EXPR_AND<sp/>&amp;&amp;<sp/>ml_parse(Parser,<sp/>MLT_AND))<sp/>{</highlight></codeline>
<codeline lineno="5801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(AndExpr,<sp/>parent,<sp/>and);</highlight></codeline>
<codeline lineno="5802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*LastChild<sp/>=<sp/>AndExpr-&gt;Child<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="5803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LastChild<sp/>=<sp/>LastChild-&gt;Next<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_SIMPLE);</highlight></codeline>
<codeline lineno="5805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_AND));</highlight></codeline>
<codeline lineno="5806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/>ML_EXPR_END(AndExpr);</highlight></codeline>
<codeline lineno="5807"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Level<sp/>&gt;=<sp/>EXPR_OR<sp/>&amp;&amp;<sp/>ml_parse(Parser,<sp/>MLT_OR))<sp/>{</highlight></codeline>
<codeline lineno="5809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(OrExpr,<sp/>parent,<sp/>or);</highlight></codeline>
<codeline lineno="5810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*LastChild<sp/>=<sp/>OrExpr-&gt;Child<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="5811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LastChild<sp/>=<sp/>LastChild-&gt;Next<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_AND);</highlight></codeline>
<codeline lineno="5813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_OR));</highlight></codeline>
<codeline lineno="5814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/>ML_EXPR_END(OrExpr);</highlight></codeline>
<codeline lineno="5815"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Level<sp/>&gt;=<sp/>EXPR_FOR)<sp/>{</highlight></codeline>
<codeline lineno="5817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_WITH))<sp/>{</highlight></codeline>
<codeline lineno="5818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/>ml_accept_with_expr(Parser,<sp/>Expr);</highlight></codeline>
<codeline lineno="5819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IsComprehension<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_TO))<sp/>{</highlight></codeline>
<codeline lineno="5822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;Next<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_OR);</highlight></codeline>
<codeline lineno="5823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_FOR);</highlight></codeline>
<codeline lineno="5824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsComprehension<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsComprehension<sp/>=<sp/>ml_parse(Parser,<sp/>MLT_FOR);</highlight></codeline>
<codeline lineno="5827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsComprehension)<sp/>{</highlight></codeline>
<codeline lineno="5829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(FunExpr,<sp/>fun,<sp/>fun);</highlight></codeline>
<codeline lineno="5830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FunExpr-&gt;Source<sp/>=<sp/>Parser-&gt;Source.Name;</highlight></codeline>
<codeline lineno="5831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(SuspendExpr,<sp/>parent,<sp/>suspend);</highlight></codeline>
<codeline lineno="5832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SuspendExpr-&gt;Child<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="5833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Body<sp/>=<sp/>ML_EXPR_END(SuspendExpr);</highlight></codeline>
<codeline lineno="5834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(ForExpr,<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept_for_decl(Parser,<sp/>ForExpr);</highlight></codeline>
<codeline lineno="5837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IN);</highlight></codeline>
<codeline lineno="5838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ForExpr-&gt;Sequence<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_OR);</highlight></codeline>
<codeline lineno="5839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="5840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_IF))<sp/>{</highlight></codeline>
<codeline lineno="5841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(IfExpr,<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__if__case__t" kindref="compound">mlc_if_case_t</ref><sp/>*IfCase<sp/>=<sp/>IfExpr-&gt;Cases<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__if__case__t" kindref="compound">mlc_if_case_t</ref>);</highlight></codeline>
<codeline lineno="5843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IfCase-&gt;Condition<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_OR);</highlight></codeline>
<codeline lineno="5844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IfCase-&gt;Body<sp/>=<sp/>Body;</highlight></codeline>
<codeline lineno="5845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Body<sp/>=<sp/>ML_EXPR_END(IfExpr);</highlight></codeline>
<codeline lineno="5846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_WITH))<sp/>{</highlight></codeline>
<codeline lineno="5847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Body<sp/>=<sp/>ml_accept_with_expr(Parser,<sp/>Body);</highlight></codeline>
<codeline lineno="5848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ForExpr-&gt;Body<sp/>=<sp/>Body;</highlight></codeline>
<codeline lineno="5853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Body<sp/>=<sp/>ML_EXPR_END(ForExpr);</highlight></codeline>
<codeline lineno="5854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_FOR));</highlight></codeline>
<codeline lineno="5855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FunExpr-&gt;Body<sp/>=<sp/>Body;</highlight></codeline>
<codeline lineno="5856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FunExpr-&gt;StartLine<sp/>=<sp/>FunExpr-&gt;Body-&gt;StartLine;</highlight></codeline>
<codeline lineno="5857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/>ML_EXPR_END(FunExpr);</highlight></codeline>
<codeline lineno="5858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5859"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Expr;</highlight></codeline>
<codeline lineno="5861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5862"><highlight class="normal"></highlight></codeline>
<codeline lineno="5863"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ml_accept_expression(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/>ml_expr_level_t<sp/>Level)<sp/>{</highlight></codeline>
<codeline lineno="5864"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_skip_eol(Parser);</highlight></codeline>
<codeline lineno="5865"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>ml_parse_expression(Parser,<sp/>Level);</highlight></codeline>
<codeline lineno="5866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Expr)<sp/>{</highlight></codeline>
<codeline lineno="5867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>&lt;expression&gt;<sp/>not<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>MLTokens[Parser-&gt;Token]);</highlight></codeline>
<codeline lineno="5868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref>);</highlight></codeline>
<codeline lineno="5869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;Source<sp/>=<sp/>Parser-&gt;Source.Name;</highlight></codeline>
<codeline lineno="5870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;StartLine<sp/>=<sp/>Expr-&gt;EndLine<sp/>=<sp/>Parser-&gt;Source.Line;</highlight></codeline>
<codeline lineno="5871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;compile<sp/>=<sp/>ml_unknown_expr_compile;</highlight></codeline>
<codeline lineno="5872"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Expr;</highlight></codeline>
<codeline lineno="5874"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5875"><highlight class="normal"></highlight></codeline>
<codeline lineno="5876" refid="structml__accept__block__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5877"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>**ExprSlot;</highlight></codeline>
<codeline lineno="5878"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>**VarsSlot;</highlight></codeline>
<codeline lineno="5879"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>**LetsSlot;</highlight></codeline>
<codeline lineno="5880"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>**DefsSlot;</highlight></codeline>
<codeline lineno="5881"><highlight class="normal">}<sp/><ref refid="structml__accept__block__t" kindref="compound">ml_accept_block_t</ref>;</highlight></codeline>
<codeline lineno="5882"><highlight class="normal"></highlight></codeline>
<codeline lineno="5883"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_accept_block_var(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/><ref refid="structml__accept__block__t" kindref="compound">ml_accept_block_t</ref><sp/>*Accept)<sp/>{</highlight></codeline>
<codeline lineno="5884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_LEFT_PAREN))<sp/>{</highlight></codeline>
<codeline lineno="5886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Locals,<sp/>**Slot<sp/>=<sp/>&amp;Locals;</highlight></codeline>
<codeline lineno="5888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_parse2(Parser,<sp/>MLT_BLANK))<sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="5890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Count;</highlight></codeline>
<codeline lineno="5891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Slot[0]<sp/>=<sp/>mlc_local_new(Parser-&gt;Ident,<sp/>Parser-&gt;Source.Line);</highlight></codeline>
<codeline lineno="5892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot<sp/>=<sp/>&amp;Local-&gt;Next;</highlight></codeline>
<codeline lineno="5893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COMMA));</highlight></codeline>
<codeline lineno="5894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;VarsSlot[0]<sp/>=<sp/>Locals;</highlight></codeline>
<codeline lineno="5895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;VarsSlot<sp/>=<sp/>Slot;</highlight></codeline>
<codeline lineno="5896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="5897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_IN))<sp/>{</highlight></codeline>
<codeline lineno="5898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(LocalExpr,<sp/>local,<sp/>var_in);</highlight></codeline>
<codeline lineno="5899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Local<sp/>=<sp/>Locals;</highlight></codeline>
<codeline lineno="5900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="5901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot[0]<sp/>=<sp/>ML_EXPR_END(LocalExpr);</highlight></codeline>
<codeline lineno="5903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot<sp/>=<sp/>&amp;LocalExpr-&gt;Next;</highlight></codeline>
<codeline lineno="5904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_ASSIGN);</highlight></codeline>
<codeline lineno="5906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(LocalExpr,<sp/>local,<sp/>var_unpack);</highlight></codeline>
<codeline lineno="5907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Local<sp/>=<sp/>Locals;</highlight></codeline>
<codeline lineno="5908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="5909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot[0]<sp/>=<sp/>ML_EXPR_END(LocalExpr);</highlight></codeline>
<codeline lineno="5911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot<sp/>=<sp/>&amp;LocalExpr-&gt;Next;</highlight></codeline>
<codeline lineno="5912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="5915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Accept-&gt;VarsSlot[0]<sp/>=<sp/>mlc_local_new(Parser-&gt;Ident,<sp/>Parser-&gt;Source.Line);</highlight></codeline>
<codeline lineno="5916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;VarsSlot<sp/>=<sp/>&amp;Local-&gt;Next;</highlight></codeline>
<codeline lineno="5917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_COLON))<sp/>{</highlight></codeline>
<codeline lineno="5918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(TypeExpr,<sp/>local,<sp/>var_type);</highlight></codeline>
<codeline lineno="5919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TypeExpr-&gt;Local<sp/>=<sp/>Local;</highlight></codeline>
<codeline lineno="5920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TypeExpr-&gt;Child<sp/>=<sp/>ml_accept_term(Parser,<sp/>0);</highlight></codeline>
<codeline lineno="5921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot[0]<sp/>=<sp/>ML_EXPR_END(TypeExpr);</highlight></codeline>
<codeline lineno="5922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot<sp/>=<sp/>&amp;TypeExpr-&gt;Next;</highlight></codeline>
<codeline lineno="5923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_LEFT_PAREN))<sp/>{</highlight></codeline>
<codeline lineno="5926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Child<sp/>=<sp/>ml_accept_fun_expr(Parser,<sp/>Local-&gt;Ident,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="5927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_ASSIGN))<sp/>{</highlight></codeline>
<codeline lineno="5928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Child)<sp/>{</highlight></codeline>
<codeline lineno="5931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(LocalExpr,<sp/>local,<sp/>var);</highlight></codeline>
<codeline lineno="5932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Local<sp/>=<sp/>Local;</highlight></codeline>
<codeline lineno="5933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Child<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="5934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot[0]<sp/>=<sp/>ML_EXPR_END(LocalExpr);</highlight></codeline>
<codeline lineno="5935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot<sp/>=<sp/>&amp;LocalExpr-&gt;Next;</highlight></codeline>
<codeline lineno="5936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5938"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_COMMA));</highlight></codeline>
<codeline lineno="5939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5940"><highlight class="normal"></highlight></codeline>
<codeline lineno="5941"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_accept_block_let(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/><ref refid="structml__accept__block__t" kindref="compound">ml_accept_block_t</ref><sp/>*Accept)<sp/>{</highlight></codeline>
<codeline lineno="5942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_LEFT_PAREN))<sp/>{</highlight></codeline>
<codeline lineno="5944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Locals,<sp/>**Slot<sp/>=<sp/>&amp;Locals;</highlight></codeline>
<codeline lineno="5946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_parse2(Parser,<sp/>MLT_BLANK))<sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="5948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Count;</highlight></codeline>
<codeline lineno="5949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Slot[0]<sp/>=<sp/>mlc_local_new(Parser-&gt;Ident,<sp/>Parser-&gt;Source.Line);</highlight></codeline>
<codeline lineno="5950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot<sp/>=<sp/>&amp;Local-&gt;Next;</highlight></codeline>
<codeline lineno="5951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COMMA));</highlight></codeline>
<codeline lineno="5952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;LetsSlot[0]<sp/>=<sp/>Locals;</highlight></codeline>
<codeline lineno="5953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;LetsSlot<sp/>=<sp/>Slot;</highlight></codeline>
<codeline lineno="5954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="5955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_IN))<sp/>{</highlight></codeline>
<codeline lineno="5956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(LocalExpr,<sp/>local,<sp/>let_in);</highlight></codeline>
<codeline lineno="5957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Local<sp/>=<sp/>Locals;</highlight></codeline>
<codeline lineno="5958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="5959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot[0]<sp/>=<sp/>ML_EXPR_END(LocalExpr);</highlight></codeline>
<codeline lineno="5961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot<sp/>=<sp/>&amp;LocalExpr-&gt;Next;</highlight></codeline>
<codeline lineno="5962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_ASSIGN);</highlight></codeline>
<codeline lineno="5964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(LocalExpr,<sp/>local,<sp/>let_unpack);</highlight></codeline>
<codeline lineno="5965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Local<sp/>=<sp/>Locals;</highlight></codeline>
<codeline lineno="5966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="5967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot[0]<sp/>=<sp/>ML_EXPR_END(LocalExpr);</highlight></codeline>
<codeline lineno="5969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot<sp/>=<sp/>&amp;LocalExpr-&gt;Next;</highlight></codeline>
<codeline lineno="5970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="5973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Accept-&gt;LetsSlot[0]<sp/>=<sp/>mlc_local_new(Parser-&gt;Ident,<sp/>Parser-&gt;Source.Line);</highlight></codeline>
<codeline lineno="5974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;LetsSlot<sp/>=<sp/>&amp;Local-&gt;Next;</highlight></codeline>
<codeline lineno="5975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(LocalExpr,<sp/>local,<sp/>let);</highlight></codeline>
<codeline lineno="5976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_LEFT_PAREN))<sp/>{</highlight></codeline>
<codeline lineno="5977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Child<sp/>=<sp/>ml_accept_fun_expr(Parser,<sp/>Local-&gt;Ident,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="5978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_ASSIGN);</highlight></codeline>
<codeline lineno="5980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="5981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Local<sp/>=<sp/>Local;</highlight></codeline>
<codeline lineno="5983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot[0]<sp/>=<sp/>ML_EXPR_END(LocalExpr);</highlight></codeline>
<codeline lineno="5984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot<sp/>=<sp/>&amp;LocalExpr-&gt;Next;</highlight></codeline>
<codeline lineno="5985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5986"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_COMMA));</highlight></codeline>
<codeline lineno="5987"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5988"><highlight class="normal"></highlight></codeline>
<codeline lineno="5989"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_accept_block_ref(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/><ref refid="structml__accept__block__t" kindref="compound">ml_accept_block_t</ref><sp/>*Accept)<sp/>{</highlight></codeline>
<codeline lineno="5990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_LEFT_PAREN))<sp/>{</highlight></codeline>
<codeline lineno="5992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Locals,<sp/>**Slot<sp/>=<sp/>&amp;Locals;</highlight></codeline>
<codeline lineno="5994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_parse2(Parser,<sp/>MLT_BLANK))<sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="5996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Count;</highlight></codeline>
<codeline lineno="5997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Slot[0]<sp/>=<sp/>mlc_local_new(Parser-&gt;Ident,<sp/>Parser-&gt;Source.Line);</highlight></codeline>
<codeline lineno="5998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot<sp/>=<sp/>&amp;Local-&gt;Next;</highlight></codeline>
<codeline lineno="5999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COMMA));</highlight></codeline>
<codeline lineno="6000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;LetsSlot[0]<sp/>=<sp/>Locals;</highlight></codeline>
<codeline lineno="6001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;LetsSlot<sp/>=<sp/>Slot;</highlight></codeline>
<codeline lineno="6002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="6003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_IN))<sp/>{</highlight></codeline>
<codeline lineno="6004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(LocalExpr,<sp/>local,<sp/>ref_in);</highlight></codeline>
<codeline lineno="6005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Local<sp/>=<sp/>Locals;</highlight></codeline>
<codeline lineno="6006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="6007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="6008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot[0]<sp/>=<sp/>ML_EXPR_END(LocalExpr);</highlight></codeline>
<codeline lineno="6009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot<sp/>=<sp/>&amp;LocalExpr-&gt;Next;</highlight></codeline>
<codeline lineno="6010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_ASSIGN);</highlight></codeline>
<codeline lineno="6012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(LocalExpr,<sp/>local,<sp/>ref_unpack);</highlight></codeline>
<codeline lineno="6013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Local<sp/>=<sp/>Locals;</highlight></codeline>
<codeline lineno="6014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="6015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="6016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot[0]<sp/>=<sp/>ML_EXPR_END(LocalExpr);</highlight></codeline>
<codeline lineno="6017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot<sp/>=<sp/>&amp;LocalExpr-&gt;Next;</highlight></codeline>
<codeline lineno="6018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="6021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Accept-&gt;LetsSlot[0]<sp/>=<sp/>mlc_local_new(Parser-&gt;Ident,<sp/>Parser-&gt;Source.Line);</highlight></codeline>
<codeline lineno="6022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;LetsSlot<sp/>=<sp/>&amp;Local-&gt;Next;</highlight></codeline>
<codeline lineno="6023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(LocalExpr,<sp/>local,<sp/>ref);</highlight></codeline>
<codeline lineno="6024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_LEFT_PAREN))<sp/>{</highlight></codeline>
<codeline lineno="6025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Child<sp/>=<sp/>ml_accept_fun_expr(Parser,<sp/>Local-&gt;Ident,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="6026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_ASSIGN);</highlight></codeline>
<codeline lineno="6028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="6029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Local<sp/>=<sp/>Local;</highlight></codeline>
<codeline lineno="6031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot[0]<sp/>=<sp/>ML_EXPR_END(LocalExpr);</highlight></codeline>
<codeline lineno="6032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot<sp/>=<sp/>&amp;LocalExpr-&gt;Next;</highlight></codeline>
<codeline lineno="6033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6034"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_COMMA));</highlight></codeline>
<codeline lineno="6035"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6036"><highlight class="normal"></highlight></codeline>
<codeline lineno="6037"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_accept_block_def(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/><ref refid="structml__accept__block__t" kindref="compound">ml_accept_block_t</ref><sp/>*Accept)<sp/>{</highlight></codeline>
<codeline lineno="6038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_LEFT_PAREN))<sp/>{</highlight></codeline>
<codeline lineno="6040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Locals,<sp/>**Slot<sp/>=<sp/>&amp;Locals;</highlight></codeline>
<codeline lineno="6042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_parse2(Parser,<sp/>MLT_BLANK))<sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="6044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Count;</highlight></codeline>
<codeline lineno="6045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Slot[0]<sp/>=<sp/>mlc_local_new(Parser-&gt;Ident,<sp/>Parser-&gt;Source.Line);</highlight></codeline>
<codeline lineno="6046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot<sp/>=<sp/>&amp;Local-&gt;Next;</highlight></codeline>
<codeline lineno="6047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_COMMA));</highlight></codeline>
<codeline lineno="6048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;DefsSlot[0]<sp/>=<sp/>Locals;</highlight></codeline>
<codeline lineno="6049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;DefsSlot<sp/>=<sp/>Slot;</highlight></codeline>
<codeline lineno="6050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="6051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_IN))<sp/>{</highlight></codeline>
<codeline lineno="6052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(LocalExpr,<sp/>local,<sp/>def_in);</highlight></codeline>
<codeline lineno="6053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Local<sp/>=<sp/>Locals;</highlight></codeline>
<codeline lineno="6054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="6055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="6056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot[0]<sp/>=<sp/>ML_EXPR_END(LocalExpr);</highlight></codeline>
<codeline lineno="6057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot<sp/>=<sp/>&amp;LocalExpr-&gt;Next;</highlight></codeline>
<codeline lineno="6058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_ASSIGN);</highlight></codeline>
<codeline lineno="6060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(LocalExpr,<sp/>local,<sp/>def_unpack);</highlight></codeline>
<codeline lineno="6061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Local<sp/>=<sp/>Locals;</highlight></codeline>
<codeline lineno="6062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="6063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="6064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot[0]<sp/>=<sp/>ML_EXPR_END(LocalExpr);</highlight></codeline>
<codeline lineno="6065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot<sp/>=<sp/>&amp;LocalExpr-&gt;Next;</highlight></codeline>
<codeline lineno="6066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_VAR))<sp/>{</highlight></codeline>
<codeline lineno="6068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="6069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Accept-&gt;DefsSlot[0]<sp/>=<sp/>mlc_local_new(Parser-&gt;Ident,<sp/>Parser-&gt;Source.Line);</highlight></codeline>
<codeline lineno="6070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;DefsSlot<sp/>=<sp/>&amp;Local-&gt;Next;</highlight></codeline>
<codeline lineno="6071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(LocalExpr,<sp/>local,<sp/>def);</highlight></codeline>
<codeline lineno="6072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(CallExpr,<sp/>parent_value,<sp/>const_call);</highlight></codeline>
<codeline lineno="6073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallExpr-&gt;Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLVariableT;</highlight></codeline>
<codeline lineno="6074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*TypeExpr<sp/>=<sp/>ml_parse(Parser,<sp/>MLT_COLON)<sp/>?<sp/>ml_accept_term(Parser,<sp/>0)<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="6075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_ASSIGN))<sp/>{</highlight></codeline>
<codeline lineno="6076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallExpr-&gt;Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="6077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*NilExpr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref>);</highlight></codeline>
<codeline lineno="6079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NilExpr-&gt;compile<sp/>=<sp/>ml_nil_expr_compile;</highlight></codeline>
<codeline lineno="6080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NilExpr-&gt;Source<sp/>=<sp/>Parser-&gt;Source.Name;</highlight></codeline>
<codeline lineno="6081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NilExpr-&gt;StartLine<sp/>=<sp/>NilExpr-&gt;EndLine<sp/>=<sp/>Parser-&gt;Source.Line;</highlight></codeline>
<codeline lineno="6082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallExpr-&gt;Child<sp/>=<sp/>NilExpr;</highlight></codeline>
<codeline lineno="6083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallExpr-&gt;Child-&gt;Next<sp/>=<sp/>TypeExpr;</highlight></codeline>
<codeline lineno="6085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Child<sp/>=<sp/>ML_EXPR_END(CallExpr);</highlight></codeline>
<codeline lineno="6086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Local<sp/>=<sp/>Local;</highlight></codeline>
<codeline lineno="6087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot[0]<sp/>=<sp/>ML_EXPR_END(LocalExpr);</highlight></codeline>
<codeline lineno="6088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot<sp/>=<sp/>&amp;LocalExpr-&gt;Next;</highlight></codeline>
<codeline lineno="6089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="6091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Accept-&gt;DefsSlot[0]<sp/>=<sp/>mlc_local_new(Parser-&gt;Ident,<sp/>Parser-&gt;Source.Line);</highlight></codeline>
<codeline lineno="6092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;DefsSlot<sp/>=<sp/>&amp;Local-&gt;Next;</highlight></codeline>
<codeline lineno="6093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(LocalExpr,<sp/>local,<sp/>def);</highlight></codeline>
<codeline lineno="6094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_LEFT_PAREN))<sp/>{</highlight></codeline>
<codeline lineno="6095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Child<sp/>=<sp/>ml_accept_fun_expr(Parser,<sp/>Local-&gt;Ident,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="6096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_ASSIGN);</highlight></codeline>
<codeline lineno="6098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Child<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="6099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Local<sp/>=<sp/>Local;</highlight></codeline>
<codeline lineno="6101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot[0]<sp/>=<sp/>ML_EXPR_END(LocalExpr);</highlight></codeline>
<codeline lineno="6102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot<sp/>=<sp/>&amp;LocalExpr-&gt;Next;</highlight></codeline>
<codeline lineno="6103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6104"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_COMMA));</highlight></codeline>
<codeline lineno="6105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6106"><highlight class="normal"></highlight></codeline>
<codeline lineno="6107"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_accept_block_fun(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/><ref refid="structml__accept__block__t" kindref="compound">ml_accept_block_t</ref><sp/>*Accept)<sp/>{</highlight></codeline>
<codeline lineno="6108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_IDENT))<sp/>{</highlight></codeline>
<codeline lineno="6109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Accept-&gt;LetsSlot[0]<sp/>=<sp/>mlc_local_new(Parser-&gt;Ident,<sp/>Parser-&gt;Source.Line);</highlight></codeline>
<codeline lineno="6110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;LetsSlot<sp/>=<sp/>&amp;Local-&gt;Next;</highlight></codeline>
<codeline lineno="6111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_LEFT_PAREN);</highlight></codeline>
<codeline lineno="6112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(LocalExpr,<sp/>local,<sp/>let);</highlight></codeline>
<codeline lineno="6113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Local<sp/>=<sp/>Local;</highlight></codeline>
<codeline lineno="6114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Child<sp/>=<sp/>ml_accept_fun_expr(Parser,<sp/>Local-&gt;Ident,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="6115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot[0]<sp/>=<sp/>ML_EXPR_END(LocalExpr);</highlight></codeline>
<codeline lineno="6116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot<sp/>=<sp/>&amp;LocalExpr-&gt;Next;</highlight></codeline>
<codeline lineno="6117"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_LEFT_PAREN);</highlight></codeline>
<codeline lineno="6119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>ml_accept_fun_expr(Parser,<sp/>NULL,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="6120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot[0]<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="6121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot<sp/>=<sp/>&amp;Expr-&gt;Next;</highlight></codeline>
<codeline lineno="6122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6124"><highlight class="normal"></highlight></codeline>
<codeline lineno="6125"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ml_accept_block_export(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr,<sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Export)<sp/>{</highlight></codeline>
<codeline lineno="6126"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_EXPR(CallExpr,<sp/>parent,<sp/>call);</highlight></codeline>
<codeline lineno="6127"><highlight class="normal"><sp/><sp/><sp/><sp/>CallExpr-&gt;Child<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="6128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Names<sp/>=<sp/>ml_names();</highlight></codeline>
<codeline lineno="6129"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_EXPR(NamesExpr,<sp/>value,<sp/>value);</highlight></codeline>
<codeline lineno="6130"><highlight class="normal"><sp/><sp/><sp/><sp/>NamesExpr-&gt;Value<sp/>=<sp/>Names;</highlight></codeline>
<codeline lineno="6131"><highlight class="normal"><sp/><sp/><sp/><sp/>Expr-&gt;Next<sp/>=<sp/>ML_EXPR_END(NamesExpr);</highlight></codeline>
<codeline lineno="6132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>**ArgsSlot<sp/>=<sp/>&amp;NamesExpr-&gt;Next;</highlight></codeline>
<codeline lineno="6133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Export)<sp/>{</highlight></codeline>
<codeline lineno="6134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_names_add(Names,<sp/>ml_string(Export-&gt;Ident,<sp/>-1));</highlight></codeline>
<codeline lineno="6135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(IdentExpr,<sp/>ident,<sp/>ident);</highlight></codeline>
<codeline lineno="6136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IdentExpr-&gt;Ident<sp/>=<sp/>Export-&gt;Ident;</highlight></codeline>
<codeline lineno="6137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsSlot[0]<sp/>=<sp/>ML_EXPR_END(IdentExpr);</highlight></codeline>
<codeline lineno="6138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgsSlot<sp/>=<sp/>&amp;IdentExpr-&gt;Next;</highlight></codeline>
<codeline lineno="6139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Export<sp/>=<sp/>Export-&gt;Next;</highlight></codeline>
<codeline lineno="6140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(CallExpr);</highlight></codeline>
<codeline lineno="6142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6143"><highlight class="normal"></highlight></codeline>
<codeline lineno="6144"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ml_parse_block_expr(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/><ref refid="structml__accept__block__t" kindref="compound">ml_accept_block_t</ref><sp/>*Accept)<sp/>{</highlight></codeline>
<codeline lineno="6145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>ml_parse_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="6146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Expr)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="6147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_COLON))<sp/>{</highlight></codeline>
<codeline lineno="6148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_VAR))<sp/>{</highlight></codeline>
<codeline lineno="6149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>**Exports<sp/>=<sp/>Accept-&gt;VarsSlot;</highlight></codeline>
<codeline lineno="6150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept_block_var(Parser,<sp/>Accept);</highlight></codeline>
<codeline lineno="6151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/>ml_accept_block_export(Parser,<sp/>Expr,<sp/>Exports[0]);</highlight></codeline>
<codeline lineno="6152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_LET))<sp/>{</highlight></codeline>
<codeline lineno="6153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>**Exports<sp/>=<sp/>Accept-&gt;LetsSlot;</highlight></codeline>
<codeline lineno="6154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept_block_let(Parser,<sp/>Accept);</highlight></codeline>
<codeline lineno="6155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/>ml_accept_block_export(Parser,<sp/>Expr,<sp/>Exports[0]);</highlight></codeline>
<codeline lineno="6156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_REF))<sp/>{</highlight></codeline>
<codeline lineno="6157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>**Exports<sp/>=<sp/>Accept-&gt;LetsSlot;</highlight></codeline>
<codeline lineno="6158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept_block_ref(Parser,<sp/>Accept);</highlight></codeline>
<codeline lineno="6159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/>ml_accept_block_export(Parser,<sp/>Expr,<sp/>Exports[0]);</highlight></codeline>
<codeline lineno="6160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_DEF))<sp/>{</highlight></codeline>
<codeline lineno="6161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>**Exports<sp/>=<sp/>Accept-&gt;DefsSlot;</highlight></codeline>
<codeline lineno="6162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept_block_def(Parser,<sp/>Accept);</highlight></codeline>
<codeline lineno="6163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/>ml_accept_block_export(Parser,<sp/>Expr,<sp/>Exports[0]);</highlight></codeline>
<codeline lineno="6164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse2(Parser,<sp/>MLT_FUN))<sp/>{</highlight></codeline>
<codeline lineno="6165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>**Exports<sp/>=<sp/>Accept-&gt;LetsSlot;</highlight></codeline>
<codeline lineno="6166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept_block_fun(Parser,<sp/>Accept);</highlight></codeline>
<codeline lineno="6167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/>ml_accept_block_export(Parser,<sp/>Expr,<sp/>Exports[0]);</highlight></codeline>
<codeline lineno="6168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__accept__block__t" kindref="compound">ml_accept_block_t</ref><sp/>Previous<sp/>=<sp/>*Accept;</highlight></codeline>
<codeline lineno="6170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>ml_parse_block_expr(Parser,<sp/>Accept);</highlight></codeline>
<codeline lineno="6171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Child)<sp/>{</highlight></codeline>
<codeline lineno="6172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>expression&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Expr;</highlight></codeline>
<codeline lineno="6174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Accept-&gt;VarsSlot<sp/>!=<sp/>Previous.VarsSlot)<sp/>{</highlight></codeline>
<codeline lineno="6176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot[0]<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="6177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot<sp/>=<sp/>&amp;Child-&gt;Next;</highlight></codeline>
<codeline lineno="6178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/>ml_accept_block_export(Parser,<sp/>Expr,<sp/>Previous.VarsSlot[0]);</highlight></codeline>
<codeline lineno="6179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Accept-&gt;LetsSlot<sp/>!=<sp/>Previous.LetsSlot)<sp/>{</highlight></codeline>
<codeline lineno="6180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot[0]<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="6181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot<sp/>=<sp/>&amp;Child-&gt;Next;</highlight></codeline>
<codeline lineno="6182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/>ml_accept_block_export(Parser,<sp/>Expr,<sp/>Previous.LetsSlot[0]);</highlight></codeline>
<codeline lineno="6183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Accept-&gt;DefsSlot<sp/>!=<sp/>Previous.DefsSlot)<sp/>{</highlight></codeline>
<codeline lineno="6184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot[0]<sp/>=<sp/>Child;</highlight></codeline>
<codeline lineno="6185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot<sp/>=<sp/>&amp;Child-&gt;Next;</highlight></codeline>
<codeline lineno="6186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/>ml_accept_block_export(Parser,<sp/>Expr,<sp/>Previous.DefsSlot[0]);</highlight></codeline>
<codeline lineno="6187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*CallExpr<sp/>=<sp/>(<ref refid="structmlc__parent__expr__t" kindref="compound">mlc_parent_expr_t</ref><sp/>*)Child;</highlight></codeline>
<codeline lineno="6189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CallExpr-&gt;compile<sp/>!=<sp/>ml_call_expr_compile)<sp/>{</highlight></codeline>
<codeline lineno="6190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>declaration&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Expr;</highlight></codeline>
<codeline lineno="6192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__ident__expr__t" kindref="compound">mlc_ident_expr_t</ref><sp/>*IdentExpr<sp/>=<sp/>(<ref refid="structmlc__ident__expr__t" kindref="compound">mlc_ident_expr_t</ref><sp/>*)CallExpr-&gt;Child;</highlight></codeline>
<codeline lineno="6194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IdentExpr<sp/>||<sp/>IdentExpr-&gt;compile<sp/>!=<sp/>ml_ident_expr_compile)<sp/>{</highlight></codeline>
<codeline lineno="6195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_warn(Parser,<sp/></highlight><highlight class="stringliteral">&quot;ParseError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>declaration&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Expr;</highlight></codeline>
<codeline lineno="6197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>Accept-&gt;DefsSlot[0]<sp/>=<sp/>mlc_local_new(IdentExpr-&gt;Ident,<sp/>IdentExpr-&gt;StartLine);</highlight></codeline>
<codeline lineno="6199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;DefsSlot<sp/>=<sp/>&amp;Local-&gt;Next;</highlight></codeline>
<codeline lineno="6200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(LocalExpr,<sp/>local,<sp/>def);</highlight></codeline>
<codeline lineno="6201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Local<sp/>=<sp/>Local;</highlight></codeline>
<codeline lineno="6202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr-&gt;Next<sp/>=<sp/>IdentExpr-&gt;Next;</highlight></codeline>
<codeline lineno="6203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallExpr-&gt;Child<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="6204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalExpr-&gt;Child<sp/>=<sp/>ML_EXPR_END(CallExpr);</highlight></codeline>
<codeline lineno="6205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expr<sp/>=<sp/>ML_EXPR_END(LocalExpr);</highlight></codeline>
<codeline lineno="6206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Expr;</highlight></codeline>
<codeline lineno="6210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6211"><highlight class="normal"></highlight></codeline>
<codeline lineno="6212"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmlc__block__expr__t" kindref="compound">mlc_block_expr_t</ref><sp/>*ml_accept_block_body(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="6213"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_EXPR(BlockExpr,<sp/>block,<sp/>block);</highlight></codeline>
<codeline lineno="6214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__accept__block__t" kindref="compound">ml_accept_block_t</ref><sp/>Accept[1];</highlight></codeline>
<codeline lineno="6215"><highlight class="normal"><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot<sp/>=<sp/>&amp;BlockExpr-&gt;Child;</highlight></codeline>
<codeline lineno="6216"><highlight class="normal"><sp/><sp/><sp/><sp/>Accept-&gt;VarsSlot<sp/>=<sp/>&amp;BlockExpr-&gt;Vars;</highlight></codeline>
<codeline lineno="6217"><highlight class="normal"><sp/><sp/><sp/><sp/>Accept-&gt;LetsSlot<sp/>=<sp/>&amp;BlockExpr-&gt;Lets;</highlight></codeline>
<codeline lineno="6218"><highlight class="normal"><sp/><sp/><sp/><sp/>Accept-&gt;DefsSlot<sp/>=<sp/>&amp;BlockExpr-&gt;Defs;</highlight></codeline>
<codeline lineno="6219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_skip_eol(Parser);</highlight></codeline>
<codeline lineno="6221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ml_current(Parser))<sp/>{</highlight></codeline>
<codeline lineno="6222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_VAR:<sp/>{</highlight></codeline>
<codeline lineno="6223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="6224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept_block_var(Parser,<sp/>Accept);</highlight></codeline>
<codeline lineno="6225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_LET:<sp/>{</highlight></codeline>
<codeline lineno="6228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="6229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept_block_let(Parser,<sp/>Accept);</highlight></codeline>
<codeline lineno="6230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_REF:<sp/>{</highlight></codeline>
<codeline lineno="6233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="6234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept_block_ref(Parser,<sp/>Accept);</highlight></codeline>
<codeline lineno="6235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_DEF:<sp/>{</highlight></codeline>
<codeline lineno="6238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="6239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept_block_def(Parser,<sp/>Accept);</highlight></codeline>
<codeline lineno="6240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_FUN:<sp/>{</highlight></codeline>
<codeline lineno="6243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="6244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept_block_fun(Parser,<sp/>Accept);</highlight></codeline>
<codeline lineno="6245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_MUST:<sp/>{</highlight></codeline>
<codeline lineno="6248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_next(Parser);</highlight></codeline>
<codeline lineno="6249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Must<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="6250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__block__expr__t" kindref="compound">mlc_block_expr_t</ref><sp/>*MustExpr<sp/>=<sp/>ml_accept_block_body(Parser);</highlight></codeline>
<codeline lineno="6251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MustExpr-&gt;Must<sp/>=<sp/>Must;</highlight></codeline>
<codeline lineno="6252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot[0]<sp/>=<sp/>ML_EXPR_END(MustExpr);</highlight></codeline>
<codeline lineno="6253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot<sp/>=<sp/>&amp;MustExpr-&gt;Next;</highlight></codeline>
<codeline lineno="6254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>finish;</highlight></codeline>
<codeline lineno="6255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="6257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>ml_parse_block_expr(Parser,<sp/>Accept);</highlight></codeline>
<codeline lineno="6258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Expr)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>finish;</highlight></codeline>
<codeline lineno="6259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot[0]<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="6260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Accept-&gt;ExprSlot<sp/>=<sp/>&amp;Expr-&gt;Next;</highlight></codeline>
<codeline lineno="6261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6264"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_SEMICOLON)<sp/>||<sp/>ml_parse(Parser,<sp/>MLT_EOL));</highlight></codeline>
<codeline lineno="6265"><highlight class="normal"><sp/><sp/><sp/><sp/>finish:<sp/>{</highlight></codeline>
<codeline lineno="6266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>0,<sp/>First<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>BlockExpr-&gt;Vars;<sp/>Local;<sp/>Local<sp/>=<sp/>Local-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="6268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Local-&gt;Index<sp/>=<sp/>Index++;</highlight></codeline>
<codeline lineno="6269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BlockExpr-&gt;NumVars<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="6271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>First<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="6272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>BlockExpr-&gt;Lets;<sp/>Local;<sp/>Local<sp/>=<sp/>Local-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="6273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Local-&gt;Index<sp/>=<sp/>Index++;</highlight></codeline>
<codeline lineno="6274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BlockExpr-&gt;NumLets<sp/>=<sp/>Index<sp/>-<sp/>First;</highlight></codeline>
<codeline lineno="6276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>First<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="6277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structmlc__local__t" kindref="compound">mlc_local_t</ref><sp/>*Local<sp/>=<sp/>BlockExpr-&gt;Defs;<sp/>Local;<sp/>Local<sp/>=<sp/>Local-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="6278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Local-&gt;Index<sp/>=<sp/>Index++;</highlight></codeline>
<codeline lineno="6279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BlockExpr-&gt;NumDefs<sp/>=<sp/>Index<sp/>-<sp/>First;</highlight></codeline>
<codeline lineno="6281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BlockExpr;</highlight></codeline>
<codeline lineno="6283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6284"><highlight class="normal"></highlight></codeline>
<codeline lineno="6285"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ml_accept_block(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="6286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__block__expr__t" kindref="compound">mlc_block_expr_t</ref><sp/>*BlockExpr<sp/>=<sp/>ml_accept_block_body(Parser);</highlight></codeline>
<codeline lineno="6287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_ON))<sp/>{</highlight></codeline>
<codeline lineno="6288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="6289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BlockExpr-&gt;CatchIdent<sp/>=<sp/>Parser-&gt;Ident;</highlight></codeline>
<codeline lineno="6290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_DO);</highlight></codeline>
<codeline lineno="6291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BlockExpr-&gt;CatchBody<sp/>=<sp/>ml_accept_block(Parser);</highlight></codeline>
<codeline lineno="6292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ML_EXPR_END(BlockExpr);</highlight></codeline>
<codeline lineno="6294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6295"><highlight class="normal"></highlight></codeline>
<codeline lineno="6296"><highlight class="normal"><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ml_accept_file(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="6297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setjmp(Parser-&gt;OnError))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="6298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>ml_accept_block(Parser);</highlight></codeline>
<codeline lineno="6299"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_accept_eoi(Parser);</highlight></codeline>
<codeline lineno="6300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Expr;</highlight></codeline>
<codeline lineno="6301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6302"><highlight class="normal"></highlight></codeline>
<codeline lineno="6303"><highlight class="normal"><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*ml_parse_expr(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="6304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setjmp(Parser-&gt;OnError))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="6305"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_skip_eol(Parser);</highlight></codeline>
<codeline lineno="6306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_parse_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="6307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6308"><highlight class="normal"></highlight></codeline>
<codeline lineno="6309"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_function_compile2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structmlc__compile__frame__t" kindref="compound">mlc_compile_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="6310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__closure__info__t" kindref="compound">ml_closure_info_t</ref><sp/>*Info<sp/>=<sp/>Frame-&gt;Info;</highlight></codeline>
<codeline lineno="6311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>Frame-&gt;Expr;</highlight></codeline>
<codeline lineno="6312"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Return<sp/>=<sp/>MLC_EMIT(Expr-&gt;EndLine,<sp/>MLI_RETURN,<sp/>0);</highlight></codeline>
<codeline lineno="6313"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_LINK(Function-&gt;Returns,<sp/>Info-&gt;Return);</highlight></codeline>
<codeline lineno="6314"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Halt<sp/>=<sp/>Function-&gt;Next;</highlight></codeline>
<codeline lineno="6315"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;StartLine<sp/>=<sp/>Expr-&gt;StartLine;</highlight></codeline>
<codeline lineno="6316"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;EndLine<sp/>=<sp/>Expr-&gt;EndLine;</highlight></codeline>
<codeline lineno="6317"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;FrameSize<sp/>=<sp/>Function-&gt;Size;</highlight></codeline>
<codeline lineno="6318"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Decls<sp/>=<sp/>Function-&gt;Decls;</highlight></codeline>
<codeline lineno="6319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Function-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="6320"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_closure(Info));</highlight></codeline>
<codeline lineno="6321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6322"><highlight class="normal"></highlight></codeline>
<codeline lineno="6323"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_function_compile(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr,<sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**Parameters)<sp/>{</highlight></codeline>
<codeline lineno="6324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref>);</highlight></codeline>
<codeline lineno="6325"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Base.Type<sp/>=<sp/>MLCompilerFunctionT;</highlight></codeline>
<codeline lineno="6326"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="6327"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="6328"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Base.run<sp/>=<sp/>(ml_state_fn)mlc_function_run;</highlight></codeline>
<codeline lineno="6329"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Compiler<sp/>=<sp/>Compiler;</highlight></codeline>
<codeline lineno="6330"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Eval<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6331"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Source<sp/>=<sp/>Expr-&gt;Source;</highlight></codeline>
<codeline lineno="6332"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Old<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="6333"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;It<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="6334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__closure__info__t" kindref="compound">ml_closure_info_t</ref><sp/>*Info<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__closure__info__t" kindref="compound">ml_closure_info_t</ref>);</highlight></codeline>
<codeline lineno="6335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumParams<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parameters)<sp/>{</highlight></codeline>
<codeline lineno="6337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>**ParamSlot<sp/>=<sp/>&amp;Function-&gt;Decls;</highlight></codeline>
<codeline lineno="6338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**P<sp/>=<sp/>Parameters;<sp/>P[0];<sp/>++P)<sp/>{</highlight></codeline>
<codeline lineno="6339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Param<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref>);</highlight></codeline>
<codeline lineno="6340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Source.Name<sp/>=<sp/>Function-&gt;Source;</highlight></codeline>
<codeline lineno="6341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Source.Line<sp/>=<sp/>Expr-&gt;StartLine;</highlight></codeline>
<codeline lineno="6342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Ident<sp/>=<sp/>P[0];</highlight></codeline>
<codeline lineno="6343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Hash<sp/>=<sp/>ml_ident_hash(P[0]);</highlight></codeline>
<codeline lineno="6344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param-&gt;Index<sp/>=<sp/>Function-&gt;Top++;</highlight></codeline>
<codeline lineno="6345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Info-&gt;Params,<sp/>Param-&gt;Ident,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(intptr_t)Function-&gt;Top);</highlight></codeline>
<codeline lineno="6346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParamSlot[0]<sp/>=<sp/>Param;</highlight></codeline>
<codeline lineno="6347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParamSlot<sp/>=<sp/>&amp;Param-&gt;Next;</highlight></codeline>
<codeline lineno="6348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumParams<sp/>=<sp/>Function-&gt;Top;</highlight></codeline>
<codeline lineno="6350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Size<sp/>=<sp/>Function-&gt;Top<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="6351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6352"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;NumParams<sp/>=<sp/>NumParams;</highlight></codeline>
<codeline lineno="6353"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Source<sp/>=<sp/>Function-&gt;Source;</highlight></codeline>
<codeline lineno="6354"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;StartLine<sp/>=<sp/>Expr-&gt;StartLine;</highlight></codeline>
<codeline lineno="6355"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;EndLine<sp/>=<sp/>Expr-&gt;EndLine;</highlight></codeline>
<codeline lineno="6356"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_asprintf((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)&amp;Info-&gt;Name,<sp/></highlight><highlight class="stringliteral">&quot;@%s:%d&quot;</highlight><highlight class="normal">,<sp/>Info-&gt;Source,<sp/>Info-&gt;StartLine);</highlight></codeline>
<codeline lineno="6357"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Next<sp/>=<sp/>Info-&gt;Entry<sp/>=<sp/>anew(<ref refid="unionml__inst__t" kindref="compound">ml_inst_t</ref>,<sp/>128);</highlight></codeline>
<codeline lineno="6358"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Space<sp/>=<sp/>126;</highlight></codeline>
<codeline lineno="6359"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Returns<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6360"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structmlc__compile__frame__t" kindref="compound">mlc_compile_frame_t</ref>,<sp/>ml_function_compile2);</highlight></codeline>
<codeline lineno="6361"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Info<sp/>=<sp/>Info;</highlight></codeline>
<codeline lineno="6362"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Expr<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="6363"><highlight class="normal"><sp/><sp/><sp/><sp/>mlc_compile(Function,<sp/>Expr,<sp/>MLCF_RETURN);</highlight></codeline>
<codeline lineno="6364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6365"><highlight class="normal"></highlight></codeline>
<codeline lineno="6366"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;permissive&quot;</highlight><highlight class="normal">,<sp/>MLParserT,<sp/>MLBooleanT)<sp/>{</highlight></codeline>
<codeline lineno="6367"><highlight class="normal"></highlight><highlight class="comment">//&lt;Parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6368"><highlight class="normal"></highlight><highlight class="comment">//&lt;Permissive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6369"><highlight class="normal"></highlight><highlight class="comment">//&gt;parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser<sp/>=<sp/>(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_boolean_value(Args[1]))<sp/>{</highlight></codeline>
<codeline lineno="6372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Warnings<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="6373"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Warnings<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Parser;</highlight></codeline>
<codeline lineno="6377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6378"><highlight class="normal"></highlight></codeline>
<codeline lineno="6379"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;warnings&quot;</highlight><highlight class="normal">,<sp/>MLParserT)<sp/>{</highlight></codeline>
<codeline lineno="6380"><highlight class="normal"></highlight><highlight class="comment">//&lt;Parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6381"><highlight class="normal"></highlight><highlight class="comment">//&gt;parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser<sp/>=<sp/>(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Warnings<sp/>?:<sp/>MLNil;</highlight></codeline>
<codeline lineno="6384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6385"><highlight class="normal"></highlight></codeline>
<codeline lineno="6386"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;parse&quot;</highlight><highlight class="normal">,<sp/>MLParserT)<sp/>{</highlight></codeline>
<codeline lineno="6387"><highlight class="normal"></highlight><highlight class="comment">//&lt;Parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6388"><highlight class="normal"></highlight><highlight class="comment">//&gt;expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser<sp/>=<sp/>(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setjmp(Parser-&gt;OnError))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;Value;</highlight></codeline>
<codeline lineno="6391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_expr_value(ml_accept_expression(Parser,<sp/>EXPR_DEFAULT));</highlight></codeline>
<codeline lineno="6392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6393"><highlight class="normal"></highlight></codeline>
<codeline lineno="6394"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;compile&quot;</highlight><highlight class="normal">,<sp/>MLParserT,<sp/>MLCompilerT)<sp/>{</highlight></codeline>
<codeline lineno="6395"><highlight class="normal"></highlight><highlight class="comment">//&lt;Parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6396"><highlight class="normal"></highlight><highlight class="comment">//&lt;Compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6397"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6398"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser<sp/>=<sp/>(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6399"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler<sp/>=<sp/>(<ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="6400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>ml_accept_file(Parser);</highlight></codeline>
<codeline lineno="6401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Expr)<sp/>ML_RETURN(Parser-&gt;Value);</highlight></codeline>
<codeline lineno="6402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_function_compile(Caller,<sp/>Expr,<sp/>Compiler,<sp/>NULL);</highlight></codeline>
<codeline lineno="6403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6404"><highlight class="normal"></highlight></codeline>
<codeline lineno="6405"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;compile&quot;</highlight><highlight class="normal">,<sp/>MLParserT,<sp/>MLCompilerT,<sp/>MLListT)<sp/>{</highlight></codeline>
<codeline lineno="6406"><highlight class="normal"></highlight><highlight class="comment">//&lt;Parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6407"><highlight class="normal"></highlight><highlight class="comment">//&lt;Compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6408"><highlight class="normal"></highlight><highlight class="comment">//&lt;Parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6409"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser<sp/>=<sp/>(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6411"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler<sp/>=<sp/>(<ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="6412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>ml_accept_file(Parser);</highlight></codeline>
<codeline lineno="6413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Expr)<sp/>ML_RETURN(Parser-&gt;Value);</highlight></codeline>
<codeline lineno="6414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**Parameters<sp/>=<sp/>anew(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>ml_list_length(Args[2])<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="6415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6416"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[2],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="6417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter-&gt;Value,<sp/>MLStringT))<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Parameter<sp/>name<sp/>must<sp/>be<sp/>a<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters[I++]<sp/>=<sp/>ml_string_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="6419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_function_compile(Caller,<sp/>Expr,<sp/>Compiler,<sp/>Parameters);</highlight></codeline>
<codeline lineno="6421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6422"><highlight class="normal"></highlight></codeline>
<codeline lineno="6423"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">,<sp/>MLParserT,<sp/>MLStringT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="6424"><highlight class="normal"></highlight><highlight class="comment">//&lt;Parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6425"><highlight class="normal"></highlight><highlight class="comment">//&lt;Source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6426"><highlight class="normal"></highlight><highlight class="comment">//&lt;Line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6427"><highlight class="normal"></highlight><highlight class="comment">//&gt;tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser<sp/>=<sp/>(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>Source<sp/>=<sp/>{ml_string_value(Args[1]),<sp/>ml_integer_value(Args[2])};</highlight></codeline>
<codeline lineno="6430"><highlight class="normal"><sp/><sp/><sp/><sp/>Source<sp/>=<sp/>ml_parser_source(Parser,<sp/>Source);</highlight></codeline>
<codeline lineno="6431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_tuplev(2,<sp/>ml_string(Source.Name,<sp/>-1),<sp/>ml_integer(Source.Line));</highlight></codeline>
<codeline lineno="6432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6433"><highlight class="normal"></highlight></codeline>
<codeline lineno="6434"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;reset&quot;</highlight><highlight class="normal">,<sp/>MLParserT)<sp/>{</highlight></codeline>
<codeline lineno="6435"><highlight class="normal"></highlight><highlight class="comment">//&lt;Parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6436"><highlight class="normal"></highlight><highlight class="comment">//&gt;parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser<sp/>=<sp/>(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6438"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__compiler_1ga80d3e6fba963ca8b9e7638e278420df0" kindref="member">ml_parser_reset</ref>(Parser);</highlight></codeline>
<codeline lineno="6439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="6440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6441"><highlight class="normal"></highlight></codeline>
<codeline lineno="6442"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;input&quot;</highlight><highlight class="normal">,<sp/>MLParserT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="6443"><highlight class="normal"></highlight><highlight class="comment">//&lt;Parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6444"><highlight class="normal"></highlight><highlight class="comment">//&lt;String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6445"><highlight class="normal"></highlight><highlight class="comment">//&gt;compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6446"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser<sp/>=<sp/>(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__compiler_1ga21c894dfe870f9461194a9168b4dd2fc" kindref="member">ml_parser_input</ref>(Parser,<sp/>ml_string_value(Args[1]));</highlight></codeline>
<codeline lineno="6448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="6449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6450"><highlight class="normal"></highlight></codeline>
<codeline lineno="6451"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_parser_escape_fn(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Callback)<sp/>{</highlight></codeline>
<codeline lineno="6452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_simple_call(Callback,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="6453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6454"><highlight class="normal"></highlight></codeline>
<codeline lineno="6455"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;escape&quot;</highlight><highlight class="normal">,<sp/>MLParserT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="6456"><highlight class="normal"></highlight><highlight class="comment">//&lt;Parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6457"><highlight class="normal"></highlight><highlight class="comment">//&lt;Callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6458"><highlight class="normal"></highlight><highlight class="comment">//&gt;parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6459"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser<sp/>=<sp/>(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6460"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_parser_escape(Parser,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_parser_escape_fn,<sp/>Args[1]);</highlight></codeline>
<codeline lineno="6461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="6462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6463"><highlight class="normal"></highlight></codeline>
<codeline lineno="6464"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_parser_special_fn(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Callback)<sp/>{</highlight></codeline>
<codeline lineno="6465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_simple_call(Callback,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="6466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6467"><highlight class="normal"></highlight></codeline>
<codeline lineno="6468"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;special&quot;</highlight><highlight class="normal">,<sp/>MLParserT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="6469"><highlight class="normal"></highlight><highlight class="comment">//&lt;Parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6470"><highlight class="normal"></highlight><highlight class="comment">//&lt;Callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6471"><highlight class="normal"></highlight><highlight class="comment">//&gt;parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6472"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser<sp/>=<sp/>(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6473"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_parser_special(Parser,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_parser_special_fn,<sp/>Args[1]);</highlight></codeline>
<codeline lineno="6474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="6475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6476"><highlight class="normal"></highlight></codeline>
<codeline lineno="6477"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;special&quot;</highlight><highlight class="normal">,<sp/>MLParserT,<sp/>MLListT)<sp/>{</highlight></codeline>
<codeline lineno="6478"><highlight class="normal"></highlight><highlight class="comment">//&lt;Parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6479"><highlight class="normal"></highlight><highlight class="comment">//&lt;Callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6480"><highlight class="normal"></highlight><highlight class="comment">//&gt;parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser<sp/>=<sp/>(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6482"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_parser_special(Parser,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_list_pop,<sp/>Args[1]);</highlight></codeline>
<codeline lineno="6483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="6484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6485"><highlight class="normal"></highlight></codeline>
<codeline lineno="6486"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;clear&quot;</highlight><highlight class="normal">,<sp/>MLParserT)<sp/>{</highlight></codeline>
<codeline lineno="6487"><highlight class="normal"></highlight><highlight class="comment">//&lt;Parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6488"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser<sp/>=<sp/>(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(ml_parser_clear(Parser),<sp/>-1);</highlight></codeline>
<codeline lineno="6491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6492"><highlight class="normal"></highlight></codeline>
<codeline lineno="6493"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;evaluate&quot;</highlight><highlight class="normal">,<sp/>MLParserT,<sp/>MLCompilerT)<sp/>{</highlight></codeline>
<codeline lineno="6494"><highlight class="normal"></highlight><highlight class="comment">//&lt;Parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6495"><highlight class="normal"></highlight><highlight class="comment">//&lt;Compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6496"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6497"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser<sp/>=<sp/>(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6498"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler<sp/>=<sp/>(<ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="6499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_command_evaluate(Caller,<sp/>Parser,<sp/>Compiler);</highlight></codeline>
<codeline lineno="6500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6501"><highlight class="normal"></highlight></codeline>
<codeline lineno="6502" refid="structml__evaluate__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="6504"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser;</highlight></codeline>
<codeline lineno="6505"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler;</highlight></codeline>
<codeline lineno="6506"><highlight class="normal">}<sp/><ref refid="structml__evaluate__state__t" kindref="compound">ml_evaluate_state_t</ref>;</highlight></codeline>
<codeline lineno="6507"><highlight class="normal"></highlight></codeline>
<codeline lineno="6508"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_evaluate_state_run(<ref refid="structml__evaluate__state__t" kindref="compound">ml_evaluate_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="6509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLEndOfInput)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>MLNil);</highlight></codeline>
<codeline lineno="6510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_command_evaluate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Parser,<sp/>State-&gt;Compiler);</highlight></codeline>
<codeline lineno="6511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6512"><highlight class="normal"></highlight></codeline>
<codeline lineno="6513"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;run&quot;</highlight><highlight class="normal">,<sp/>MLParserT,<sp/>MLCompilerT)<sp/>{</highlight></codeline>
<codeline lineno="6514"><highlight class="normal"></highlight><highlight class="comment">//&lt;Parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6515"><highlight class="normal"></highlight><highlight class="comment">//&lt;Compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6516"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6517"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser<sp/>=<sp/>(<ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6518"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler<sp/>=<sp/>(<ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="6519"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__evaluate__state__t" kindref="compound">ml_evaluate_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__evaluate__state__t" kindref="compound">ml_evaluate_state_t</ref>);</highlight></codeline>
<codeline lineno="6520"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="6521"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="6522"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_evaluate_state_run;</highlight></codeline>
<codeline lineno="6523"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Parser<sp/>=<sp/>Parser;</highlight></codeline>
<codeline lineno="6524"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Compiler<sp/>=<sp/>Compiler;</highlight></codeline>
<codeline lineno="6525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_command_evaluate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Parser,<sp/>Compiler);</highlight></codeline>
<codeline lineno="6526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6527"><highlight class="normal"></highlight></codeline>
<codeline lineno="6528"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;compile&quot;</highlight><highlight class="normal">,<sp/>MLExprT,<sp/>MLCompilerT)<sp/>{</highlight></codeline>
<codeline lineno="6529"><highlight class="normal"></highlight><highlight class="comment">//&lt;Expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6530"><highlight class="normal"></highlight><highlight class="comment">//&lt;Compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6531"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6533"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler<sp/>=<sp/>(<ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="6534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_function_compile(Caller,<sp/>Expr,<sp/>Compiler,<sp/>NULL);</highlight></codeline>
<codeline lineno="6535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6536"><highlight class="normal"></highlight></codeline>
<codeline lineno="6537"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;compile&quot;</highlight><highlight class="normal">,<sp/>MLExprT,<sp/>MLCompilerT,<sp/>MLListT)<sp/>{</highlight></codeline>
<codeline lineno="6538"><highlight class="normal"></highlight><highlight class="comment">//&lt;Expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6539"><highlight class="normal"></highlight><highlight class="comment">//&lt;Compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6540"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6541"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler<sp/>=<sp/>(<ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="6543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**Parameters<sp/>=<sp/>anew(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>ml_list_length(Args[2])<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="6544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6545"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[2],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="6546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter-&gt;Value,<sp/>MLStringT))<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Parameter<sp/>name<sp/>must<sp/>be<sp/>a<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters[I++]<sp/>=<sp/>ml_string_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="6548"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_function_compile(Caller,<sp/>Expr,<sp/>Compiler,<sp/>Parameters);</highlight></codeline>
<codeline lineno="6550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6551"><highlight class="normal"></highlight></codeline>
<codeline lineno="6552"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;[]&quot;</highlight><highlight class="normal">,<sp/>MLCompilerT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="6553"><highlight class="normal"></highlight><highlight class="comment">//&lt;Compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6554"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6555"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6556"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler<sp/>=<sp/>(<ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)stringmap_search(Compiler-&gt;Vars,<sp/>ml_string_value(Args[1]))<sp/>?:<sp/>MLNil;</highlight></codeline>
<codeline lineno="6558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6559"><highlight class="normal"></highlight></codeline>
<codeline lineno="6560"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>MLEndOfInput[1]<sp/>=<sp/>{{MLAnyT}};</highlight></codeline>
<codeline lineno="6561"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>MLNotFound[1]<sp/>=<sp/>{{MLAnyT}};</highlight></codeline>
<codeline lineno="6562"><highlight class="normal"></highlight></codeline>
<codeline lineno="6563"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_stringmap_global(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Globals,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="6564"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="6565"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="6566"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)stringmap_search(Globals,<sp/>ml_string_value(Args[0]));</highlight></codeline>
<codeline lineno="6567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value<sp/>?:<sp/>MLNotFound;</highlight></codeline>
<codeline lineno="6568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6569"><highlight class="normal"></highlight></codeline>
<codeline lineno="6570"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_stringmap_globals(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Globals)<sp/>{</highlight></codeline>
<codeline lineno="6571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_cfunction(Globals,<sp/>(ml_callback_t)ml_stringmap_global);</highlight></codeline>
<codeline lineno="6572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6573"><highlight class="normal"></highlight></codeline>
<codeline lineno="6574"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;var&quot;</highlight><highlight class="normal">,<sp/>MLCompilerT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="6575"><highlight class="normal"></highlight><highlight class="comment">//&lt;Compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6576"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6577"><highlight class="normal"></highlight><highlight class="comment">//&gt;variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6578"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler<sp/>=<sp/>(<ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="6580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Var<sp/>=<sp/>ml_variable(MLNil,<sp/>NULL);</highlight></codeline>
<codeline lineno="6581"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Compiler-&gt;Vars,<sp/>Name,<sp/>Var);</highlight></codeline>
<codeline lineno="6582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Var;</highlight></codeline>
<codeline lineno="6583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6584"><highlight class="normal"></highlight></codeline>
<codeline lineno="6585"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;var&quot;</highlight><highlight class="normal">,<sp/>MLCompilerT,<sp/>MLStringT,<sp/>MLTypeT)<sp/>{</highlight></codeline>
<codeline lineno="6586"><highlight class="normal"></highlight><highlight class="comment">//&lt;Compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6587"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6588"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6589"><highlight class="normal"></highlight><highlight class="comment">//&gt;variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6590"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler<sp/>=<sp/>(<ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="6592"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Var<sp/>=<sp/>ml_variable(MLNil,<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[2]);</highlight></codeline>
<codeline lineno="6593"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Compiler-&gt;Vars,<sp/>Name,<sp/>Var);</highlight></codeline>
<codeline lineno="6594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Var;</highlight></codeline>
<codeline lineno="6595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6596"><highlight class="normal"></highlight></codeline>
<codeline lineno="6597"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;let&quot;</highlight><highlight class="normal">,<sp/>MLCompilerT,<sp/>MLStringT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="6598"><highlight class="normal"></highlight><highlight class="comment">//&lt;Compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6599"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6600"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6601"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6602"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler<sp/>=<sp/>(<ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="6604"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Compiler-&gt;Vars,<sp/>Name,<sp/>Args[2]);</highlight></codeline>
<codeline lineno="6605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[2];</highlight></codeline>
<codeline lineno="6606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6607"><highlight class="normal"></highlight></codeline>
<codeline lineno="6608"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;def&quot;</highlight><highlight class="normal">,<sp/>MLCompilerT,<sp/>MLStringT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="6609"><highlight class="normal"></highlight><highlight class="comment">//&lt;Compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6610"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6611"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6612"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6613"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler<sp/>=<sp/>(<ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="6615"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Compiler-&gt;Vars,<sp/>Name,<sp/>Args[2]);</highlight></codeline>
<codeline lineno="6616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[2];</highlight></codeline>
<codeline lineno="6617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6618"><highlight class="normal"></highlight></codeline>
<codeline lineno="6619"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_compiler_var_fn(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Vars)<sp/>{</highlight></codeline>
<codeline lineno="6620"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_map_insert(Vars,<sp/>ml_string(Name,<sp/>-1),<sp/>ml_deref(Value));</highlight></codeline>
<codeline lineno="6621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="6622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6623"><highlight class="normal"></highlight></codeline>
<codeline lineno="6624"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;vars&quot;</highlight><highlight class="normal">,<sp/>MLCompilerT)<sp/>{</highlight></codeline>
<codeline lineno="6625"><highlight class="normal"></highlight><highlight class="comment">//&lt;Compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6626"><highlight class="normal"></highlight><highlight class="comment">//&gt;map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6627"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler<sp/>=<sp/>(<ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6628"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Vars<sp/>=<sp/>ml_map();</highlight></codeline>
<codeline lineno="6629"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_foreach(Compiler-&gt;Vars,<sp/>Vars,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_compiler_var_fn);</highlight></codeline>
<codeline lineno="6630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vars;</highlight></codeline>
<codeline lineno="6631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6632"><highlight class="normal"></highlight></codeline>
<codeline lineno="6633" refid="structml__global__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6634"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="6635"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="6636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name;</highlight></codeline>
<codeline lineno="6637"><highlight class="normal">}<sp/><ref refid="structml__global__t" kindref="compound">ml_global_t</ref>;</highlight></codeline>
<codeline lineno="6638"><highlight class="normal"></highlight></codeline>
<codeline lineno="6639"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_global_deref(<ref refid="structml__global__t" kindref="compound">ml_global_t</ref><sp/>*Global)<sp/>{</highlight></codeline>
<codeline lineno="6640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(!Global-&gt;Value)<sp/>return<sp/>ml_error(&quot;NameError&quot;,<sp/>&quot;Identifier<sp/>%s<sp/>not<sp/>declared&quot;,<sp/>Global-&gt;Name);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Global-&gt;Value)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Global-&gt;Value<sp/>=<sp/>ml_uninitialized(Global-&gt;Name,<sp/>(<ref refid="structml__source__t" kindref="compound">ml_source_t</ref>){</highlight><highlight class="stringliteral">&quot;global&quot;</highlight><highlight class="normal">,<sp/>0});</highlight></codeline>
<codeline lineno="6642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_deref(Global-&gt;Value);</highlight></codeline>
<codeline lineno="6643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6644"><highlight class="normal"></highlight></codeline>
<codeline lineno="6645"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_global_assign(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__global__t" kindref="compound">ml_global_t</ref><sp/>*Global,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="6646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Global-&gt;Value)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;NameError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Identifier<sp/>%s<sp/>not<sp/>declared&quot;</highlight><highlight class="normal">,<sp/>Global-&gt;Name);</highlight></codeline>
<codeline lineno="6647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_assign(Caller,<sp/>Global-&gt;Value,<sp/>Value);</highlight></codeline>
<codeline lineno="6648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6649"><highlight class="normal"></highlight></codeline>
<codeline lineno="6650"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_global_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__global__t" kindref="compound">ml_global_t</ref><sp/>*Global,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="6651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Global-&gt;Value)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;NameError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Identifier<sp/>%s<sp/>not<sp/>declared&quot;</highlight><highlight class="normal">,<sp/>Global-&gt;Name);</highlight></codeline>
<codeline lineno="6652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>Global-&gt;Value,<sp/>Count,<sp/>Args);</highlight></codeline>
<codeline lineno="6653"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6654"><highlight class="normal"></highlight></codeline>
<codeline lineno="6655"><highlight class="normal">ML_TYPE(MLGlobalT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;global&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6657"><highlight class="normal"><sp/><sp/><sp/><sp/>.deref<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_global_deref,</highlight></codeline>
<codeline lineno="6658"><highlight class="normal"><sp/><sp/><sp/><sp/>.assign<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_global_assign,</highlight></codeline>
<codeline lineno="6659"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_global_call</highlight></codeline>
<codeline lineno="6660"><highlight class="normal">);</highlight></codeline>
<codeline lineno="6661"><highlight class="normal"></highlight></codeline>
<codeline lineno="6662"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_value_find_all,<sp/>MLGlobalT,<sp/><ref refid="structml__global__t" kindref="compound">ml_global_t</ref><sp/>*Global,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_value_find_fn<sp/>RefFn)<sp/>{</highlight></codeline>
<codeline lineno="6663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RefFn(Data,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Global,<sp/>1))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6664"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_value_find_all(Global-&gt;Value,<sp/>Data,<sp/>RefFn);</highlight></codeline>
<codeline lineno="6665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6666"><highlight class="normal"></highlight></codeline>
<codeline lineno="6667"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_global(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)<sp/>{</highlight></codeline>
<codeline lineno="6668"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__global__t" kindref="compound">ml_global_t</ref><sp/>*Global<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__global__t" kindref="compound">ml_global_t</ref>);</highlight></codeline>
<codeline lineno="6669"><highlight class="normal"><sp/><sp/><sp/><sp/>Global-&gt;Type<sp/>=<sp/><sp/>MLGlobalT;</highlight></codeline>
<codeline lineno="6670"><highlight class="normal"><sp/><sp/><sp/><sp/>Global-&gt;Name<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="6671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Global;</highlight></codeline>
<codeline lineno="6672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6673"><highlight class="normal"></highlight></codeline>
<codeline lineno="6674"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_global_get(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Global)<sp/>{</highlight></codeline>
<codeline lineno="6675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__global__t" kindref="compound">ml_global_t</ref><sp/>*)Global)-&gt;Value;</highlight></codeline>
<codeline lineno="6676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6677"><highlight class="normal"></highlight></codeline>
<codeline lineno="6678"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_global_set(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Global,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="6679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__global__t" kindref="compound">ml_global_t</ref><sp/>*)Global)-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="6680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6681"><highlight class="normal"></highlight></codeline>
<codeline lineno="6682"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_unpack,<sp/>MLGlobalT,<sp/><ref refid="structml__global__t" kindref="compound">ml_global_t</ref><sp/>*Global,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index)<sp/>{</highlight></codeline>
<codeline lineno="6683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_unpack(Global-&gt;Value,<sp/>Index);</highlight></codeline>
<codeline lineno="6684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6685"><highlight class="normal"></highlight></codeline>
<codeline lineno="6686"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;command_var&quot;</highlight><highlight class="normal">,<sp/>MLCompilerT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="6687"><highlight class="normal"></highlight><highlight class="comment">//&lt;Compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6688"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6689"><highlight class="normal"></highlight><highlight class="comment">//&gt;variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6690"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler<sp/>=<sp/>(<ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="6692"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)stringmap_slot(Compiler-&gt;Vars,<sp/>Name);</highlight></codeline>
<codeline lineno="6693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0]<sp/>||<sp/>ml_typeof(Slot[0])<sp/>!=<sp/>MLGlobalT)<sp/>{</highlight></codeline>
<codeline lineno="6694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>ml_global(Name);</highlight></codeline>
<codeline lineno="6695"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_global_set(Slot[0],<sp/>ml_variable(MLNil,<sp/>NULL));</highlight></codeline>
<codeline lineno="6697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6698"><highlight class="normal"></highlight></codeline>
<codeline lineno="6699"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;command_var&quot;</highlight><highlight class="normal">,<sp/>MLCompilerT,<sp/>MLStringT,<sp/>MLTypeT)<sp/>{</highlight></codeline>
<codeline lineno="6700"><highlight class="normal"></highlight><highlight class="comment">//&lt;Compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6701"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6702"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6703"><highlight class="normal"></highlight><highlight class="comment">//&gt;variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6704"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler<sp/>=<sp/>(<ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="6706"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)stringmap_slot(Compiler-&gt;Vars,<sp/>Name);</highlight></codeline>
<codeline lineno="6707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0]<sp/>||<sp/>ml_typeof(Slot[0])<sp/>!=<sp/>MLGlobalT)<sp/>{</highlight></codeline>
<codeline lineno="6708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>ml_global(Name);</highlight></codeline>
<codeline lineno="6709"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_global_set(Slot[0],<sp/>ml_variable(MLNil,<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[2]));</highlight></codeline>
<codeline lineno="6711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6712"><highlight class="normal"></highlight></codeline>
<codeline lineno="6713"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;command_let&quot;</highlight><highlight class="normal">,<sp/>MLCompilerT,<sp/>MLStringT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="6714"><highlight class="normal"></highlight><highlight class="comment">//&lt;Compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6715"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6716"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6717"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6718"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler<sp/>=<sp/>(<ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="6720"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)stringmap_slot(Compiler-&gt;Vars,<sp/>Name);</highlight></codeline>
<codeline lineno="6721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0]<sp/>||<sp/>ml_typeof(Slot[0])<sp/>!=<sp/>MLGlobalT)<sp/>{</highlight></codeline>
<codeline lineno="6722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>ml_global(Name);</highlight></codeline>
<codeline lineno="6723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_global_set(Slot[0],<sp/>Args[2]);</highlight></codeline>
<codeline lineno="6725"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6726"><highlight class="normal"></highlight></codeline>
<codeline lineno="6727"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;command_def&quot;</highlight><highlight class="normal">,<sp/>MLCompilerT,<sp/>MLStringT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="6728"><highlight class="normal"></highlight><highlight class="comment">//&lt;Compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6729"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6730"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6731"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Use<sp/>a<sp/>non-deref<sp/>method<sp/>to<sp/>preserve<sp/>reference<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6733"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler<sp/>=<sp/>(<ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="6734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="6735"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)stringmap_slot(Compiler-&gt;Vars,<sp/>Name);</highlight></codeline>
<codeline lineno="6736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0]<sp/>||<sp/>ml_typeof(Slot[0])<sp/>!=<sp/>MLGlobalT)<sp/>{</highlight></codeline>
<codeline lineno="6737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>ml_global(Name);</highlight></codeline>
<codeline lineno="6738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_global_set(Slot[0],<sp/>Args[2]);</highlight></codeline>
<codeline lineno="6740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6741"><highlight class="normal"></highlight></codeline>
<codeline lineno="6742"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__global__t" kindref="compound">ml_global_t</ref><sp/>*ml_command_global(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Globals,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)<sp/>{</highlight></codeline>
<codeline lineno="6743"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)stringmap_slot(Globals,<sp/>Name);</highlight></codeline>
<codeline lineno="6744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/>{</highlight></codeline>
<codeline lineno="6745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>ml_global(Name);</highlight></codeline>
<codeline lineno="6746"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_typeof(Slot[0])<sp/>==<sp/>MLGlobalT)<sp/>{</highlight></codeline>
<codeline lineno="6747"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_typeof(Slot[0])<sp/>==<sp/>MLUninitializedT)<sp/>{</highlight></codeline>
<codeline lineno="6748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Global<sp/>=<sp/>ml_global(Name);</highlight></codeline>
<codeline lineno="6749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_uninitialized_set(Slot[0],<sp/>Global);</highlight></codeline>
<codeline lineno="6750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>Global;</highlight></codeline>
<codeline lineno="6751"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>ml_global(Name);</highlight></codeline>
<codeline lineno="6753"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__global__t" kindref="compound">ml_global_t</ref><sp/>*)Slot[0];</highlight></codeline>
<codeline lineno="6755"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6756"><highlight class="normal"></highlight></codeline>
<codeline lineno="6757" refid="structml__command__idents__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6758"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[2];</highlight></codeline>
<codeline lineno="6759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="6760"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_token_t<sp/>Type;</highlight></codeline>
<codeline lineno="6761"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__global__t" kindref="compound">ml_global_t</ref><sp/>*Globals[];</highlight></codeline>
<codeline lineno="6762"><highlight class="normal">}<sp/><ref refid="structml__command__idents__frame__t" kindref="compound">ml_command_idents_frame_t</ref>;</highlight></codeline>
<codeline lineno="6763"><highlight class="normal"></highlight></codeline>
<codeline lineno="6764"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_command_idents_in2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__command__idents__frame__t" kindref="compound">ml_command_idents_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="6765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>{</highlight></codeline>
<codeline lineno="6766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Function-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="6767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="6768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6769"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__global__t" kindref="compound">ml_global_t</ref><sp/>*Global<sp/>=<sp/>Frame-&gt;Globals[Frame-&gt;Index];</highlight></codeline>
<codeline lineno="6770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Type<sp/>==<sp/>MLT_LET<sp/>||<sp/>Frame-&gt;Type<sp/>==<sp/>MLT_VAR)<sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="6771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Type<sp/>==<sp/>MLT_VAR)<sp/>{</highlight></codeline>
<codeline lineno="6772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_variable(Value,<sp/>NULL);</highlight></codeline>
<codeline lineno="6773"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6774"><highlight class="normal"><sp/><sp/><sp/><sp/>Global-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="6775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Index)<sp/>{</highlight></codeline>
<codeline lineno="6776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>--Frame-&gt;Index;</highlight></codeline>
<codeline lineno="6777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Args[1]<sp/>=<sp/>ml_string(Frame-&gt;Globals[Index]-&gt;Name,<sp/>-1);</highlight></codeline>
<codeline lineno="6778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Function,<sp/>SymbolMethod,<sp/>2,<sp/>Frame-&gt;Args);</highlight></codeline>
<codeline lineno="6779"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="6781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_RETURN(Frame-&gt;Args[0]);</highlight></codeline>
<codeline lineno="6782"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6784"><highlight class="normal"></highlight></codeline>
<codeline lineno="6785"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_command_idents_in(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__command__idents__frame__t" kindref="compound">ml_command_idents_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="6786"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="6787"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Args[1]<sp/>=<sp/>ml_string(Frame-&gt;Globals[Frame-&gt;Index]-&gt;Name,<sp/>-1);</highlight></codeline>
<codeline lineno="6788"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_command_idents_in2;</highlight></codeline>
<codeline lineno="6789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Function,<sp/>SymbolMethod,<sp/>2,<sp/>Frame-&gt;Args);</highlight></codeline>
<codeline lineno="6790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6791"><highlight class="normal"></highlight></codeline>
<codeline lineno="6792"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_command_idents_unpack(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Packed,<sp/><ref refid="structml__command__idents__frame__t" kindref="compound">ml_command_idents_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="6793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>0;<sp/>Index<sp/>&lt;=<sp/>Frame-&gt;Index;<sp/>++Index)<sp/>{</highlight></codeline>
<codeline lineno="6794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>ml_unpack(Packed,<sp/>Index<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="6795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLErrorT))<sp/>{</highlight></codeline>
<codeline lineno="6796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="6797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_RETURN(Value);</highlight></codeline>
<codeline lineno="6798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__global__t" kindref="compound">ml_global_t</ref><sp/>*Global<sp/>=<sp/>Frame-&gt;Globals[Index];</highlight></codeline>
<codeline lineno="6800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Type<sp/>==<sp/>MLT_LET<sp/>||<sp/>Frame-&gt;Type<sp/>==<sp/>MLT_VAR)<sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="6801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Type<sp/>==<sp/>MLT_VAR)<sp/>{</highlight></codeline>
<codeline lineno="6802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_variable(Value,<sp/>NULL);</highlight></codeline>
<codeline lineno="6803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Global-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="6805"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6806"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="6807"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(Packed);</highlight></codeline>
<codeline lineno="6808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6809"><highlight class="normal"></highlight></codeline>
<codeline lineno="6810"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__command__idents__frame__t" kindref="compound">ml_command_idents_frame_t</ref><sp/>*ml_accept_command_idents(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index)<sp/>{</highlight></codeline>
<codeline lineno="6811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_parse2(Parser,<sp/>MLT_BLANK))<sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="6812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Ident<sp/>=<sp/>Parser-&gt;Ident;</highlight></codeline>
<codeline lineno="6813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_COMMA))<sp/>{</highlight></codeline>
<codeline lineno="6814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__command__idents__frame__t" kindref="compound">ml_command_idents_frame_t</ref><sp/>*Frame<sp/>=<sp/>ml_accept_command_idents(Function,<sp/>Parser,<sp/>Index<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="6815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Globals[Index]<sp/>=<sp/>ml_command_global(Function-&gt;Compiler-&gt;Vars,<sp/>Ident);</highlight></codeline>
<codeline lineno="6816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Frame;</highlight></codeline>
<codeline lineno="6817"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6818"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="6819"><highlight class="normal"><sp/><sp/><sp/><sp/>mlc_frame_fn<sp/>FrameFn;</highlight></codeline>
<codeline lineno="6820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_IN))<sp/>{</highlight></codeline>
<codeline lineno="6821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FrameFn<sp/>=<sp/>(mlc_frame_fn)ml_command_idents_in;</highlight></codeline>
<codeline lineno="6822"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_ASSIGN);</highlight></codeline>
<codeline lineno="6824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FrameFn<sp/>=<sp/>(mlc_frame_fn)ml_command_idents_unpack;</highlight></codeline>
<codeline lineno="6825"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>Index<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="6827"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_XFRAME(<ref refid="structml__command__idents__frame__t" kindref="compound">ml_command_idents_frame_t</ref>,<sp/>Count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>FrameFn);</highlight></codeline>
<codeline lineno="6828"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Index<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="6829"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Globals[Index]<sp/>=<sp/>ml_command_global(Function-&gt;Compiler-&gt;Vars,<sp/>Ident);</highlight></codeline>
<codeline lineno="6830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Frame;</highlight></codeline>
<codeline lineno="6831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6832"><highlight class="normal"></highlight></codeline>
<codeline lineno="6833" refid="structml__command__ident__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6834"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__global__t" kindref="compound">ml_global_t</ref><sp/>*Global;</highlight></codeline>
<codeline lineno="6835"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*VarType;</highlight></codeline>
<codeline lineno="6836"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="6837"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_token_t<sp/>Type;</highlight></codeline>
<codeline lineno="6838"><highlight class="normal">}<sp/><ref refid="structml__command__ident__frame__t" kindref="compound">ml_command_ident_frame_t</ref>;</highlight></codeline>
<codeline lineno="6839"><highlight class="normal"></highlight></codeline>
<codeline lineno="6840"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_command_var_type_run(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__command__ident__frame__t" kindref="compound">ml_command_ident_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="6841"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Function-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="6842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="6843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Value,<sp/>MLTypeT))<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>type<sp/>not<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Value)-&gt;Name);</highlight></codeline>
<codeline lineno="6844"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="6845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Frame-&gt;Value,<sp/>Type))<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>assign<sp/>%s<sp/>to<sp/>variable<sp/>of<sp/>type<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Frame-&gt;Value)-&gt;Name,<sp/>ml_type_name(Type));</highlight></codeline>
<codeline lineno="6846"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_variable(Frame-&gt;Value,<sp/>Type);</highlight></codeline>
<codeline lineno="6847"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__global__t" kindref="compound">ml_global_t</ref><sp/>*Global<sp/>=<sp/>Frame-&gt;Global;</highlight></codeline>
<codeline lineno="6848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Global-&gt;Value<sp/>&amp;&amp;<sp/>ml_typeof(Global-&gt;Value)<sp/>==<sp/>MLUninitializedT)<sp/>{</highlight></codeline>
<codeline lineno="6849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_uninitialized_set(Global-&gt;Value,<sp/>Value);</highlight></codeline>
<codeline lineno="6850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6851"><highlight class="normal"><sp/><sp/><sp/><sp/>Global-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="6852"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="6853"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(Value);</highlight></codeline>
<codeline lineno="6854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6855"><highlight class="normal"></highlight></codeline>
<codeline lineno="6856"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_command_ident_run(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__command__ident__frame__t" kindref="compound">ml_command_ident_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="6857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>{</highlight></codeline>
<codeline lineno="6858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Function-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="6859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="6860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*ml_compiler_t<sp/>*Compiler<sp/>=<sp/>Function-&gt;Compiler;</highlight></codeline>
<codeline lineno="6862"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(!ml_is(VarType,<sp/>MLTypeT))<sp/>{</highlight></codeline>
<codeline lineno="6863"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse_error(Compiler,<sp/>&quot;TypeError&quot;,<sp/>&quot;Expected<sp/>&lt;type&gt;<sp/>not<sp/>&lt;%s&gt;&quot;,<sp/>ml_typeof(VarType)-&gt;Name);</highlight></codeline>
<codeline lineno="6864"><highlight class="comment"><sp/><sp/><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6865"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__global__t" kindref="compound">ml_global_t</ref><sp/>*Global<sp/>=<sp/>Frame-&gt;Global;</highlight></codeline>
<codeline lineno="6866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;Type<sp/>==<sp/>MLT_LET<sp/>||<sp/>Frame-&gt;Type<sp/>==<sp/>MLT_VAR)<sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="6867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Frame-&gt;Type)<sp/>{</highlight></codeline>
<codeline lineno="6868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_VAR:</highlight></codeline>
<codeline lineno="6869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame-&gt;VarType)<sp/>{</highlight></codeline>
<codeline lineno="6870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Frame-&gt;run<sp/>=<sp/>(mlc_frame_fn)ml_command_var_type_run;</highlight></codeline>
<codeline lineno="6871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="6872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_expr_call(Function,<sp/>Frame-&gt;VarType);</highlight></codeline>
<codeline lineno="6873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_variable(Value,<sp/>NULL);</highlight></codeline>
<codeline lineno="6875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_LET:</highlight></codeline>
<codeline lineno="6877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MLT_DEF:</highlight></codeline>
<codeline lineno="6878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_value_set_name(Value,<sp/>Global-&gt;Name);</highlight></codeline>
<codeline lineno="6879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6882"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Global-&gt;Value<sp/>&amp;&amp;<sp/>ml_typeof(Global-&gt;Value)<sp/>==<sp/>MLUninitializedT)<sp/>{</highlight></codeline>
<codeline lineno="6884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_uninitialized_set(Global-&gt;Value,<sp/>Value);</highlight></codeline>
<codeline lineno="6885"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6886"><highlight class="normal"><sp/><sp/><sp/><sp/>Global-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="6887"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="6888"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(Value);</highlight></codeline>
<codeline lineno="6889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6890"><highlight class="normal"></highlight></codeline>
<codeline lineno="6891"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_accept_command_decl2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/>ml_token_t<sp/>Type)<sp/>{</highlight></codeline>
<codeline lineno="6892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_LEFT_PAREN))<sp/>{</highlight></codeline>
<codeline lineno="6893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__command__idents__frame__t" kindref="compound">ml_command_idents_frame_t</ref><sp/>*Frame<sp/>=<sp/>ml_accept_command_idents(Function,<sp/>Parser,<sp/>0);</highlight></codeline>
<codeline lineno="6894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Type<sp/>=<sp/>Type;</highlight></codeline>
<codeline lineno="6895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="6896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_expr_call(Function,<sp/>Expr);</highlight></codeline>
<codeline lineno="6897"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structml__command__ident__frame__t" kindref="compound">ml_command_ident_frame_t</ref>,<sp/>ml_command_ident_run);</highlight></codeline>
<codeline lineno="6899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="6900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Global<sp/>=<sp/>ml_command_global(Function-&gt;Compiler-&gt;Vars,<sp/>Parser-&gt;Ident);</highlight></codeline>
<codeline lineno="6901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;VarType<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Type<sp/>=<sp/>Type;</highlight></codeline>
<codeline lineno="6903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_LEFT_PAREN))<sp/>{</highlight></codeline>
<codeline lineno="6904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>ml_accept_fun_expr(Parser,<sp/>Frame-&gt;Global-&gt;Name,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="6905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_expr_call(Function,<sp/>Expr);</highlight></codeline>
<codeline lineno="6906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_COLON))<sp/>Frame-&gt;VarType<sp/>=<sp/>ml_accept_term(Parser,<sp/>0);</highlight></codeline>
<codeline lineno="6908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Type<sp/>==<sp/>MLT_VAR)<sp/>{</highlight></codeline>
<codeline lineno="6909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_ASSIGN))<sp/>{</highlight></codeline>
<codeline lineno="6910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="6911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_expr_call(Function,<sp/>Expr);</highlight></codeline>
<codeline lineno="6912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_command_ident_run(Function,<sp/>MLNil,<sp/>Frame);</highlight></codeline>
<codeline lineno="6914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_ASSIGN);</highlight></codeline>
<codeline lineno="6917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="6918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_expr_call(Function,<sp/>Expr);</highlight></codeline>
<codeline lineno="6919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6921"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6923"><highlight class="normal"></highlight></codeline>
<codeline lineno="6924" refid="structml__command__decl__frame__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6925"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser;</highlight></codeline>
<codeline lineno="6926"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_token_t<sp/>Type;</highlight></codeline>
<codeline lineno="6927"><highlight class="normal">}<sp/><ref refid="structml__command__decl__frame__t" kindref="compound">ml_command_decl_frame_t</ref>;</highlight></codeline>
<codeline lineno="6928"><highlight class="normal"></highlight></codeline>
<codeline lineno="6929"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_command_decl_run(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__command__decl__frame__t" kindref="compound">ml_command_decl_frame_t</ref><sp/>*Frame)<sp/>{</highlight></codeline>
<codeline lineno="6930"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser<sp/>=<sp/>Frame-&gt;Parser;</highlight></codeline>
<codeline lineno="6931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setjmp(Parser-&gt;OnError))<sp/>MLC_RETURN(Parser-&gt;Value);</highlight></codeline>
<codeline lineno="6932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_COMMA))<sp/>{</highlight></codeline>
<codeline lineno="6933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_accept_command_decl2(Function,<sp/>Parser,<sp/>Frame-&gt;Type);</highlight></codeline>
<codeline lineno="6934"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6935"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_parse(Parser,<sp/>MLT_SEMICOLON);</highlight></codeline>
<codeline lineno="6936"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_POP();</highlight></codeline>
<codeline lineno="6937"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_RETURN(Value);</highlight></codeline>
<codeline lineno="6938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6939"><highlight class="normal"></highlight></codeline>
<codeline lineno="6940"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_accept_command_decl(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/>ml_token_t<sp/>Type)<sp/>{</highlight></codeline>
<codeline lineno="6941"><highlight class="normal"><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structml__command__decl__frame__t" kindref="compound">ml_command_decl_frame_t</ref>,<sp/>ml_command_decl_run);</highlight></codeline>
<codeline lineno="6942"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Parser<sp/>=<sp/>Parser;</highlight></codeline>
<codeline lineno="6943"><highlight class="normal"><sp/><sp/><sp/><sp/>Frame-&gt;Type<sp/>=<sp/>Type;</highlight></codeline>
<codeline lineno="6944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_accept_command_decl2(Function,<sp/>Parser,<sp/>Type);</highlight></codeline>
<codeline lineno="6945"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6946"><highlight class="normal"></highlight></codeline>
<codeline lineno="6947"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_accept_command_fun(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="6948"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler<sp/>=<sp/>Function-&gt;Compiler;</highlight></codeline>
<codeline lineno="6949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_IDENT))<sp/>{</highlight></codeline>
<codeline lineno="6950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_COMMA))<sp/>{</highlight></codeline>
<codeline lineno="6951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_command_global(Function-&gt;Compiler-&gt;Vars,<sp/>Parser-&gt;Ident);</highlight></codeline>
<codeline lineno="6952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="6953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_SEMICOLON))<sp/>{</highlight></codeline>
<codeline lineno="6955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_command_global(Function-&gt;Compiler-&gt;Vars,<sp/>Parser-&gt;Ident);</highlight></codeline>
<codeline lineno="6956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CONTINUE(Function,<sp/>MLNil);</highlight></codeline>
<codeline lineno="6957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structml__command__ident__frame__t" kindref="compound">ml_command_ident_frame_t</ref>,<sp/>ml_command_ident_run);</highlight></codeline>
<codeline lineno="6959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Global<sp/>=<sp/>ml_command_global(Compiler-&gt;Vars,<sp/>Parser-&gt;Ident);</highlight></codeline>
<codeline lineno="6960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;VarType<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Type<sp/>=<sp/>MLT_DEF;</highlight></codeline>
<codeline lineno="6962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_LEFT_PAREN);</highlight></codeline>
<codeline lineno="6963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>ml_accept_fun_expr(Parser,<sp/>Frame-&gt;Global-&gt;Name,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="6964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse(Parser,<sp/>MLT_SEMICOLON);</highlight></codeline>
<codeline lineno="6965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_expr_call(Function,<sp/>Expr);</highlight></codeline>
<codeline lineno="6966"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_LEFT_PAREN);</highlight></codeline>
<codeline lineno="6968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>ml_accept_fun_expr(Parser,<sp/>NULL,<sp/>MLT_RIGHT_PAREN);</highlight></codeline>
<codeline lineno="6969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse(Parser,<sp/>MLT_SEMICOLON);</highlight></codeline>
<codeline lineno="6970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_expr_call(Function,<sp/>Expr);</highlight></codeline>
<codeline lineno="6971"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6972"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6973"><highlight class="normal"></highlight></codeline>
<codeline lineno="6974"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_accept_command_expr(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="6975"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler<sp/>=<sp/>Function-&gt;Compiler;</highlight></codeline>
<codeline lineno="6976"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>ml_accept_expression(Parser,<sp/>EXPR_DEFAULT);</highlight></codeline>
<codeline lineno="6977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_COLON))<sp/>{</highlight></codeline>
<codeline lineno="6978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_IDENT);</highlight></codeline>
<codeline lineno="6979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Ident<sp/>=<sp/>Parser-&gt;Ident;</highlight></codeline>
<codeline lineno="6980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_EXPR(CallExpr,<sp/>parent,<sp/>call);</highlight></codeline>
<codeline lineno="6981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CallExpr-&gt;Child<sp/>=<sp/>Expr;</highlight></codeline>
<codeline lineno="6982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept(Parser,<sp/>MLT_LEFT_PAREN);</highlight></codeline>
<codeline lineno="6983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_accept_arguments(Parser,<sp/>MLT_RIGHT_PAREN,<sp/>&amp;Expr-&gt;Next);</highlight></codeline>
<codeline lineno="6984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse(Parser,<sp/>MLT_SEMICOLON);</highlight></codeline>
<codeline lineno="6985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_FRAME(<ref refid="structml__command__ident__frame__t" kindref="compound">ml_command_ident_frame_t</ref>,<sp/>ml_command_ident_run);</highlight></codeline>
<codeline lineno="6986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Global<sp/>=<sp/>ml_command_global(Compiler-&gt;Vars,<sp/>Ident);</highlight></codeline>
<codeline lineno="6987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;VarType<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame-&gt;Type<sp/>=<sp/>MLT_DEF;</highlight></codeline>
<codeline lineno="6989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_expr_call(Function,<sp/>ML_EXPR_END(CallExpr));</highlight></codeline>
<codeline lineno="6990"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_parse(Parser,<sp/>MLT_SEMICOLON);</highlight></codeline>
<codeline lineno="6992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mlc_expr_call(Function,<sp/>Expr);</highlight></codeline>
<codeline lineno="6993"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6994"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6995"><highlight class="normal"></highlight></codeline>
<codeline lineno="6996"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_command_evaluate2(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data)<sp/>{</highlight></codeline>
<codeline lineno="6997"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Function-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="6998"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_deref(Value));</highlight></codeline>
<codeline lineno="6999"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7000"><highlight class="normal"></highlight></codeline>
<codeline lineno="7001"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_command_evaluate(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler)<sp/>{</highlight></codeline>
<codeline lineno="7002"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref><sp/>*Function<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structmlc__function__t" kindref="compound">mlc_function_t</ref>);</highlight></codeline>
<codeline lineno="7003"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Base.Type<sp/>=<sp/>MLCompilerFunctionT;</highlight></codeline>
<codeline lineno="7004"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Base.Caller<sp/>=<sp/>(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Caller;</highlight></codeline>
<codeline lineno="7005"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="7006"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Base.run<sp/>=<sp/>(ml_state_fn)mlc_function_run;</highlight></codeline>
<codeline lineno="7007"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Compiler<sp/>=<sp/>Compiler;</highlight></codeline>
<codeline lineno="7008"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Eval<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7009"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Source<sp/>=<sp/>Parser-&gt;Source.Name;</highlight></codeline>
<codeline lineno="7010"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Old<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="7011"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;It<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="7012"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Up<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="7013"><highlight class="normal"><sp/><sp/><sp/><sp/>__attribute__((unused))<sp/>MLC_FRAME(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>ml_command_evaluate2);</highlight></codeline>
<codeline lineno="7014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setjmp(Parser-&gt;OnError))<sp/>MLC_RETURN(Parser-&gt;Value);</highlight></codeline>
<codeline lineno="7015"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_skip_eol(Parser);</highlight></codeline>
<codeline lineno="7016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_EOI))<sp/>{</highlight></codeline>
<codeline lineno="7017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MLC_RETURN(MLEndOfInput);</highlight></codeline>
<codeline lineno="7018"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_VAR))<sp/>{</highlight></codeline>
<codeline lineno="7019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_accept_command_decl(Function,<sp/>Parser,<sp/>MLT_VAR);</highlight></codeline>
<codeline lineno="7020"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_LET))<sp/>{</highlight></codeline>
<codeline lineno="7021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_accept_command_decl(Function,<sp/>Parser,<sp/>MLT_LET);</highlight></codeline>
<codeline lineno="7022"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_REF))<sp/>{</highlight></codeline>
<codeline lineno="7023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_accept_command_decl(Function,<sp/>Parser,<sp/>MLT_REF);</highlight></codeline>
<codeline lineno="7024"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_DEF))<sp/>{</highlight></codeline>
<codeline lineno="7025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_accept_command_decl(Function,<sp/>Parser,<sp/>MLT_DEF);</highlight></codeline>
<codeline lineno="7026"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_parse(Parser,<sp/>MLT_FUN))<sp/>{</highlight></codeline>
<codeline lineno="7027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_accept_command_fun(Function,<sp/>Parser);</highlight></codeline>
<codeline lineno="7028"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_accept_command_expr(Function,<sp/>Parser);</highlight></codeline>
<codeline lineno="7030"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7031"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7032"><highlight class="normal"></highlight></codeline>
<codeline lineno="7033"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*stringmap_global_get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Map,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Eval)<sp/>{</highlight></codeline>
<codeline lineno="7034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)stringmap_search(Map,<sp/>Key);</highlight></codeline>
<codeline lineno="7035"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7036"><highlight class="normal"></highlight></codeline>
<codeline lineno="7037"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ssize_t<sp/>ml_read_line(FILE<sp/>*File,<sp/>ssize_t<sp/>Offset,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**Result)<sp/>{</highlight></codeline>
<codeline lineno="7038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Buffer[129];</highlight></codeline>
<codeline lineno="7039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fgets(Buffer,<sp/>129,<sp/>File)<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="7040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>strlen(Buffer);</highlight></codeline>
<codeline lineno="7041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>==<sp/>128)<sp/>{</highlight></codeline>
<codeline lineno="7042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssize_t<sp/>Total<sp/>=<sp/>ml_read_line(File,<sp/>Offset<sp/>+<sp/>128,<sp/>Result);</highlight></codeline>
<codeline lineno="7043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(*Result<sp/>+<sp/>Offset,<sp/>Buffer,<sp/>128);</highlight></codeline>
<codeline lineno="7044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Total;</highlight></codeline>
<codeline lineno="7045"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Result<sp/>=<sp/>snew(Offset<sp/>+<sp/>Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="7047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(*Result<sp/>+<sp/>Offset,<sp/>Buffer);</highlight></codeline>
<codeline lineno="7048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Offset<sp/>+<sp/>Length;</highlight></codeline>
<codeline lineno="7049"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7050"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7051"><highlight class="normal"></highlight></codeline>
<codeline lineno="7052"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_load_file_read(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data)<sp/>{</highlight></codeline>
<codeline lineno="7053"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*File<sp/>=<sp/>(FILE<sp/>*)Data;</highlight></codeline>
<codeline lineno="7054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Line<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="7055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7056"><highlight class="normal"><sp/><sp/><sp/><sp/>Length<sp/>=<sp/>ml_read_line(File,<sp/>0,<sp/>&amp;Line);</highlight></codeline>
<codeline lineno="7057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="7058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Line;</highlight></codeline>
<codeline lineno="7059"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7060"><highlight class="normal"></highlight></codeline>
<codeline lineno="7061" refid="structml__load__file__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7062"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="7063"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*File;</highlight></codeline>
<codeline lineno="7064"><highlight class="normal">}<sp/><ref refid="structml__load__file__state__t" kindref="compound">ml_load_file_state_t</ref>;</highlight></codeline>
<codeline lineno="7065"><highlight class="normal"></highlight></codeline>
<codeline lineno="7066"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_load_file_state_run(<ref refid="structml__load__file__state__t" kindref="compound">ml_load_file_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="7067"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(State-&gt;File);</highlight></codeline>
<codeline lineno="7068"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="7069"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="7070"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7071"><highlight class="normal"></highlight></codeline>
<codeline lineno="7072"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_load_file(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/>ml_getter_t<sp/>GlobalGet,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Globals,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*FileName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Parameters[])<sp/>{</highlight></codeline>
<codeline lineno="7073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*DefaultParameters[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;Args&quot;</highlight><highlight class="normal">,<sp/>NULL};</highlight></codeline>
<codeline lineno="7074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Parameters)<sp/>Parameters<sp/>=<sp/>DefaultParameters;</highlight></codeline>
<codeline lineno="7075"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*File<sp/>=<sp/>fopen(FileName,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!File)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;LoadError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>opening<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>FileName);</highlight></codeline>
<codeline lineno="7077"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser<sp/>=<sp/><ref refid="group__compiler_1gab31c0e27d21db6f748c137bf13bd7e28" kindref="member">ml_parser</ref>(ml_load_file_read,<sp/>File);</highlight></codeline>
<codeline lineno="7078"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Source.Name<sp/>=<sp/>FileName;</highlight></codeline>
<codeline lineno="7079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Line<sp/>=<sp/>ml_load_file_read(File);</highlight></codeline>
<codeline lineno="7080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Line)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;LoadError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>file<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>FileName);</highlight></codeline>
<codeline lineno="7081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Line[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>Line[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Line<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="7083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Line<sp/>=<sp/>ml_load_file_read(File);</highlight></codeline>
<codeline lineno="7084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Line)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;LoadError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>file<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>FileName);</highlight></codeline>
<codeline lineno="7085"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Line<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="7087"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7088"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Next<sp/>=<sp/>Line;</highlight></codeline>
<codeline lineno="7089"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>ml_accept_file(Parser);</highlight></codeline>
<codeline lineno="7090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Expr)<sp/>ML_RETURN(Parser-&gt;Value);</highlight></codeline>
<codeline lineno="7091"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler<sp/>=<sp/>ml_compiler(GlobalGet,<sp/>Globals);</highlight></codeline>
<codeline lineno="7092"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__load__file__state__t" kindref="compound">ml_load_file_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__load__file__state__t" kindref="compound">ml_load_file_state_t</ref>);</highlight></codeline>
<codeline lineno="7093"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="7094"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="7095"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_load_file_state_run;</highlight></codeline>
<codeline lineno="7096"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;File<sp/>=<sp/>File;</highlight></codeline>
<codeline lineno="7097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_function_compile((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Expr,<sp/>Compiler,<sp/>Parameters);</highlight></codeline>
<codeline lineno="7098"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7099"><highlight class="normal"></highlight></codeline>
<codeline lineno="7100"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_inline_call_macro_fn(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="7101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>Source;<sp/>}<sp/>Parser[1];</highlight></codeline>
<codeline lineno="7102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count)<sp/>{</highlight></codeline>
<codeline lineno="7103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>(<ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="7104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Source.Name<sp/>=<sp/>Expr-&gt;Source;</highlight></codeline>
<codeline lineno="7105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Source.Line<sp/>=<sp/>Expr-&gt;StartLine;</highlight></codeline>
<codeline lineno="7106"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Source.Name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;macro&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Source.Line<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="7109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7110"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_EXPR(CallExpr,<sp/>parent_value,<sp/>const_call);</highlight></codeline>
<codeline lineno="7111"><highlight class="normal"><sp/><sp/><sp/><sp/>CallExpr-&gt;Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="7112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>**Slot<sp/>=<sp/>&amp;CallExpr-&gt;Child;</highlight></codeline>
<codeline lineno="7113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="7114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Child<sp/>=<sp/>Slot[0]<sp/>=<sp/>ml_delegate_expr(Args[I]);</highlight></codeline>
<codeline lineno="7115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot<sp/>=<sp/>&amp;Child-&gt;Next;</highlight></codeline>
<codeline lineno="7116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7117"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_EXPR(InlineExpr,<sp/>parent,<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7118"><highlight class="normal"><sp/><sp/><sp/><sp/>InlineExpr-&gt;Child<sp/>=<sp/>ML_EXPR_END(CallExpr);</highlight></codeline>
<codeline lineno="7119"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_expr_value(ML_EXPR_END(InlineExpr)));</highlight></codeline>
<codeline lineno="7120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7121"><highlight class="normal"></highlight></codeline>
<codeline lineno="7122"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_inline_call_macro(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="7123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_macro(ml_cfunctionx(Value,<sp/>ml_inline_call_macro_fn));</highlight></codeline>
<codeline lineno="7124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7125"><highlight class="normal"></highlight></codeline>
<codeline lineno="7126"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_compiler_init()<sp/>{</highlight></codeline>
<codeline lineno="7127"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_compiler_init.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7128"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLParserT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>MLExprT);</highlight></codeline>
<codeline lineno="7129"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLCompilerT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;EOI&quot;</highlight><highlight class="normal">,<sp/>MLEndOfInput);</highlight></codeline>
<codeline lineno="7130"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLCompilerT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;NotFound&quot;</highlight><highlight class="normal">,<sp/>MLNotFound);</highlight></codeline>
<codeline lineno="7131"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLCompilerT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;switch&quot;</highlight><highlight class="normal">,<sp/>MLCompilerSwitch);</highlight></codeline>
<codeline lineno="7132"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLCompilerT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">,<sp/>MLSourceInline);</highlight></codeline>
<codeline lineno="7133"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLMacroT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>ml_macro((<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLValueExpr));</highlight></codeline>
<codeline lineno="7134"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLMacroT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;subst&quot;</highlight><highlight class="normal">,<sp/>ml_macro((<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLMacroSubst));</highlight></codeline>
<codeline lineno="7135"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLMacroT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;ident&quot;</highlight><highlight class="normal">,<sp/>MLIdentExpr);</highlight></codeline>
<codeline lineno="7136"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLMacroT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>MLValueExpr);</highlight></codeline>
<codeline lineno="7137"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLMacroT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;fun&quot;</highlight><highlight class="normal">,<sp/>MLFunExpr);</highlight></codeline>
<codeline lineno="7138"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLMacroT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;block&quot;</highlight><highlight class="normal">,<sp/>MLBlockBuilder);</highlight></codeline>
<codeline lineno="7139"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLMacroT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;tuple&quot;</highlight><highlight class="normal">,<sp/>MLTupleBuilder);</highlight></codeline>
<codeline lineno="7140"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLMacroT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;list&quot;</highlight><highlight class="normal">,<sp/>MLListBuilder);</highlight></codeline>
<codeline lineno="7141"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLMacroT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;map&quot;</highlight><highlight class="normal">,<sp/>MLMapBuilder);</highlight></codeline>
<codeline lineno="7142"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLMacroT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;call&quot;</highlight><highlight class="normal">,<sp/>MLCallBuilder);</highlight></codeline>
<codeline lineno="7143"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(StringFns,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">,<sp/>ml_regex);</highlight></codeline>
<codeline lineno="7144"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(StringFns,<sp/></highlight><highlight class="stringliteral">&quot;ri&quot;</highlight><highlight class="normal">,<sp/>ml_regexi);</highlight></codeline>
<codeline lineno="7145"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ml_compiler.c"/>
  </compounddef>
</doxygen>
