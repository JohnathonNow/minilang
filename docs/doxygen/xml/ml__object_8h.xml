<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__object_8h" kind="file" language="C++">
    <compoundname>ml_object.h</compoundname>
    <includes refid="ml__types_8h" local="yes">ml_types.h</includes>
    <includes refid="stringmap_8h" local="yes">stringmap.h</includes>
    <incdepgraph>
      <node id="8">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_object.h</label>
        <link refid="ml__object_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="11">
        <label>ml_config.h</label>
      </node>
      <node id="5">
        <label>stdarg.h</label>
      </node>
      <node id="10">
        <label>stdint.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="9">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
      <node id="6">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structml__field__info__t" prot="public">ml_field_info_t</innerclass>
    <innerclass refid="structml__class__t" prot="public">ml_class_t</innerclass>
    <innerclass refid="structml__field__t" prot="public">ml_field_t</innerclass>
    <innerclass refid="structml__object__t" prot="public">ml_object_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__object_8h_1aff64ed8b6e4351149f95843609cfb2bd" prot="public" static="no">
        <name>ML_CLASS</name>
        <param><defname>TYPE</defname></param>
        <param><defname>PARENTS</defname></param>
        <param><defname>NAME</defname></param>
        <initializer><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *TYPE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="91" column="9" bodyfile="src/ml_object.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__object_8h_1a3eb1398dbc4993ee4752e07d18edf082" prot="public" static="no">
        <name>ML_CLASS_ADD_PARENTS</name>
        <param><defname>TYPE</defname></param>
        <param><defname>PARENTS ...</defname></param>
        <initializer>	{ \
	<ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *Parents[] = {PARENTS}; \
	for (int I = 0; I &lt; (sizeof(Parents) / sizeof(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *)); ++I) { \
		ml_class_add_parent(NULL, TYPE, Parents[I]); \
	} \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="92" column="9" bodyfile="src/ml_object.h" bodystart="92" bodyend="97"/>
      </memberdef>
      <memberdef kind="define" id="ml__object_8h_1ab2604f74e595e6834034ecd477d96036" prot="public" static="no">
        <name>ML_FIELD</name>
        <param><defname>FIELD</defname></param>
        <param><defname>TYPE</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="98" column="9" bodyfile="src/ml_object.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__object_8h_1a82e405226ae6f4e48c3a15b9fff8cfc5" prot="public" static="no">
        <name>ML_ENUM</name>
        <param><defname>TYPE</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>VALUES ...</defname></param>
        <initializer><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *TYPE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="99" column="9" bodyfile="src/ml_object.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__object_8h_1ac2cd8f2e32d448a162784ade1ecc4ef6" prot="public" static="no">
        <name>ML_ENUM_CYCLIC</name>
        <param><defname>TYPE</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>VALUES ...</defname></param>
        <initializer><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *TYPE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="100" column="9" bodyfile="src/ml_object.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__object_8h_1adc751bc7b4b146dc5e4733cb8c6b75f0" prot="public" static="no">
        <name>ML_FLAGS</name>
        <param><defname>TYPE</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>VALUES ...</defname></param>
        <initializer><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *TYPE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="101" column="9" bodyfile="src/ml_object.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__object_8h_1a3f906af67a6cad8c688fe2741ad92a79" prot="public" static="no">
        <name>ML_ENUM2</name>
        <param><defname>TYPE</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>VALUES ...</defname></param>
        <initializer><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *TYPE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="102" column="9" bodyfile="src/ml_object.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__object_8h_1a150596e88430f302a5208579891d659e" prot="public" static="no">
        <name>ML_FLAGS2</name>
        <param><defname>TYPE</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>VALUES ...</defname></param>
        <initializer><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *TYPE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="103" column="9" bodyfile="src/ml_object.h" bodystart="103" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ml__object_8h_1ae70523f3347bde71e77757b6b758fa22" prot="public" static="no">
        <type>struct ml_class_t</type>
        <definition>typedef struct ml_class_t ml_class_t</definition>
        <argsstring></argsstring>
        <name>ml_class_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="11" column="25" bodyfile="src/ml_object.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__object_8h_1a9a70e051c2a7fcd44e1c356f977aa0f5" prot="public" static="no">
        <type>struct ml_object_t</type>
        <definition>typedef struct ml_object_t ml_object_t</definition>
        <argsstring></argsstring>
        <name>ml_object_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="12" column="26" bodyfile="src/ml_object.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__object_8h_1a72704d3e342214fb2f53d72e3c8e85a7" prot="public" static="no">
        <type>struct ml_field_t</type>
        <definition>typedef struct ml_field_t ml_field_t</definition>
        <argsstring></argsstring>
        <name>ml_field_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="13" column="25" bodyfile="src/ml_object.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__object_8h_1ae65682223379e765e79c0f50e04f80a3" prot="public" static="no">
        <type>struct ml_field_info_t</type>
        <definition>typedef struct ml_field_info_t ml_field_info_t</definition>
        <argsstring></argsstring>
        <name>ml_field_info_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="14" column="30" bodyfile="src/ml_object.h" bodystart="14" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="ml__object_8h_1a22e8d0514421a25e9548e3b7f0797f81" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLClassT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLClassT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="45" column="18" declfile="src/ml_object.h" declline="45" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__object_8h_1a177646a0c55dc0180d6c9657e57119ea" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLObjectT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLObjectT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="46" column="18" declfile="src/ml_object.h" declline="46" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__object_8h_1af0860eca949bab3e4d5aa79b805cbee1" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLFieldT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLFieldT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="47" column="18" declfile="src/ml_object.h" declline="47" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__object_8h_1abcd0654d1007797f1546d9071fc01781" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLFieldMutableT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLFieldMutableT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="48" column="18" declfile="src/ml_object.h" declline="48" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__object_8h_1a55bf3f6aaa5344af28b9935aadf25e4f" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLEnumT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLEnumT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="68" column="18" declfile="src/ml_object.h" declline="68" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__object_8h_1acd8ad4a915700a0019bf3bf99a8d849f" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLEnumValueT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLEnumValueT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="69" column="18" declfile="src/ml_object.h" declline="69" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__object_8h_1a22c1e33d95637b0d82ab55db344c2b81" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLFlagsT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLFlagsT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="79" column="18" declfile="src/ml_object.h" declline="79" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__object_8h_1a8f426dc32abaa0f640d2799f94e616b9" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLFlagsValueT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLFlagsValueT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="80" column="18" declfile="src/ml_object.h" declline="80" declcolumn="18"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__object_8h_1a08e4f63f432473b1e590ca6fcbddb580" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_object_init</definition>
        <argsstring>(stringmap_t *Globals)</argsstring>
        <name>ml_object_init</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Globals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="41" column="6" declfile="src/ml_object.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1a2985e6f8f42dc6f056f3ab57689cf0cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_field_fn</definition>
        <argsstring>(void *Data, int Count, ml_value_t **Args) __attribute__((malloc))</argsstring>
        <name>ml_field_fn</name>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="43" column="12" declfile="src/ml_object.h" declline="43" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1a879ddfefbf2438a69f766cd6681ad4ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__object__t" kindref="compound">ml_object_t</ref> *</type>
        <definition>ml_object_t * ml_field_owner</definition>
        <argsstring>(ml_field_t *Field)</argsstring>
        <name>ml_field_owner</name>
        <param>
          <type><ref refid="structml__field__t" kindref="compound">ml_field_t</ref> *</type>
          <declname>Field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="50" column="13" declfile="src/ml_object.h" declline="50" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1a18d82bd95fad2865b096af5a154a734b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
        <definition>ml_type_t * ml_class</definition>
        <argsstring>(const char *Name)</argsstring>
        <name>ml_class</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="52" column="11" declfile="src/ml_object.h" declline="52" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1ad0ca2a89ea09a6cdab2dd34155f27f48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_class_add_parent</definition>
        <argsstring>(ml_context_t *Context, ml_type_t *Class, ml_type_t *Parent)</argsstring>
        <name>ml_class_add_parent</name>
        <param>
          <type><ref refid="structml__context__t" kindref="compound">ml_context_t</ref> *</type>
          <declname>Context</declname>
        </param>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="53" column="6" declfile="src/ml_object.h" declline="53" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1a5dea0e8961ffa806f6dc593e4e0d47a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_class_add_field</definition>
        <argsstring>(ml_context_t *Context, ml_type_t *Class, ml_value_t *Field, ml_type_t *Type)</argsstring>
        <name>ml_class_add_field</name>
        <param>
          <type><ref refid="structml__context__t" kindref="compound">ml_context_t</ref> *</type>
          <declname>Context</declname>
        </param>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Field</declname>
        </param>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="54" column="6" declfile="src/ml_object.h" declline="54" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1a3213cb60e8d82e3cf0b0535fa927b417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_class_modify</definition>
        <argsstring>(ml_context_t *Context, ml_class_t *Class, ml_value_t *Modifier)</argsstring>
        <name>ml_class_modify</name>
        <param>
          <type><ref refid="structml__context__t" kindref="compound">ml_context_t</ref> *</type>
          <declname>Context</declname>
        </param>
        <param>
          <type><ref refid="structml__class__t" kindref="compound">ml_class_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Modifier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="56" column="12" declfile="src/ml_object.h" declline="56" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1aa9496be0561dc1d54c67d025874bdfa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_modified_field</definition>
        <argsstring>(ml_value_t *Field, ml_type_t *Type)</argsstring>
        <name>ml_modified_field</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Field</declname>
        </param>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="58" column="12" declfile="src/ml_object.h" declline="58" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1afa86bd55039f9d84589faae382c4ed4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ml_class_size</definition>
        <argsstring>(const ml_type_t *Value) __attribute__((pure))</argsstring>
        <name>ml_class_size</name>
        <param>
          <type>const <ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="60" column="8" declfile="src/ml_object.h" declline="60" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1aff4c60fbfa3d5814be2d6176dee0c274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ml_class_field_name</definition>
        <argsstring>(const ml_type_t *Value, int Index) __attribute__((pure))</argsstring>
        <name>ml_class_field_name</name>
        <param>
          <type>const <ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="61" column="12" declfile="src/ml_object.h" declline="61" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1a5523c0ae8d8ed812fc85d14d1acd115f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_object</definition>
        <argsstring>(ml_type_t *Class,...) __attribute__((sentinel))</argsstring>
        <name>ml_object</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="63" column="12" declfile="src/ml_object.h" declline="63" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1a095d9d56848aefa66d2054fbbb9220b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ml_object_size</definition>
        <argsstring>(const ml_value_t *Value) __attribute__((pure))</argsstring>
        <name>ml_object_size</name>
        <param>
          <type>const <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="64" column="8" declfile="src/ml_object.h" declline="64" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1ad761297f2c77bc8b1bdd6fe0c1d147ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_object_field</definition>
        <argsstring>(const ml_value_t *Value, int Index) __attribute__((pure))</argsstring>
        <name>ml_object_field</name>
        <param>
          <type>const <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="65" column="12" declfile="src/ml_object.h" declline="65" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1a77adb04068271677e3a51f9de1025e5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_object_foreach</definition>
        <argsstring>(const ml_value_t *Value, void *Data, int(*)(const char *, ml_value_t *, void *))</argsstring>
        <name>ml_object_foreach</name>
        <param>
          <type>const <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>int(*)(const char *, <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *, void *)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="66" column="6" declfile="src/ml_object.h" declline="66" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1a7a389a166525f8c68d3b799602c743a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
        <definition>ml_type_t * ml_enum</definition>
        <argsstring>(const char *Name,...)</argsstring>
        <name>ml_enum</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="71" column="11" declfile="src/ml_object.h" declline="71" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1a5efee1e223a0f1f41d471ab8d21f42eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
        <definition>ml_type_t * ml_enum_cyclic</definition>
        <argsstring>(const char *Name,...)</argsstring>
        <name>ml_enum_cyclic</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="72" column="11" declfile="src/ml_object.h" declline="72" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1aea1aaa2b592b7adac6cb39555aa03d9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
        <definition>ml_type_t * ml_enum2</definition>
        <argsstring>(const char *Name,...)</argsstring>
        <name>ml_enum2</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="73" column="11" declfile="src/ml_object.h" declline="73" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1a5ee952e00c3e2798f9b27627aa07b6f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_enum_value</definition>
        <argsstring>(ml_type_t *Type, int64_t Enum)</argsstring>
        <name>ml_enum_value</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>Enum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="75" column="12" declfile="src/ml_object.h" declline="75" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1a2d0eb331616d6be8f24f342a6df9da64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t ml_enum_value_value</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_enum_value_value</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="76" column="9" declfile="src/ml_object.h" declline="76" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1a0c31179e840acf0eea0e672ee7e69246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ml_enum_value_name</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_enum_value_name</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="77" column="12" declfile="src/ml_object.h" declline="77" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1ac7a0b121ec4b7b961c9e6fbac28390ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
        <definition>ml_type_t * ml_flags</definition>
        <argsstring>(const char *Name,...)</argsstring>
        <name>ml_flags</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="82" column="11" declfile="src/ml_object.h" declline="82" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1a8a6e62bc2f6f4efb6192ea057a894b7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
        <definition>ml_type_t * ml_flags2</definition>
        <argsstring>(const char *Name,...)</argsstring>
        <name>ml_flags2</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="83" column="11" declfile="src/ml_object.h" declline="83" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1ae73f85be76af86969e688273e18e366f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_flags_value</definition>
        <argsstring>(ml_type_t *Type, uint64_t Flags)</argsstring>
        <name>ml_flags_value</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="85" column="12" declfile="src/ml_object.h" declline="85" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1ab6f50968d01441cd12d8da8976babd7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t ml_flags_value_value</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_flags_value_value</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="86" column="10" declfile="src/ml_object.h" declline="86" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8h_1a066edf5b12061ebbe7e2f420d2a85798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ml_flags_value_name</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_flags_value_name</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.h" line="87" column="12" declfile="src/ml_object.h" declline="87" declcolumn="12"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>ML_OBJECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_OBJECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stringmap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/><ref refid="structml__class__t" kindref="compound">ml_class_t</ref>;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/><ref refid="structml__object__t" kindref="compound">ml_object_t</ref>;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__field__t" kindref="compound">ml_field_t</ref><sp/><ref refid="structml__field__t" kindref="compound">ml_field_t</ref>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__field__info__t" kindref="compound">ml_field_info_t</ref><sp/><ref refid="structml__field__info__t" kindref="compound">ml_field_info_t</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="structml__field__info__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__field__info__t" kindref="compound">ml_field_info_t</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__field__info__t" kindref="compound">ml_field_info_t</ref><sp/>*Next;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Method;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="structml__class__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Initializer,<sp/>*Call;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__field__info__t" kindref="compound">ml_field_info_t</ref><sp/>*Fields;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>Names[1];</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumFields;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">};</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="structml__field__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__field__t" kindref="compound">ml_field_t</ref><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="structml__object__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__field__t" kindref="compound">ml_field_t</ref><sp/>Fields[];</highlight></codeline>
<codeline lineno="39"><highlight class="normal">};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_object_init(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Globals);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_field_fn(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>__attribute__<sp/>((malloc));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLClassT[];</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLObjectT[];</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLFieldT[];</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLFieldMutableT[];</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>*ml_field_owner(<ref refid="structml__field__t" kindref="compound">ml_field_t</ref><sp/>*Field);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_class(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_class_add_parent(<ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*Context,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Class,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Parent);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_class_add_field(<ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*Context,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Class,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Field,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_class_modify(<ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*Context,<sp/><ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*Class,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Modifier);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_modified_field(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Field,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ml_class_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Value)<sp/>__attribute__<sp/>((pure));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_class_field_name(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index)<sp/>__attribute__<sp/>((pure));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_object(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Class,<sp/>...)<sp/>__attribute__<sp/>((sentinel));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ml_object_size(const<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>__attribute__<sp/>((pure));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_object_field(const<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index)<sp/>__attribute__<sp/>((pure));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_object_foreach(const<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*)(const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">extern<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLEnumT[];</highlight></codeline>
<codeline lineno="69"><highlight class="normal">extern<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLEnumValueT[];</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_enum(const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/>...);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_enum_cyclic(const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/>...);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_enum2(const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/>...);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_enum_value(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type,<sp/>int64_t<sp/>Enum);</highlight></codeline>
<codeline lineno="76"><highlight class="normal">int64_t<sp/>ml_enum_value_value(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="77"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_enum_value_name(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">extern<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLFlagsT[];</highlight></codeline>
<codeline lineno="80"><highlight class="normal">extern<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLFlagsValueT[];</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_flags(const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/>...);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_flags2(const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/>...);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_flags_value(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type,<sp/>uint64_t<sp/>Flags);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">uint64_t<sp/>ml_flags_value_value(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="87"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_flags_value_name(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GENERATE_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CLASS(TYPE,<sp/>PARENTS,<sp/>NAME)<sp/>ml_type_t<sp/>*TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CLASS_ADD_PARENTS(TYPE,<sp/>PARENTS<sp/>...)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ml_type_t<sp/>*Parents[]<sp/>=<sp/>{PARENTS};<sp/>\</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>(sizeof(Parents)<sp/>/<sp/>sizeof(ml_type_t<sp/>*));<sp/>++I)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_class_add_parent(NULL,<sp/>TYPE,<sp/>Parents[I]);<sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_FIELD(FIELD,<sp/>TYPE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ENUM(TYPE,<sp/>NAME,<sp/>VALUES<sp/>...)<sp/>ml_type_t<sp/>*TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ENUM_CYCLIC(TYPE,<sp/>NAME,<sp/>VALUES<sp/>...)<sp/>ml_type_t<sp/>*TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_FLAGS(TYPE,<sp/>NAME,<sp/>VALUES<sp/>...)<sp/>ml_type_t<sp/>*TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ENUM2(TYPE,<sp/>NAME,<sp/>VALUES<sp/>...)<sp/>ml_type_t<sp/>*TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_FLAGS2(TYPE,<sp/>NAME,<sp/>VALUES<sp/>...)<sp/>ml_type_t<sp/>*TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CLASS(TYPE,<sp/>PARENTS,<sp/>NAME)<sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>INIT_CODE<sp/>TYPE<sp/>=<sp/>ml_class(NAME);<sp/>\</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>INIT_CODE<sp/>ML_CLASS_ADD_PARENTS(TYPE<sp/>UNWRAP<sp/>PARENTS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_FIELD(FIELD,<sp/>TYPE)<sp/>INIT_CODE<sp/>ml_class_add_field(NULL,<sp/>TYPE,<sp/>_Generic(FIELD,<sp/>char<sp/>*:<sp/>ml_method,<sp/>default:<sp/>ml_nop)(FIELD),<sp/>MLFieldMutableT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ENUM(TYPE,<sp/>NAME,<sp/>VALUES...)<sp/>INIT_CODE<sp/>TYPE<sp/>=<sp/>ml_enum(NAME,<sp/>VALUES,<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ENUM_CYCLIC(TYPE,<sp/>NAME,<sp/>VALUES...)<sp/>INIT_CODE<sp/>TYPE<sp/>=<sp/>ml_enum_cyclic(NAME,<sp/>VALUES,<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_FLAGS(TYPE,<sp/>NAME,<sp/>VALUES...)<sp/>INIT_CODE<sp/>TYPE<sp/>=<sp/>ml_flags(NAME,<sp/>VALUES,<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_ENUM2(TYPE,<sp/>NAME,<sp/>VALUES...)<sp/>INIT_CODE<sp/>TYPE<sp/>=<sp/>ml_enum2(NAME,<sp/>VALUES,<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_FLAGS2(TYPE,<sp/>NAME,<sp/>VALUES...)<sp/>INIT_CODE<sp/>TYPE<sp/>=<sp/>ml_flags2(NAME,<sp/>VALUES,<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/ml_object.h"/>
  </compounddef>
</doxygen>
