<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__sequence_8c" kind="file" language="C++">
    <compoundname>ml_sequence.c</compoundname>
    <includes refid="ml__sequence_8h" local="yes">ml_sequence.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes refid="ml__runtime_8h" local="yes">ml_runtime.h</includes>
    <includes refid="minilang_8h" local="yes">minilang.h</includes>
    <includes local="no">string.h</includes>
    <includes local="yes">ml_sequence_init.c</includes>
    <incdepgraph>
      <node id="12">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_sequence.c</label>
        <link refid="ml__sequence_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ml_sequence.h</label>
        <link refid="ml__sequence_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="5">
        <label>gc/gc.h</label>
      </node>
      <node id="16">
        <label>limits.h</label>
      </node>
      <node id="15">
        <label>ml_config.h</label>
      </node>
      <node id="20">
        <label>ml_sequence_init.c</label>
      </node>
      <node id="19">
        <label>setjmp.h</label>
      </node>
      <node id="10">
        <label>stdarg.h</label>
      </node>
      <node id="14">
        <label>stdint.h</label>
      </node>
      <node id="8">
        <label>stdio.h</label>
      </node>
      <node id="13">
        <label>stdlib.h</label>
      </node>
      <node id="9">
        <label>string.h</label>
      </node>
      <node id="11">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structml__chained__state__t" prot="public">ml_chained_state_t</innerclass>
    <innerclass refid="structml__chained__function__t" prot="public">ml_chained_function_t</innerclass>
    <innerclass refid="structml__chained__iterator__t" prot="public">ml_chained_iterator_t</innerclass>
    <innerclass refid="structml__doubled__t" prot="public">ml_doubled_t</innerclass>
    <innerclass refid="structml__double__state__t" prot="public">ml_double_state_t</innerclass>
    <innerclass refid="structml__count__state__t" prot="public">ml_count_state_t</innerclass>
    <innerclass refid="structml__count2__state__t" prot="public">ml_count2_state_t</innerclass>
    <innerclass refid="structml__find__state__t" prot="public">ml_find_state_t</innerclass>
    <innerclass refid="structml__random__state__t" prot="public">ml_random_state_t</innerclass>
    <innerclass refid="structml__extremum__state__t" prot="public">ml_extremum_state_t</innerclass>
    <innerclass refid="structml__join__state__t" prot="public">ml_join_state_t</innerclass>
    <innerclass refid="structml__stacked__t" prot="public">ml_stacked_t</innerclass>
    <innerclass refid="structml__repeated__t" prot="public">ml_repeated_t</innerclass>
    <innerclass refid="structml__repeated__state__t" prot="public">ml_repeated_state_t</innerclass>
    <innerclass refid="structml__function__sequence__t" prot="public">ml_function_sequence_t</innerclass>
    <innerclass refid="structml__function__state__t" prot="public">ml_function_state_t</innerclass>
    <innerclass refid="structml__sequenced__t" prot="public">ml_sequenced_t</innerclass>
    <innerclass refid="structml__sequenced__state__t" prot="public">ml_sequenced_state_t</innerclass>
    <innerclass refid="structml__limited__t" prot="public">ml_limited_t</innerclass>
    <innerclass refid="structml__limited__state__t" prot="public">ml_limited_state_t</innerclass>
    <innerclass refid="structinteger__state__t" prot="public">integer_state_t</innerclass>
    <innerclass refid="structml__skipped__t" prot="public">ml_skipped_t</innerclass>
    <innerclass refid="structml__skipped__state__t" prot="public">ml_skipped_state_t</innerclass>
    <innerclass refid="structml__provided__t" prot="public">ml_provided_t</innerclass>
    <innerclass refid="structml__provided__state__t" prot="public">ml_provided_state_t</innerclass>
    <innerclass refid="structml__unique__t" prot="public">ml_unique_t</innerclass>
    <innerclass refid="structml__unique__state__t" prot="public">ml_unique_state_t</innerclass>
    <innerclass refid="structml__zipped__t" prot="public">ml_zipped_t</innerclass>
    <innerclass refid="structml__zipped__state__t" prot="public">ml_zipped_state_t</innerclass>
    <innerclass refid="structml__zipped2__t" prot="public">ml_zipped2_t</innerclass>
    <innerclass refid="structml__zipped2__state__t" prot="public">ml_zipped2_state_t</innerclass>
    <innerclass refid="structml__grid__t" prot="public">ml_grid_t</innerclass>
    <innerclass refid="structml__grid__state__t" prot="public">ml_grid_state_t</innerclass>
    <innerclass refid="structml__paired__t" prot="public">ml_paired_t</innerclass>
    <innerclass refid="structml__paired__state__t" prot="public">ml_paired_state_t</innerclass>
    <innerclass refid="structml__weaved__t" prot="public">ml_weaved_t</innerclass>
    <innerclass refid="structml__weaved__state__t" prot="public">ml_weaved_state_t</innerclass>
    <innerclass refid="structml__unpacked__t" prot="public">ml_unpacked_t</innerclass>
    <innerclass refid="structml__unpacked__state__t" prot="public">ml_unpacked_state_t</innerclass>
    <innerclass refid="structml__folded__t" prot="public">ml_folded_t</innerclass>
    <innerclass refid="structml__folded__state__t" prot="public">ml_folded_state_t</innerclass>
    <innerclass refid="structml__unfolded__t" prot="public">ml_unfolded_t</innerclass>
    <innerclass refid="structml__unfolded__state__t" prot="public">ml_unfolded_state_t</innerclass>
    <innerclass refid="structml__swapped__t" prot="public">ml_swapped_t</innerclass>
    <innerclass refid="structml__swapped__state__t" prot="public">ml_swapped_state_t</innerclass>
    <innerclass refid="structml__key__t" prot="public">ml_key_t</innerclass>
    <innerclass refid="structml__key__state__t" prot="public">ml_key_state_t</innerclass>
    <innerclass refid="structml__batched__t" prot="public">ml_batched_t</innerclass>
    <innerclass refid="structml__batched__state__t" prot="public">ml_batched_state_t</innerclass>
    <innerclass refid="structml__iterator__t" prot="public">ml_iterator_t</innerclass>
    <innerclass refid="structml__split__t" prot="public">ml_split_t</innerclass>
    <innerclass refid="structml__split__state__t" prot="public">ml_split_state_t</innerclass>
    <innerclass refid="structml__grouped__t" prot="public">ml_grouped_t</innerclass>
    <innerclass refid="structml__grouped__state__t" prot="public">ml_grouped_state_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__sequence_8c_1aebec330325aff5cbc7d9c9248e2cae4a" prot="public" static="no">
        <name>ML_CATEGORY</name>
        <initializer>&quot;sequence&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="8" column="10" bodyfile="src/ml_sequence.c" bodystart="8" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ml__sequence_8c_1a1709f52389413d49c263d8701a78b7c4" prot="public" static="no">
        <type>struct ml_chained_state_t</type>
        <definition>typedef struct ml_chained_state_t ml_chained_state_t</definition>
        <argsstring></argsstring>
        <name>ml_chained_state_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="27" column="20"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1a400cb1ebb96142e861ea2ecd9d3b1c02" prot="public" static="no">
        <type>struct ml_chained_function_t</type>
        <definition>typedef struct ml_chained_function_t ml_chained_function_t</definition>
        <argsstring></argsstring>
        <name>ml_chained_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="68" column="23"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1a458ea2500abb7305440b331f3bd6f5a5" prot="public" static="no">
        <type>struct ml_chained_iterator_t</type>
        <definition>typedef struct ml_chained_iterator_t ml_chained_iterator_t</definition>
        <argsstring></argsstring>
        <name>ml_chained_iterator_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="126" column="23"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1a46f70ca970d8ff9d58d608cf38d60b29" prot="public" static="no">
        <type>struct ml_double_state_t</type>
        <definition>typedef struct ml_double_state_t ml_double_state_t</definition>
        <argsstring></argsstring>
        <name>ml_double_state_t</name>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="652" column="19"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1ad525f1a5610ce19d3f0e51c18be42c6e" prot="public" static="no">
        <type>struct ml_count_state_t</type>
        <definition>typedef struct ml_count_state_t ml_count_state_t</definition>
        <argsstring></argsstring>
        <name>ml_count_state_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1045" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1a47dbfa4c3e900e29778b9f63012f4937" prot="public" static="no">
        <type>struct ml_count2_state_t</type>
        <definition>typedef struct ml_count2_state_t ml_count2_state_t</definition>
        <argsstring></argsstring>
        <name>ml_count2_state_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1086" column="19"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1a44b5c74d581fa45a86d07d14ea518cfd" prot="public" static="no">
        <type>struct ml_join_state_t</type>
        <definition>typedef struct ml_join_state_t ml_join_state_t</definition>
        <argsstring></argsstring>
        <name>ml_join_state_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1541" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1ab9ac5aa38967f5e0723c896b2e523f9f" prot="public" static="no">
        <type>struct ml_stacked_t</type>
        <definition>typedef struct ml_stacked_t ml_stacked_t</definition>
        <argsstring></argsstring>
        <name>ml_stacked_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1606" column="14"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1a1697e9da286e3841cf92f39f943c13aa" prot="public" static="no">
        <type>struct ml_repeated_t</type>
        <definition>typedef struct ml_repeated_t ml_repeated_t</definition>
        <argsstring></argsstring>
        <name>ml_repeated_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1752" column="15"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1ac11bd2867bf61360b87e7ca1a3feaaeb" prot="public" static="no">
        <type>struct ml_repeated_state_t</type>
        <definition>typedef struct ml_repeated_state_t ml_repeated_state_t</definition>
        <argsstring></argsstring>
        <name>ml_repeated_state_t</name>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1761" column="21"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1ab8b6bb1b4bd3a2d198e66ffc6155260f" prot="public" static="no">
        <type>struct ml_sequenced_t</type>
        <definition>typedef struct ml_sequenced_t ml_sequenced_t</definition>
        <argsstring></argsstring>
        <name>ml_sequenced_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1926" column="16"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1a34cebf94f43395ccd1ec39b0983b83c5" prot="public" static="no">
        <type>struct ml_sequenced_state_t</type>
        <definition>typedef struct ml_sequenced_state_t ml_sequenced_state_t</definition>
        <argsstring></argsstring>
        <name>ml_sequenced_state_t</name>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1934" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1ab1db3f355a5160c02be65f406a8a7686" prot="public" static="no">
        <type>struct ml_limited_t</type>
        <definition>typedef struct ml_limited_t ml_limited_t</definition>
        <argsstring></argsstring>
        <name>ml_limited_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2039" column="14"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1a5805d3df0b4559627cf4057b67ff1126" prot="public" static="no">
        <type>struct ml_limited_state_t</type>
        <definition>typedef struct ml_limited_state_t ml_limited_state_t</definition>
        <argsstring></argsstring>
        <name>ml_limited_state_t</name>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2048" column="20"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1a93bcd12630417dec34791b530180d7bf" prot="public" static="no">
        <type>struct ml_skipped_t</type>
        <definition>typedef struct ml_skipped_t ml_skipped_t</definition>
        <argsstring></argsstring>
        <name>ml_skipped_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2137" column="14"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1a7678981c2b23515c22db5c13967071fa" prot="public" static="no">
        <type>struct ml_skipped_state_t</type>
        <definition>typedef struct ml_skipped_state_t ml_skipped_state_t</definition>
        <argsstring></argsstring>
        <name>ml_skipped_state_t</name>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2145" column="20"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1adf7068949c566072302c0ea926a55d47" prot="public" static="no">
        <type>struct ml_unique_t</type>
        <definition>typedef struct ml_unique_t ml_unique_t</definition>
        <argsstring></argsstring>
        <name>ml_unique_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2287" column="13"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1a80892205f466ab45ca005b50260bab92" prot="public" static="no">
        <type>struct ml_unique_state_t</type>
        <definition>typedef struct ml_unique_state_t ml_unique_state_t</definition>
        <argsstring></argsstring>
        <name>ml_unique_state_t</name>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2298" column="19"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1af43e9ba8f31cc341173c3dca74b04f20" prot="public" static="no">
        <type>struct ml_zipped_t</type>
        <definition>typedef struct ml_zipped_t ml_zipped_t</definition>
        <argsstring></argsstring>
        <name>ml_zipped_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2366" column="13"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1a0640974388a65ebc578d4f75ef9d199a" prot="public" static="no">
        <type>struct ml_zipped_state_t</type>
        <definition>typedef struct ml_zipped_state_t ml_zipped_state_t</definition>
        <argsstring></argsstring>
        <name>ml_zipped_state_t</name>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2377" column="19"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1a523f04a133bfa23270ab944596f55eae" prot="public" static="no">
        <type>struct ml_grid_t</type>
        <definition>typedef struct ml_grid_t ml_grid_t</definition>
        <argsstring></argsstring>
        <name>ml_grid_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2576" column="11"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1a92d340fe89fc8be8f52ee49b15adaf03" prot="public" static="no">
        <type>struct ml_grid_state_t</type>
        <definition>typedef struct ml_grid_state_t ml_grid_state_t</definition>
        <argsstring></argsstring>
        <name>ml_grid_state_t</name>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2587" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1a59d136201161aebdb2f78cf5fe1d2a43" prot="public" static="no">
        <type>struct ml_paired_t</type>
        <definition>typedef struct ml_paired_t ml_paired_t</definition>
        <argsstring></argsstring>
        <name>ml_paired_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2670" column="13"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1aa7514629eb5878b63b2f85be04add8da" prot="public" static="no">
        <type>struct ml_paired_state_t</type>
        <definition>typedef struct ml_paired_state_t ml_paired_state_t</definition>
        <argsstring></argsstring>
        <name>ml_paired_state_t</name>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2678" column="19"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1abe6e60c6dc3fea696f99daf4dc39f154" prot="public" static="no">
        <type>struct ml_weaved_t</type>
        <definition>typedef struct ml_weaved_t ml_weaved_t</definition>
        <argsstring></argsstring>
        <name>ml_weaved_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2771" column="13"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1ad44e7e6ad69c357485ccb40d41a62777" prot="public" static="no">
        <type>struct ml_weaved_state_t</type>
        <definition>typedef struct ml_weaved_state_t ml_weaved_state_t</definition>
        <argsstring></argsstring>
        <name>ml_weaved_state_t</name>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2780" column="19"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1a04938a2c8d79979e7b03ba9b33d2a9c6" prot="public" static="no">
        <type>struct ml_folded_state_t</type>
        <definition>typedef struct ml_folded_state_t ml_folded_state_t</definition>
        <argsstring></argsstring>
        <name>ml_folded_state_t</name>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2916" column="19"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1abab4402a5969d5a5cacf1bf4001b67fc" prot="public" static="no">
        <type>struct ml_batched_t</type>
        <definition>typedef struct ml_batched_t ml_batched_t</definition>
        <argsstring></argsstring>
        <name>ml_batched_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3185" column="14"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__sequence_8c_1ad7da1b4451606718fff07aa90b761faa" prot="public" static="no">
        <type>struct ml_batched_state_t</type>
        <definition>typedef struct ml_batched_state_t ml_batched_state_t</definition>
        <argsstring></argsstring>
        <name>ml_batched_state_t</name>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3195" column="20"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="ml__sequence_8c_1a2ddee4a84b6bee62fca996492e869fa6" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t* IndexMethod</definition>
        <argsstring></argsstring>
        <name>IndexMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="609" column="19" declfile="src/ml_sequence.c" declline="609" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="ml__sequence_8c_1aada8bb1dfcc7c082a782b327d0b46059" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t* LessMethod</definition>
        <argsstring></argsstring>
        <name>LessMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1241" column="19" declfile="src/ml_sequence.c" declline="1241" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="ml__sequence_8c_1adb6d8320cdbce2c8d4f52936c1f81390" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t* GreaterMethod</definition>
        <argsstring></argsstring>
        <name>GreaterMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1242" column="19" declfile="src/ml_sequence.c" declline="1242" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="ml__sequence_8c_1a9710848706b25b0786cc8252fc5008b5" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t* AddMethod</definition>
        <argsstring></argsstring>
        <name>AddMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1243" column="19" declfile="src/ml_sequence.c" declline="1243" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="ml__sequence_8c_1a4317966664cd9f428f74bae5f641974b" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t* MulMethod</definition>
        <argsstring></argsstring>
        <name>MulMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1244" column="19" declfile="src/ml_sequence.c" declline="1244" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="ml__sequence_8c_1a771b4927cc37c85856fff9fe783598dc" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t* MinMethod</definition>
        <argsstring></argsstring>
        <name>MinMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1245" column="19" declfile="src/ml_sequence.c" declline="1245" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="ml__sequence_8c_1aa7017fded2e1221747f8a48260437afa" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t* MaxMethod</definition>
        <argsstring></argsstring>
        <name>MaxMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1246" column="19" declfile="src/ml_sequence.c" declline="1246" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="ml__sequence_8c_1a263a4c935d51edddeafeeb44e3d5e221" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLFunctionSequenceT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLFunctionSequenceT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1838" column="18" declfile="src/ml_sequence.c" declline="1838" declcolumn="18"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__sequence_8c_1a1313331457ca9d828ab314a8c2e87c7c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static ML_METHOD_DECL</definition>
        <argsstring>(SoloMethod, &quot;-&gt;&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>SoloMethod</type>
        </param>
        <param>
          <type>&quot;-&gt;&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="12" column="8" declfile="src/ml_sequence.c" declline="12" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1af0ea755908853ba1172e019015577bd7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static ML_METHOD_DECL</definition>
        <argsstring>(DuoMethod, &quot;=&gt;&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>DuoMethod</type>
        </param>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="13" column="8" declfile="src/ml_sequence.c" declline="13" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a75f54aec53ede7a408dd788639bf5d66" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static ML_METHOD_DECL</definition>
        <argsstring>(FilterSoloMethod, &quot;-&gt;?&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>FilterSoloMethod</type>
        </param>
        <param>
          <type>&quot;-&gt;?&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="14" column="8" declfile="src/ml_sequence.c" declline="14" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a838ea003378e9062ebe4bfab3d9c67b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static ML_METHOD_DECL</definition>
        <argsstring>(FilterDuoMethod, &quot;=&gt;?&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>FilterDuoMethod</type>
        </param>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>?&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="15" column="8" declfile="src/ml_sequence.c" declline="15" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aadbb8d1745c823480036049b2361d01e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static ML_METHOD_DECL</definition>
        <argsstring>(SoloApplyMethod, &quot;-&gt;!&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>SoloApplyMethod</type>
        </param>
        <param>
          <type>&quot;-&gt;!&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="16" column="8" declfile="src/ml_sequence.c" declline="16" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a8e7c6f419a076001fb1bc09b9592c89e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static ML_METHOD_DECL</definition>
        <argsstring>(FilterSoloApplyMethod, &quot;-&gt;!?&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>FilterSoloApplyMethod</type>
        </param>
        <param>
          <type>&quot;-&gt;!?&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="17" column="8" declfile="src/ml_sequence.c" declline="17" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a2b8adeadd284e554ad794b1c46ee4e7e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static ML_METHOD_DECL</definition>
        <argsstring>(ApplyMethod, &quot;!&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>ApplyMethod</type>
        </param>
        <param>
          <type>&quot;!&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="18" column="8" declfile="src/ml_sequence.c" declline="18" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ab78e3742e2942ad3f08c26835f43fa4d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static ML_METHOD_DECL</definition>
        <argsstring>(WhileSoloMethod, &quot;-&gt;|&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>WhileSoloMethod</type>
        </param>
        <param>
          <type>&quot;-&gt;|&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="19" column="8" declfile="src/ml_sequence.c" declline="19" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a8c4e95eac5d849fee15811dfd662fb4f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static ML_METHOD_DECL</definition>
        <argsstring>(WhileDuoMethod, &quot;=&gt;|&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>WhileDuoMethod</type>
        </param>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>|&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="20" column="8" declfile="src/ml_sequence.c" declline="20" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aaaffda550465664941eb858d057fec89" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static ML_METHOD_DECL</definition>
        <argsstring>(Precount, &quot;precount&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>Precount</type>
        </param>
        <param>
          <type>&quot;precount&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="21" column="8" declfile="src/ml_sequence.c" declline="21" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aeb06318d00b72f02057cc84f7962a951" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_chained_state_value</definition>
        <argsstring>(ml_chained_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_chained_state_value</name>
        <param>
          <type><ref refid="structml__chained__state__t" kindref="compound">ml_chained_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="48" column="13" bodyfile="src/ml_sequence.c" bodystart="48" bodyend="63" declfile="src/ml_sequence.c" declline="29" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ae3679f4db8033401d60c1da5b455cbb6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_chained_state_filter</definition>
        <argsstring>(ml_chained_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_chained_state_filter</name>
        <param>
          <type><ref refid="structml__chained__state__t" kindref="compound">ml_chained_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="31" column="13" bodyfile="src/ml_sequence.c" bodystart="31" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1acb5011ee6eccd47be6ef4157acb9ead1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_chained_function_call</definition>
        <argsstring>(ml_state_t *Caller, ml_chained_function_t *Chained, int Count, ml_value_t **Args)</argsstring>
        <name>ml_chained_function_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref> *</type>
          <declname>Chained</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="70" column="13" bodyfile="src/ml_sequence.c" bodystart="70" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a4e71d6bf465f811e1ef83213f65876cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_chained</definition>
        <argsstring>(int Count, ml_value_t **Functions)</argsstring>
        <name>ml_chained</name>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Functions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="103" column="12" bodyfile="src/ml_sequence.c" bodystart="103" bodyend="109" declfile="src/ml_sequence.c" declline="79" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a0a0a9ce09e659547d4e05ef8def720d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLChained)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLChained</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="81" column="1" bodyfile="src/ml_sequence.c" bodystart="81" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ac37bf0f13a44a55de6ec0b6b7dd34d7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLChainedT,(MLFunctionT, MLSequenceT), &quot;chained&quot;,.call=(void *) ml_chained_function_call,.Constructor=(ml_value_t *) MLChained)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLChainedT</type>
        </param>
        <param>
          <type>(MLFunctionT, MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;chained&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_chained_function_call</defval>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLChained</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="93" column="1" declfile="src/ml_sequence.c" declline="93" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ae8980ea2a51e8e7d9ae571fe08184bdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_chainedv</definition>
        <argsstring>(int Count,...)</argsstring>
        <name>ml_chainedv</name>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="111" column="12" bodyfile="src/ml_sequence.c" bodystart="111" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ada278935e9fcc6d30c3393a0232f4e77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLChainedStateT,(MLStateT), &quot;chained-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLChainedStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;chained-state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="128" column="1" declfile="src/ml_sequence.c" declline="128" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a8dec792ca6475e3b0d0f7046e98da3be" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLChainedStateT, ml_state_t *Caller, ml_chained_iterator_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLChainedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="131" column="13" bodyfile="src/ml_sequence.c" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a32401721ae778bf4c2de8cb3cbb97b8f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLChainedStateT, ml_state_t *Caller, ml_chained_iterator_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLChainedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="135" column="13" bodyfile="src/ml_sequence.c" bodystart="135" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aab0e4ae6e69c4bc999805edc5b3c5bb7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_chained_iterator_next</definition>
        <argsstring>(ml_chained_iterator_t *State, ml_value_t *Iter)</argsstring>
        <name>ml_chained_iterator_next</name>
        <param>
          <type><ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="253" column="13" bodyfile="src/ml_sequence.c" bodystart="253" bodyend="259" declfile="src/ml_sequence.c" declline="139" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a5560433acdee512e0e6f87417967c4f2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_chained_iterator_continue</definition>
        <argsstring>(ml_chained_iterator_t *State)</argsstring>
        <name>ml_chained_iterator_continue</name>
        <param>
          <type><ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="183" column="13" bodyfile="src/ml_sequence.c" bodystart="183" bodyend="244" declfile="src/ml_sequence.c" declline="141" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a044c890032df93a5d86c3d0701f02f76" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_chained_iterator_filter</definition>
        <argsstring>(ml_chained_iterator_t *State, ml_value_t *Value)</argsstring>
        <name>ml_chained_iterator_filter</name>
        <param>
          <type><ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="143" column="13" bodyfile="src/ml_sequence.c" bodystart="143" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a18f3fb2a7c0414bc6c3899c8b0ecd6ae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_chained_iterator_while</definition>
        <argsstring>(ml_chained_iterator_t *State, ml_value_t *Value)</argsstring>
        <name>ml_chained_iterator_while</name>
        <param>
          <type><ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="154" column="13" bodyfile="src/ml_sequence.c" bodystart="154" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aff678c2b929adebe49c64450a3175452" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_chained_iterator_value</definition>
        <argsstring>(ml_chained_iterator_t *State, ml_value_t *Value)</argsstring>
        <name>ml_chained_iterator_value</name>
        <param>
          <type><ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="161" column="13" bodyfile="src/ml_sequence.c" bodystart="161" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a01d72751d05f093d2e75e89dd4f6c9c3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_chained_iterator_duo_key</definition>
        <argsstring>(ml_chained_iterator_t *State, ml_value_t *Value)</argsstring>
        <name>ml_chained_iterator_duo_key</name>
        <param>
          <type><ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="169" column="13" bodyfile="src/ml_sequence.c" bodystart="169" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a3a16e7239908771707b8b94123324be1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_chained_iterator_key</definition>
        <argsstring>(ml_chained_iterator_t *State, ml_value_t *Value)</argsstring>
        <name>ml_chained_iterator_key</name>
        <param>
          <type><ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="246" column="13" bodyfile="src/ml_sequence.c" bodystart="246" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a566928cfd6c595a1f70454621f062ebe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLChainedStateT, ml_state_t *Caller, ml_chained_iterator_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLChainedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="261" column="13" bodyfile="src/ml_sequence.c" bodystart="261" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a6b920104b7c0014a3217c72ab8e11bf7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLChainedT, ml_state_t *Caller, ml_chained_function_t *Chained)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLChainedT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref> *</type>
          <declname>Chained</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="268" column="13" bodyfile="src/ml_sequence.c" bodystart="268" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a428e038851e2ca3a293d4bda7ed54043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;precount&quot;, MLChainedT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;precount&quot;</type>
        </param>
        <param>
          <type>MLChainedT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="278" column="1" bodyfile="src/ml_sequence.c" bodystart="278" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1af38e9fa51be0e7b913a0e87b3b8679e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&gt;&quot;, MLFunctionT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&gt;&quot;</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>function</para>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="285" column="1" bodyfile="src/ml_sequence.c" bodystart="285" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1afbc9cec314e6671d504946a7d8a3c8ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&gt;&quot;, MLSequenceT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&gt;&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="302" column="1" bodyfile="src/ml_sequence.c" bodystart="302" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a74dc5cef02dbfe5060ea62aef7778f6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&gt;&quot;, MLChainedT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&gt;&quot;</type>
        </param>
        <param>
          <type>MLChainedT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="315" column="1" bodyfile="src/ml_sequence.c" bodystart="315" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ab0261f970376837ff7bf65d7b762e892" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;=&gt;&quot;, MLSequenceT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="327" column="1" bodyfile="src/ml_sequence.c" bodystart="327" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a052aed4bbdff4966d4bb737d7b1a1cc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;=&gt;&quot;, MLSequenceT, MLFunctionT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="343" column="1" bodyfile="src/ml_sequence.c" bodystart="343" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a258165c8750053d716fad73aa142704e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;=&gt;&quot;, MLChainedT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>MLChainedT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="360" column="1" bodyfile="src/ml_sequence.c" bodystart="360" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ade34a159fe65d10859f150d98bf38cee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;=&gt;&quot;, MLChainedT, MLFunctionT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>MLChainedT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="374" column="1" bodyfile="src/ml_sequence.c" bodystart="374" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1afefb15c1763f2ef09b4a12e4374a7596" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&gt;!&quot;, MLFunctionT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&gt;!&quot;</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>function</para>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="388" column="1" bodyfile="src/ml_sequence.c" bodystart="388" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a9be5e7d3c6c801af22849ea35ab73888" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&gt;!&quot;, MLSequenceT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&gt;!&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="406" column="1" bodyfile="src/ml_sequence.c" bodystart="406" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a38c29d1f2645a464cf85e33b715ca49f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&gt;!&quot;, MLChainedT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&gt;!&quot;</type>
        </param>
        <param>
          <type>MLChainedT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="421" column="1" bodyfile="src/ml_sequence.c" bodystart="421" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a6e07d0eb9031ee12e7800439f2d0199f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
        <definition>static ml_type_t * ml_generic_sequence</definition>
        <argsstring>(ml_type_t *Base, ml_value_t *Sequence)</argsstring>
        <name>ml_generic_sequence</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Base</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Sequence</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="434" column="25" bodyfile="src/ml_sequence.c" bodystart="434" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a90c853255f3800f4f17c0b70f55fa6b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&gt;?&quot;, MLFunctionT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&gt;?&quot;</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>function</para>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="446" column="1" bodyfile="src/ml_sequence.c" bodystart="446" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1adeea6b46d7bf30f0f9a67c45dd94368d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&gt;?&quot;, MLSequenceT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&gt;?&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="463" column="1" bodyfile="src/ml_sequence.c" bodystart="463" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a0284b396b8a2a2a8012f5b6f831f6035" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&gt;?&quot;, MLChainedT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&gt;?&quot;</type>
        </param>
        <param>
          <type>MLChainedT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="478" column="1" bodyfile="src/ml_sequence.c" bodystart="478" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a14d5af9974442aa24d544cc8a7aa8b12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;=&gt;?&quot;, MLSequenceT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>?&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="491" column="1" bodyfile="src/ml_sequence.c" bodystart="491" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a83f3ee15d9ebc0c9441bb0d81357279f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;=&gt;?&quot;, MLChainedT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>?&quot;</type>
        </param>
        <param>
          <type>MLChainedT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="507" column="1" bodyfile="src/ml_sequence.c" bodystart="507" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a93bcb72fc8ee5eada31a075f61480262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&gt;|&quot;, MLSequenceT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&gt;|&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="522" column="1" bodyfile="src/ml_sequence.c" bodystart="522" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ad2c89adf9953d2d7d50503cb72af3576" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&gt;|&quot;, MLChainedT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&gt;|&quot;</type>
        </param>
        <param>
          <type>MLChainedT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="538" column="1" bodyfile="src/ml_sequence.c" bodystart="538" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a44d0e32afedb353d10036d7437a6ebac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;=&gt;|&quot;, MLSequenceT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>|&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="551" column="1" bodyfile="src/ml_sequence.c" bodystart="551" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a26866d699d59be48324d5e9e0094d9ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;=&gt;|&quot;, MLChainedT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>|&quot;</type>
        </param>
        <param>
          <type>MLChainedT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="568" column="1" bodyfile="src/ml_sequence.c" bodystart="568" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a54beb1747b8a5a9e90ae54aa5244b748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&gt;!?&quot;, MLSequenceT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&gt;!?&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="581" column="1" bodyfile="src/ml_sequence.c" bodystart="581" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a6fe15f332de1d2ba71af9b067c73c4f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&gt;!?&quot;, MLChainedT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&gt;!?&quot;</type>
        </param>
        <param>
          <type>MLChainedT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="596" column="1" bodyfile="src/ml_sequence.c" bodystart="596" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a68f5f3b4600ff3cedf9562fa16387792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(&quot;[]&quot;, MLChainedT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>&quot;&quot;</type>
          <array>[]</array>
        </param>
        <param>
          <type>MLChainedT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="611" column="1" bodyfile="src/ml_sequence.c" bodystart="611" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ad8c6a3452a2f1b95a5047ec5ac2b254d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;::&quot;, MLChainedT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;::&quot;</type>
        </param>
        <param>
          <type>MLChainedT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="624" column="1" bodyfile="src/ml_sequence.c" bodystart="624" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a7eade11031f9feb93224d1e43d69da11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLDoubledT,(MLSequenceT), &quot;doubled&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLDoubledT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;doubled&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="643" column="1" declfile="src/ml_sequence.c" declline="643" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a355fc6c6248daa417529b348d0532798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLDoubledIteratorStateT,(MLStateT), &quot;doubled-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLDoubledIteratorStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;doubled-state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="654" column="1" declfile="src/ml_sequence.c" declline="654" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ab53447800154edd23067bc7ee093f259" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_double_iter0_next</definition>
        <argsstring>(ml_double_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_double_iter0_next</name>
        <param>
          <type><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="684" column="13" bodyfile="src/ml_sequence.c" bodystart="684" bodyend="689" declfile="src/ml_sequence.c" declline="657" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aefe71a76483489a116885915313ffd23" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_double_iter_next</definition>
        <argsstring>(ml_double_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_double_iter_next</name>
        <param>
          <type><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="659" column="13" bodyfile="src/ml_sequence.c" bodystart="659" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aa5347aaba8e531d230f5299412c1ffbe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_double_function_call</definition>
        <argsstring>(ml_double_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_double_function_call</name>
        <param>
          <type><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="669" column="13" bodyfile="src/ml_sequence.c" bodystart="669" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ab1478666ec35dc91443c301ac92ec872" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_double_value0</definition>
        <argsstring>(ml_double_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_double_value0</name>
        <param>
          <type><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="675" column="13" bodyfile="src/ml_sequence.c" bodystart="675" bodyend="682"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ade34fd7776303de8d1ef29f208df902f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLDoubledT, ml_state_t *Caller, ml_doubled_t *Doubled)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLDoubledT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__doubled__t" kindref="compound">ml_doubled_t</ref> *</type>
          <declname>Doubled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="691" column="13" bodyfile="src/ml_sequence.c" bodystart="691" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aeea0c0429297d990b6951491086d111d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLDoubledIteratorStateT, ml_state_t *Caller, ml_double_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLDoubledIteratorStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="701" column="13" bodyfile="src/ml_sequence.c" bodystart="701" bodyend="703"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ad64b6ee0cc1b6b926c96734eda9e1fe1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLDoubledIteratorStateT, ml_state_t *Caller, ml_double_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLDoubledIteratorStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="705" column="13" bodyfile="src/ml_sequence.c" bodystart="705" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aeee3999052add905b7310f57d9c7a248" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLDoubledIteratorStateT, ml_state_t *Caller, ml_double_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLDoubledIteratorStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="709" column="13" bodyfile="src/ml_sequence.c" bodystart="709" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aec234bd1761198d4c52eaab8bdfddced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_doubled</definition>
        <argsstring>(ml_value_t *Sequence, ml_value_t *Function)</argsstring>
        <name>ml_doubled</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Sequence</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="716" column="12" bodyfile="src/ml_sequence.c" bodystart="716" bodyend="722"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ac91cdfa08747e5acc3aa603dbff2ac2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&gt;&gt;&quot;, MLSequenceT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&gt;</type>
        </param>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="724" column="1" bodyfile="src/ml_sequence.c" bodystart="724" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aa5d047411afdbfb9943bf81552466777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;^&quot;, MLSequenceT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;^&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="733" column="1" bodyfile="src/ml_sequence.c" bodystart="733" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aac1c9aaab0fea2cc6c790cb5f31e2164" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLDoubled2T,(MLSequenceT), &quot;doubled&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLDoubled2T</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;doubled&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="746" column="1" declfile="src/ml_sequence.c" declline="746" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aee7a3ed0cc7993f5803ee31bfb028207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLDoubled2StateT,(MLStateT), &quot;doubled-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLDoubled2StateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;doubled-state&quot;</type>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="749" column="1" declfile="src/ml_sequence.c" declline="749" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a448da8a416d3669971a49f99dca8f97c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_double2_iter0_next</definition>
        <argsstring>(ml_double_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_double2_iter0_next</name>
        <param>
          <type><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="787" column="13" bodyfile="src/ml_sequence.c" bodystart="787" bodyend="792" declfile="src/ml_sequence.c" declline="752" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a11d5242421b85bc7e77f57a422df30fb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_double2_iter_next</definition>
        <argsstring>(ml_double_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_double2_iter_next</name>
        <param>
          <type><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="754" column="13" bodyfile="src/ml_sequence.c" bodystart="754" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a4d05f2fe788ab2746481bf38ddc5f036" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_double2_function_call</definition>
        <argsstring>(ml_double_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_double2_function_call</name>
        <param>
          <type><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="764" column="13" bodyfile="src/ml_sequence.c" bodystart="764" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a5d698109e7344d9891ef13c7831c25aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_double2_value0</definition>
        <argsstring>(ml_double_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_double2_value0</name>
        <param>
          <type><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="770" column="13" bodyfile="src/ml_sequence.c" bodystart="770" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a4bc3d339f46b51ef114932cb45480b0d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_double2_key0</definition>
        <argsstring>(ml_double_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_double2_key0</name>
        <param>
          <type><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="779" column="13" bodyfile="src/ml_sequence.c" bodystart="779" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ac689d7910789ad9af927ebc41caa3768" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLDoubled2T, ml_state_t *Caller, ml_doubled_t *Doubled)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLDoubled2T</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__doubled__t" kindref="compound">ml_doubled_t</ref> *</type>
          <declname>Doubled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="794" column="13" bodyfile="src/ml_sequence.c" bodystart="794" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aee6c5f231136c7fe029e6d40863a8d5f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLDoubled2StateT, ml_state_t *Caller, ml_double_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLDoubled2StateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="804" column="13" bodyfile="src/ml_sequence.c" bodystart="804" bodyend="806"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aa2bfb8546216c03718ca421180ffcd7a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLDoubled2StateT, ml_state_t *Caller, ml_double_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLDoubled2StateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="808" column="13" bodyfile="src/ml_sequence.c" bodystart="808" bodyend="810"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a5c9428e355783084968befc207640793" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLDoubled2StateT, ml_state_t *Caller, ml_double_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLDoubled2StateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="812" column="13" bodyfile="src/ml_sequence.c" bodystart="812" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ac75a429e782d427893cf1f90adec4275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;=&gt;&gt;&quot;, MLSequenceT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="819" column="1" bodyfile="src/ml_sequence.c" bodystart="819" bodyend="830"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a63e525332ba055aed5b4b652af242c6e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void all_iterate</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>all_iterate</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="844" column="13" bodyfile="src/ml_sequence.c" bodystart="844" bodyend="849" declfile="src/ml_sequence.c" declline="834" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1af13dbd488789203112bf54cc89ca82d3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void all_iter_value</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>all_iter_value</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="836" column="13" bodyfile="src/ml_sequence.c" bodystart="836" bodyend="842"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1adb317fe9f249b74b53a20f5707427336" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(All)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>All</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="851" column="1" bodyfile="src/ml_sequence.c" bodystart="851" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a97437c9177bb44d4ce8bff0dbb0da03d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void some_iterate</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>some_iterate</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="879" column="13" bodyfile="src/ml_sequence.c" bodystart="879" bodyend="884" declfile="src/ml_sequence.c" declline="869" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a95e623c1d303986b9837281b3158688e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void some_value</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>some_value</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="871" column="13" bodyfile="src/ml_sequence.c" bodystart="871" bodyend="877"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1abb7888082184dceb2442145e130d849c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_some_call</definition>
        <argsstring>(ml_state_t *Caller, ml_value_t *Some, int Count, ml_value_t **Args)</argsstring>
        <name>ml_some_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Some</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="886" column="13" bodyfile="src/ml_sequence.c" bodystart="886" bodyend="895"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a8c183c2367810d0d00e27d7050a95034" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void first_iterate</definition>
        <argsstring>(ml_state_t *State, ml_value_t *Value)</argsstring>
        <name>first_iterate</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="909" column="13" bodyfile="src/ml_sequence.c" bodystart="909" bodyend="913"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ae33f3cf5e55b35e26cb98fb1dcf3d3ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;first&quot;, MLSequenceT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;first&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="915" column="1" bodyfile="src/ml_sequence.c" bodystart="915" bodyend="928"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ac790595e5454dcd6b3441ceab0226513" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void first2_iter_value</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>first2_iter_value</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="930" column="13" bodyfile="src/ml_sequence.c" bodystart="930" bodyend="934"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a689c78dc19e040f613736f23807ef315" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void first2_iter_key</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>first2_iter_key</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="936" column="13" bodyfile="src/ml_sequence.c" bodystart="936" bodyend="941"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ad4e4ae06997c314b5b85296c053f626d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void first2_iterate</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>first2_iterate</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="943" column="13" bodyfile="src/ml_sequence.c" bodystart="943" bodyend="948"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a7c1011b22b59d5e51c658069b606d8b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;first2&quot;, MLSequenceT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;first2&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="950" column="1" bodyfile="src/ml_sequence.c" bodystart="950" bodyend="963"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a4c16f3f6e46f7e09cfe07d807ca60ad9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void last_iterate</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>last_iterate</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="974" column="13" bodyfile="src/ml_sequence.c" bodystart="974" bodyend="979" declfile="src/ml_sequence.c" declline="965" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a0c4d9b38b623996a20b495d965543349" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void last_value</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>last_value</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="967" column="13" bodyfile="src/ml_sequence.c" bodystart="967" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a1f2e994c7f58508328bbd619589ea18b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;last&quot;, MLSequenceT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;last&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="981" column="1" bodyfile="src/ml_sequence.c" bodystart="981" bodyend="995"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1afee0e4e050865d03d9a161b45b44cde8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void last2_iterate</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>last2_iterate</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1013" column="13" bodyfile="src/ml_sequence.c" bodystart="1013" bodyend="1024" declfile="src/ml_sequence.c" declline="997" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a5b9148c07cfefe353e69563a61702dcb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void last2_value</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>last2_value</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="999" column="13" bodyfile="src/ml_sequence.c" bodystart="999" bodyend="1004"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aa62e795da757f30e05fcb4a1f392b976" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void last2_key</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>last2_key</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1006" column="13" bodyfile="src/ml_sequence.c" bodystart="1006" bodyend="1011"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a6637267e830048e63d3b9c042d251c97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;last2&quot;, MLSequenceT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;last2&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1026" column="1" bodyfile="src/ml_sequence.c" bodystart="1026" bodyend="1039"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a9c4db0e0e9179d7da75b5ddb984c0dc9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void count_iterate</definition>
        <argsstring>(ml_count_state_t *State, ml_value_t *Value)</argsstring>
        <name>count_iterate</name>
        <param>
          <type><ref refid="structml__count__state__t" kindref="compound">ml_count_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1047" column="13" bodyfile="src/ml_sequence.c" bodystart="1047" bodyend="1052"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a3c0c43c13ce022c5c6e0a4240ea9c8eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODVX</definition>
        <argsstring>(&quot;count&quot;, MLSequenceT)</argsstring>
        <name>ML_METHODVX</name>
        <param>
          <type>&quot;count&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1067" column="1" bodyfile="src/ml_sequence.c" bodystart="1067" bodyend="1075"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a2649e7da8a6dc14268493e00bf0c215b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;precount&quot;, MLSequenceT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;precount&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1077" column="1" bodyfile="src/ml_sequence.c" bodystart="1077" bodyend="1080"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ad24d85f45fadc7b3ee3346baac1b2d8a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void count2_iterate</definition>
        <argsstring>(ml_count2_state_t *State, ml_value_t *Value)</argsstring>
        <name>count2_iterate</name>
        <param>
          <type><ref refid="structml__count2__state__t" kindref="compound">ml_count2_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1101" column="13" bodyfile="src/ml_sequence.c" bodystart="1101" bodyend="1109" declfile="src/ml_sequence.c" declline="1088" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1acf4209342dbb4c44acfd0e0ebb780715" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void count2_value</definition>
        <argsstring>(ml_count2_state_t *State, ml_value_t *Value)</argsstring>
        <name>count2_value</name>
        <param>
          <type><ref refid="structml__count2__state__t" kindref="compound">ml_count2_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1090" column="13" bodyfile="src/ml_sequence.c" bodystart="1090" bodyend="1099"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a2e5345ed729fadbabb771aedce20d5f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(Count2)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>Count2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1111" column="1" bodyfile="src/ml_sequence.c" bodystart="1111" bodyend="1124"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a9b6929cf44f0a14de3810f28583caf2b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void find_iterate</definition>
        <argsstring>(ml_find_state_t *State, ml_value_t *Value)</argsstring>
        <name>find_iterate</name>
        <param>
          <type><ref refid="structml__find__state__t" kindref="compound">ml_find_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1153" column="13" bodyfile="src/ml_sequence.c" bodystart="1153" bodyend="1158" declfile="src/ml_sequence.c" declline="1134" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aac70d18003f0af2d2176e3dec15da909" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void find_compare</definition>
        <argsstring>(ml_find_state_t *State, ml_value_t *Value)</argsstring>
        <name>find_compare</name>
        <param>
          <type><ref refid="structml__find__state__t" kindref="compound">ml_find_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1136" column="13" bodyfile="src/ml_sequence.c" bodystart="1136" bodyend="1141"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1afdcfeea5437a02ff880686786bd63e1f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static ML_METHOD_DECL</definition>
        <argsstring>(EqualMethod, &quot;=&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>EqualMethod</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1143" column="8" declfile="src/ml_sequence.c" declline="1143" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aabfa8a79d53b122edd5203b5602424a2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void find_value</definition>
        <argsstring>(ml_find_state_t *State, ml_value_t *Value)</argsstring>
        <name>find_value</name>
        <param>
          <type><ref refid="structml__find__state__t" kindref="compound">ml_find_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1145" column="13" bodyfile="src/ml_sequence.c" bodystart="1145" bodyend="1151"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aa84dc9c6e154ba84cad1cc4d6765e235" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;find&quot;, MLSequenceT, MLAnyT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;find&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1160" column="1" bodyfile="src/ml_sequence.c" bodystart="1160" bodyend="1171"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aa42fce86f6c4c3bb5d08e0eee00ac3e0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void random_iterate</definition>
        <argsstring>(ml_random_state_t *State, ml_value_t *Value)</argsstring>
        <name>random_iterate</name>
        <param>
          <type><ref refid="structml__random__state__t" kindref="compound">ml_random_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1191" column="13" bodyfile="src/ml_sequence.c" bodystart="1191" bodyend="1204" declfile="src/ml_sequence.c" declline="1182" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a18191c7fd7e075e7f63fca7e7312a39e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void random_value</definition>
        <argsstring>(ml_random_state_t *State, ml_value_t *Value)</argsstring>
        <name>random_value</name>
        <param>
          <type><ref refid="structml__random__state__t" kindref="compound">ml_random_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1184" column="13" bodyfile="src/ml_sequence.c" bodystart="1184" bodyend="1189"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1acd803b5085abebf3d913af881571f6f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODVX</definition>
        <argsstring>(&quot;random&quot;, MLTypeT)</argsstring>
        <name>ML_METHODVX</name>
        <param>
          <type>&quot;random&quot;</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1206" column="1" bodyfile="src/ml_sequence.c" bodystart="1206" bodyend="1222"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a71a30298c2e7bed2cf7cf3ec1b6aef30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODVX</definition>
        <argsstring>(&quot;random&quot;, MLSequenceT)</argsstring>
        <name>ML_METHODVX</name>
        <param>
          <type>&quot;random&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1224" column="1" bodyfile="src/ml_sequence.c" bodystart="1224" bodyend="1239"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ae7c4cc682c0e66ebc14e9bf1a2cea8af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void reduce_iter_next</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>reduce_iter_next</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1266" column="13" bodyfile="src/ml_sequence.c" bodystart="1266" bodyend="1271" declfile="src/ml_sequence.c" declline="1248" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1abb0d456ea94ba903edf403b03db83310" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void reduce_call</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>reduce_call</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1250" column="13" bodyfile="src/ml_sequence.c" bodystart="1250" bodyend="1256"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a29e9c1ce25b61adebd6c16a5bcd431fb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void reduce_next_value</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>reduce_next_value</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1258" column="13" bodyfile="src/ml_sequence.c" bodystart="1258" bodyend="1264"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1adb0fe3c531829418b755cfbdb8e1c526" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void reduce_first_value</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>reduce_first_value</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1273" column="13" bodyfile="src/ml_sequence.c" bodystart="1273" bodyend="1278"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a514ce6cf89b8e0254ac2fa4441faad10" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void reduce_iterate</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>reduce_iterate</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1280" column="13" bodyfile="src/ml_sequence.c" bodystart="1280" bodyend="1285"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a49cb8538ace2da3970e6558372212c23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(Reduce)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>Reduce</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1287" column="1" bodyfile="src/ml_sequence.c" bodystart="1287" bodyend="1317"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a22affafa19d06cb858bf3c5e091661dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(Min)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>Min</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1319" column="1" bodyfile="src/ml_sequence.c" bodystart="1319" bodyend="1332"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ae6069be892c03fc42dc1db00e93d0947" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(Max)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>Max</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1334" column="1" bodyfile="src/ml_sequence.c" bodystart="1334" bodyend="1347"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aab550b04a2c767a47543d1305411b842" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(Sum)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>Sum</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1349" column="1" bodyfile="src/ml_sequence.c" bodystart="1349" bodyend="1362"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a582842f9c53bab9ca457804faa5137c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(Prod)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>Prod</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1364" column="1" bodyfile="src/ml_sequence.c" bodystart="1364" bodyend="1377"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a46163c4aabfcfe06464a021b903e3aae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void reduce2_iter_next</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>reduce2_iter_next</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1404" column="13" bodyfile="src/ml_sequence.c" bodystart="1404" bodyend="1409" declfile="src/ml_sequence.c" declline="1379" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aea35beef1dbf433f4550002e8180073a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void reduce2_call</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>reduce2_call</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1381" column="13" bodyfile="src/ml_sequence.c" bodystart="1381" bodyend="1387"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ae262448cb6036a4bdf89962cb072b034" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void reduce2_next_value</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>reduce2_next_value</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1389" column="13" bodyfile="src/ml_sequence.c" bodystart="1389" bodyend="1395"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a9e76e93970808f9814bf8eed58baa370" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void reduce2_next_key</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>reduce2_next_key</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1397" column="13" bodyfile="src/ml_sequence.c" bodystart="1397" bodyend="1402"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ab4dbd2f3970536dcfe8de8d4c1e7bc77" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void reduce2_first_value</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>reduce2_first_value</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1411" column="13" bodyfile="src/ml_sequence.c" bodystart="1411" bodyend="1416"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a474804d1565275e624eb447c9db60f6c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void reduce2_first_key</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>reduce2_first_key</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1418" column="13" bodyfile="src/ml_sequence.c" bodystart="1418" bodyend="1423"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1acf27b63a753ece86ec544684d7e49376" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void reduce2_iterate</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>reduce2_iterate</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1425" column="13" bodyfile="src/ml_sequence.c" bodystart="1425" bodyend="1430"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1af54481b4dc7034e31d5e94ee53b37e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(Reduce2)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>Reduce2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1432" column="1" bodyfile="src/ml_sequence.c" bodystart="1432" bodyend="1461"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a1489d98cac393f6f1f1100a4bb72e328" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_extremum_run</definition>
        <argsstring>(ml_extremum_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_extremum_run</name>
        <param>
          <type><ref refid="structml__extremum__state__t" kindref="compound">ml_extremum_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1469" column="13" bodyfile="src/ml_sequence.c" bodystart="1469" bodyend="1477"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ac66b6218e0555bda69af6d5d463e201b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_minimum2_fn</definition>
        <argsstring>(ml_state_t *Caller, ml_extremum_state_t *State, int Count, ml_value_t **Args)</argsstring>
        <name>ml_minimum2_fn</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__extremum__state__t" kindref="compound">ml_extremum_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1479" column="13" bodyfile="src/ml_sequence.c" bodystart="1479" bodyend="1488"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a48c684224fb970b354452cd21f917988" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(Min2)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>Min2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1490" column="1" bodyfile="src/ml_sequence.c" bodystart="1490" bodyend="1505"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aed6d077f29d8d65b318867ae3a502b61" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_maximum2_fn</definition>
        <argsstring>(ml_state_t *Caller, ml_extremum_state_t *State, int Count, ml_value_t **Args)</argsstring>
        <name>ml_maximum2_fn</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__extremum__state__t" kindref="compound">ml_extremum_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1507" column="13" bodyfile="src/ml_sequence.c" bodystart="1507" bodyend="1516"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ac52ab7f2c2a025991d4b191326efcada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(Max2)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>Max2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1518" column="1" bodyfile="src/ml_sequence.c" bodystart="1518" bodyend="1533"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a9f08965635ac86b0d76df2adae840ba2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void join_value</definition>
        <argsstring>(ml_join_state_t *State, ml_value_t *Value)</argsstring>
        <name>join_value</name>
        <param>
          <type><ref refid="structml__join__state__t" kindref="compound">ml_join_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1559" column="13" bodyfile="src/ml_sequence.c" bodystart="1559" bodyend="1563" declfile="src/ml_sequence.c" declline="1543" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ae5b71f0ff4dc97756afc585d4ff4beaf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void join_next</definition>
        <argsstring>(ml_join_state_t *State, ml_value_t *Value)</argsstring>
        <name>join_next</name>
        <param>
          <type><ref refid="structml__join__state__t" kindref="compound">ml_join_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1545" column="13" bodyfile="src/ml_sequence.c" bodystart="1545" bodyend="1551"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1add832cece66a530471e65faf03a4b772" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void join_append</definition>
        <argsstring>(ml_join_state_t *State, ml_value_t *Value)</argsstring>
        <name>join_append</name>
        <param>
          <type><ref refid="structml__join__state__t" kindref="compound">ml_join_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1553" column="13" bodyfile="src/ml_sequence.c" bodystart="1553" bodyend="1557"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a1266581c9cecd30fd06feac89b520819" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void join_first</definition>
        <argsstring>(ml_join_state_t *State, ml_value_t *Value)</argsstring>
        <name>join_first</name>
        <param>
          <type><ref refid="structml__join__state__t" kindref="compound">ml_join_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1565" column="13" bodyfile="src/ml_sequence.c" bodystart="1565" bodyend="1570"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1adc643c3bd88907d600b563ad84a8a187" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;join&quot;, MLSequenceT, MLStringT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;join&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1572" column="1" bodyfile="src/ml_sequence.c" bodystart="1572" bodyend="1586"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1adeb053d1b9fa6e45ece4d1f0b92e935c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;join&quot;, MLSequenceT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;join&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1588" column="1" bodyfile="src/ml_sequence.c" bodystart="1588" bodyend="1601"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1afd5515c8eeaf18045d9dcd87d2969162" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLStackedT,(MLSequenceT), &quot;stacked&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLStackedT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;stacked&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1608" column="1" declfile="src/ml_sequence.c" declline="1608" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a512f3fb20f6e686e20294866d87e4014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLStackedStateT,(MLStateT), &quot;stacked-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLStackedStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;stacked-state&quot;</type>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1611" column="1" declfile="src/ml_sequence.c" declline="1611" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a2ed2f2961a640c5e7dea9833d09efbe6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stacked_iter_next</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>stacked_iter_next</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1631" column="13" bodyfile="src/ml_sequence.c" bodystart="1631" bodyend="1636" declfile="src/ml_sequence.c" declline="1614" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aa4be9e1bd33a9f996a57610f7565254e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stacked_call</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>stacked_call</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1616" column="13" bodyfile="src/ml_sequence.c" bodystart="1616" bodyend="1621"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aa213d3dc45c2516979af8323ca9f6963" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stacked_next_value</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>stacked_next_value</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1623" column="13" bodyfile="src/ml_sequence.c" bodystart="1623" bodyend="1629"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a0861eb5f736f30c7942f252a1a5b1570" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stacked_first_value</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>stacked_first_value</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1638" column="13" bodyfile="src/ml_sequence.c" bodystart="1638" bodyend="1643"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a4c8897a6d1e9a421327c6e40d569d314" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stacked_iterate</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>stacked_iterate</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1645" column="13" bodyfile="src/ml_sequence.c" bodystart="1645" bodyend="1654"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a1c4a3a7b19dccf6a4063f7d4fa3eac8f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLStackedStateT, ml_state_t *Caller, ml_iter_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLStackedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1657" column="13" bodyfile="src/ml_sequence.c" bodystart="1657" bodyend="1660"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a4d7593be7e3b3bc08efed94b06dd7dd0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLStackedStateT, ml_state_t *Caller, ml_iter_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLStackedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1662" column="13" bodyfile="src/ml_sequence.c" bodystart="1662" bodyend="1665"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aa1bb9c58e0f053b910d0f89bd966b074" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLStackedStateT, ml_state_t *Caller, ml_iter_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLStackedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1667" column="13" bodyfile="src/ml_sequence.c" bodystart="1667" bodyend="1670"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ae5e6f2d9f58834f94870584314e08507" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLStackedT, ml_state_t *Caller, ml_stacked_t *Stacked)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLStackedT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__stacked__t" kindref="compound">ml_stacked_t</ref> *</type>
          <declname>Stacked</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1672" column="13" bodyfile="src/ml_sequence.c" bodystart="1672" bodyend="1681"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a8d332695f81b6ef91581b18e8f73238f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;//&quot;, MLSequenceT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;//&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1683" column="1" bodyfile="src/ml_sequence.c" bodystart="1683" bodyend="1698"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a90d845dbd5b8dab7b4b4f022ee5376dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;//&quot;, MLSequenceT, MLAnyT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;//&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1700" column="1" bodyfile="src/ml_sequence.c" bodystart="1700" bodyend="1717"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1af658f71634a9fa7a0f8a4a31fd0d88d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(Distill)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>Distill</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1719" column="1" bodyfile="src/ml_sequence.c" bodystart="1719" bodyend="1747"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ab9b9caf54e77ef25176667df90b8d625" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLRepeatedT,(MLSequenceT), &quot;repeated&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLRepeatedT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;repeated&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1754" column="1" declfile="src/ml_sequence.c" declline="1754" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1acf5ec12780b5b38cbe744a917177f671" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLRepeatedStateT,(MLStateT), &quot;repeated-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLRepeatedStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;repeated-state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1763" column="1" declfile="src/ml_sequence.c" declline="1763" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1acfa94c0a86ffde9be1524c264ee4f59a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void repeated_update</definition>
        <argsstring>(ml_repeated_state_t *State, ml_value_t *Value)</argsstring>
        <name>repeated_update</name>
        <param>
          <type><ref refid="structml__repeated__state__t" kindref="compound">ml_repeated_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1766" column="13" bodyfile="src/ml_sequence.c" bodystart="1766" bodyend="1771"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1acb6aaa72b717a11670c8e6b6a824c686" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLRepeatedStateT, ml_state_t *Caller, ml_repeated_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLRepeatedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__repeated__state__t" kindref="compound">ml_repeated_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1773" column="13" bodyfile="src/ml_sequence.c" bodystart="1773" bodyend="1782"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a83bfb89fcaceab5866fb4db0da3ef395" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLRepeatedStateT, ml_state_t *Caller, ml_repeated_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLRepeatedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__repeated__state__t" kindref="compound">ml_repeated_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1784" column="13" bodyfile="src/ml_sequence.c" bodystart="1784" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ab0b18941da88ca8422e8ad192ab6f8d2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLRepeatedStateT, ml_state_t *Caller, ml_repeated_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLRepeatedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__repeated__state__t" kindref="compound">ml_repeated_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1788" column="13" bodyfile="src/ml_sequence.c" bodystart="1788" bodyend="1790"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aaa7252557171d6a968e2ce70fca0bd0e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLRepeatedT, ml_state_t *Caller, ml_repeated_t *Repeated)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLRepeatedT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__repeated__t" kindref="compound">ml_repeated_t</ref> *</type>
          <declname>Repeated</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1792" column="13" bodyfile="src/ml_sequence.c" bodystart="1792" bodyend="1800"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a3ddb3db0cf9e97ae7e703358ebe25b23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;@&quot;, MLAnyT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;@&quot;</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1802" column="1" bodyfile="src/ml_sequence.c" bodystart="1802" bodyend="1817"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1acf9b7c166b8c43008bc18b6ebe55d492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;@&quot;, MLAnyT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;@&quot;</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1819" column="1" bodyfile="src/ml_sequence.c" bodystart="1819" bodyend="1831"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a1e723d24e4fea55324b105fef9c8a955" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLFunctionSequence)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLFunctionSequence</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1840" column="1" bodyfile="src/ml_sequence.c" bodystart="1840" bodyend="1847"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a50daa323bf19896240447bf19e1d91ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLFunctionSequenceT,(MLSequenceT), &quot;function-sequence&quot;,.Constructor=(ml_value_t *) MLFunctionSequence)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLFunctionSequenceT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;function-sequence&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLFunctionSequence</defval>
          <briefdescription><para>internal </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1849" column="1" declfile="src/ml_sequence.c" declline="1849" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a6c83215463bfbbf09d65ee72e0cb485b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLFunctionStateT,(MLStateT), &quot;function-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLFunctionStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;function-state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1861" column="1" declfile="src/ml_sequence.c" declline="1861" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a400d1ed47a4438987ab8bd765bbfe491" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLFunctionStateT, ml_state_t *Caller, ml_function_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLFunctionStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__function__state__t" kindref="compound">ml_function_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1864" column="13" bodyfile="src/ml_sequence.c" bodystart="1864" bodyend="1867"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ac644ddbdb8ba11ae6b30af9a7cd9ce3e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLFunctionStateT, ml_state_t *Caller, ml_function_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLFunctionStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__function__state__t" kindref="compound">ml_function_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1869" column="13" bodyfile="src/ml_sequence.c" bodystart="1869" bodyend="1871"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a4c53c52137da40fc8d385e159534e331" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLFunctionStateT, ml_state_t *Caller, ml_function_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLFunctionStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__function__state__t" kindref="compound">ml_function_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1873" column="13" bodyfile="src/ml_sequence.c" bodystart="1873" bodyend="1875"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a9e728e1d6eb22598931558207c58281e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_function_state_run</definition>
        <argsstring>(ml_function_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_function_state_run</name>
        <param>
          <type><ref refid="structml__function__state__t" kindref="compound">ml_function_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1877" column="13" bodyfile="src/ml_sequence.c" bodystart="1877" bodyend="1883"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1afc6747b4230ccbe69edb0cae9e0bd1eb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLFunctionSequenceT, ml_state_t *Caller, ml_function_sequence_t *Sequence)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLFunctionSequenceT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__function__sequence__t" kindref="compound">ml_function_sequence_t</ref> *</type>
          <declname>Sequence</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1885" column="13" bodyfile="src/ml_sequence.c" bodystart="1885" bodyend="1893"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a06a993e0a436da0367a717caf725bb01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;repeat&quot;, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;repeat&quot;</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1895" column="1" bodyfile="src/ml_sequence.c" bodystart="1895" bodyend="1909"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1afa0f9a7f99de53a55ea59d16ebe8f169" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;^&quot;, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;^&quot;</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1911" column="1" bodyfile="src/ml_sequence.c" bodystart="1911" bodyend="1921"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a2c9161bc732d88aa769212c56c21be0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLSequencedT,(MLSequenceT), &quot;sequenced&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLSequencedT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;sequenced&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1928" column="1" declfile="src/ml_sequence.c" declline="1928" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a100f67ecaba37b31773a19c59d8eba7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLSequencedStateT,(MLStateT), &quot;sequenced-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLSequencedStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;sequenced-state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1936" column="1" declfile="src/ml_sequence.c" declline="1936" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aa93999162a00c7f9a48773f83aa7bd6a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_sequenced_fnx_iterate</definition>
        <argsstring>(ml_sequenced_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_sequenced_fnx_iterate</name>
        <param>
          <type><ref refid="structml__sequenced__state__t" kindref="compound">ml_sequenced_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1956" column="13" bodyfile="src/ml_sequence.c" bodystart="1956" bodyend="1963" declfile="src/ml_sequence.c" declline="1939" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ae31a2d2ff696e237ffb08e75a33c4578" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLSequencedStateT, ml_state_t *Caller, ml_sequenced_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLSequencedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__sequenced__state__t" kindref="compound">ml_sequenced_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1941" column="13" bodyfile="src/ml_sequence.c" bodystart="1941" bodyend="1946"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a553aa562c5c6acd1575e1f4325ba4dbe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLSequencedStateT, ml_state_t *Caller, ml_sequenced_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLSequencedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__sequenced__state__t" kindref="compound">ml_sequenced_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1948" column="13" bodyfile="src/ml_sequence.c" bodystart="1948" bodyend="1950"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a073cba61db38c6f892aba9d6360a605f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLSequencedStateT, ml_state_t *Caller, ml_sequenced_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLSequencedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__sequenced__state__t" kindref="compound">ml_sequenced_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1952" column="13" bodyfile="src/ml_sequence.c" bodystart="1952" bodyend="1954"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a8ca69f42753eca08e9a5af2c83a0e28c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLSequencedT, ml_state_t *Caller, ml_sequenced_t *Sequenced)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLSequencedT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__sequenced__t" kindref="compound">ml_sequenced_t</ref> *</type>
          <declname>Sequenced</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1965" column="13" bodyfile="src/ml_sequence.c" bodystart="1965" bodyend="1973"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ade67d67ce53024de43109f13d6df4570" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_sequenced</definition>
        <argsstring>(ml_value_t *First, ml_value_t *Second)</argsstring>
        <name>ml_sequenced</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>First</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="1975" column="19" bodyfile="src/ml_sequence.c" bodystart="1975" bodyend="1998"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a17b26797dc1b2cf3d756cf64750d6b5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&amp;&quot;, MLSequenceT, MLSequenceT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&amp;&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2000" column="1" bodyfile="src/ml_sequence.c" bodystart="2000" bodyend="2007"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a4592ecd33536654be97adbd195e47328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&amp;&quot;, MLIntegerRangeT, MLIntegerRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&amp;&quot;</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2009" column="1" bodyfile="src/ml_sequence.c" bodystart="2009" bodyend="2021"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a6f2a16da814fad279c480eb2d81585e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&amp;&quot;, MLSequenceT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&amp;&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2023" column="1" bodyfile="src/ml_sequence.c" bodystart="2023" bodyend="2033"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a7368d4f18161bafe64df6c756f59c0b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLLimitedT,(MLSequenceT), &quot;limited&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLLimitedT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;limited&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2041" column="1" declfile="src/ml_sequence.c" declline="2041" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1acf5e9417a469013775660b0b0f528439" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLLimitedStateT,(MLStateT), &quot;limited-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLLimitedStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;limited-state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2050" column="1" declfile="src/ml_sequence.c" declline="2050" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a52be5ce592175fa81df6cb10aeee2aca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void limited_iterate</definition>
        <argsstring>(ml_limited_state_t *State, ml_value_t *Value)</argsstring>
        <name>limited_iterate</name>
        <param>
          <type><ref refid="structml__limited__state__t" kindref="compound">ml_limited_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2053" column="13" bodyfile="src/ml_sequence.c" bodystart="2053" bodyend="2059"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a3dc48db0ad5555b91de58906c9ca8676" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLLimitedT, ml_state_t *Caller, ml_limited_t *Limited)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLLimitedT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__limited__t" kindref="compound">ml_limited_t</ref> *</type>
          <declname>Limited</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2061" column="13" bodyfile="src/ml_sequence.c" bodystart="2061" bodyend="2073"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a05243bff013a8488502f727fab43a452" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLLimitedStateT, ml_state_t *Caller, ml_limited_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLLimitedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__limited__state__t" kindref="compound">ml_limited_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2075" column="13" bodyfile="src/ml_sequence.c" bodystart="2075" bodyend="2077"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1afe00e81550c80da24dad649ba9b32a50" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLLimitedStateT, ml_state_t *Caller, ml_limited_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLLimitedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__limited__state__t" kindref="compound">ml_limited_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2079" column="13" bodyfile="src/ml_sequence.c" bodystart="2079" bodyend="2081"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a1bc6d88d19c71c2603a637b7c4f34382" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLLimitedStateT, ml_state_t *Caller, ml_limited_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLLimitedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__limited__state__t" kindref="compound">ml_limited_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2083" column="13" bodyfile="src/ml_sequence.c" bodystart="2083" bodyend="2091"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ac14b876b6a5a55948ba8b6b2b0477925" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;limit&quot;, MLSequenceT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;limit&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2093" column="1" bodyfile="src/ml_sequence.c" bodystart="2093" bodyend="2105"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a3c5f750b43e63706d70443c81161a877" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void limited_precount_run</definition>
        <argsstring>(integer_state_t *State, ml_value_t *Value)</argsstring>
        <name>limited_precount_run</name>
        <param>
          <type><ref refid="structinteger__state__t" kindref="compound">integer_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2112" column="13" bodyfile="src/ml_sequence.c" bodystart="2112" bodyend="2119"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a66338990103e1bd9cc804f67813eca06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;precount&quot;, MLLimitedT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;precount&quot;</type>
        </param>
        <param>
          <type>MLLimitedT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2121" column="1" bodyfile="src/ml_sequence.c" bodystart="2121" bodyend="2131"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a5bc2ecee11ab1c3e66c6a7aec0dc194a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLSkippedT,(MLSequenceT), &quot;skipped&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLSkippedT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;skipped&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2139" column="1" declfile="src/ml_sequence.c" declline="2139" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ae5a4c712419de66f17b31d0593cedb04" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void skipped_iterate</definition>
        <argsstring>(ml_skipped_state_t *State, ml_value_t *Value)</argsstring>
        <name>skipped_iterate</name>
        <param>
          <type><ref refid="structml__skipped__state__t" kindref="compound">ml_skipped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2147" column="13" bodyfile="src/ml_sequence.c" bodystart="2147" bodyend="2156"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ae8ca18c00a413d3b80355eb49ca8a5e9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLSkippedT, ml_state_t *Caller, ml_skipped_t *Skipped)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLSkippedT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__skipped__t" kindref="compound">ml_skipped_t</ref> *</type>
          <declname>Skipped</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2158" column="13" bodyfile="src/ml_sequence.c" bodystart="2158" bodyend="2169"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a287205f8936201d5c6f20b6765d912ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;skip&quot;, MLSequenceT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;skip&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2171" column="1" bodyfile="src/ml_sequence.c" bodystart="2171" bodyend="2183"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ad894c7c137e5fe141c59bb26561f005f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void skipped_precount_run</definition>
        <argsstring>(integer_state_t *State, ml_value_t *Value)</argsstring>
        <name>skipped_precount_run</name>
        <param>
          <type><ref refid="structinteger__state__t" kindref="compound">integer_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2185" column="13" bodyfile="src/ml_sequence.c" bodystart="2185" bodyend="2192"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ae2df7aec74113670079aed50aece525b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;precount&quot;, MLSkippedT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;precount&quot;</type>
        </param>
        <param>
          <type>MLSkippedT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2194" column="1" bodyfile="src/ml_sequence.c" bodystart="2194" bodyend="2204"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a0deb686f69e50f4213f9a92e816e826c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLProvidedT,(MLSequenceT), &quot;provided&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLProvidedT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;provided&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2212" column="1" declfile="src/ml_sequence.c" declline="2212" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a8b8afa987c3cebefbd7e49d0b2ae908c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLProvidedStateT,(MLStateT), &quot;provided-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLProvidedStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;provided-state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2221" column="1" declfile="src/ml_sequence.c" declline="2221" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a9b24ee01fef9382c32ec36aa2d83f2f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void provided_check</definition>
        <argsstring>(ml_provided_state_t *State, ml_value_t *Value)</argsstring>
        <name>provided_check</name>
        <param>
          <type><ref refid="structml__provided__state__t" kindref="compound">ml_provided_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2239" column="13" bodyfile="src/ml_sequence.c" bodystart="2239" bodyend="2244" declfile="src/ml_sequence.c" declline="2224" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ae10292e15c33b1b1bb32b63eb27def14" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void provided_iterate</definition>
        <argsstring>(ml_provided_state_t *State, ml_value_t *Value)</argsstring>
        <name>provided_iterate</name>
        <param>
          <type><ref refid="structml__provided__state__t" kindref="compound">ml_provided_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2226" column="13" bodyfile="src/ml_sequence.c" bodystart="2226" bodyend="2230"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1afefd7297cac819d116dd66761130bb6e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void provided_value</definition>
        <argsstring>(ml_provided_state_t *State, ml_value_t *Value)</argsstring>
        <name>provided_value</name>
        <param>
          <type><ref refid="structml__provided__state__t" kindref="compound">ml_provided_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2232" column="13" bodyfile="src/ml_sequence.c" bodystart="2232" bodyend="2237"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aa601f4c08b8325c89cd1af1a1bbb67af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLProvidedT, ml_state_t *Caller, ml_provided_t *Provided)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLProvidedT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__provided__t" kindref="compound">ml_provided_t</ref> *</type>
          <declname>Provided</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2246" column="13" bodyfile="src/ml_sequence.c" bodystart="2246" bodyend="2254"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a30b527928aaca0ab193ad2e7db2d5607" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLProvidedStateT, ml_state_t *Caller, ml_provided_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLProvidedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__provided__state__t" kindref="compound">ml_provided_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2256" column="13" bodyfile="src/ml_sequence.c" bodystart="2256" bodyend="2258"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aab9fc5b0dfcd022e51e77155d7abb244" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLProvidedStateT, ml_state_t *Caller, ml_provided_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLProvidedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__provided__state__t" kindref="compound">ml_provided_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2260" column="13" bodyfile="src/ml_sequence.c" bodystart="2260" bodyend="2262"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a026fa88ac5739c5fa67a729589888c01" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLProvidedStateT, ml_state_t *Caller, ml_provided_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLProvidedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__provided__state__t" kindref="compound">ml_provided_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2264" column="13" bodyfile="src/ml_sequence.c" bodystart="2264" bodyend="2268"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a13c4478b4778c7a97a520c097f370358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;provided&quot;, MLSequenceT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;provided&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2270" column="1" bodyfile="src/ml_sequence.c" bodystart="2270" bodyend="2282"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a6701806686fbe7638da5602f4eb490c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLUniqueT,(MLSequenceT), &quot;unique&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLUniqueT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;unique&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2289" column="1" declfile="src/ml_sequence.c" declline="2289" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a2172eaf457b30296e255eaa26f5c7000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLUniqueStateT,(MLStateT), &quot;unique-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLUniqueStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;unique-state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2300" column="1" declfile="src/ml_sequence.c" declline="2300" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a26d64227b18e030726ead35939fb2843" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_unique_fnx_iterate</definition>
        <argsstring>(ml_unique_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_unique_fnx_iterate</name>
        <param>
          <type><ref refid="structml__unique__state__t" kindref="compound">ml_unique_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2317" column="13" bodyfile="src/ml_sequence.c" bodystart="2317" bodyend="2322" declfile="src/ml_sequence.c" declline="2303" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a7b351eab7d02f560821e337d85073e5e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_unique_fnx_value</definition>
        <argsstring>(ml_unique_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_unique_fnx_value</name>
        <param>
          <type><ref refid="structml__unique__state__t" kindref="compound">ml_unique_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2305" column="13" bodyfile="src/ml_sequence.c" bodystart="2305" bodyend="2315"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a7c2d4cdf4245e48a84f0ac5b53b48fd6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLUniqueT, ml_state_t *Caller, ml_unique_t *Unique)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLUniqueT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__unique__t" kindref="compound">ml_unique_t</ref> *</type>
          <declname>Unique</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2324" column="13" bodyfile="src/ml_sequence.c" bodystart="2324" bodyend="2333"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ae4c5dfd726f4c2172c53cf7bb4d11fec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLUniqueStateT, ml_state_t *Caller, ml_unique_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLUniqueStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__unique__state__t" kindref="compound">ml_unique_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2335" column="13" bodyfile="src/ml_sequence.c" bodystart="2335" bodyend="2337"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a9eb4c2b489516a1c05469bd3fbe0d8a7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLUniqueStateT, ml_state_t *Caller, ml_unique_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLUniqueStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__unique__state__t" kindref="compound">ml_unique_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2339" column="13" bodyfile="src/ml_sequence.c" bodystart="2339" bodyend="2341"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ab5cec0610cdb7387e5ffb5159a731aeb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLUniqueStateT, ml_state_t *Caller, ml_unique_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLUniqueStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__unique__state__t" kindref="compound">ml_unique_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2343" column="13" bodyfile="src/ml_sequence.c" bodystart="2343" bodyend="2347"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a755a5df65772bc388a786b3e1770e4cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(Unique)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>Unique</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2349" column="1" bodyfile="src/ml_sequence.c" bodystart="2349" bodyend="2359"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a248b91004ef3a6114b02b0ea0fae1342" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLZippedT,(MLSequenceT), &quot;zipped&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLZippedT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;zipped&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2368" column="1" declfile="src/ml_sequence.c" declline="2368" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a488ace498c445aa65cf5b3ceb078348e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLZippedStateT,(MLStateT), &quot;zipped-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLZippedStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;zipped-state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2379" column="1" declfile="src/ml_sequence.c" declline="2379" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a9210059b827379bdd5d754f3316185f2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void zipped_iterate</definition>
        <argsstring>(ml_zipped_state_t *State, ml_value_t *Value)</argsstring>
        <name>zipped_iterate</name>
        <param>
          <type><ref refid="structml__zipped__state__t" kindref="compound">ml_zipped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2382" column="13" bodyfile="src/ml_sequence.c" bodystart="2382" bodyend="2388"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a8f10355f4c97a7cb2413c738012fa9ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLZippedT, ml_state_t *Caller, ml_zipped_t *Zipped)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLZippedT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__zipped__t" kindref="compound">ml_zipped_t</ref> *</type>
          <declname>Zipped</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2390" column="13" bodyfile="src/ml_sequence.c" bodystart="2390" bodyend="2402"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a90dc262c931b2510a50d1ece58c37282" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLZippedStateT, ml_state_t *Caller, ml_zipped_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLZippedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__zipped__state__t" kindref="compound">ml_zipped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2404" column="13" bodyfile="src/ml_sequence.c" bodystart="2404" bodyend="2406"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a8732e97cedcb5779fcf8d673835d3d25" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_zipped_fnx_value</definition>
        <argsstring>(ml_zipped_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_zipped_fnx_value</name>
        <param>
          <type><ref refid="structml__zipped__state__t" kindref="compound">ml_zipped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2408" column="13" bodyfile="src/ml_sequence.c" bodystart="2408" bodyend="2415"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a368575b951a7795fb880da63f476288b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLZippedStateT, ml_state_t *Caller, ml_zipped_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLZippedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__zipped__state__t" kindref="compound">ml_zipped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2417" column="13" bodyfile="src/ml_sequence.c" bodystart="2417" bodyend="2422"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a2120fd2132c0dd27d702d38379cc96df" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void zipped_iter_next</definition>
        <argsstring>(ml_zipped_state_t *State, ml_value_t *Value)</argsstring>
        <name>zipped_iter_next</name>
        <param>
          <type><ref refid="structml__zipped__state__t" kindref="compound">ml_zipped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2424" column="13" bodyfile="src/ml_sequence.c" bodystart="2424" bodyend="2430"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ac005d77744325b9b945b58a2fd1ce2aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLZippedStateT, ml_state_t *Caller, ml_zipped_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLZippedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__zipped__state__t" kindref="compound">ml_zipped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2432" column="13" bodyfile="src/ml_sequence.c" bodystart="2432" bodyend="2438"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a63b74bc22ff5a91720dd96d5ac6e79a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(Zip)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>Zip</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2440" column="1" bodyfile="src/ml_sequence.c" bodystart="2440" bodyend="2456"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a6657936bf7ea3f5225ea24072cbabdb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLZipped2T,(MLSequenceT), &quot;zipped2&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLZipped2T</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;zipped2&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2465" column="1" declfile="src/ml_sequence.c" declline="2465" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a362dbb2afab38fbcbe338ab64f039366" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLZipped2StateT,(MLStateT), &quot;zipped2-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLZipped2StateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;zipped2-state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2476" column="1" declfile="src/ml_sequence.c" declline="2476" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ae50e970ee672578b6a58d22468399d6e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void zipped2_iterate</definition>
        <argsstring>(ml_zipped2_state_t *State, ml_value_t *Value)</argsstring>
        <name>zipped2_iterate</name>
        <param>
          <type><ref refid="structml__zipped2__state__t" kindref="compound">ml_zipped2_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2479" column="13" bodyfile="src/ml_sequence.c" bodystart="2479" bodyend="2485"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a66baee3aa67ff59b18b375faa11a7bc9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLZipped2T, ml_state_t *Caller, ml_zipped2_t *Zipped)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLZipped2T</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__zipped2__t" kindref="compound">ml_zipped2_t</ref> *</type>
          <declname>Zipped</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2487" column="13" bodyfile="src/ml_sequence.c" bodystart="2487" bodyend="2500"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1afc8b138f1358258de00f0b0897cbe537" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_zipped2_fnx_key</definition>
        <argsstring>(ml_zipped2_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_zipped2_fnx_key</name>
        <param>
          <type><ref refid="structml__zipped2__state__t" kindref="compound">ml_zipped2_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2502" column="13" bodyfile="src/ml_sequence.c" bodystart="2502" bodyend="2509"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a9221dc6b20c0fefe8dacbc9251a5a1c1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLZipped2StateT, ml_state_t *Caller, ml_zipped2_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLZipped2StateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__zipped2__state__t" kindref="compound">ml_zipped2_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2511" column="13" bodyfile="src/ml_sequence.c" bodystart="2511" bodyend="2516"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a87de149648cd521f0529da3aab55b944" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_zipped2_fnx_value</definition>
        <argsstring>(ml_zipped2_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_zipped2_fnx_value</name>
        <param>
          <type><ref refid="structml__zipped2__state__t" kindref="compound">ml_zipped2_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2518" column="13" bodyfile="src/ml_sequence.c" bodystart="2518" bodyend="2525"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ad473354a77141eb8a23ba99ee0e58d59" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLZipped2StateT, ml_state_t *Caller, ml_zipped2_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLZipped2StateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__zipped2__state__t" kindref="compound">ml_zipped2_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2527" column="13" bodyfile="src/ml_sequence.c" bodystart="2527" bodyend="2532"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ac539c742df50060749f75920459f05dd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void zipped2_iter_next</definition>
        <argsstring>(ml_zipped2_state_t *State, ml_value_t *Value)</argsstring>
        <name>zipped2_iter_next</name>
        <param>
          <type><ref refid="structml__zipped2__state__t" kindref="compound">ml_zipped2_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2534" column="13" bodyfile="src/ml_sequence.c" bodystart="2534" bodyend="2540"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1acf32fb060ea70749c2b9bb52bc2c7130" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLZipped2StateT, ml_state_t *Caller, ml_zipped2_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLZipped2StateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__zipped2__state__t" kindref="compound">ml_zipped2_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2542" column="13" bodyfile="src/ml_sequence.c" bodystart="2542" bodyend="2548"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a68b809079fba523ca37a65e26256d5d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(Zip2)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>Zip2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2550" column="1" bodyfile="src/ml_sequence.c" bodystart="2550" bodyend="2569"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a5e54442ed3de4a212e5a84091a9c3da2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLGridT,(MLSequenceT), &quot;grid&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLGridT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;grid&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2578" column="1" declfile="src/ml_sequence.c" declline="2578" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ac58fc6fa32f591506e856047d0f9a9af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLGridStateT,(MLStateT), &quot;grid-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLGridStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;grid-state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2589" column="1" declfile="src/ml_sequence.c" declline="2589" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a9c813cfba43bed421ed41da600b6d5bd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void grid_iterate</definition>
        <argsstring>(ml_grid_state_t *State, ml_value_t *Value)</argsstring>
        <name>grid_iterate</name>
        <param>
          <type><ref refid="structml__grid__state__t" kindref="compound">ml_grid_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2592" column="13" bodyfile="src/ml_sequence.c" bodystart="2592" bodyend="2604"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ace748f5e4b4a2ce8eff5c6f548310830" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLGridT, ml_state_t *Caller, ml_grid_t *Grid)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLGridT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__grid__t" kindref="compound">ml_grid_t</ref> *</type>
          <declname>Grid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2606" column="13" bodyfile="src/ml_sequence.c" bodystart="2606" bodyend="2619"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aaef1a9c29b15deb5f1cee549952c9e24" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLGridStateT, ml_state_t *Caller, ml_grid_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLGridStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__grid__state__t" kindref="compound">ml_grid_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2621" column="13" bodyfile="src/ml_sequence.c" bodystart="2621" bodyend="2623"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1adb2cbfdad3ec3eeb1c09fb550c91b4a2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_grid_fnx_value</definition>
        <argsstring>(ml_grid_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_grid_fnx_value</name>
        <param>
          <type><ref refid="structml__grid__state__t" kindref="compound">ml_grid_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2625" column="13" bodyfile="src/ml_sequence.c" bodystart="2625" bodyend="2632"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a70e6f909857bd6d242e81d6728673628" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLGridStateT, ml_state_t *Caller, ml_grid_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLGridStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__grid__state__t" kindref="compound">ml_grid_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2634" column="13" bodyfile="src/ml_sequence.c" bodystart="2634" bodyend="2639"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1afbbb33754fa88efaf2b56fa563b5a6ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLGridStateT, ml_state_t *Caller, ml_grid_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLGridStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__grid__state__t" kindref="compound">ml_grid_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2641" column="13" bodyfile="src/ml_sequence.c" bodystart="2641" bodyend="2647"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a07a0a3195c96e54d511f49feded09b5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(Grid)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>Grid</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2649" column="1" bodyfile="src/ml_sequence.c" bodystart="2649" bodyend="2665"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aea5c8eaac0a8dbbc2311a8a7176db627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLPairedT,(MLSequenceT), &quot;paired&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLPairedT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;paired&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2672" column="1" declfile="src/ml_sequence.c" declline="2672" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aeb0a72db4aac8cb7de0431c009383a7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLPairedStateT,(MLStateT), &quot;paired-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLPairedStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;paired-state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2680" column="1" declfile="src/ml_sequence.c" declline="2680" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ac5ce30281fbe5dab4d5dae8fe9c80adb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void paired_value_iterate</definition>
        <argsstring>(ml_paired_state_t *State, ml_value_t *Value)</argsstring>
        <name>paired_value_iterate</name>
        <param>
          <type><ref refid="structml__paired__state__t" kindref="compound">ml_paired_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2683" column="13" bodyfile="src/ml_sequence.c" bodystart="2683" bodyend="2688"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a076aa8337bab7c454e3c7756af1a57c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void paired_key_iterate</definition>
        <argsstring>(ml_paired_state_t *State, ml_value_t *Value)</argsstring>
        <name>paired_key_iterate</name>
        <param>
          <type><ref refid="structml__paired__state__t" kindref="compound">ml_paired_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2690" column="13" bodyfile="src/ml_sequence.c" bodystart="2690" bodyend="2696"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a72b8fafb88875dc0b2b359eb13e96e57" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLPairedT, ml_state_t *Caller, ml_paired_t *Paired)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLPairedT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__paired__t" kindref="compound">ml_paired_t</ref> *</type>
          <declname>Paired</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2698" column="13" bodyfile="src/ml_sequence.c" bodystart="2698" bodyend="2706"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ac5ec6687e494ca8f8c2bf27f4c8ceba4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLPairedStateT, ml_state_t *Caller, ml_paired_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLPairedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__paired__state__t" kindref="compound">ml_paired_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2708" column="13" bodyfile="src/ml_sequence.c" bodystart="2708" bodyend="2710"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a82e89914fd5f164b866e8bd600d8f40a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLPairedStateT, ml_state_t *Caller, ml_paired_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLPairedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__paired__state__t" kindref="compound">ml_paired_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2712" column="13" bodyfile="src/ml_sequence.c" bodystart="2712" bodyend="2714"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a124cf6c4918aa86d9bf8733490ef351b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void paired_value_iter_next</definition>
        <argsstring>(ml_paired_state_t *State, ml_value_t *Value)</argsstring>
        <name>paired_value_iter_next</name>
        <param>
          <type><ref refid="structml__paired__state__t" kindref="compound">ml_paired_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2716" column="13" bodyfile="src/ml_sequence.c" bodystart="2716" bodyend="2721"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1af4afe09f2f31f09dc5fbbe20f45be0d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void paired_key_iter_next</definition>
        <argsstring>(ml_paired_state_t *State, ml_value_t *Value)</argsstring>
        <name>paired_key_iter_next</name>
        <param>
          <type><ref refid="structml__paired__state__t" kindref="compound">ml_paired_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2723" column="13" bodyfile="src/ml_sequence.c" bodystart="2723" bodyend="2729"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a00602df970bb6a931677516574f5f934" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLPairedStateT, ml_state_t *Caller, ml_paired_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLPairedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__paired__state__t" kindref="compound">ml_paired_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2731" column="13" bodyfile="src/ml_sequence.c" bodystart="2731" bodyend="2735"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a48ca80d5244c706b11f44bd1ccc33d26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(Pair)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>Pair</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2737" column="1" bodyfile="src/ml_sequence.c" bodystart="2737" bodyend="2765"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1addab8e6f5de675124de3a1d9aee35876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLWeavedT,(MLSequenceT), &quot;weaved&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLWeavedT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;weaved&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2773" column="1" declfile="src/ml_sequence.c" declline="2773" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a7d7166af22695d2bd4a37af87808003d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLWeavedStateT,(MLStateT), &quot;weaved-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLWeavedStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;weaved-state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2782" column="1" declfile="src/ml_sequence.c" declline="2782" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a8b98bdf4ee1ff888041f46c51626a28c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void weaved_iterate</definition>
        <argsstring>(ml_weaved_state_t *State, ml_value_t *Value)</argsstring>
        <name>weaved_iterate</name>
        <param>
          <type><ref refid="structml__weaved__state__t" kindref="compound">ml_weaved_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2785" column="13" bodyfile="src/ml_sequence.c" bodystart="2785" bodyend="2790"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a55bc7b27c3dfebb75aee53acffc4438a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLWeavedT, ml_state_t *Caller, ml_weaved_t *Weaved)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLWeavedT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__weaved__t" kindref="compound">ml_weaved_t</ref> *</type>
          <declname>Weaved</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2792" column="13" bodyfile="src/ml_sequence.c" bodystart="2792" bodyend="2802"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a0686b52ac21b6c48671c2fbc7ea9c197" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLWeavedStateT, ml_state_t *Caller, ml_weaved_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLWeavedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__weaved__state__t" kindref="compound">ml_weaved_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2804" column="13" bodyfile="src/ml_sequence.c" bodystart="2804" bodyend="2806"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a024f9e384d1460b68faaa31406f108c3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLWeavedStateT, ml_state_t *Caller, ml_weaved_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLWeavedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__weaved__state__t" kindref="compound">ml_weaved_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2808" column="13" bodyfile="src/ml_sequence.c" bodystart="2808" bodyend="2810"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aa770c6be701d7eda6c3c0bae6e45ef5a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLWeavedStateT, ml_state_t *Caller, ml_weaved_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLWeavedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__weaved__state__t" kindref="compound">ml_weaved_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2812" column="13" bodyfile="src/ml_sequence.c" bodystart="2812" bodyend="2820"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ac92be4b4c81fa95fad14979d1f7f557d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(Weave)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>Weave</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2822" column="1" bodyfile="src/ml_sequence.c" bodystart="2822" bodyend="2835"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a15260588dd4a9dbf99dd35d9a7b43ebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLUnpackedT,(MLSequenceT), &quot;unpacked&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLUnpackedT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;unpacked&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2842" column="1" declfile="src/ml_sequence.c" declline="2842" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a3a6d1cbcf069fc8d3d23cc2e58834096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLUnpackedStateT,(MLStateT), &quot;unpacked-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLUnpackedStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;unpacked-state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2851" column="1" declfile="src/ml_sequence.c" declline="2851" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a7faecdc998e4064b3832cb6773f3be9a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void unpacked_value</definition>
        <argsstring>(ml_unpacked_state_t *State, ml_value_t *Value)</argsstring>
        <name>unpacked_value</name>
        <param>
          <type><ref refid="structml__unpacked__state__t" kindref="compound">ml_unpacked_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2854" column="13" bodyfile="src/ml_sequence.c" bodystart="2854" bodyend="2858"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a8fee54417f0eb99155a5b6c84dfc8938" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void unpacked_iterate</definition>
        <argsstring>(ml_unpacked_state_t *State, ml_value_t *Value)</argsstring>
        <name>unpacked_iterate</name>
        <param>
          <type><ref refid="structml__unpacked__state__t" kindref="compound">ml_unpacked_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2860" column="13" bodyfile="src/ml_sequence.c" bodystart="2860" bodyend="2865"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a86599f4dc511255f1f5595dc0eaa605b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLUnpackedT, ml_state_t *Caller, ml_unpacked_t *Folded)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLUnpackedT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__unpacked__t" kindref="compound">ml_unpacked_t</ref> *</type>
          <declname>Folded</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2867" column="13" bodyfile="src/ml_sequence.c" bodystart="2867" bodyend="2874"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a4b291a51c48f1c490ac8fe20cab21c2a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLUnpackedStateT, ml_state_t *Caller, ml_unpacked_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLUnpackedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__unpacked__state__t" kindref="compound">ml_unpacked_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2876" column="13" bodyfile="src/ml_sequence.c" bodystart="2876" bodyend="2878"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a1e09f2df8dc7e9e9143488851343c06b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLUnpackedStateT, ml_state_t *Caller, ml_unpacked_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLUnpackedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__unpacked__state__t" kindref="compound">ml_unpacked_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2880" column="13" bodyfile="src/ml_sequence.c" bodystart="2880" bodyend="2882"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a46776935631ffad4ed9471ae391a1800" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLUnpackedStateT, ml_state_t *Caller, ml_unpacked_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLUnpackedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__unpacked__state__t" kindref="compound">ml_unpacked_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2884" column="13" bodyfile="src/ml_sequence.c" bodystart="2884" bodyend="2887"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ad71dd6f646cccc53334ae9182f3688be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(Unpack)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>Unpack</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2889" column="1" bodyfile="src/ml_sequence.c" bodystart="2889" bodyend="2901"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a140167d2a643f05d93735c5d0266cafa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLFoldedT,(MLSequenceT), &quot;folded&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLFoldedT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;folded&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2908" column="1" declfile="src/ml_sequence.c" declline="2908" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a797ab3a59af2f90de4a5e5a1c09eaa4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLFoldedStateT,(MLStateT), &quot;folded-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLFoldedStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;folded-state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2918" column="1" declfile="src/ml_sequence.c" declline="2918" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aa5bfc02be9a6c5d65918c2f297db12fd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void folded_value</definition>
        <argsstring>(ml_folded_state_t *State, ml_value_t *Value)</argsstring>
        <name>folded_value</name>
        <param>
          <type><ref refid="structml__folded__state__t" kindref="compound">ml_folded_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2921" column="13" bodyfile="src/ml_sequence.c" bodystart="2921" bodyend="2925"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a404d09c540af1da2ff0737b5a3603556" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void folded_iterate_value</definition>
        <argsstring>(ml_folded_state_t *State, ml_value_t *Value)</argsstring>
        <name>folded_iterate_value</name>
        <param>
          <type><ref refid="structml__folded__state__t" kindref="compound">ml_folded_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2927" column="13" bodyfile="src/ml_sequence.c" bodystart="2927" bodyend="2932"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aedd01493ba8257655d79e7c8d17316f0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void folded_key</definition>
        <argsstring>(ml_folded_state_t *State, ml_value_t *Value)</argsstring>
        <name>folded_key</name>
        <param>
          <type><ref refid="structml__folded__state__t" kindref="compound">ml_folded_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2934" column="13" bodyfile="src/ml_sequence.c" bodystart="2934" bodyend="2939"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a2def161f91e31bad7c076fa63eeb69eb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void folded_iterate_key</definition>
        <argsstring>(ml_folded_state_t *State, ml_value_t *Value)</argsstring>
        <name>folded_iterate_key</name>
        <param>
          <type><ref refid="structml__folded__state__t" kindref="compound">ml_folded_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2941" column="13" bodyfile="src/ml_sequence.c" bodystart="2941" bodyend="2946"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a5ef097b2d47026b44c8b2325faa77a6d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLFoldedT, ml_state_t *Caller, ml_folded_t *Folded)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLFoldedT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__folded__t" kindref="compound">ml_folded_t</ref> *</type>
          <declname>Folded</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2948" column="13" bodyfile="src/ml_sequence.c" bodystart="2948" bodyend="2955"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ab2c6a90ff998c56989a79a78897e90a6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLFoldedStateT, ml_state_t *Caller, ml_folded_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLFoldedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__folded__state__t" kindref="compound">ml_folded_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2957" column="13" bodyfile="src/ml_sequence.c" bodystart="2957" bodyend="2959"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1abf357ad83f379b7c413024eb2f835de7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLFoldedStateT, ml_state_t *Caller, ml_folded_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLFoldedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__folded__state__t" kindref="compound">ml_folded_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2961" column="13" bodyfile="src/ml_sequence.c" bodystart="2961" bodyend="2963"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ace6907598b3e96c73eda7a35441095c4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLFoldedStateT, ml_state_t *Caller, ml_folded_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLFoldedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__folded__state__t" kindref="compound">ml_folded_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2965" column="13" bodyfile="src/ml_sequence.c" bodystart="2965" bodyend="2968"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1adce308eb7e772daa74664f0261933481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(Fold)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>Fold</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2970" column="1" bodyfile="src/ml_sequence.c" bodystart="2970" bodyend="2981"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a875c36581eeb48c60b563de7e5005fdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLUnfoldedT,(MLSequenceT), &quot;unfolded&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLUnfoldedT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;unfolded&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2988" column="1" declfile="src/ml_sequence.c" declline="2988" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a19261a1745a54bb43d3e360502279002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLUnfoldedStateT,(MLStateT), &quot;unfolded-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLUnfoldedStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;unfolded-state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="2997" column="1" declfile="src/ml_sequence.c" declline="2997" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a7b173d988ed2c3be82fa6d07ec726c69" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void unfolded_iterate</definition>
        <argsstring>(ml_unfolded_state_t *State, ml_value_t *Value)</argsstring>
        <name>unfolded_iterate</name>
        <param>
          <type><ref refid="structml__unfolded__state__t" kindref="compound">ml_unfolded_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3000" column="13" bodyfile="src/ml_sequence.c" bodystart="3000" bodyend="3005"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a605831f7eac6f44c34da54e49a283890" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLUnfoldedT, ml_state_t *Caller, ml_unfolded_t *Unfolded)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLUnfoldedT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__unfolded__t" kindref="compound">ml_unfolded_t</ref> *</type>
          <declname>Unfolded</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3007" column="13" bodyfile="src/ml_sequence.c" bodystart="3007" bodyend="3015"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a4dc63b1b017c58a27a02d2b25d847e44" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLUnfoldedStateT, ml_state_t *Caller, ml_unfolded_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLUnfoldedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__unfolded__state__t" kindref="compound">ml_unfolded_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3017" column="13" bodyfile="src/ml_sequence.c" bodystart="3017" bodyend="3019"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a9f48d533fe4d7310da236dcece7c8a5c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLUnfoldedStateT, ml_state_t *Caller, ml_unfolded_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLUnfoldedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__unfolded__state__t" kindref="compound">ml_unfolded_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3021" column="13" bodyfile="src/ml_sequence.c" bodystart="3021" bodyend="3027"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a3eeee293fade1a8ff3c7999d9f62fc7b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLUnfoldedStateT, ml_state_t *Caller, ml_unfolded_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLUnfoldedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__unfolded__state__t" kindref="compound">ml_unfolded_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3029" column="13" bodyfile="src/ml_sequence.c" bodystart="3029" bodyend="3036"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ad81506a1958a491e9906acfe59f970f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(Unfold)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>Unfold</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3038" column="1" bodyfile="src/ml_sequence.c" bodystart="3038" bodyend="3049"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a3a50ff0d9d23e7cf2978b202735f5b26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLSwappedT,(MLSequenceT), &quot;swapped&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLSwappedT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;swapped&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3057" column="1" declfile="src/ml_sequence.c" declline="3057" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a19d17ca6c426b348d5c01bbfc608a41a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLSwappedStateT,(MLStateT), &quot;swapped-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLSwappedStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;swapped-state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3065" column="1" declfile="src/ml_sequence.c" declline="3065" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ad8dd4041b6fd2bf4d6392803c2a74986" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void swapped_iterate</definition>
        <argsstring>(ml_swapped_state_t *State, ml_value_t *Value)</argsstring>
        <name>swapped_iterate</name>
        <param>
          <type><ref refid="structml__swapped__state__t" kindref="compound">ml_swapped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3068" column="13" bodyfile="src/ml_sequence.c" bodystart="3068" bodyend="3073"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a5121fa2ab618c2ca2338da0749a23bea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLSwappedT, ml_state_t *Caller, ml_swapped_t *Swapped)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLSwappedT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__swapped__t" kindref="compound">ml_swapped_t</ref> *</type>
          <declname>Swapped</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3075" column="13" bodyfile="src/ml_sequence.c" bodystart="3075" bodyend="3082"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a6155522ec1819786ebf02977c41c953b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLSwappedStateT, ml_state_t *Caller, ml_swapped_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLSwappedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__swapped__state__t" kindref="compound">ml_swapped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3084" column="13" bodyfile="src/ml_sequence.c" bodystart="3084" bodyend="3086"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a2767cec386725e89800408d89cf91992" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLSwappedStateT, ml_state_t *Caller, ml_swapped_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLSwappedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__swapped__state__t" kindref="compound">ml_swapped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3088" column="13" bodyfile="src/ml_sequence.c" bodystart="3088" bodyend="3090"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a9b7f4fd7fdc3c7513fbfdad0691716cb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLSwappedStateT, ml_state_t *Caller, ml_swapped_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLSwappedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__swapped__state__t" kindref="compound">ml_swapped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3092" column="13" bodyfile="src/ml_sequence.c" bodystart="3092" bodyend="3094"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a99eba0bd82c9277bc5f517bcb9ca0e15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(Swap)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>Swap</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3096" column="1" bodyfile="src/ml_sequence.c" bodystart="3096" bodyend="3120"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a338e04ff5f94a97f384a91eb7a6e7302" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLKeyT,(MLSequenceT), &quot;key&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLKeyT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;key&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3127" column="1" declfile="src/ml_sequence.c" declline="3127" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a94a63cde3ce8c6f0daa80894eb014c4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLKeyStateT,(MLStateT), &quot;keys-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLKeyStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;keys-state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3136" column="1" declfile="src/ml_sequence.c" declline="3136" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1af3975b50c89dec0a4a831567b008a5fc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void key_iterate</definition>
        <argsstring>(ml_key_state_t *State, ml_value_t *Value)</argsstring>
        <name>key_iterate</name>
        <param>
          <type><ref refid="structml__key__state__t" kindref="compound">ml_key_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3139" column="13" bodyfile="src/ml_sequence.c" bodystart="3139" bodyend="3145"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aa62c98dca43857ecb643b9a7ba0c68b8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLKeyT, ml_state_t *Caller, ml_key_t *Key)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLKeyT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__key__t" kindref="compound">ml_key_t</ref> *</type>
          <declname>Key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3147" column="13" bodyfile="src/ml_sequence.c" bodystart="3147" bodyend="3154"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a3459179a075486a8bde16dcc8e880191" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLKeyStateT, ml_state_t *Caller, ml_key_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLKeyStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__key__state__t" kindref="compound">ml_key_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3156" column="13" bodyfile="src/ml_sequence.c" bodystart="3156" bodyend="3158"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a04fdccc7b291794afd88e7be7bac4407" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLKeyStateT, ml_state_t *Caller, ml_key_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLKeyStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__key__state__t" kindref="compound">ml_key_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3160" column="13" bodyfile="src/ml_sequence.c" bodystart="3160" bodyend="3162"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aa05a35ba97218420fbe69dddf5151fe0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLKeyStateT, ml_state_t *Caller, ml_key_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLKeyStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__key__state__t" kindref="compound">ml_key_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3164" column="13" bodyfile="src/ml_sequence.c" bodystart="3164" bodyend="3166"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a90057fec612eecc96cf6c1313be88ed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(Key)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>Key</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3168" column="1" bodyfile="src/ml_sequence.c" bodystart="3168" bodyend="3179"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a3b3c032642e90fbc2fe408575463f606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLBatchedT,(MLSequenceT), &quot;batched&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLBatchedT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;batched&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3187" column="1" declfile="src/ml_sequence.c" declline="3187" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ace80b7b72519f562a8724368c295ac73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLBatchedStateT,(MLStateT), &quot;batched-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLBatchedStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;batched-state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3197" column="1" declfile="src/ml_sequence.c" declline="3197" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ac7e5c3a0679aa9b113bbc6aa5092a55a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void batched_iterate</definition>
        <argsstring>(ml_batched_state_t *State, ml_value_t *Value)</argsstring>
        <name>batched_iterate</name>
        <param>
          <type><ref refid="structml__batched__state__t" kindref="compound">ml_batched_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3215" column="13" bodyfile="src/ml_sequence.c" bodystart="3215" bodyend="3227" declfile="src/ml_sequence.c" declline="3200" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ac3a1ac21ac935bf0f3db9e309532c557" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void batched_iter_value</definition>
        <argsstring>(ml_batched_state_t *State, ml_value_t *Value)</argsstring>
        <name>batched_iter_value</name>
        <param>
          <type><ref refid="structml__batched__state__t" kindref="compound">ml_batched_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3202" column="13" bodyfile="src/ml_sequence.c" bodystart="3202" bodyend="3213"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a117f61b0bc521ebc79be734112a066a7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLBatchedT, ml_state_t *Caller, ml_batched_t *Batched)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLBatchedT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__batched__t" kindref="compound">ml_batched_t</ref> *</type>
          <declname>Batched</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3229" column="13" bodyfile="src/ml_sequence.c" bodystart="3229" bodyend="3240"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1adee3dd5257f719546421e85e5e83cd1b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLBatchedStateT, ml_state_t *Caller, ml_batched_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLBatchedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__batched__state__t" kindref="compound">ml_batched_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3242" column="13" bodyfile="src/ml_sequence.c" bodystart="3242" bodyend="3244"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a3f3074105f686305b1a562d02a63e493" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLBatchedStateT, ml_state_t *Caller, ml_batched_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLBatchedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__batched__state__t" kindref="compound">ml_batched_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3246" column="13" bodyfile="src/ml_sequence.c" bodystart="3246" bodyend="3248"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1abb90ac41d62df2c46140dde4768b0938" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLBatchedStateT, ml_state_t *Caller, ml_batched_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLBatchedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__batched__state__t" kindref="compound">ml_batched_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3250" column="13" bodyfile="src/ml_sequence.c" bodystart="3250" bodyend="3262"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a13008d2bc63e5c58ce09f03f27cdf044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(Batch)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>Batch</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3264" column="1" bodyfile="src/ml_sequence.c" bodystart="3264" bodyend="3291"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ad15151d5f52106fde80f96c637d25846" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLIteratorT,(), &quot;iterator&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLIteratorT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;iterator&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3298" column="1" declfile="src/ml_sequence.c" declline="3298" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a5300c94018fa4251e322b08f33b3375b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_iterator_run</definition>
        <argsstring>(ml_iterator_t *Iterator, ml_value_t *Iter)</argsstring>
        <name>ml_iterator_run</name>
        <param>
          <type><ref refid="structml__iterator__t" kindref="compound">ml_iterator_t</ref> *</type>
          <declname>Iterator</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3302" column="13" bodyfile="src/ml_sequence.c" bodystart="3302" bodyend="3308"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aca00e49df151ad37aab43bd82965b589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(MLIterate)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>MLIterate</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3310" column="1" bodyfile="src/ml_sequence.c" bodystart="3310" bodyend="3322"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a9b9ba53e84de38e2a400c93d8491e352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;next&quot;, MLIteratorT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;next&quot;</type>
        </param>
        <param>
          <type>MLIteratorT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3324" column="1" bodyfile="src/ml_sequence.c" bodystart="3324" bodyend="3332"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1af01467d2a802631ee8114a3f2d19c37a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;key&quot;, MLIteratorT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;key&quot;</type>
        </param>
        <param>
          <type>MLIteratorT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3334" column="1" bodyfile="src/ml_sequence.c" bodystart="3334" bodyend="3340"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a04bf19716bc3b3754cf6460e858994ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;value&quot;, MLIteratorT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;value&quot;</type>
        </param>
        <param>
          <type>MLIteratorT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3342" column="1" bodyfile="src/ml_sequence.c" bodystart="3342" bodyend="3348"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a74ba6b9153e41d218b570b6dec0b33a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLSplitT,(MLSequenceT), &quot;split&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLSplitT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;split&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3355" column="1" declfile="src/ml_sequence.c" declline="3355" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1adef5acc4a7510079d4053a8bcc7dcb00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLSplitStateT,(MLStateT), &quot;split-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLSplitStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;split-state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3366" column="1" declfile="src/ml_sequence.c" declline="3366" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a4f3f2086ef7cc31daa89a9a8173b828c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLSplitInnerT,(MLSequenceT), &quot;split-inner&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLSplitInnerT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;split-inner&quot;</type>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3369" column="1" declfile="src/ml_sequence.c" declline="3369" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a1d65f9d62e0057c001043567b9cc6876" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_split_state_first_iter</definition>
        <argsstring>(ml_split_state_t *State, ml_value_t *Iter)</argsstring>
        <name>ml_split_state_first_iter</name>
        <param>
          <type><ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3392" column="13" bodyfile="src/ml_sequence.c" bodystart="3392" bodyend="3397" declfile="src/ml_sequence.c" declline="3372" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a678cfd47c5553aa5ae9d5027c9aec933" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_split_state_first_split</definition>
        <argsstring>(ml_split_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_split_state_first_split</name>
        <param>
          <type><ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3374" column="13" bodyfile="src/ml_sequence.c" bodystart="3374" bodyend="3383"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a35ffea75aaa49e86bca250e5ed30b58b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_split_state_first_value</definition>
        <argsstring>(ml_split_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_split_state_first_value</name>
        <param>
          <type><ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3385" column="13" bodyfile="src/ml_sequence.c" bodystart="3385" bodyend="3390"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a42ec9010be67a8240def3883c66d87ee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLSplitT, ml_state_t *Caller, ml_split_t *Split)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLSplitT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__split__t" kindref="compound">ml_split_t</ref> *</type>
          <declname>Split</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3399" column="13" bodyfile="src/ml_sequence.c" bodystart="3399" bodyend="3410"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1afc3aa05a4fe67320f06609c4ca56f117" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_split_state_skip_iter</definition>
        <argsstring>(ml_split_state_t *State, ml_value_t *Iter)</argsstring>
        <name>ml_split_state_skip_iter</name>
        <param>
          <type><ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3431" column="13" bodyfile="src/ml_sequence.c" bodystart="3431" bodyend="3436" declfile="src/ml_sequence.c" declline="3412" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a5b118c71b38ad88733b17c9d7fce7309" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_split_state_skip_split</definition>
        <argsstring>(ml_split_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_split_state_skip_split</name>
        <param>
          <type><ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3414" column="13" bodyfile="src/ml_sequence.c" bodystart="3414" bodyend="3422"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a3fbe5e834a48d75269d158a359beaa9a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_split_state_skip_value</definition>
        <argsstring>(ml_split_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_split_state_skip_value</name>
        <param>
          <type><ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3424" column="13" bodyfile="src/ml_sequence.c" bodystart="3424" bodyend="3429"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ad79a0a5dfc044d12b36c217c0ab55e27" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLSplitStateT, ml_state_t *Caller, ml_split_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLSplitStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3438" column="13" bodyfile="src/ml_sequence.c" bodystart="3438" bodyend="3448"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a70fdb621e8f4a351149a44208cb6416d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLSplitStateT, ml_state_t *Caller, ml_split_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLSplitStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3450" column="13" bodyfile="src/ml_sequence.c" bodystart="3450" bodyend="3452"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1af701e05006099d3de4f21ded82599bab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLSplitStateT, ml_state_t *Caller, ml_split_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLSplitStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3454" column="13" bodyfile="src/ml_sequence.c" bodystart="3454" bodyend="3456"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ae1be7d174727d92265307c55c2c74bf8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLSplitInnerT, ml_state_t *Caller, ml_value_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLSplitInnerT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3458" column="13" bodyfile="src/ml_sequence.c" bodystart="3458" bodyend="3462"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1af658a620ad0e2fc0221725941d8d23fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLSplitInnerT, ml_state_t *Caller, ml_value_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLSplitInnerT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3464" column="13" bodyfile="src/ml_sequence.c" bodystart="3464" bodyend="3467"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1acf573357235093ec8d9f132b32661bb5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLSplitInnerT, ml_state_t *Caller, ml_value_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLSplitInnerT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3469" column="13" bodyfile="src/ml_sequence.c" bodystart="3469" bodyend="3472"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1abeac1a30379e707cf9e5d87310a3d921" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_split_state_inner_split</definition>
        <argsstring>(ml_split_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_split_state_inner_split</name>
        <param>
          <type><ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3474" column="13" bodyfile="src/ml_sequence.c" bodystart="3474" bodyend="3481"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a7ceecd409b300d2d214387aa9aecef6a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_split_state_inner_value</definition>
        <argsstring>(ml_split_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_split_state_inner_value</name>
        <param>
          <type><ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3483" column="13" bodyfile="src/ml_sequence.c" bodystart="3483" bodyend="3488"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aabc39d3602f071cfca48ad64a771854b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_split_state_inner_iter</definition>
        <argsstring>(ml_split_state_t *State, ml_value_t *Iter)</argsstring>
        <name>ml_split_state_inner_iter</name>
        <param>
          <type><ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3490" column="13" bodyfile="src/ml_sequence.c" bodystart="3490" bodyend="3496"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aa2648f012cf0607bc30e2238d0370ee7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLSplitInnerT, ml_state_t *Caller, ml_value_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLSplitInnerT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3498" column="13" bodyfile="src/ml_sequence.c" bodystart="3498" bodyend="3504"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a190930d3ea54a991761611b77de87cfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;split&quot;, MLSequenceT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;split&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3506" column="1" bodyfile="src/ml_sequence.c" bodystart="3506" bodyend="3512"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1afa804dc86e62be173d83beb3578ac8bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLGroupedT,(MLSequenceT), &quot;grouped&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLGroupedT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;grouped&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3519" column="1" declfile="src/ml_sequence.c" declline="3519" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aa7d681218633e40b8cee6277e36395a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLGroupedStateT,(MLStateT), &quot;grouped::state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLGroupedStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;grouped::state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3530" column="1" declfile="src/ml_sequence.c" declline="3530" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1af0891de8d7ee349eebc13110ea1f5633" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLGroupedInnerT,(MLSequenceT), &quot;grouped::inner&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLGroupedInnerT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;grouped::inner&quot;</type>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3533" column="1" declfile="src/ml_sequence.c" declline="3533" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1af082ee28187b86f8be1f60d6cfcbe244" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_grouped_state_first_group</definition>
        <argsstring>(ml_grouped_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_grouped_state_first_group</name>
        <param>
          <type><ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3536" column="13" bodyfile="src/ml_sequence.c" bodystart="3536" bodyend="3541"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ade1b27ac00984d394b4904f06a516667" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_grouped_state_first_value</definition>
        <argsstring>(ml_grouped_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_grouped_state_first_value</name>
        <param>
          <type><ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3543" column="13" bodyfile="src/ml_sequence.c" bodystart="3543" bodyend="3548"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ac727421e9e5a731c3522d28ff4ead9c3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_grouped_state_first_iter</definition>
        <argsstring>(ml_grouped_state_t *State, ml_value_t *Iter)</argsstring>
        <name>ml_grouped_state_first_iter</name>
        <param>
          <type><ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3550" column="13" bodyfile="src/ml_sequence.c" bodystart="3550" bodyend="3555"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1aff97f75f610070eb1369dc0daa01fdaf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLGroupedT, ml_state_t *Caller, ml_grouped_t *Grouped)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLGroupedT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__grouped__t" kindref="compound">ml_grouped_t</ref> *</type>
          <declname>Grouped</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3557" column="13" bodyfile="src/ml_sequence.c" bodystart="3557" bodyend="3566"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a1c72002d6d652f027657cc21bc2fa4b0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_grouped_state_skip_iter</definition>
        <argsstring>(ml_grouped_state_t *State, ml_value_t *Iter)</argsstring>
        <name>ml_grouped_state_skip_iter</name>
        <param>
          <type><ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3596" column="13" bodyfile="src/ml_sequence.c" bodystart="3596" bodyend="3601" declfile="src/ml_sequence.c" declline="3568" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a645fc939911a8179f0ed745b6b287756" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_grouped_state_skip_check</definition>
        <argsstring>(ml_grouped_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_grouped_state_skip_check</name>
        <param>
          <type><ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3570" column="13" bodyfile="src/ml_sequence.c" bodystart="3570" bodyend="3579"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ac3a1a04899a8a04a65a48b0ae3f246ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_grouped_state_skip_group</definition>
        <argsstring>(ml_grouped_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_grouped_state_skip_group</name>
        <param>
          <type><ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3581" column="13" bodyfile="src/ml_sequence.c" bodystart="3581" bodyend="3587"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a20d0d9cfcbdb3c6a8bfb86949e2bd024" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_grouped_state_skip_value</definition>
        <argsstring>(ml_grouped_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_grouped_state_skip_value</name>
        <param>
          <type><ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3589" column="13" bodyfile="src/ml_sequence.c" bodystart="3589" bodyend="3594"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a9bbb3a468dfb9a1927228a204b88dc74" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLGroupedStateT, ml_state_t *Caller, ml_grouped_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLGroupedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3603" column="13" bodyfile="src/ml_sequence.c" bodystart="3603" bodyend="3614"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a43b063fa2e92ec2747cc9526181b1972" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLGroupedStateT, ml_state_t *Caller, ml_grouped_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLGroupedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3616" column="13" bodyfile="src/ml_sequence.c" bodystart="3616" bodyend="3618"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1ac62664a4a22a5539534ef6a6f2baca07" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLGroupedStateT, ml_state_t *Caller, ml_grouped_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLGroupedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3620" column="13" bodyfile="src/ml_sequence.c" bodystart="3620" bodyend="3622"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1adfce17cb71893cd609a6eccf5d3b5986" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLGroupedInnerT, ml_state_t *Caller, ml_value_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLGroupedInnerT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3624" column="13" bodyfile="src/ml_sequence.c" bodystart="3624" bodyend="3628"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a745ca94e53f8417fae6f797b51417b37" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLGroupedInnerT, ml_state_t *Caller, ml_value_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLGroupedInnerT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3630" column="13" bodyfile="src/ml_sequence.c" bodystart="3630" bodyend="3633"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a2550d2786ea2e8429bb7a8c72edb39b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLGroupedInnerT, ml_state_t *Caller, ml_value_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLGroupedInnerT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3635" column="13" bodyfile="src/ml_sequence.c" bodystart="3635" bodyend="3638"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a822d2a6cd4ab9b0aa2fb38ab39bd8ef5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_grouped_state_inner_check</definition>
        <argsstring>(ml_grouped_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_grouped_state_inner_check</name>
        <param>
          <type><ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3640" column="13" bodyfile="src/ml_sequence.c" bodystart="3640" bodyend="3648"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a3ca3f30b9d5506f43a22f65592fd01b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_grouped_state_inner_group</definition>
        <argsstring>(ml_grouped_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_grouped_state_inner_group</name>
        <param>
          <type><ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3650" column="13" bodyfile="src/ml_sequence.c" bodystart="3650" bodyend="3656"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a8f76c64c240a47883fc4d59bd8a83c33" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_grouped_state_inner_value</definition>
        <argsstring>(ml_grouped_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_grouped_state_inner_value</name>
        <param>
          <type><ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3658" column="13" bodyfile="src/ml_sequence.c" bodystart="3658" bodyend="3663"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1af71a03faadef24d4c06e21cd3a37943c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_grouped_state_inner_iter</definition>
        <argsstring>(ml_grouped_state_t *State, ml_value_t *Iter)</argsstring>
        <name>ml_grouped_state_inner_iter</name>
        <param>
          <type><ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3665" column="13" bodyfile="src/ml_sequence.c" bodystart="3665" bodyend="3671"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a4453ec4b8dd8f5a63285a98f5a280736" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLGroupedInnerT, ml_state_t *Caller, ml_value_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLGroupedInnerT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3673" column="13" bodyfile="src/ml_sequence.c" bodystart="3673" bodyend="3679"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a6fd3b01685854bac9991e4c57a8f3f98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;group&quot;, MLSequenceT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;group&quot;</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3681" column="1" bodyfile="src/ml_sequence.c" bodystart="3681" bodyend="3687"/>
      </memberdef>
      <memberdef kind="function" id="ml__sequence_8c_1a4b8976bf2a9f132156936545e7b67ed4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_sequence_init</definition>
        <argsstring>(stringmap_t *Globals)</argsstring>
        <name>ml_sequence_init</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Globals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_sequence.c" line="3689" column="6" bodyfile="src/ml_sequence.c" bodystart="3689" bodyend="3741"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ml_sequence.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_runtime.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;minilang.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ML_CATEGORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;sequence&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/******************************<sp/>Chained<sp/>******************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ML_METHOD_DECL(SoloMethod,<sp/></highlight><highlight class="stringliteral">&quot;-&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ML_METHOD_DECL(DuoMethod,<sp/></highlight><highlight class="stringliteral">&quot;=&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ML_METHOD_DECL(FilterSoloMethod,<sp/></highlight><highlight class="stringliteral">&quot;-&gt;?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ML_METHOD_DECL(FilterDuoMethod,<sp/></highlight><highlight class="stringliteral">&quot;=&gt;?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ML_METHOD_DECL(SoloApplyMethod,<sp/></highlight><highlight class="stringliteral">&quot;-&gt;!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ML_METHOD_DECL(FilterSoloApplyMethod,<sp/></highlight><highlight class="stringliteral">&quot;-&gt;!?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ML_METHOD_DECL(ApplyMethod,<sp/></highlight><highlight class="stringliteral">&quot;!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ML_METHOD_DECL(WhileSoloMethod,<sp/></highlight><highlight class="stringliteral">&quot;-&gt;|&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ML_METHOD_DECL(WhileDuoMethod,<sp/></highlight><highlight class="stringliteral">&quot;=&gt;|&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ML_METHOD_DECL(Precount,<sp/></highlight><highlight class="stringliteral">&quot;precount&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="structml__chained__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__chained__state__t" kindref="compound">ml_chained_state_t</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Current;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}<sp/><ref refid="structml__chained__state__t" kindref="compound">ml_chained_state_t</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_chained_state_value(<ref refid="structml__chained__state__t" kindref="compound">ml_chained_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_chained_state_filter(<ref refid="structml__chained__state__t" kindref="compound">ml_chained_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Entry<sp/>=<sp/>State-&gt;Current;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Entry[0])<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State-&gt;Value);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Current<sp/>=<sp/>Entry<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>Entry[0];</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function<sp/>==<sp/>FilterSoloMethod)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function<sp/>=<sp/>Entry[1];</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Function)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;StateError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>value<sp/>function<sp/>for<sp/>chain&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Current<sp/>=<sp/>Entry<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_chained_state_filter;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>1,<sp/>&amp;State-&gt;Value);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_chained_state_value(<ref refid="structml__chained__state__t" kindref="compound">ml_chained_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Entry<sp/>=<sp/>State-&gt;Current;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Entry[0])<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Current<sp/>=<sp/>Entry<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>Entry[0];</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function<sp/>==<sp/>FilterSoloMethod)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function<sp/>=<sp/>Entry[1];</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Function)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;StateError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>value<sp/>function<sp/>for<sp/>chain&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Current<sp/>=<sp/>Entry<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_chained_state_filter;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>1,<sp/>&amp;State-&gt;Value);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="structml__chained__function__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Entries[];</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}<sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_chained_function_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__state__t" kindref="compound">ml_chained_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__chained__state__t" kindref="compound">ml_chained_state_t</ref>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_chained_state_value;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Current<sp/>=<sp/>Chained-&gt;Entries<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Chained-&gt;Entries[0],<sp/>Count,<sp/>Args);</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_chained(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Functions);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">ML_FUNCTION(MLChained)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//@chained</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//&lt;Base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn/1,...,Fn/n:function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//&gt;chained</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>chained<sp/>function<sp/>or<sp/>sequence<sp/>with<sp/>base<sp/>:mini:`Base`<sp/>and<sp/>additional<sp/>functions<sp/>or<sp/>filters<sp/>:mini:`Fn/1,<sp/>...,<sp/>Fn/n`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>F<sp/>:=<sp/>chained(fun(X)<sp/>X<sp/>+<sp/>1,<sp/>fun(X)<sp/>X<sp/>^<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>F(10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_chained(Count,<sp/>Args);</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">ML_TYPE(MLChainedT,<sp/>(MLFunctionT,<sp/>MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;chained&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>chained<sp/>function<sp/>or<sp/>sequence,<sp/>consisting<sp/>of<sp/>a<sp/>base<sp/>function<sp/>or<sp/>sequence<sp/>and<sp/>any<sp/>number<sp/>of<sp/>additional<sp/>functions<sp/>or<sp/>filters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>used<sp/>as<sp/>a<sp/>function<sp/>or<sp/>sequence,<sp/>the<sp/>base<sp/>is<sp/>used<sp/>to<sp/>produce<sp/>an<sp/>initial<sp/>result,<sp/>then<sp/>the<sp/>additional<sp/>functions<sp/>are<sp/>applied<sp/>in<sp/>turn<sp/>to<sp/>the<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Filters<sp/>do<sp/>not<sp/>affect<sp/>the<sp/>result<sp/>but<sp/>will<sp/>shortcut<sp/>a<sp/>function<sp/>call<sp/>or<sp/>skip<sp/>an<sp/>iteration<sp/>if<sp/>:mini:`nil`<sp/>is<sp/>returned.<sp/>I.e.<sp/>filters<sp/>remove<sp/>values<sp/>from<sp/>a<sp/>sequence<sp/>that<sp/>fail<sp/>a<sp/>condition<sp/>without<sp/>affecting<sp/>the<sp/>values<sp/>that<sp/>pass.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_chained_function_call,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLChained</highlight></codeline>
<codeline lineno="101"><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_chained(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Functions)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Functions[0];</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>Count<sp/>+<sp/>1,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>MLChainedT;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>Chained-&gt;Entries[I]<sp/>=<sp/>*Functions++;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_chainedv(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>Count<sp/>+<sp/>1,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>MLChainedT;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>Args;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>Count);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>Chained-&gt;Entries[I]<sp/>=<sp/>va_arg(Args,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="structml__chained__iterator__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iterator;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Current,<sp/>**Entries;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Values[4];</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}<sp/><ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">ML_TYPE(MLChainedStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;chained-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLChainedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(State-&gt;Values[0]);</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLChainedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(State-&gt;Values[1]);</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_chained_iterator_next(<ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_chained_iterator_continue(<ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref><sp/>*State);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_chained_iterator_filter(<ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_chained_iterator_next;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Current<sp/>=<sp/>State-&gt;Entries;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iterator);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_chained_iterator_continue(State);</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_chained_iterator_while(<ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>MLNil);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_chained_iterator_continue(State);</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_chained_iterator_value(<ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[1]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[2]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_chained_iterator_continue(State);</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_chained_iterator_duo_key(<ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[2]<sp/>=<sp/>State-&gt;Values[1];</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[1]<sp/>=<sp/>State-&gt;Values[0];</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Entry<sp/>=<sp/>State-&gt;Current;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>Entry[0];</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Function)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;StateError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>value<sp/>function<sp/>for<sp/>chain&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Current<sp/>=<sp/>Entry<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_chained_iterator_value;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>2,<sp/>State-&gt;Values<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_chained_iterator_continue(<ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Entry<sp/>=<sp/>State-&gt;Current;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>Entry[0];</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Function)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function<sp/>==<sp/>SoloMethod)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function<sp/>=<sp/>Entry[1];</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Function)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;StateError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>value<sp/>function<sp/>for<sp/>chain&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Current<sp/>=<sp/>Entry<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_chained_iterator_value;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>1,<sp/>State-&gt;Values<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function<sp/>==<sp/>DuoMethod)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function<sp/>=<sp/>Entry[1];</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Function)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;StateError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>value<sp/>function<sp/>for<sp/>chain&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Current<sp/>=<sp/>Entry<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_chained_iterator_duo_key;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>2,<sp/>State-&gt;Values);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function<sp/>==<sp/>FilterSoloMethod)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function<sp/>=<sp/>Entry[1];</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Function)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;StateError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>value<sp/>function<sp/>for<sp/>chain&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Current<sp/>=<sp/>Entry<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_chained_iterator_filter;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>1,<sp/>State-&gt;Values<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function<sp/>==<sp/>FilterDuoMethod)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function<sp/>=<sp/>Entry[1];</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Function)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;StateError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>value<sp/>function<sp/>for<sp/>chain&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Current<sp/>=<sp/>Entry<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_chained_iterator_filter;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>2,<sp/>State-&gt;Values);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function<sp/>==<sp/>WhileSoloMethod)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function<sp/>=<sp/>Entry[1];</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Function)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;StateError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>value<sp/>function<sp/>for<sp/>chain&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Current<sp/>=<sp/>Entry<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_chained_iterator_while;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>1,<sp/>State-&gt;Values<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function<sp/>==<sp/>WhileDuoMethod)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function<sp/>=<sp/>Entry[1];</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Function)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;StateError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>value<sp/>function<sp/>for<sp/>chain&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Current<sp/>=<sp/>Entry<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_chained_iterator_while;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>2,<sp/>State-&gt;Values);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function<sp/>==<sp/>SoloApplyMethod)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function<sp/>=<sp/>Entry[1];</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Function)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;StateError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>value<sp/>function<sp/>for<sp/>chain&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Current<sp/>=<sp/>Entry<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_chained_iterator_value;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Values[3]<sp/>=<sp/>State-&gt;Values[1];</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Values[2]<sp/>=<sp/>Function;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>ApplyMethod,<sp/>2,<sp/>State-&gt;Values<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function<sp/>==<sp/>FilterSoloApplyMethod)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function<sp/>=<sp/>Entry[1];</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Function)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;StateError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>value<sp/>function<sp/>for<sp/>chain&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Current<sp/>=<sp/>Entry<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_chained_iterator_filter;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Values[3]<sp/>=<sp/>State-&gt;Values[1];</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Values[2]<sp/>=<sp/>Function;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>ApplyMethod,<sp/>2,<sp/>State-&gt;Values<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Current<sp/>=<sp/>Entry<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_chained_iterator_value;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>1,<sp/>State-&gt;Values<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_chained_iterator_key(<ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_chained_iterator_value;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iterator);</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_chained_iterator_next(<ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Iter))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Iter);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iter<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Iter);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_chained_iterator_key;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Current<sp/>=<sp/>State-&gt;Entries;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iterator<sp/>=<sp/>Iter);</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLChainedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_chained_iterator_next;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iterator);</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLChainedT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__chained__iterator__t" kindref="compound">ml_chained_iterator_t</ref>);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/><sp/>MLChainedStateT;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_chained_iterator_next;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Entries<sp/>=<sp/>Chained-&gt;Entries<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Chained-&gt;Entries[0]);</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;precount&quot;</highlight><highlight class="normal">,<sp/>MLChainedT)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>Chained-&gt;Entries[0];</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>Precount,<sp/>1,<sp/>Args);</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&gt;&quot;</highlight><highlight class="normal">,<sp/>MLFunctionT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="comment">//&lt;Base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment">//&lt;Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment">//&gt;chained</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>chained<sp/>function<sp/>equivalent<sp/>to<sp/>:mini:`Function(Base(...))`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>F<sp/>:=<sp/>:upper<sp/>-&gt;<sp/>(3<sp/>*<sp/>_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>F(&quot;hello&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>F(&quot;cake&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>3,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>MLChainedT;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[0]<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[1]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Chained-&gt;Entries[2]<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&gt;&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">//&lt;Base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="comment">//&lt;F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>chained<sp/>sequence<sp/>equivalent<sp/>to<sp/>:mini:`(K/1,<sp/>F(V/1)),<sp/>...,<sp/>(K/n,<sp/>F(V/n))`<sp/>where<sp/>:mini:`K/i`<sp/>and<sp/>:mini:`V/i`<sp/>are<sp/>the<sp/>keys<sp/>and<sp/>values<sp/>produced<sp/>by<sp/>:mini:`Base`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>3,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>MLChainedT;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[0]<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[1]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Chained-&gt;Entries[2]<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&gt;&quot;</highlight><highlight class="normal">,<sp/>MLChainedT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Base<sp/>=<sp/>(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Base-&gt;Entries[N])<sp/>++N;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>N<sp/>+<sp/>2,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>MLChainedT;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>Chained-&gt;Entries[I]<sp/>=<sp/>Base-&gt;Entries[I];</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[N]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;=&gt;&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">//&lt;Base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">//&lt;F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>chained<sp/>sequence<sp/>equivalent<sp/>to<sp/>:mini:`(K/1,<sp/>F(K/1,<sp/>V/1)),<sp/>...,<sp/>(K/n,<sp/>F(K/n,<sp/>V/n))`<sp/>where<sp/>:mini:`K/i`<sp/>and<sp/>:mini:`V/i`<sp/>are<sp/>the<sp/>keys<sp/>and<sp/>values<sp/>produced<sp/>by<sp/>:mini:`Base`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>map(&quot;cake&quot;<sp/>=&gt;<sp/>*)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>5,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>MLChainedT;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[0]<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[1]<sp/>=<sp/>DuoMethod;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[2]<sp/>=<sp/>ml_integer(1);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[3]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Chained-&gt;Entries[4]<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;=&gt;&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT,<sp/>MLFunctionT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">//&lt;Base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">//&lt;F/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">//&lt;F/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>chained<sp/>sequence<sp/>equivalent<sp/>to<sp/>:mini:`(F/1(K/1,<sp/>V/1),<sp/>F/2(K/1,<sp/>V/1)),<sp/>...,<sp/>(F/1(K/n,<sp/>V/n),<sp/>F/2(K/n,<sp/>V/n))`<sp/>where<sp/>:mini:`K/i`<sp/>and<sp/>:mini:`V/i`<sp/>are<sp/>the<sp/>keys<sp/>and<sp/>values<sp/>produced<sp/>by<sp/>:mini:`Base`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>map(&quot;cake&quot;<sp/>=&gt;<sp/>(tuple,<sp/>*))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>5,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>MLChainedT;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[0]<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[1]<sp/>=<sp/>DuoMethod;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[2]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[3]<sp/>=<sp/>Args[2];</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Chained-&gt;Entries[4]<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;=&gt;&quot;</highlight><highlight class="normal">,<sp/>MLChainedT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Base<sp/>=<sp/>(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Base-&gt;Entries[N])<sp/>++N;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>N<sp/>+<sp/>4,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>MLChainedT;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>Chained-&gt;Entries[I]<sp/>=<sp/>Base-&gt;Entries[I];</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[N]<sp/>=<sp/>DuoMethod;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[N<sp/>+<sp/>1]<sp/>=<sp/>ml_integer(1);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[N<sp/>+<sp/>2]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;=&gt;&quot;</highlight><highlight class="normal">,<sp/>MLChainedT,<sp/>MLFunctionT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Base<sp/>=<sp/>(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Base-&gt;Entries[N])<sp/>++N;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>N<sp/>+<sp/>4,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>MLChainedT;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>Chained-&gt;Entries[I]<sp/>=<sp/>Base-&gt;Entries[I];</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[N]<sp/>=<sp/>DuoMethod;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[N<sp/>+<sp/>1]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[N<sp/>+<sp/>2]<sp/>=<sp/>Args[2];</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&gt;!&quot;</highlight><highlight class="normal">,<sp/>MLFunctionT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="comment">//&lt;Base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">//&lt;F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">//&gt;function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>chained<sp/>function<sp/>equivalent<sp/>to<sp/>:mini:`F<sp/>!<sp/>Base(...)`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>F<sp/>:=<sp/>list<sp/>-&gt;!<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>F(&quot;cat&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Partial<sp/>=<sp/>ml_partial_function(ApplyMethod,<sp/>1);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_partial_function_set(Partial,<sp/>0,<sp/>Args[1]);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>3,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>MLChainedT;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[0]<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[1]<sp/>=<sp/>Partial;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Chained-&gt;Entries[2]<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&gt;!&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">//&lt;Base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">//&lt;F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>chained<sp/>sequence<sp/>equivalent<sp/>to<sp/>:mini:`(K/1,<sp/>F<sp/>!<sp/>V/1),<sp/>...,<sp/>(K/n,<sp/>F<sp/>!<sp/>V/n)`<sp/>where<sp/>:mini:`K/i`<sp/>and<sp/>:mini:`V/i`<sp/>are<sp/>the<sp/>keys<sp/>and<sp/>values<sp/>produced<sp/>by<sp/>:mini:`Base`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>map({&quot;A&quot;<sp/>is<sp/>[1,<sp/>2],<sp/>&quot;B&quot;<sp/>is<sp/>[3,<sp/>4],<sp/>&quot;C&quot;<sp/>is<sp/>[5,<sp/>6]}<sp/>-&gt;!<sp/>+)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>4,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>MLChainedT;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[0]<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[1]<sp/>=<sp/>SoloApplyMethod;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[2]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Chained-&gt;Entries[3]<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&gt;!&quot;</highlight><highlight class="normal">,<sp/>MLChainedT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Base<sp/>=<sp/>(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Base-&gt;Entries[N])<sp/>++N;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>N<sp/>+<sp/>3,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>MLChainedT;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>Chained-&gt;Entries[I]<sp/>=<sp/>Base-&gt;Entries[I];</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[N]<sp/>=<sp/>SoloApplyMethod;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[N<sp/>+<sp/>1]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_generic_sequence(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Base,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Sequence)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*TArgs[3];</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_find_generic_parent(ml_typeof(Sequence),<sp/>MLSequenceT,<sp/>3,<sp/>TArgs)<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TArgs[1]<sp/>==<sp/>MLAnyT<sp/>&amp;&amp;<sp/>TArgs[2]<sp/>==<sp/>MLAnyT)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Base;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TArgs[0]<sp/>=<sp/>Base;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_generic_type(3,<sp/>TArgs);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Base;</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&gt;?&quot;</highlight><highlight class="normal">,<sp/>MLFunctionT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="comment">//&lt;Base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="comment">//&lt;F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="comment">//&gt;function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>chained<sp/>function<sp/>equivalent<sp/>to<sp/>:mini:`Base(...){F(it)}`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>F<sp/>:=<sp/>1<sp/>-&gt;?<sp/>(2<sp/>|<sp/>_)<sp/>-&gt;<sp/>(_<sp/>/<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(1<sp/>..<sp/>10<sp/>-&gt;<sp/>F)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>4,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>ml_generic_sequence(MLChainedT,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[0]<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[1]<sp/>=<sp/>FilterSoloMethod;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[2]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Chained-&gt;Entries[3]<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&gt;?&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">//&lt;Base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">//&lt;F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>chained<sp/>sequence<sp/>equivalent<sp/>to<sp/>:mini:`(K/j,<sp/>V/j),<sp/>...`<sp/>where<sp/>:mini:`K/i`<sp/>and<sp/>:mini:`V/i`<sp/>are<sp/>the<sp/>keys<sp/>and<sp/>values<sp/>produced<sp/>by<sp/>:mini:`Base`<sp/>and<sp/>:mini:`F(V/j)`<sp/>returns<sp/>non-:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(1<sp/>..<sp/>10<sp/>-&gt;?<sp/>(2<sp/>|<sp/>_))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>4,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>ml_generic_sequence(MLChainedT,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[0]<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[1]<sp/>=<sp/>FilterSoloMethod;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[2]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Chained-&gt;Entries[3]<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&gt;?&quot;</highlight><highlight class="normal">,<sp/>MLChainedT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Base<sp/>=<sp/>(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Base-&gt;Entries[N])<sp/>++N;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>N<sp/>+<sp/>3,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>MLChainedT;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>Chained-&gt;Entries[I]<sp/>=<sp/>Base-&gt;Entries[I];</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[N]<sp/>=<sp/>FilterSoloMethod;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[N<sp/>+<sp/>1]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;=&gt;?&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="comment">//&lt;Base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="comment">//&lt;F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>chained<sp/>sequence<sp/>equivalent<sp/>to<sp/>:mini:`(K/j,<sp/>V/j),<sp/>...`<sp/>where<sp/>:mini:`K/i`<sp/>and<sp/>:mini:`V/i`<sp/>are<sp/>the<sp/>keys<sp/>and<sp/>values<sp/>produced<sp/>by<sp/>:mini:`Base`<sp/>and<sp/>:mini:`F(K/j,<sp/>V/j)`<sp/>returns<sp/>non-:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>M<sp/>:=<sp/>map(1<sp/>..<sp/>10<sp/>-&gt;<sp/>fun(X)<sp/>X<sp/>^<sp/>2<sp/>%<sp/>10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>map(M<sp/>=&gt;?<sp/>!=)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>4,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>ml_generic_sequence(MLChainedT,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[0]<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[1]<sp/>=<sp/>FilterDuoMethod;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[2]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Chained-&gt;Entries[3]<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;=&gt;?&quot;</highlight><highlight class="normal">,<sp/>MLChainedT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Base<sp/>=<sp/>(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Base-&gt;Entries[N])<sp/>++N;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>N<sp/>+<sp/>3,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>ml_generic_sequence(MLChainedT,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>Chained-&gt;Entries[I]<sp/>=<sp/>Base-&gt;Entries[I];</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[N]<sp/>=<sp/>FilterDuoMethod;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[N<sp/>+<sp/>1]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&gt;|&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="comment">//&lt;Base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="comment">//&lt;F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>chained<sp/>sequence<sp/>equivalent<sp/>to<sp/>:mini:`(K/j,<sp/>V/j),<sp/>...`<sp/>where<sp/>:mini:`K/i`<sp/>and<sp/>:mini:`V/i`<sp/>are<sp/>the<sp/>keys<sp/>and<sp/>values<sp/>produced<sp/>by<sp/>:mini:`Base`<sp/>while<sp/>:mini:`F(V/j)`<sp/>returns<sp/>non-:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(1<sp/>..<sp/>10<sp/>-&gt;?<sp/>(5<sp/>!|<sp/>_))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(1<sp/>..<sp/>10<sp/>-&gt;|<sp/>(5<sp/>!|<sp/>_))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>4,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>ml_generic_sequence(MLChainedT,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[0]<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[1]<sp/>=<sp/>WhileSoloMethod;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[2]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Chained-&gt;Entries[3]<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&gt;|&quot;</highlight><highlight class="normal">,<sp/>MLChainedT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Base<sp/>=<sp/>(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Base-&gt;Entries[N])<sp/>++N;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>N<sp/>+<sp/>3,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>MLChainedT;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>Chained-&gt;Entries[I]<sp/>=<sp/>Base-&gt;Entries[I];</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[N]<sp/>=<sp/>WhileSoloMethod;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[N<sp/>+<sp/>1]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;=&gt;|&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="comment">//&lt;Base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="comment">//&lt;F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>chained<sp/>sequence<sp/>equivalent<sp/>to<sp/>:mini:`(K/j,<sp/>V/j),<sp/>...`<sp/>where<sp/>:mini:`K/i`<sp/>and<sp/>:mini:`V/i`<sp/>are<sp/>the<sp/>keys<sp/>and<sp/>values<sp/>produced<sp/>by<sp/>:mini:`Base`<sp/>while<sp/>:mini:`F(K/j,<sp/>V/j)`<sp/>returns<sp/>non-:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>M<sp/>:=<sp/>map(1<sp/>..<sp/>10<sp/>-&gt;<sp/>fun(X)<sp/>X<sp/>^<sp/>2<sp/>%<sp/>10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>map(M<sp/>=&gt;?<sp/>fun(K,<sp/>V)<sp/>K<sp/>+<sp/>V<sp/>&lt;<sp/>15)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>map(M<sp/>=&gt;|<sp/>fun(K,<sp/>V)<sp/>K<sp/>+<sp/>V<sp/>&lt;<sp/>15)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>4,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>ml_generic_sequence(MLChainedT,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[0]<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[1]<sp/>=<sp/>WhileDuoMethod;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[2]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Chained-&gt;Entries[3]<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;=&gt;|&quot;</highlight><highlight class="normal">,<sp/>MLChainedT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Base<sp/>=<sp/>(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Base-&gt;Entries[N])<sp/>++N;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>N<sp/>+<sp/>3,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>ml_generic_sequence(MLChainedT,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>Chained-&gt;Entries[I]<sp/>=<sp/>Base-&gt;Entries[I];</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[N]<sp/>=<sp/>WhileDuoMethod;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[N<sp/>+<sp/>1]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&gt;!?&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="comment">//&lt;Base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="comment">//&lt;F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>chained<sp/>sequence<sp/>equivalent<sp/>to<sp/>:mini:`(K/j,<sp/>V/j),<sp/>...`<sp/>where<sp/>:mini:`K/i`<sp/>and<sp/>:mini:`V/i`<sp/>are<sp/>the<sp/>keys<sp/>and<sp/>values<sp/>produced<sp/>by<sp/>:mini:`Base`<sp/>and<sp/>:mini:`F<sp/>!<sp/>V/j`<sp/>returns<sp/>non-:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>map({&quot;A&quot;<sp/>is<sp/>[1,<sp/>2],<sp/>&quot;B&quot;<sp/>is<sp/>[3,<sp/>3],<sp/>&quot;C&quot;<sp/>is<sp/>[5,<sp/>6]}<sp/>-&gt;!?<sp/>!=)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>4,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>ml_generic_sequence(MLChainedT,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[0]<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[1]<sp/>=<sp/>FilterSoloApplyMethod;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[2]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Chained-&gt;Entries[3]<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&gt;!?&quot;</highlight><highlight class="normal">,<sp/>MLChainedT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Base<sp/>=<sp/>(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Base-&gt;Entries[N])<sp/>++N;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>N<sp/>+<sp/>3,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>ml_generic_sequence(MLChainedT,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>Chained-&gt;Entries[I]<sp/>=<sp/>Base-&gt;Entries[I];</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[N]<sp/>=<sp/>FilterSoloApplyMethod;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[N<sp/>+<sp/>1]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*IndexMethod;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;[]&quot;</highlight><highlight class="normal">,<sp/>MLChainedT)<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Partial<sp/>=<sp/>ml_partial_function(IndexMethod,<sp/>Count<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ml_partial_function_set(Partial,<sp/>I,<sp/>Args[I]);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Base<sp/>=<sp/>(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Base-&gt;Entries[N])<sp/>++N;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>N<sp/>+<sp/>2,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>MLChainedT;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>Chained-&gt;Entries[I]<sp/>=<sp/>Base-&gt;Entries[I];</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[N]<sp/>=<sp/>Partial;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,<sp/>MLChainedT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Base<sp/>=<sp/>(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Base-&gt;Entries[N])<sp/>++N;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref><sp/>*Chained<sp/>=<sp/>xnew(<ref refid="structml__chained__function__t" kindref="compound">ml_chained_function_t</ref>,<sp/>N<sp/>+<sp/>2,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Type<sp/>=<sp/>MLChainedT;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>Chained-&gt;Entries[I]<sp/>=<sp/>Base-&gt;Entries[I];</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>Chained-&gt;Entries[N]<sp/>=<sp/>ml_symbol(ml_string_value(Args[1]));</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Chained;</highlight></codeline>
<codeline lineno="634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment">/******************************<sp/>Doubled<sp/>******************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638" refid="structml__doubled__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Sequence,<sp/>*ValueFn;</highlight></codeline>
<codeline lineno="641"><highlight class="normal">}<sp/><ref refid="structml__doubled__t" kindref="compound">ml_doubled_t</ref>;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal">ML_TYPE(MLDoubledT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;doubled&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646" refid="structml__double__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref><sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iterator1;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iterator2;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[];</highlight></codeline>
<codeline lineno="652"><highlight class="normal">}<sp/><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref>;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal">ML_TYPE(MLDoubledIteratorStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;doubled-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_double_iter0_next(<ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_double_iter_next(<ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_double_iter0_next;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iterator1);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iterator2<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="667"><highlight class="normal">}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_double_function_call(<ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_double_iter_next;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Value);</highlight></codeline>
<codeline lineno="673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_double_value0(<ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_double_function_call;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>State-&gt;Function;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_double_iter0_next(<ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_double_value0;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iterator1<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLDoubledT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__doubled__t" kindref="compound">ml_doubled_t</ref><sp/>*Doubled)<sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref>,<sp/>1,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLDoubledIteratorStateT;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_double_iter0_next;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Function<sp/>=<sp/>Doubled-&gt;ValueFn;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Doubled-&gt;Sequence);</highlight></codeline>
<codeline lineno="699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLDoubledIteratorStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key(Caller,<sp/>State-&gt;Iterator2);</highlight></codeline>
<codeline lineno="703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLDoubledIteratorStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value(Caller,<sp/>State-&gt;Iterator2);</highlight></codeline>
<codeline lineno="707"><highlight class="normal">}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLDoubledIteratorStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_double_iter_next;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iterator2);</highlight></codeline>
<codeline lineno="714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_doubled(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Sequence,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__doubled__t" kindref="compound">ml_doubled_t</ref><sp/>*Doubled<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__doubled__t" kindref="compound">ml_doubled_t</ref>);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>Doubled-&gt;Type<sp/>=<sp/>MLDoubledT;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>Doubled-&gt;Sequence<sp/>=<sp/>Sequence;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>Doubled-&gt;ValueFn<sp/>=<sp/>Function;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Doubled;</highlight></codeline>
<codeline lineno="722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&gt;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="comment">//&lt;Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>sequence<sp/>that<sp/>generates<sp/>the<sp/>keys<sp/>and<sp/>values<sp/>from<sp/>:mini:`Function(Value)`<sp/>for<sp/>each<sp/>value<sp/>generated<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(1<sp/>..<sp/>5<sp/>-&gt;&gt;<sp/>(1<sp/>..<sp/>_))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_doubled(Args[0],<sp/>Args[1]);</highlight></codeline>
<codeline lineno="731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;^&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="comment">//&lt;Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>sequence<sp/>that<sp/>generates<sp/>the<sp/>keys<sp/>and<sp/>values<sp/>from<sp/>:mini:`Function(Value)`<sp/>for<sp/>each<sp/>value<sp/>generated<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="comment">//<sp/>..<sp/>deprecated::<sp/>2.5.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Use<sp/>:mini:`-&gt;&gt;`<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(1<sp/>..<sp/>5<sp/>^<sp/>(1<sp/>..<sp/>_))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_doubled(Args[0],<sp/>Args[1]);</highlight></codeline>
<codeline lineno="744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal">ML_TYPE(MLDoubled2T,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;doubled&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal">ML_TYPE(MLDoubled2StateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;doubled-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_double2_iter0_next(<ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_double2_iter_next(<ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_double2_iter0_next;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iterator1);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iterator2<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="762"><highlight class="normal">}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_double2_function_call(<ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_double2_iter_next;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Value);</highlight></codeline>
<codeline lineno="768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_double2_value0(<ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_double2_function_call;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>State-&gt;Function;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_double2_key0(<ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_double2_value0;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iterator1);</highlight></codeline>
<codeline lineno="785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_double2_iter0_next(<ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_double2_key0;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iterator1<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLDoubled2T,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__doubled__t" kindref="compound">ml_doubled_t</ref><sp/>*Doubled)<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref>,<sp/>2,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLDoubled2StateT;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_double2_iter0_next;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Function<sp/>=<sp/>Doubled-&gt;ValueFn;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Doubled-&gt;Sequence);</highlight></codeline>
<codeline lineno="802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLDoubled2StateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key(Caller,<sp/>State-&gt;Iterator2);</highlight></codeline>
<codeline lineno="806"><highlight class="normal">}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLDoubled2StateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value(Caller,<sp/>State-&gt;Iterator2);</highlight></codeline>
<codeline lineno="810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLDoubled2StateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__double__state__t" kindref="compound">ml_double_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_double2_iter_next;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iterator2);</highlight></codeline>
<codeline lineno="817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;=&gt;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="comment">//&lt;Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>sequence<sp/>that<sp/>generates<sp/>the<sp/>keys<sp/>and<sp/>values<sp/>from<sp/>:mini:`Function(Key,<sp/>Value)`<sp/>for<sp/>each<sp/>key<sp/>and<sp/>value<sp/>generated<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(&quot;cake&quot;<sp/>=&gt;&gt;<sp/>*)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__doubled__t" kindref="compound">ml_doubled_t</ref><sp/>*Doubled<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__doubled__t" kindref="compound">ml_doubled_t</ref>);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>Doubled-&gt;Type<sp/>=<sp/>MLDoubled2T;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>Doubled-&gt;Sequence<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>Doubled-&gt;ValueFn<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Doubled;</highlight></codeline>
<codeline lineno="830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="comment">/******************************<sp/>All<sp/>******************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>all_iterate(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>all_iter_value(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)all_iterate;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="842"><highlight class="normal">}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>all_iterate(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>MLSome);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)all_iter_value;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal">ML_FUNCTIONX(All)<sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="comment">//&gt;some<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`nil`<sp/>if<sp/>:mini:`nil`<sp/>is<sp/>produced<sp/>by<sp/>:mini:`Sequence`.<sp/>Otherwise<sp/>returns<sp/>:mini:`some`.<sp/>If<sp/>:mini:`Sequence`<sp/>is<sp/>empty,<sp/>then<sp/>:mini:`some`<sp/>is<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>all([1,<sp/>2,<sp/>3,<sp/>4])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>all([1,<sp/>2,<sp/>nil,<sp/>4])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>all([])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref>);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)all_iterate;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>ml_chained(Count,<sp/>Args));</highlight></codeline>
<codeline lineno="865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="comment">/******************************<sp/>Some<sp/>******************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>some_iterate(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>some_value(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>!=<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)some_iterate;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>some_iterate(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)some_value;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_some_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Some,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>Args[I]<sp/>=<sp/>ml_deref(Args[I]);</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref>);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)some_iterate;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>ml_chained(Count,<sp/>Args));</highlight></codeline>
<codeline lineno="895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="898"><highlight class="comment">ML_FUNCTIONX(Some)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="comment">//&lt;Sequence:sequence</highlight></codeline>
<codeline lineno="900"><highlight class="comment">//&gt;any<sp/>|<sp/>nil</highlight></codeline>
<codeline lineno="901"><highlight class="comment">//<sp/>Returns<sp/>the<sp/>first<sp/>value<sp/>produced<sp/>by<sp/>:mini:`Sequence`<sp/>that<sp/>is<sp/>not<sp/>:mini:`nil`.</highlight></codeline>
<codeline lineno="902"><highlight class="comment">//$=<sp/>some([nil,<sp/>nil,<sp/>&quot;X&quot;,<sp/>nil])</highlight></codeline>
<codeline lineno="903"><highlight class="comment">//$=<sp/>some([nil,<sp/>nil,<sp/>nil,<sp/>nil])</highlight></codeline>
<codeline lineno="904"><highlight class="comment">}</highlight></codeline>
<codeline lineno="905"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="comment">/******************************<sp/>First<sp/>******************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>first_iterate(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value(State-&gt;Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="913"><highlight class="normal">}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT)<sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="comment">//&gt;any<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>first<sp/>value<sp/>produced<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>first(&quot;cake&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>first([])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref>);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;run<sp/>=<sp/>first_iterate;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate(State,<sp/>ml_chained(Count,<sp/>Args));</highlight></codeline>
<codeline lineno="928"><highlight class="normal">}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>first2_iter_value(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Tuple<sp/>=<sp/>ml_tuplev(2,<sp/>State-&gt;Values[0],<sp/>Value);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Tuple);</highlight></codeline>
<codeline lineno="934"><highlight class="normal">}</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>first2_iter_key(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)first2_iter_value;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="941"><highlight class="normal">}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>first2_iterate(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)first2_iter_key;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="948"><highlight class="normal">}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;first2&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT)<sp/>{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="comment">//&gt;tuple(any,<sp/>any)<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>first<sp/>key<sp/>and<sp/>value<sp/>produced<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>first2(&quot;cake&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>first2([])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref>,<sp/>1,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)first2_iterate;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>ml_chained(Count,<sp/>Args));</highlight></codeline>
<codeline lineno="963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>last_iterate(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>last_value(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)last_iterate;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="972"><highlight class="normal">}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>last_iterate(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State-&gt;Values[0]);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)last_value;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="979"><highlight class="normal">}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT)<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="comment">//&gt;any<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>last<sp/>value<sp/>produced<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>last(&quot;cake&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>last([])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref>,<sp/>1,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)last_iterate;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[0]<sp/>=<sp/>MLNil;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>ml_chained(Count,<sp/>Args));</highlight></codeline>
<codeline lineno="995"><highlight class="normal">}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>last2_iterate(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>last2_value(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[1]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)last2_iterate;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>last2_key(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)last2_value;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>last2_iterate(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Values[0])<sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>ml_tuplen(2,<sp/>State-&gt;Values));</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>MLNil);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)last2_key;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;last2&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT)<sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="comment">//&gt;tuple(any,<sp/>any)<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>last<sp/>key<sp/>and<sp/>value<sp/>produced<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>last2(&quot;cake&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>last2([])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref>,<sp/>3,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)last2_iterate;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>ml_chained(Count,<sp/>Args));</highlight></codeline>
<codeline lineno="1039"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041" refid="structml__count__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__count__state__t" kindref="compound">ml_count_state_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Count;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal">}<sp/><ref refid="structml__count__state__t" kindref="compound">ml_count_state_t</ref>;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>count_iterate(<ref refid="structml__count__state__t" kindref="compound">ml_count_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>ml_integer(State-&gt;Count));</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>++State-&gt;Count;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1055"><highlight class="comment">ML_FUNCTION(Count)<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="comment">//@count</highlight></codeline>
<codeline lineno="1057"><highlight class="comment">//&lt;Sequence</highlight></codeline>
<codeline lineno="1058"><highlight class="comment">//&gt;integer</highlight></codeline>
<codeline lineno="1059"><highlight class="comment">//<sp/>Returns<sp/>the<sp/>count<sp/>of<sp/>the<sp/>values<sp/>produced<sp/>by<sp/>:mini:`Sequence`.<sp/>For<sp/>some<sp/>types<sp/>of<sp/>sequences<sp/>(e.g.<sp/>:mini:`list`,<sp/>:mini:`map`,<sp/>etc),<sp/>the<sp/>count<sp/>is<sp/>simply<sp/>retrieved.<sp/>For<sp/>all<sp/>other<sp/>types,<sp/>the<sp/>sequence<sp/>is<sp/>iterated<sp/>and<sp/>the<sp/>total<sp/>number<sp/>of<sp/>values<sp/>counted.</highlight></codeline>
<codeline lineno="1060"><highlight class="comment">//$=<sp/>count([1,<sp/>2,<sp/>3,<sp/>4])</highlight></codeline>
<codeline lineno="1061"><highlight class="comment">//$=<sp/>count(1<sp/>..<sp/>10<sp/>-&gt;?<sp/>(2<sp/>|<sp/>_))</highlight></codeline>
<codeline lineno="1062"><highlight class="comment"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1063"><highlight class="comment"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="1064"><highlight class="comment">}</highlight></codeline>
<codeline lineno="1065"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal">ML_METHODVX(</highlight><highlight class="stringliteral">&quot;count&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT)<sp/>{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__count__state__t" kindref="compound">ml_count_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__count__state__t" kindref="compound">ml_count_state_t</ref>);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)count_iterate;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>ml_chained(Count,<sp/>Args));</highlight></codeline>
<codeline lineno="1075"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;precount&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT)<sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082" refid="structml__count2__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__count2__state__t" kindref="compound">ml_count2_state_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Counts;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal">}<sp/><ref refid="structml__count2__state__t" kindref="compound">ml_count2_state_t</ref>;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>count2_iterate(<ref refid="structml__count2__state__t" kindref="compound">ml_count2_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>count2_value(<ref refid="structml__count2__state__t" kindref="compound">ml_count2_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>!=<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__map__node__t" kindref="compound">ml_map_node_t</ref><sp/>*Node<sp/>=<sp/>ml_map_slot(State-&gt;Counts,<sp/>Value);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Node-&gt;Value<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)count2_iterate;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>count2_iterate(<ref refid="structml__count2__state__t" kindref="compound">ml_count2_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_MAP_FOREACH(State-&gt;Counts,<sp/>Iter)<sp/>Iter-&gt;Value<sp/>=<sp/>ml_integer((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Iter-&gt;Value<sp/>-<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)0);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State-&gt;Counts);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)count2_value;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal">ML_FUNCTIONX(Count2)<sp/>{</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="comment">//&gt;map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>map<sp/>of<sp/>the<sp/>values<sp/>produced<sp/>by<sp/>:mini:`Sequence`<sp/>with<sp/>associated<sp/>counts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>count2(&quot;banana&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__count2__state__t" kindref="compound">ml_count2_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__count2__state__t" kindref="compound">ml_count2_state_t</ref>);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)count2_iterate;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Counts<sp/>=<sp/>ml_map();</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>ml_chained(Count,<sp/>Args));</highlight></codeline>
<codeline lineno="1124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="comment">/******************************<sp/>Find<sp/>******************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128" refid="structml__find__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[2];</highlight></codeline>
<codeline lineno="1132"><highlight class="normal">}<sp/><ref refid="structml__find__state__t" kindref="compound">ml_find_state_t</ref>;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>find_iterate(<ref refid="structml__find__state__t" kindref="compound">ml_find_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>find_compare(<ref refid="structml__find__state__t" kindref="compound">ml_find_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>!=<sp/>MLNil)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key(State-&gt;Base.Caller,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)find_iterate;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ML_METHOD_DECL(EqualMethod,<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>find_value(<ref refid="structml__find__state__t" kindref="compound">ml_find_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)find_compare;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>EqualMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>find_iterate(<ref refid="structml__find__state__t" kindref="compound">ml_find_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)find_value;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;find&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight><highlight class="comment">//&gt;any|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>first<sp/>key<sp/>generated<sp/>by<sp/>:mini:`Sequence`<sp/>with<sp/>correspding<sp/>value<sp/>:mini:`=<sp/>Value`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__find__state__t" kindref="compound">ml_find_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__find__state__t" kindref="compound">ml_find_state_t</ref>);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)find_iterate;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="1171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="comment">/******************************<sp/>Random<sp/>******************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175" refid="structml__random__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal">}<sp/><ref refid="structml__random__state__t" kindref="compound">ml_random_state_t</ref>;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>random_iterate(<ref refid="structml__random__state__t" kindref="compound">ml_random_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>random_value(<ref refid="structml__random__state__t" kindref="compound">ml_random_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)random_iterate;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>random_iterate(<ref refid="structml__random__state__t" kindref="compound">ml_random_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State-&gt;Value);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>++State-&gt;Index;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Divisor<sp/>=<sp/>RAND_MAX<sp/>/<sp/>Index;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Random;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>Random<sp/>=<sp/>random()<sp/>/<sp/>Divisor;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Random<sp/>&gt;=<sp/>Index);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Random)<sp/>{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)random_value;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Value);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal">ML_METHODVX(</highlight><highlight class="stringliteral">&quot;random&quot;</highlight><highlight class="normal">,<sp/>MLTypeT)<sp/>{</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Random<sp/>=<sp/>stringmap_search(Type-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;random&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Random)<sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>Random,<sp/>Count<sp/>-<sp/>1,<sp/>Args<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Args[0],<sp/>MLSequenceT))<sp/>{</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__random__state__t" kindref="compound">ml_random_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__random__state__t" kindref="compound">ml_random_state_t</ref>);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)random_iterate;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Value<sp/>=<sp/>MLNil;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>ml_chained(Count,<sp/>Args));</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Type<sp/>%s<sp/>does<sp/>not<sp/>export<sp/>random&quot;</highlight><highlight class="normal">,<sp/>Type-&gt;Name);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal">ML_METHODVX(</highlight><highlight class="stringliteral">&quot;random&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT)<sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="comment">//&gt;any<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>random<sp/>value<sp/>produced<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>random(&quot;cake&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>random([])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__random__state__t" kindref="compound">ml_random_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__random__state__t" kindref="compound">ml_random_state_t</ref>);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)random_iterate;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Value<sp/>=<sp/>MLNil;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>ml_chained(Count,<sp/>Args));</highlight></codeline>
<codeline lineno="1239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*LessMethod;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*GreaterMethod;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*AddMethod;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*MulMethod;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*MinMethod;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*MaxMethod;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduce_iter_next(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduce_call(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[1]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)reduce_iter_next;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduce_next_value(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>State-&gt;Values[0];</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[2]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)reduce_call;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>2,<sp/>State-&gt;Values<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduce_iter_next(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State-&gt;Values[1]);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)reduce_next_value;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduce_first_value(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[1]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)reduce_iter_next;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="1278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduce_iterate(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>MLNil);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)reduce_first_value;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal">ML_FUNCTIONX(Reduce)<sp/>{</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="comment">//&lt;Initial?:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence:sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn:function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="comment">//&gt;any<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Fn(Fn(<sp/>...<sp/>Fn(Initial,<sp/>V/1),<sp/>V/2)<sp/>...,<sp/>V/n)`<sp/>where<sp/>:mini:`V/i`<sp/>are<sp/>the<sp/>values<sp/>produced<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>:mini:`Initial`<sp/>is<sp/>omitted,<sp/>the<sp/>first<sp/>value<sp/>produced<sp/>by<sp/>:mini:`Sequence`<sp/>is<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>reduce(1<sp/>..<sp/>10,<sp/>+)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>reduce([],<sp/>1<sp/>..<sp/>10,<sp/>:put)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(1,<sp/>MLFunctionT);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref>,<sp/>3,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)reduce_iterate;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Values[0]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(1,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(2,<sp/>MLFunctionT);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref>,<sp/>3,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)reduce_iter_next;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Values[0]<sp/>=<sp/>Args[2];</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Values[1]<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Args[1]);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal">ML_FUNCTIONX(Min)<sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="comment">//&gt;any<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>smallest<sp/>value<sp/>(using<sp/>:mini:`:min`)<sp/>produced<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>min([1,<sp/>5,<sp/>2,<sp/>10,<sp/>6])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref>,<sp/>3,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)reduce_iterate;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[0]<sp/>=<sp/>MinMethod;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>ml_chained(Count,<sp/>Args));</highlight></codeline>
<codeline lineno="1332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal">ML_FUNCTIONX(Max)<sp/>{</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight><highlight class="comment">//&gt;any<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>largest<sp/>value<sp/>(using<sp/>:mini:`:max`)<sp/>produced<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>max([1,<sp/>5,<sp/>2,<sp/>10,<sp/>6])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref>,<sp/>3,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)reduce_iterate;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[0]<sp/>=<sp/>MaxMethod;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>ml_chained(Count,<sp/>Args));</highlight></codeline>
<codeline lineno="1347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal">ML_FUNCTIONX(Sum)<sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight><highlight class="comment">//&gt;any<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>sum<sp/>of<sp/>the<sp/>values<sp/>(using<sp/>:mini:`+`)<sp/>produced<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>sum([1,<sp/>5,<sp/>2,<sp/>10,<sp/>6])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref>,<sp/>3,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)reduce_iterate;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[0]<sp/>=<sp/>AddMethod;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>ml_chained(Count,<sp/>Args));</highlight></codeline>
<codeline lineno="1362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal">ML_FUNCTIONX(Prod)<sp/>{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight><highlight class="comment">//&gt;any<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>product<sp/>of<sp/>the<sp/>values<sp/>(using<sp/>:mini:`*`)<sp/>produced<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>prod([1,<sp/>5,<sp/>2,<sp/>10,<sp/>6])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref>,<sp/>3,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)reduce_iterate;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[0]<sp/>=<sp/>MulMethod;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>ml_chained(Count,<sp/>Args));</highlight></codeline>
<codeline lineno="1377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduce2_iter_next(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduce2_call(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[1]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)reduce2_iter_next;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduce2_next_value(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>State-&gt;Values[0];</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[3]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)reduce2_call;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>3,<sp/>State-&gt;Values<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduce2_next_key(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[2]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)reduce2_next_value;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduce2_iter_next(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State-&gt;Values[1]);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)reduce2_next_key;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduce2_first_value(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[1]<sp/>=<sp/>ml_tuplev(2,<sp/>State-&gt;Values[1],<sp/>Value);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)reduce2_iter_next;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduce2_first_key(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[1]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)reduce2_first_value;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="1423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reduce2_iterate(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>MLNil);</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)reduce2_first_key;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal">ML_FUNCTIONX(Reduce2)<sp/>{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight><highlight class="comment">//&lt;Initial?:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence:sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn:function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight><highlight class="comment">//&gt;any<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Fn(Fn(<sp/>...<sp/>Fn(Initial,<sp/>K/1,<sp/>V/1),<sp/>K/2,<sp/>V/2)<sp/>...,<sp/>K/n,<sp/>V/n)`<sp/>where<sp/>:mini:`K/i`<sp/>and<sp/>:mini:`V/i`<sp/>are<sp/>the<sp/>keys<sp/>and<sp/>values<sp/>produced<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>:mini:`Initial`<sp/>is<sp/>omitted,<sp/>a<sp/>tuple<sp/>with<sp/>the<sp/>first<sp/>key<sp/>and<sp/>value<sp/>produced<sp/>by<sp/>:mini:`Sequence`<sp/>is<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>reduce2([],<sp/>&quot;cake&quot;,<sp/>fun(L,<sp/>K,<sp/>V)<sp/>L:put((K,<sp/>V)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(1,<sp/>MLFunctionT);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref>,<sp/>4,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)reduce2_iterate;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Values[0]<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Args[1]);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(1,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(2,<sp/>MLFunctionT);</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref>,<sp/>4,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)reduce2_iter_next;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Values[0]<sp/>=<sp/>Args[2];</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Values[1]<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Args[1]);</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463" refid="structml__extremum__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Tuple,<sp/>*Key,<sp/>*Value;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[2];</highlight></codeline>
<codeline lineno="1467"><highlight class="normal">}<sp/><ref refid="structml__extremum__state__t" kindref="compound">ml_extremum_state_t</ref>;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_extremum_run(<ref refid="structml__extremum__state__t" kindref="compound">ml_extremum_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(State-&gt;Tuple,<sp/>1,<sp/>State-&gt;Key);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_tuple_set(State-&gt;Tuple,<sp/>2,<sp/>State-&gt;Value);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(State-&gt;Tuple);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_minimum2_fn(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__extremum__state__t" kindref="compound">ml_extremum_state_t</ref><sp/>*State,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Tuple<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Key<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Value<sp/>=<sp/>Args[2];</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_tuple_get(State-&gt;Tuple,<sp/>2);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>State-&gt;Value;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>LessMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal">ML_FUNCTIONX(Min2)<sp/>{</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight><highlight class="comment">//&gt;tuple<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>tuple<sp/>with<sp/>the<sp/>key<sp/>and<sp/>value<sp/>of<sp/>the<sp/>smallest<sp/>value<sp/>(using<sp/>:mini:`&lt;`)<sp/>produced<sp/>by<sp/>:mini:`Sequence`.<sp/><sp/>Returns<sp/>:mini:`nil`<sp/>if<sp/>:mini:`Sequence`<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>min2([1,<sp/>5,<sp/>2,<sp/>10,<sp/>6])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref>,<sp/>4,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)reduce2_iterate;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__extremum__state__t" kindref="compound">ml_extremum_state_t</ref><sp/>*Extremum<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__extremum__state__t" kindref="compound">ml_extremum_state_t</ref>);</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/>Extremum-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_extremum_run;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[0]<sp/>=<sp/>ml_cfunctionx(Extremum,<sp/>(ml_callbackx_t)ml_minimum2_fn);</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>ml_chained(Count,<sp/>Args));</highlight></codeline>
<codeline lineno="1505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_maximum2_fn(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__extremum__state__t" kindref="compound">ml_extremum_state_t</ref><sp/>*State,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Tuple<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Key<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Value<sp/>=<sp/>Args[2];</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>ml_tuple_get(State-&gt;Tuple,<sp/>2);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>State-&gt;Value;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>GreaterMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="1516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal">ML_FUNCTIONX(Max2)<sp/>{</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight><highlight class="comment">//&gt;tuple<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>tuple<sp/>with<sp/>the<sp/>key<sp/>and<sp/>value<sp/>of<sp/>the<sp/>largest<sp/>value<sp/>(using<sp/>:mini:`&gt;`)<sp/>produced<sp/>by<sp/>:mini:`Sequence`.<sp/><sp/>Returns<sp/>:mini:`nil`<sp/>if<sp/>:mini:`Sequence`<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>max2([1,<sp/>5,<sp/>2,<sp/>10,<sp/>6])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref>,<sp/>4,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)reduce2_iterate;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__extremum__state__t" kindref="compound">ml_extremum_state_t</ref><sp/>*Extremum<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__extremum__state__t" kindref="compound">ml_extremum_state_t</ref>);</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/>Extremum-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_extremum_run;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[0]<sp/>=<sp/>ml_cfunctionx(Extremum,<sp/>(ml_callbackx_t)ml_maximum2_fn);</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>ml_chained(Count,<sp/>Args));</highlight></codeline>
<codeline lineno="1533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535" refid="structml__join__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__join__state__t" kindref="compound">ml_join_state_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Separator;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1];</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SeparatorLength;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal">}<sp/><ref refid="structml__join__state__t" kindref="compound">ml_join_state_t</ref>;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>join_value(<ref refid="structml__join__state__t" kindref="compound">ml_join_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>join_next(<ref refid="structml__join__state__t" kindref="compound">ml_join_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>ml_stringbuffer_get_value(State-&gt;Buffer));</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(State-&gt;Buffer,<sp/>State-&gt;Separator,<sp/>State-&gt;SeparatorLength);</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)join_value;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="1551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>join_append(<ref refid="structml__join__state__t" kindref="compound">ml_join_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)join_next;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="1557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>join_value(<ref refid="structml__join__state__t" kindref="compound">ml_join_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)join_append;</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer_append((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Buffer,<sp/>Value);</highlight></codeline>
<codeline lineno="1563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>join_first(<ref refid="structml__join__state__t" kindref="compound">ml_join_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>ml_stringbuffer_get_value(State-&gt;Buffer));</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)join_value;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="1570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;join&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight><highlight class="comment">//&lt;Separator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Joins<sp/>the<sp/>elements<sp/>of<sp/>:mini:`Sequence`<sp/>into<sp/>a<sp/>string<sp/>using<sp/>:mini:`Separator`<sp/>between<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>(1<sp/>..<sp/>10):join</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__join__state__t" kindref="compound">ml_join_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__join__state__t" kindref="compound">ml_join_state_t</ref>);</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)join_first;</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Separator<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;SeparatorLength<sp/>=<sp/>ml_string_length(Args[1]);</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Buffer[0]<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref>)ML_STRINGBUFFER_INIT;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="1586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;join&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT)<sp/>{</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Joins<sp/>the<sp/>elements<sp/>of<sp/>:mini:`Sequence`<sp/>into<sp/>a<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>1<sp/>..<sp/>10<sp/>join<sp/>&quot;,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__join__state__t" kindref="compound">ml_join_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__join__state__t" kindref="compound">ml_join_state_t</ref>);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)join_first;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Separator<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;SeparatorLength<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Buffer[0]<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref>)ML_STRINGBUFFER_INIT;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight></codeline>
<codeline lineno="1603" refid="structml__stacked__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__stacked__t" kindref="compound">ml_stacked_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Initial,<sp/>*Value,<sp/>*ReduceFn;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal">}<sp/><ref refid="structml__stacked__t" kindref="compound">ml_stacked_t</ref>;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal">ML_TYPE(MLStackedT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;stacked&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal">ML_TYPE(MLStackedStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;stacked-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stacked_iter_next(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stacked_call(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[1]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)stacked_iter_next;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stacked_next_value(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ReduceFn<sp/>=<sp/>State-&gt;Values[0];</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[2]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)stacked_call;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>ReduceFn,<sp/>2,<sp/>State-&gt;Values<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stacked_iter_next(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>MLNil);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)stacked_next_value;</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="1636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stacked_first_value(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[1]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)stacked_iter_next;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="1643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stacked_iterate(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>MLNil);</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Values[1])<sp/>{</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)stacked_next_value;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)stacked_first_value;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLStackedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key(Caller,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="1660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLStackedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(State-&gt;Values[1]);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLStackedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLStackedT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__stacked__t" kindref="compound">ml_stacked_t</ref><sp/>*Stacked)<sp/>{</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref>,<sp/>3,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLStackedStateT;</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)stacked_iterate;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[0]<sp/>=<sp/>Stacked-&gt;ReduceFn;</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[1]<sp/>=<sp/>Stacked-&gt;Initial;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Stacked-&gt;Value);</highlight></codeline>
<codeline lineno="1681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;//&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>sequence<sp/>that<sp/>produces<sp/>:mini:`V/1`,<sp/>:mini:`Fn(V/1,<sp/>V/2)`,<sp/>:mini:`Fn(Fn(V/1,<sp/>V/2),<sp/>V/3)`,<sp/>...<sp/>.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight><highlight class="comment">//<sp/>..<sp/>deprecated::<sp/>2.9.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Use<sp/>:mini:`distill`<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(1<sp/>..<sp/>10<sp/>//<sp/>+)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stacked__t" kindref="compound">ml_stacked_t</ref><sp/>*Stacked<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__stacked__t" kindref="compound">ml_stacked_t</ref>);</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/>Stacked-&gt;Type<sp/>=<sp/>MLStackedT;</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/>Stacked-&gt;Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/>Stacked-&gt;ReduceFn<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Stacked;</highlight></codeline>
<codeline lineno="1698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;//&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT,<sp/>MLAnyT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight><highlight class="comment">//&lt;Initial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>sequence<sp/>that<sp/>produces<sp/>:mini:`Initial`,<sp/>:mini:`Fn(Initial,<sp/>V/1)`,<sp/>:mini:`Fn(Fn(Initial,<sp/>V/1),<sp/>V/2)`,<sp/>...<sp/>.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight><highlight class="comment">//<sp/>..<sp/>deprecated::<sp/>2.9.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Use<sp/>:mini:`distill`<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(1<sp/>..<sp/>10<sp/>//<sp/>(10,<sp/>+))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stacked__t" kindref="compound">ml_stacked_t</ref><sp/>*Stacked<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__stacked__t" kindref="compound">ml_stacked_t</ref>);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>Stacked-&gt;Type<sp/>=<sp/>MLStackedT;</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>Stacked-&gt;Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/>Stacked-&gt;Initial<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/>Stacked-&gt;ReduceFn<sp/>=<sp/>Args[2];</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Stacked;</highlight></codeline>
<codeline lineno="1717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal">ML_FUNCTION(Distill)<sp/>{</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight><highlight class="comment">//&lt;Initial?:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence:sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn:function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight><highlight class="comment">//&gt;any<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>sequence<sp/>that<sp/>produces<sp/>:mini:`Initial`,<sp/>:mini:`Fn(Initial,<sp/>V/1)`,<sp/>:mini:`Fn(Fn(Initial,<sp/>V/1),<sp/>V/2)`,<sp/>...<sp/>.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>:mini:`Initial`<sp/>is<sp/>omitted,<sp/>the<sp/>first<sp/>value<sp/>produced<sp/>by<sp/>:mini:`Sequence`<sp/>is<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(distill(1<sp/>..<sp/>10,<sp/>+))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(distill(20,<sp/>1<sp/>..<sp/>10,<sp/>+))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>MLFunctionT);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__stacked__t" kindref="compound">ml_stacked_t</ref><sp/>*Stacked<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__stacked__t" kindref="compound">ml_stacked_t</ref>);</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stacked-&gt;Type<sp/>=<sp/>MLStackedT;</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stacked-&gt;Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stacked-&gt;ReduceFn<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Stacked;</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(2,<sp/>MLFunctionT);</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__stacked__t" kindref="compound">ml_stacked_t</ref><sp/>*Stacked<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__stacked__t" kindref="compound">ml_stacked_t</ref>);</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stacked-&gt;Type<sp/>=<sp/>MLStackedT;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stacked-&gt;Initial<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stacked-&gt;Value<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stacked-&gt;ReduceFn<sp/>=<sp/>Args[2];</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Stacked;</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749" refid="structml__repeated__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__repeated__t" kindref="compound">ml_repeated_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/>*Update;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal">}<sp/><ref refid="structml__repeated__t" kindref="compound">ml_repeated_t</ref>;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal">ML_TYPE(MLRepeatedT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;repeated&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight></codeline>
<codeline lineno="1757" refid="structml__repeated__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__repeated__state__t" kindref="compound">ml_repeated_state_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/>*Update;</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Iteration;</highlight></codeline>
<codeline lineno="1761"><highlight class="normal">}<sp/><ref refid="structml__repeated__state__t" kindref="compound">ml_repeated_state_t</ref>;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal">ML_TYPE(MLRepeatedStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;repeated-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>repeated_update(<ref refid="structml__repeated__state__t" kindref="compound">ml_repeated_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="1771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLRepeatedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__repeated__state__t" kindref="compound">ml_repeated_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/>++State-&gt;Iteration;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Update)<sp/>{</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>State-&gt;Update,<sp/>1,<sp/>&amp;State-&gt;Value);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(State);</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLRepeatedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__repeated__state__t" kindref="compound">ml_repeated_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(State-&gt;Iteration));</highlight></codeline>
<codeline lineno="1786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLRepeatedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__repeated__state__t" kindref="compound">ml_repeated_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(State-&gt;Value);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLRepeatedT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__repeated__t" kindref="compound">ml_repeated_t</ref><sp/>*Repeated)<sp/>{</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__repeated__state__t" kindref="compound">ml_repeated_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__repeated__state__t" kindref="compound">ml_repeated_state_t</ref>);</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLRepeatedStateT;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)repeated_update;</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Value<sp/>=<sp/>Repeated-&gt;Value;</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Update<sp/>=<sp/>Repeated-&gt;Update;</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iteration<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(State);</highlight></codeline>
<codeline lineno="1800"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal">,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>infinite<sp/>sequence<sp/>that<sp/>repeatedly<sp/>produces<sp/>:mini:`Value`.<sp/>Should<sp/>be<sp/>used<sp/>with<sp/>:mini:`:limit`<sp/>or<sp/>paired<sp/>with<sp/>a<sp/>finite<sp/>sequence<sp/>in<sp/>:mini:`zip`,<sp/>:mini:`weave`,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(@1<sp/>limit<sp/>10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__repeated__t" kindref="compound">ml_repeated_t</ref><sp/>*Repeated<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__repeated__t" kindref="compound">ml_repeated_t</ref>);</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*TArgs[3]<sp/>=<sp/>{MLRepeatedT,<sp/>MLIntegerT,<sp/>ml_typeof(Args[0])};</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/>Repeated-&gt;Type<sp/>=<sp/>ml_generic_type(3,<sp/>TArgs);</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/>Repeated-&gt;Type<sp/>=<sp/>MLRepeatedT;</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/>Repeated-&gt;Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Repeated;</highlight></codeline>
<codeline lineno="1817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal">,<sp/>MLAnyT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight><highlight class="comment">//&lt;Initial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>sequence<sp/>that<sp/>produces<sp/>:mini:`Initial`,<sp/>:mini:`Fn(Initial)`,<sp/>:mini:`Fn(Fn(Initial))`,<sp/>...<sp/>stopping<sp/>when<sp/>:mini:`Fn(Last)`<sp/>returns<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(1<sp/>@<sp/>(_<sp/>+<sp/>1)<sp/>limit<sp/>10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__repeated__t" kindref="compound">ml_repeated_t</ref><sp/>*Repeated<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__repeated__t" kindref="compound">ml_repeated_t</ref>);</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/>Repeated-&gt;Type<sp/>=<sp/>MLRepeatedT;</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/>Repeated-&gt;Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/>Repeated-&gt;Update<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Repeated;</highlight></codeline>
<codeline lineno="1831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833" refid="structml__function__sequence__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal">}<sp/><ref refid="structml__function__sequence__t" kindref="compound">ml_function_sequence_t</ref>;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLFunctionSequenceT[];</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal">ML_FUNCTION(MLFunctionSequence)<sp/>{</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__function__sequence__t" kindref="compound">ml_function_sequence_t</ref><sp/>*Sequence<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__function__sequence__t" kindref="compound">ml_function_sequence_t</ref>);</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/>Sequence-&gt;Type<sp/>=<sp/>MLFunctionSequenceT;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/>Sequence-&gt;Function<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Sequence;</highlight></codeline>
<codeline lineno="1847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal">ML_TYPE(MLFunctionSequenceT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;function-sequence&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLFunctionSequence</highlight></codeline>
<codeline lineno="1852"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight></codeline>
<codeline lineno="1854" refid="structml__function__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal">}<sp/><ref refid="structml__function__state__t" kindref="compound">ml_function_state_t</ref>;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal">ML_TYPE(MLFunctionStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;function-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLFunctionStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__function__state__t" kindref="compound">ml_function_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>State-&gt;Function,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="1867"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLFunctionStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__function__state__t" kindref="compound">ml_function_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(State-&gt;Index));</highlight></codeline>
<codeline lineno="1871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLFunctionStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__function__state__t" kindref="compound">ml_function_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(State-&gt;Value);</highlight></codeline>
<codeline lineno="1875"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_function_state_run(<ref refid="structml__function__state__t" kindref="compound">ml_function_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(State);</highlight></codeline>
<codeline lineno="1883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLFunctionSequenceT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__function__sequence__t" kindref="compound">ml_function_sequence_t</ref><sp/>*Sequence)<sp/>{</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__function__state__t" kindref="compound">ml_function_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__function__state__t" kindref="compound">ml_function_state_t</ref>);</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLFunctionStateT;</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_function_state_run;</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Function<sp/>=<sp/>Sequence-&gt;Function;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>State-&gt;Function,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="1893"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;repeat&quot;</highlight><highlight class="normal">,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight><highlight class="comment">//&lt;Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>sequence<sp/>that<sp/>generates<sp/>the<sp/>result<sp/>of<sp/>calling<sp/>:mini:`Function()`<sp/>at<sp/>each<sp/>iteration<sp/>until<sp/>:mini:`nil`<sp/>is<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight><highlight class="comment">//<sp/>..<sp/>deprecated::<sp/>2.9.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Use<sp/>:mini:`^`<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>L<sp/>:=<sp/>[1,<sp/>2,<sp/>3,<sp/>4]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(L:pull(_):repeat)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__function__sequence__t" kindref="compound">ml_function_sequence_t</ref><sp/>*Sequence<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__function__sequence__t" kindref="compound">ml_function_sequence_t</ref>);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/>Sequence-&gt;Type<sp/>=<sp/>MLFunctionSequenceT;</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/>Sequence-&gt;Function<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Sequence;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"></highlight></codeline>
<codeline lineno="1911"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;^&quot;</highlight><highlight class="normal">,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"></highlight><highlight class="comment">//&lt;Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>sequence<sp/>that<sp/>generates<sp/>the<sp/>result<sp/>of<sp/>calling<sp/>:mini:`Function()`<sp/>at<sp/>each<sp/>iteration<sp/>until<sp/>:mini:`nil`<sp/>is<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>L<sp/>:=<sp/>[1,<sp/>2,<sp/>3,<sp/>4]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(^fun<sp/>L:pull)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__function__sequence__t" kindref="compound">ml_function_sequence_t</ref><sp/>*Sequence<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__function__sequence__t" kindref="compound">ml_function_sequence_t</ref>);</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/>Sequence-&gt;Type<sp/>=<sp/>MLFunctionSequenceT;</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/>Sequence-&gt;Function<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Sequence;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight></codeline>
<codeline lineno="1923" refid="structml__sequenced__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__sequenced__t" kindref="compound">ml_sequenced_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*First,<sp/>*Second;</highlight></codeline>
<codeline lineno="1926"><highlight class="normal">}<sp/><ref refid="structml__sequenced__t" kindref="compound">ml_sequenced_t</ref>;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal">ML_TYPE(MLSequencedT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;sequenced&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight></codeline>
<codeline lineno="1931" refid="structml__sequenced__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__sequenced__state__t" kindref="compound">ml_sequenced_state_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter,<sp/>*Next;</highlight></codeline>
<codeline lineno="1934"><highlight class="normal">}<sp/><ref refid="structml__sequenced__state__t" kindref="compound">ml_sequenced_state_t</ref>;</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal">ML_TYPE(MLSequencedStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;sequenced-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_sequenced_fnx_iterate(<ref refid="structml__sequenced__state__t" kindref="compound">ml_sequenced_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLSequencedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__sequenced__state__t" kindref="compound">ml_sequenced_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_sequenced_fnx_iterate;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLSequencedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__sequenced__state__t" kindref="compound">ml_sequenced_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key(Caller,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="1950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLSequencedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__sequenced__state__t" kindref="compound">ml_sequenced_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value(Caller,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="1954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_sequenced_fnx_iterate(<ref refid="structml__sequenced__state__t" kindref="compound">ml_sequenced_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate(State-&gt;Base.Caller,<sp/>State-&gt;Next);</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iter<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="1963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLSequencedT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__sequenced__t" kindref="compound">ml_sequenced_t</ref><sp/>*Sequenced)<sp/>{</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__sequenced__state__t" kindref="compound">ml_sequenced_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__sequenced__state__t" kindref="compound">ml_sequenced_state_t</ref>);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLSequencedStateT;</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_sequenced_fnx_iterate;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Next<sp/>=<sp/>Sequenced-&gt;Second;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Sequenced-&gt;First);</highlight></codeline>
<codeline lineno="1973"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_sequenced(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*First,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Second)<sp/>{</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__sequenced__t" kindref="compound">ml_sequenced_t</ref><sp/>*Sequenced<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__sequenced__t" kindref="compound">ml_sequenced_t</ref>);</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*TArgs[3];</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_find_generic_parent(ml_typeof(First),<sp/>MLSequenceT,<sp/>3,<sp/>TArgs)<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*KeyType<sp/>=<sp/>TArgs[1],<sp/>*ValueType<sp/>=<sp/>TArgs[2];</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_find_generic_parent(ml_typeof(Second),<sp/>MLSequenceT,<sp/>3,<sp/>TArgs)<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TArgs[0]<sp/>=<sp/>MLSequencedT;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TArgs[1]<sp/>=<sp/>ml_type_max(KeyType,<sp/>TArgs[1]);</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TArgs[2]<sp/>=<sp/>ml_type_max(ValueType,<sp/>TArgs[2]);</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sequenced-&gt;Type<sp/>=<sp/>ml_generic_type(3,<sp/>TArgs);</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sequenced-&gt;Type<sp/>=<sp/>MLSequencedT;</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sequenced-&gt;Type<sp/>=<sp/>MLSequencedT;</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/>Sequenced-&gt;Type<sp/>=<sp/>MLSequencedT;</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/>Sequenced-&gt;First<sp/>=<sp/>First;</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/>Sequenced-&gt;Second<sp/>=<sp/>Second;</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Sequenced;</highlight></codeline>
<codeline lineno="1998"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&amp;&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT,<sp/>MLSequenceT)<sp/>{</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"></highlight><highlight class="comment">//&gt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>sequence<sp/>that<sp/>produces<sp/>the<sp/>values<sp/>from<sp/>:mini:`Sequence/1`<sp/>followed<sp/>by<sp/>those<sp/>from<sp/>:mini:`Sequence/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(1<sp/>..<sp/>3<sp/>&amp;<sp/>&quot;cake&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_sequenced(Args[0],<sp/>Args[1]);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&amp;&quot;</highlight><highlight class="normal">,<sp/>MLIntegerRangeT,<sp/>MLIntegerRangeT)<sp/>{</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range1<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range2<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Range1-&gt;Step<sp/>==<sp/>Range2-&gt;Step)<sp/>&amp;&amp;<sp/>(Range1-&gt;Limit<sp/>+<sp/>Range1-&gt;Step<sp/>==<sp/>Range2-&gt;Start))<sp/>{</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref>);</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLIntegerRangeT;</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Range-&gt;Start<sp/>=<sp/>Range1-&gt;Start;</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>Range2-&gt;Limit;</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Range-&gt;Step<sp/>=<sp/>Range1-&gt;Step;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_sequenced(Args[0],<sp/>Args[1]);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&amp;&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT)<sp/>{</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight><highlight class="comment">//&gt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>sequence<sp/>that<sp/>repeatedly<sp/>produces<sp/>the<sp/>values<sp/>from<sp/>:mini:`Sequence`<sp/>(for<sp/>use<sp/>with<sp/>:mini:`limit`).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(&amp;(1<sp/>..<sp/>3)<sp/>limit<sp/>10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__sequenced__t" kindref="compound">ml_sequenced_t</ref><sp/>*Sequenced<sp/>=<sp/>xnew(<ref refid="structml__sequenced__t" kindref="compound">ml_sequenced_t</ref>,<sp/>3,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/>Sequenced-&gt;Type<sp/>=<sp/>ml_generic_sequence(MLSequencedT,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/>Sequenced-&gt;First<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/>Sequenced-&gt;Second<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Sequenced;</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Sequenced;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight></codeline>
<codeline lineno="2035" refid="structml__limited__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__limited__t" kindref="compound">ml_limited_t</ref><sp/>{</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Remaining;</highlight></codeline>
<codeline lineno="2039"><highlight class="normal">}<sp/><ref refid="structml__limited__t" kindref="compound">ml_limited_t</ref>;</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal">ML_TYPE(MLLimitedT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;limited&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight></codeline>
<codeline lineno="2044" refid="structml__limited__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__limited__state__t" kindref="compound">ml_limited_state_t</ref><sp/>{</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter;</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Remaining;</highlight></codeline>
<codeline lineno="2048"><highlight class="normal">}<sp/><ref refid="structml__limited__state__t" kindref="compound">ml_limited_state_t</ref>;</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal">ML_TYPE(MLLimitedStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;limited-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>limited_iterate(<ref refid="structml__limited__state__t" kindref="compound">ml_limited_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iter<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/>--State-&gt;Remaining;</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="2059"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLLimitedT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__limited__t" kindref="compound">ml_limited_t</ref><sp/>*Limited)<sp/>{</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Limited-&gt;Remaining)<sp/>{</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__limited__state__t" kindref="compound">ml_limited_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__limited__state__t" kindref="compound">ml_limited_state_t</ref>);</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLLimitedStateT;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)limited_iterate;</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Remaining<sp/>=<sp/>Limited-&gt;Remaining;</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Limited-&gt;Value);</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2073"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLLimitedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__limited__state__t" kindref="compound">ml_limited_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key(Caller,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="2077"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLLimitedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__limited__state__t" kindref="compound">ml_limited_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value(Caller,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="2081"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLLimitedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__limited__state__t" kindref="compound">ml_limited_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Remaining)<sp/>{</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)limited_iterate;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2091"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;limit&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2095"><highlight class="normal"></highlight><highlight class="comment">//&lt;Limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>sequence<sp/>that<sp/>produces<sp/>at<sp/>most<sp/>:mini:`Limit`<sp/>values<sp/>from<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(1<sp/>..<sp/>10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(1<sp/>..<sp/>10<sp/>limit<sp/>5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__limited__t" kindref="compound">ml_limited_t</ref><sp/>*Limited<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__limited__t" kindref="compound">ml_limited_t</ref>);</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/>Limited-&gt;Type<sp/>=<sp/>ml_generic_sequence(MLLimitedT,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/>Limited-&gt;Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/>Limited-&gt;Remaining<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Limited;</highlight></codeline>
<codeline lineno="2105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"></highlight></codeline>
<codeline lineno="2107" refid="structinteger__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Value;</highlight></codeline>
<codeline lineno="2110"><highlight class="normal">}<sp/><ref refid="structinteger__state__t" kindref="compound">integer_state_t</ref>;</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>limited_precount_run(<ref refid="structinteger__state__t" kindref="compound">integer_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_RETURN(ml_integer(State-&gt;Value));</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Precount<sp/>=<sp/>ml_integer_value(Value);</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Precount<sp/>&gt;<sp/>State-&gt;Value)<sp/>ML_RETURN(ml_integer(State-&gt;Value));</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="2119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;precount&quot;</highlight><highlight class="normal">,<sp/>MLLimitedT)<sp/>{</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__limited__t" kindref="compound">ml_limited_t</ref><sp/>*Limited<sp/>=<sp/>(<ref refid="structml__limited__t" kindref="compound">ml_limited_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinteger__state__t" kindref="compound">integer_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structinteger__state__t" kindref="compound">integer_state_t</ref>);</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)limited_precount_run;</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Value<sp/>=<sp/>Limited-&gt;Remaining;</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>Limited-&gt;Value;</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Precount,<sp/>1,<sp/>Args);</highlight></codeline>
<codeline lineno="2131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"></highlight></codeline>
<codeline lineno="2133" refid="structml__skipped__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__skipped__t" kindref="compound">ml_skipped_t</ref><sp/>{</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Remaining;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal">}<sp/><ref refid="structml__skipped__t" kindref="compound">ml_skipped_t</ref>;</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"></highlight></codeline>
<codeline lineno="2139"><highlight class="normal">ML_TYPE(MLSkippedT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;skipped&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"></highlight></codeline>
<codeline lineno="2142" refid="structml__skipped__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__skipped__state__t" kindref="compound">ml_skipped_state_t</ref><sp/>{</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Remaining;</highlight></codeline>
<codeline lineno="2145"><highlight class="normal">}<sp/><ref refid="structml__skipped__state__t" kindref="compound">ml_skipped_state_t</ref>;</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"></highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>skipped_iterate(<ref refid="structml__skipped__state__t" kindref="compound">ml_skipped_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Remaining)<sp/>{</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--State-&gt;Remaining;</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Value);</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLSkippedT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__skipped__t" kindref="compound">ml_skipped_t</ref><sp/>*Skipped)<sp/>{</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Skipped-&gt;Remaining)<sp/>{</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__skipped__state__t" kindref="compound">ml_skipped_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__skipped__state__t" kindref="compound">ml_skipped_state_t</ref>);</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)skipped_iterate;</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Remaining<sp/>=<sp/>Skipped-&gt;Remaining;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Skipped-&gt;Value);</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate(Caller,<sp/>Skipped-&gt;Value);</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;skip&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight><highlight class="comment">//&lt;Skip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>sequence<sp/>that<sp/>skips<sp/>the<sp/>first<sp/>:mini:`Skip`<sp/>values<sp/>from<sp/>:mini:`Sequence`<sp/>and<sp/>then<sp/>produces<sp/>the<sp/>rest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(1<sp/>..<sp/>10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(1<sp/>..<sp/>10<sp/>skip<sp/>5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__skipped__t" kindref="compound">ml_skipped_t</ref><sp/>*Skipped<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__skipped__t" kindref="compound">ml_skipped_t</ref>);</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/>Skipped-&gt;Type<sp/>=<sp/>ml_generic_sequence(MLSkippedT,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/>Skipped-&gt;Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/>Skipped-&gt;Remaining<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Skipped;</highlight></codeline>
<codeline lineno="2183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight></codeline>
<codeline lineno="2185"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>skipped_precount_run(<ref refid="structinteger__state__t" kindref="compound">integer_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Precount<sp/>=<sp/>ml_integer_value(Value);</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Precount<sp/>&lt;=<sp/>State-&gt;Value)<sp/>ML_RETURN(ml_integer(0));</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Precount<sp/>-<sp/>State-&gt;Value));</highlight></codeline>
<codeline lineno="2192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;precount&quot;</highlight><highlight class="normal">,<sp/>MLSkippedT)<sp/>{</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__skipped__t" kindref="compound">ml_skipped_t</ref><sp/>*Skipped<sp/>=<sp/>(<ref refid="structml__skipped__t" kindref="compound">ml_skipped_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinteger__state__t" kindref="compound">integer_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structinteger__state__t" kindref="compound">integer_state_t</ref>);</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)skipped_precount_run;</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Value<sp/>=<sp/>Skipped-&gt;Remaining;</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>Skipped-&gt;Value;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Precount,<sp/>1,<sp/>Args);</highlight></codeline>
<codeline lineno="2204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight></codeline>
<codeline lineno="2206" refid="structml__provided__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/>*Fn;</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Remaining;</highlight></codeline>
<codeline lineno="2210"><highlight class="normal">}<sp/><ref refid="structml__provided__t" kindref="compound">ml_provided_t</ref>;</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal">ML_TYPE(MLProvidedT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;provided&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"></highlight></codeline>
<codeline lineno="2215" refid="structml__provided__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter,<sp/>*Fn;</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[1];</highlight></codeline>
<codeline lineno="2219"><highlight class="normal">}<sp/><ref refid="structml__provided__state__t" kindref="compound">ml_provided_state_t</ref>;</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal">ML_TYPE(MLProvidedStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;provided-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>provided_check(<ref refid="structml__provided__state__t" kindref="compound">ml_provided_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>provided_iterate(<ref refid="structml__provided__state__t" kindref="compound">ml_provided_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="2230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>provided_value(<ref refid="structml__provided__state__t" kindref="compound">ml_provided_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)provided_iterate;</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>State-&gt;Fn,<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="2237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>provided_check(<ref refid="structml__provided__state__t" kindref="compound">ml_provided_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)provided_value;</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="2244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLProvidedT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__provided__t" kindref="compound">ml_provided_t</ref><sp/>*Provided)<sp/>{</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__provided__state__t" kindref="compound">ml_provided_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__provided__state__t" kindref="compound">ml_provided_state_t</ref>);</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLProvidedStateT;</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)provided_check;</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Fn<sp/>=<sp/>Provided-&gt;Fn;</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Provided-&gt;Value);</highlight></codeline>
<codeline lineno="2254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLProvidedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__provided__state__t" kindref="compound">ml_provided_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key(Caller,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="2258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLProvidedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__provided__state__t" kindref="compound">ml_provided_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(State-&gt;Args[0]);</highlight></codeline>
<codeline lineno="2262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLProvidedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__provided__state__t" kindref="compound">ml_provided_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)provided_check;</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="2268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;provided&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>sequence<sp/>that<sp/>stops<sp/>when<sp/>:mini:`Fn(Value)`<sp/>is<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(&quot;banana&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(&quot;banana&quot;<sp/>provided<sp/>(_<sp/>!=<sp/>&quot;n&quot;))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__provided__t" kindref="compound">ml_provided_t</ref><sp/>*Provided<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__provided__t" kindref="compound">ml_provided_t</ref>);</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/>Provided-&gt;Type<sp/>=<sp/>ml_generic_sequence(MLProvidedT,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/>Provided-&gt;Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/>Provided-&gt;Fn<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Provided;</highlight></codeline>
<codeline lineno="2282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"></highlight></codeline>
<codeline lineno="2284" refid="structml__unique__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__unique__t" kindref="compound">ml_unique_t</ref><sp/>{</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter;</highlight></codeline>
<codeline lineno="2287"><highlight class="normal">}<sp/><ref refid="structml__unique__t" kindref="compound">ml_unique_t</ref>;</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"></highlight></codeline>
<codeline lineno="2289"><highlight class="normal">ML_TYPE(MLUniqueT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;unique&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"></highlight></codeline>
<codeline lineno="2292" refid="structml__unique__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__unique__state__t" kindref="compound">ml_unique_state_t</ref><sp/>{</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter;</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*History;</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Iteration;</highlight></codeline>
<codeline lineno="2298"><highlight class="normal">}<sp/><ref refid="structml__unique__state__t" kindref="compound">ml_unique_state_t</ref>;</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal">ML_TYPE(MLUniqueStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;unique-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_unique_fnx_iterate(<ref refid="structml__unique__state__t" kindref="compound">ml_unique_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_unique_fnx_value(<ref refid="structml__unique__state__t" kindref="compound">ml_unique_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_map_insert(State-&gt;History,<sp/>Value,<sp/>MLSome)<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++State-&gt;Iteration;</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_unique_fnx_iterate;</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="2315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"></highlight></codeline>
<codeline lineno="2317"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_unique_fnx_iterate(<ref refid="structml__unique__state__t" kindref="compound">ml_unique_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_unique_fnx_value;</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="2322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLUniqueT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__unique__t" kindref="compound">ml_unique_t</ref><sp/>*Unique)<sp/>{</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__unique__state__t" kindref="compound">ml_unique_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__unique__state__t" kindref="compound">ml_unique_state_t</ref>);</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLUniqueStateT;</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_unique_fnx_iterate;</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;History<sp/>=<sp/>ml_map();</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iteration<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Unique-&gt;Iter);</highlight></codeline>
<codeline lineno="2333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLUniqueStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__unique__state__t" kindref="compound">ml_unique_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(State-&gt;Iteration));</highlight></codeline>
<codeline lineno="2337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLUniqueStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__unique__state__t" kindref="compound">ml_unique_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(State-&gt;Value);</highlight></codeline>
<codeline lineno="2341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"></highlight></codeline>
<codeline lineno="2343"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLUniqueStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__unique__state__t" kindref="compound">ml_unique_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_unique_fnx_iterate;</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="2347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="normal">ML_FUNCTION(Unique)<sp/>{</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence:sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2352"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>sequence<sp/>that<sp/>returns<sp/>the<sp/>unique<sp/>values<sp/>produced<sp/>by<sp/>:mini:`Sequence`.<sp/>Uniqueness<sp/>is<sp/>determined<sp/>by<sp/>using<sp/>a<sp/>:mini:`map`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(unique(&quot;banana&quot;))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__unique__t" kindref="compound">ml_unique_t</ref><sp/>*Unique<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__unique__t" kindref="compound">ml_unique_t</ref>);</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter<sp/>=<sp/>Unique-&gt;Iter<sp/>=<sp/>ml_chained(Count,<sp/>Args);</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/>Unique-&gt;Type<sp/>=<sp/>ml_generic_sequence(MLUniqueT,<sp/>Iter);</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Unique;</highlight></codeline>
<codeline lineno="2359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"></highlight></codeline>
<codeline lineno="2361" refid="structml__zipped__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__zipped__t" kindref="compound">ml_zipped_t</ref><sp/>{</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function;</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count;</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iters[];</highlight></codeline>
<codeline lineno="2366"><highlight class="normal">}<sp/><ref refid="structml__zipped__t" kindref="compound">ml_zipped_t</ref>;</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal">ML_TYPE(MLZippedT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;zipped&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight></codeline>
<codeline lineno="2371" refid="structml__zipped__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__zipped__state__t" kindref="compound">ml_zipped_state_t</ref><sp/>{</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function;</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Iters;</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/>Index,<sp/>Iteration;</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[];</highlight></codeline>
<codeline lineno="2377"><highlight class="normal">}<sp/><ref refid="structml__zipped__state__t" kindref="compound">ml_zipped_state_t</ref>;</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal">ML_TYPE(MLZippedStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;zipped-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>zipped_iterate(<ref refid="structml__zipped__state__t" kindref="compound">ml_zipped_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iters[State-&gt;Index]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++State-&gt;Index<sp/>==<sp/><sp/>State-&gt;Count)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iters[State-&gt;Index]);</highlight></codeline>
<codeline lineno="2388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLZippedT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__zipped__t" kindref="compound">ml_zipped_t</ref><sp/>*Zipped)<sp/>{</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__zipped__state__t" kindref="compound">ml_zipped_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__zipped__state__t" kindref="compound">ml_zipped_state_t</ref>,<sp/>2<sp/>*<sp/>Zipped-&gt;Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLZippedStateT;</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)zipped_iterate;</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Function<sp/>=<sp/>Zipped-&gt;Function;</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iters<sp/>=<sp/>State-&gt;Args<sp/>+<sp/>Zipped-&gt;Count;</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Zipped-&gt;Count;<sp/>++I)<sp/>State-&gt;Iters[I]<sp/>=<sp/>Zipped-&gt;Iters[I];</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>Zipped-&gt;Count;</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iteration<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iters[0]);</highlight></codeline>
<codeline lineno="2402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLZippedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__zipped__state__t" kindref="compound">ml_zipped_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(State-&gt;Iteration));</highlight></codeline>
<codeline lineno="2406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"></highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_zipped_fnx_value(<ref refid="structml__zipped__state__t" kindref="compound">ml_zipped_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[State-&gt;Index]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++State-&gt;Index<sp/>==<sp/><sp/>State-&gt;Count)<sp/>{</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State-&gt;Base.Caller,<sp/>State-&gt;Function,<sp/>State-&gt;Count,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iters[State-&gt;Index]);</highlight></codeline>
<codeline lineno="2415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"></highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLZippedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__zipped__state__t" kindref="compound">ml_zipped_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_zipped_fnx_value;</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iters[0]);</highlight></codeline>
<codeline lineno="2422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"></highlight></codeline>
<codeline lineno="2424"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>zipped_iter_next(<ref refid="structml__zipped__state__t" kindref="compound">ml_zipped_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iters[State-&gt;Index]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++State-&gt;Index<sp/>==<sp/><sp/>State-&gt;Count)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iters[State-&gt;Index]);</highlight></codeline>
<codeline lineno="2430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLZippedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__zipped__state__t" kindref="compound">ml_zipped_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)zipped_iter_next;</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/>++State-&gt;Iteration;</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iters[0]);</highlight></codeline>
<codeline lineno="2438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"></highlight></codeline>
<codeline lineno="2440"><highlight class="normal">ML_FUNCTION(Zip)<sp/>{</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight><highlight class="comment">//@zip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence/1,...,Sequence/n:sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"></highlight><highlight class="comment">//&lt;Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>sequence<sp/>that<sp/>produces<sp/>:mini:`Function(V/1/1,<sp/>...,<sp/>V/n/1),<sp/>Function(V/1/2,<sp/>...,<sp/>V/n/2),<sp/>...`<sp/>where<sp/>:mini:`V/i/j`<sp/>is<sp/>the<sp/>:mini:`j`-th<sp/>value<sp/>produced<sp/>by<sp/>:mini:`Sequence/i`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>sequence<sp/>stops<sp/>produces<sp/>values<sp/>when<sp/>any<sp/>of<sp/>the<sp/>:mini:`Sequence/i`<sp/>stops.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(zip(1<sp/>..<sp/>3,<sp/>&quot;cake&quot;,<sp/>tuple))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(Count<sp/>-<sp/>1,<sp/>MLFunctionT);</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__zipped__t" kindref="compound">ml_zipped_t</ref><sp/>*Zipped<sp/>=<sp/>xnew(<ref refid="structml__zipped__t" kindref="compound">ml_zipped_t</ref>,<sp/>Count<sp/>-<sp/>1,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/>Zipped-&gt;Type<sp/>=<sp/>MLZippedT;</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/>Zipped-&gt;Count<sp/>=<sp/>Count<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/>Zipped-&gt;Function<sp/>=<sp/>Args[Count<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count<sp/>-<sp/>1;<sp/>++I)<sp/>Zipped-&gt;Iters[I]<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Zipped;</highlight></codeline>
<codeline lineno="2456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight></codeline>
<codeline lineno="2458" refid="structml__zipped2__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ValueFn,<sp/>*KeyFn;</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count;</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iters[];</highlight></codeline>
<codeline lineno="2463"><highlight class="normal">}<sp/><ref refid="structml__zipped2__t" kindref="compound">ml_zipped2_t</ref>;</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight></codeline>
<codeline lineno="2465"><highlight class="normal">ML_TYPE(MLZipped2T,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;zipped2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"></highlight></codeline>
<codeline lineno="2468" refid="structml__zipped2__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ValueFn,<sp/>*KeyFn;</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Iters;</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/>Index,<sp/>Iteration;</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[];</highlight></codeline>
<codeline lineno="2474"><highlight class="normal">}<sp/><ref refid="structml__zipped2__state__t" kindref="compound">ml_zipped2_state_t</ref>;</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal">ML_TYPE(MLZipped2StateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;zipped2-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>zipped2_iterate(<ref refid="structml__zipped2__state__t" kindref="compound">ml_zipped2_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iters[State-&gt;Index]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++State-&gt;Index<sp/>==<sp/><sp/>State-&gt;Count)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iters[State-&gt;Index]);</highlight></codeline>
<codeline lineno="2485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLZipped2T,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__zipped2__t" kindref="compound">ml_zipped2_t</ref><sp/>*Zipped)<sp/>{</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__zipped2__state__t" kindref="compound">ml_zipped2_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__zipped2__state__t" kindref="compound">ml_zipped2_state_t</ref>,<sp/>2<sp/>*<sp/>Zipped-&gt;Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLZipped2StateT;</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)zipped2_iterate;</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;ValueFn<sp/>=<sp/>Zipped-&gt;ValueFn;</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;KeyFn<sp/>=<sp/>Zipped-&gt;KeyFn;</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iters<sp/>=<sp/>State-&gt;Args<sp/>+<sp/>Zipped-&gt;Count;</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Zipped-&gt;Count;<sp/>++I)<sp/>State-&gt;Iters[I]<sp/>=<sp/>Zipped-&gt;Iters[I];</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>Zipped-&gt;Count;</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iteration<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iters[0]);</highlight></codeline>
<codeline lineno="2500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"></highlight></codeline>
<codeline lineno="2502"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_zipped2_fnx_key(<ref refid="structml__zipped2__state__t" kindref="compound">ml_zipped2_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[State-&gt;Index]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++State-&gt;Index<sp/>==<sp/><sp/>State-&gt;Count)<sp/>{</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State-&gt;Base.Caller,<sp/>State-&gt;KeyFn,<sp/>State-&gt;Count,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iters[State-&gt;Index]);</highlight></codeline>
<codeline lineno="2509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"></highlight></codeline>
<codeline lineno="2511"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLZipped2StateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__zipped2__state__t" kindref="compound">ml_zipped2_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_zipped2_fnx_key;</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iters[0]);</highlight></codeline>
<codeline lineno="2516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_zipped2_fnx_value(<ref refid="structml__zipped2__state__t" kindref="compound">ml_zipped2_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[State-&gt;Index]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++State-&gt;Index<sp/>==<sp/><sp/>State-&gt;Count)<sp/>{</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State-&gt;Base.Caller,<sp/>State-&gt;ValueFn,<sp/>State-&gt;Count,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iters[State-&gt;Index]);</highlight></codeline>
<codeline lineno="2525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLZipped2StateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__zipped2__state__t" kindref="compound">ml_zipped2_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_zipped2_fnx_value;</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iters[0]);</highlight></codeline>
<codeline lineno="2532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>zipped2_iter_next(<ref refid="structml__zipped2__state__t" kindref="compound">ml_zipped2_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iters[State-&gt;Index]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++State-&gt;Index<sp/>==<sp/><sp/>State-&gt;Count)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iters[State-&gt;Index]);</highlight></codeline>
<codeline lineno="2540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLZipped2StateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__zipped2__state__t" kindref="compound">ml_zipped2_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)zipped2_iter_next;</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/>++State-&gt;Iteration;</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iters[0]);</highlight></codeline>
<codeline lineno="2548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"></highlight></codeline>
<codeline lineno="2550"><highlight class="normal">ML_FUNCTION(Zip2)<sp/>{</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"></highlight><highlight class="comment">//@zip2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2552"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence/1,...,Sequence/n:sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2553"><highlight class="normal"></highlight><highlight class="comment">//&lt;KeyFn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2554"><highlight class="normal"></highlight><highlight class="comment">//&lt;ValueFn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2555"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2556"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>sequence<sp/>that<sp/>produces<sp/>:mini:`KeyFn(K/1/1,<sp/>...,<sp/>K/n/1)<sp/>-<sp/>ValueFn(V/1/1,<sp/>...,<sp/>V/n/1),<sp/>...`<sp/>where<sp/>:mini:`K/i/j<sp/>-<sp/>V/i/j`<sp/>are<sp/>the<sp/>:mini:`j`-th<sp/>key<sp/>and<sp/>value<sp/>produced<sp/>by<sp/>:mini:`Sequence/i`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2557"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>sequence<sp/>stops<sp/>produces<sp/>values<sp/>when<sp/>any<sp/>of<sp/>the<sp/>:mini:`Sequence/i`<sp/>stops.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2558"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>map(zip2(1<sp/>..<sp/>3,<sp/>&quot;cake&quot;,<sp/>tuple,<sp/>tuple))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(3);</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(Count<sp/>-<sp/>2,<sp/>MLFunctionT);</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(Count<sp/>-<sp/>1,<sp/>MLFunctionT);</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__zipped2__t" kindref="compound">ml_zipped2_t</ref><sp/>*Zipped<sp/>=<sp/>xnew(<ref refid="structml__zipped2__t" kindref="compound">ml_zipped2_t</ref>,<sp/>Count<sp/>-<sp/>2,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/>Zipped-&gt;Type<sp/>=<sp/>MLZipped2T;</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/>Zipped-&gt;Count<sp/>=<sp/>Count<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/>Zipped-&gt;ValueFn<sp/>=<sp/>Args[Count<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/>Zipped-&gt;KeyFn<sp/>=<sp/>Args[Count<sp/>-<sp/>2];</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count<sp/>-<sp/>2;<sp/>++I)<sp/>Zipped-&gt;Iters[I]<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Zipped;</highlight></codeline>
<codeline lineno="2569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"></highlight></codeline>
<codeline lineno="2571" refid="structml__grid__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__grid__t" kindref="compound">ml_grid_t</ref><sp/>{</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function;</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count;</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Values[];</highlight></codeline>
<codeline lineno="2576"><highlight class="normal">}<sp/><ref refid="structml__grid__t" kindref="compound">ml_grid_t</ref>;</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="normal">ML_TYPE(MLGridT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;grid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"></highlight></codeline>
<codeline lineno="2581" refid="structml__grid__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__grid__state__t" kindref="compound">ml_grid_state_t</ref><sp/>{</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function;</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Values,<sp/>**Iters;</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/>Index,<sp/>Iteration;</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[];</highlight></codeline>
<codeline lineno="2587"><highlight class="normal">}<sp/><ref refid="structml__grid__state__t" kindref="compound">ml_grid_state_t</ref>;</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal">ML_TYPE(MLGridStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;grid-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>grid_iterate(<ref refid="structml__grid__state__t" kindref="compound">ml_grid_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>State-&gt;Index;</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--Index<sp/>&lt;<sp/>0)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iters[Index]);</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iters[Index]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++Index<sp/>==<sp/><sp/>State-&gt;Count)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Values[Index]);</highlight></codeline>
<codeline lineno="2604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"></highlight></codeline>
<codeline lineno="2606"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLGridT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__grid__t" kindref="compound">ml_grid_t</ref><sp/>*Grid)<sp/>{</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__grid__state__t" kindref="compound">ml_grid_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__grid__state__t" kindref="compound">ml_grid_state_t</ref>,<sp/>2<sp/>*<sp/>Grid-&gt;Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLGridStateT;</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)grid_iterate;</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Function<sp/>=<sp/>Grid-&gt;Function;</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iters<sp/>=<sp/>State-&gt;Args<sp/>+<sp/>Grid-&gt;Count;</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values<sp/>=<sp/>Grid-&gt;Values;</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>Grid-&gt;Count;</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iteration<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Values[0]);</highlight></codeline>
<codeline lineno="2619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"></highlight></codeline>
<codeline lineno="2621"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLGridStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__grid__state__t" kindref="compound">ml_grid_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(State-&gt;Iteration));</highlight></codeline>
<codeline lineno="2623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_grid_fnx_value(<ref refid="structml__grid__state__t" kindref="compound">ml_grid_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[State-&gt;Index]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++State-&gt;Index<sp/>==<sp/><sp/>State-&gt;Count)<sp/>{</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State-&gt;Base.Caller,<sp/>State-&gt;Function,<sp/>State-&gt;Count,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iters[State-&gt;Index]);</highlight></codeline>
<codeline lineno="2632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"></highlight></codeline>
<codeline lineno="2634"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLGridStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__grid__state__t" kindref="compound">ml_grid_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_grid_fnx_value;</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iters[0]);</highlight></codeline>
<codeline lineno="2639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"></highlight></codeline>
<codeline lineno="2641"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLGridStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__grid__state__t" kindref="compound">ml_grid_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)grid_iterate;</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/>++State-&gt;Iteration;</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>State-&gt;Index<sp/>=<sp/>State-&gt;Count<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iters[Index]);</highlight></codeline>
<codeline lineno="2647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"></highlight></codeline>
<codeline lineno="2649"><highlight class="normal">ML_FUNCTION(Grid)<sp/>{</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"></highlight><highlight class="comment">//@grid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2651"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence/1,...,Sequence/n:sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"></highlight><highlight class="comment">//&lt;Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>sequence<sp/>that<sp/>produces<sp/>:mini:`Function(V/1,<sp/>V/2,<sp/>...,<sp/>V/n)`<sp/>for<sp/>all<sp/>possible<sp/>combinations<sp/>of<sp/>:mini:`V/1,<sp/>...,<sp/>V/n`,<sp/>where<sp/>:mini:`V/i`<sp/>are<sp/>the<sp/>values<sp/>produced<sp/>by<sp/>:mini:`Sequence/i`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(grid(1<sp/>..<sp/>3,<sp/>&quot;cake&quot;,<sp/>[true,<sp/>false],<sp/>tuple))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2656"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(grid(1<sp/>..<sp/>3,<sp/>&quot;cake&quot;,<sp/>*))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(Count<sp/>-<sp/>1,<sp/>MLFunctionT);</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__grid__t" kindref="compound">ml_grid_t</ref><sp/>*Grid<sp/>=<sp/>xnew(<ref refid="structml__grid__t" kindref="compound">ml_grid_t</ref>,<sp/>Count<sp/>-<sp/>1,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/>Grid-&gt;Type<sp/>=<sp/>MLGridT;</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/>Grid-&gt;Count<sp/>=<sp/>Count<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/>Grid-&gt;Function<sp/>=<sp/>Args[Count<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count<sp/>-<sp/>1;<sp/>++I)<sp/>Grid-&gt;Values[I]<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Grid;</highlight></codeline>
<codeline lineno="2665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"></highlight></codeline>
<codeline lineno="2667" refid="structml__paired__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__paired__t" kindref="compound">ml_paired_t</ref><sp/>{</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Keys,<sp/>*Values;</highlight></codeline>
<codeline lineno="2670"><highlight class="normal">}<sp/><ref refid="structml__paired__t" kindref="compound">ml_paired_t</ref>;</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"></highlight></codeline>
<codeline lineno="2672"><highlight class="normal">ML_TYPE(MLPairedT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;paired&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"></highlight></codeline>
<codeline lineno="2675" refid="structml__paired__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__paired__state__t" kindref="compound">ml_paired_state_t</ref><sp/>{</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Keys,<sp/>*Values;</highlight></codeline>
<codeline lineno="2678"><highlight class="normal">}<sp/><ref refid="structml__paired__state__t" kindref="compound">ml_paired_state_t</ref>;</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"></highlight></codeline>
<codeline lineno="2680"><highlight class="normal">ML_TYPE(MLPairedStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;paired-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight></codeline>
<codeline lineno="2683"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>paired_value_iterate(<ref refid="structml__paired__state__t" kindref="compound">ml_paired_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="2688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"></highlight></codeline>
<codeline lineno="2690"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>paired_key_iterate(<ref refid="structml__paired__state__t" kindref="compound">ml_paired_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Keys<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)paired_value_iterate;</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Values);</highlight></codeline>
<codeline lineno="2696"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLPairedT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__paired__t" kindref="compound">ml_paired_t</ref><sp/>*Paired)<sp/>{</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__paired__state__t" kindref="compound">ml_paired_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__paired__state__t" kindref="compound">ml_paired_state_t</ref>);</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLPairedStateT;</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)paired_key_iterate;</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values<sp/>=<sp/>Paired-&gt;Values;</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Paired-&gt;Keys);</highlight></codeline>
<codeline lineno="2706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"></highlight></codeline>
<codeline lineno="2708"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLPairedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__paired__state__t" kindref="compound">ml_paired_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value(Caller,<sp/>State-&gt;Keys);</highlight></codeline>
<codeline lineno="2710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"></highlight></codeline>
<codeline lineno="2712"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLPairedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__paired__state__t" kindref="compound">ml_paired_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value(Caller,<sp/>State-&gt;Values);</highlight></codeline>
<codeline lineno="2714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>paired_value_iter_next(<ref refid="structml__paired__state__t" kindref="compound">ml_paired_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="2721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"></highlight></codeline>
<codeline lineno="2723"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>paired_key_iter_next(<ref refid="structml__paired__state__t" kindref="compound">ml_paired_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Keys<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)paired_value_iter_next;</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Values);</highlight></codeline>
<codeline lineno="2729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"></highlight></codeline>
<codeline lineno="2731"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLPairedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__paired__state__t" kindref="compound">ml_paired_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)paired_key_iter_next;</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Keys);</highlight></codeline>
<codeline lineno="2735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"></highlight></codeline>
<codeline lineno="2737"><highlight class="normal">ML_FUNCTION(Pair)<sp/>{</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"></highlight><highlight class="comment">//@pair</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2739"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence/1:sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence/2:sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2742"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>sequence<sp/>that<sp/>produces<sp/>the<sp/>values<sp/>from<sp/>:mini:`Sequence/1`<sp/>as<sp/>keys<sp/>and<sp/>the<sp/>values<sp/>from<sp/>:mini:`Sequence/2`<sp/>as<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__paired__t" kindref="compound">ml_paired_t</ref><sp/>*Paired<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__paired__t" kindref="compound">ml_paired_t</ref>);</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*TArgs0[3];</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_find_generic_parent(ml_typeof(Args[0]),<sp/>MLSequenceT,<sp/>3,<sp/>TArgs0)<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*TArgs1[3];</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_find_generic_parent(ml_typeof(Args[1]),<sp/>MLSequenceT,<sp/>3,<sp/>TArgs1)<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TArgs1[0]<sp/>=<sp/>MLPairedT;</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TArgs1[1]<sp/>=<sp/>TArgs0[2];</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Paired-&gt;Type<sp/>=<sp/>ml_generic_type(3,<sp/>TArgs1);</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Paired-&gt;Type<sp/>=<sp/>MLPairedT;</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Paired-&gt;Type<sp/>=<sp/>MLPairedT;</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/>Paired-&gt;Type<sp/>=<sp/>MLPairedT;</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/>Paired-&gt;Keys<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/>Paired-&gt;Values<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Paired;</highlight></codeline>
<codeline lineno="2765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"></highlight></codeline>
<codeline lineno="2767" refid="structml__weaved__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__weaved__t" kindref="compound">ml_weaved_t</ref><sp/>{</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count;</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iters[];</highlight></codeline>
<codeline lineno="2771"><highlight class="normal">}<sp/><ref refid="structml__weaved__t" kindref="compound">ml_weaved_t</ref>;</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"></highlight></codeline>
<codeline lineno="2773"><highlight class="normal">ML_TYPE(MLWeavedT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;weaved&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"></highlight></codeline>
<codeline lineno="2776" refid="structml__weaved__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__weaved__state__t" kindref="compound">ml_weaved_state_t</ref><sp/>{</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/>Index,<sp/>Iteration;</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iters[];</highlight></codeline>
<codeline lineno="2780"><highlight class="normal">}<sp/><ref refid="structml__weaved__state__t" kindref="compound">ml_weaved_state_t</ref>;</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"></highlight></codeline>
<codeline lineno="2782"><highlight class="normal">ML_TYPE(MLWeavedStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;weaved-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight></codeline>
<codeline lineno="2785"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>weaved_iterate(<ref refid="structml__weaved__state__t" kindref="compound">ml_weaved_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iters[State-&gt;Index]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="2790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"></highlight></codeline>
<codeline lineno="2792"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLWeavedT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__weaved__t" kindref="compound">ml_weaved_t</ref><sp/>*Weaved)<sp/>{</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__weaved__state__t" kindref="compound">ml_weaved_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__weaved__state__t" kindref="compound">ml_weaved_state_t</ref>,<sp/>Weaved-&gt;Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLWeavedStateT;</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)weaved_iterate;</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Weaved-&gt;Count;<sp/>++I)<sp/>State-&gt;Iters[I]<sp/>=<sp/>Weaved-&gt;Iters[I];</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>Weaved-&gt;Count;</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iteration<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iters[0]);</highlight></codeline>
<codeline lineno="2802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"></highlight></codeline>
<codeline lineno="2804"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLWeavedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__weaved__state__t" kindref="compound">ml_weaved_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(State-&gt;Iteration));</highlight></codeline>
<codeline lineno="2806"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"></highlight></codeline>
<codeline lineno="2808"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLWeavedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__weaved__state__t" kindref="compound">ml_weaved_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value(Caller,<sp/>State-&gt;Iters[State-&gt;Index]);</highlight></codeline>
<codeline lineno="2810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"></highlight></codeline>
<codeline lineno="2812"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLWeavedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__weaved__state__t" kindref="compound">ml_weaved_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++State-&gt;Index<sp/>==<sp/>State-&gt;Count)<sp/>State-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++State-&gt;Iteration<sp/>&gt;<sp/>State-&gt;Count)<sp/>{</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iters[State-&gt;Index]);</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iters[State-&gt;Index]);</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal">ML_FUNCTION(Weave)<sp/>{</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"></highlight><highlight class="comment">//@weave</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2824"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence/1,...,Sequence/n:sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2825"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2826"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>sequence<sp/>that<sp/>produces<sp/>interleaved<sp/>values<sp/>:mini:`V/i`<sp/>from<sp/>each<sp/>of<sp/>:mini:`Sequence/i`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2827"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>sequence<sp/>stops<sp/>produces<sp/>values<sp/>when<sp/>any<sp/>of<sp/>the<sp/>:mini:`Sequence/i`<sp/>stops.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2828"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(weave(1<sp/>..<sp/>3,<sp/>&quot;cake&quot;))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__weaved__t" kindref="compound">ml_weaved_t</ref><sp/>*Weaved<sp/>=<sp/>xnew(<ref refid="structml__weaved__t" kindref="compound">ml_weaved_t</ref>,<sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/>Weaved-&gt;Type<sp/>=<sp/>MLWeavedT;</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/>Weaved-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>Weaved-&gt;Iters[I]<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Weaved;</highlight></codeline>
<codeline lineno="2835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"></highlight></codeline>
<codeline lineno="2837" refid="structml__unpacked__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter;</highlight></codeline>
<codeline lineno="2840"><highlight class="normal">}<sp/><ref refid="structml__unpacked__t" kindref="compound">ml_unpacked_t</ref>;</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"></highlight></codeline>
<codeline lineno="2842"><highlight class="normal">ML_TYPE(MLUnpackedT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;unpacked&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"></highlight></codeline>
<codeline lineno="2845" refid="structml__unpacked__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter;</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="2849"><highlight class="normal">}<sp/><ref refid="structml__unpacked__state__t" kindref="compound">ml_unpacked_state_t</ref>;</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"></highlight></codeline>
<codeline lineno="2851"><highlight class="normal">ML_TYPE(MLUnpackedStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;unpacked-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"></highlight></codeline>
<codeline lineno="2854"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unpacked_value(<ref refid="structml__unpacked__state__t" kindref="compound">ml_unpacked_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="2858"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"></highlight></codeline>
<codeline lineno="2860"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unpacked_iterate(<ref refid="structml__unpacked__state__t" kindref="compound">ml_unpacked_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)unpacked_value;</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="2865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"></highlight></codeline>
<codeline lineno="2867"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLUnpackedT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__unpacked__t" kindref="compound">ml_unpacked_t</ref><sp/>*Folded)<sp/>{</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__unpacked__state__t" kindref="compound">ml_unpacked_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__unpacked__state__t" kindref="compound">ml_unpacked_state_t</ref>);</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLUnpackedStateT;</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)unpacked_iterate;</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Folded-&gt;Iter);</highlight></codeline>
<codeline lineno="2874"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"></highlight></codeline>
<codeline lineno="2876"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLUnpackedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__unpacked__state__t" kindref="compound">ml_unpacked_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_unpack(State-&gt;Value,<sp/>1));</highlight></codeline>
<codeline lineno="2878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"></highlight></codeline>
<codeline lineno="2880"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLUnpackedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__unpacked__state__t" kindref="compound">ml_unpacked_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_unpack(State-&gt;Value,<sp/>2));</highlight></codeline>
<codeline lineno="2882"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"></highlight></codeline>
<codeline lineno="2884"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLUnpackedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__unpacked__state__t" kindref="compound">ml_unpacked_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)unpacked_iterate;</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="2887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"></highlight></codeline>
<codeline lineno="2889"><highlight class="normal">ML_FUNCTION(Unpack)<sp/>{</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"></highlight><highlight class="comment">//@unpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2891"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence:sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2892"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2893"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>sequence<sp/>unpacks<sp/>each<sp/>value<sp/>generated<sp/>by<sp/>:mini:`Sequence`<sp/>as<sp/>keys<sp/>and<sp/>values<sp/>respectively.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2894"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>L<sp/>:=<sp/>[(&quot;A&quot;,<sp/>&quot;a&quot;),<sp/>(&quot;B&quot;,<sp/>&quot;b&quot;),<sp/>(&quot;C&quot;,<sp/>&quot;c&quot;)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2895"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>map(unpack(L))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__unpacked__t" kindref="compound">ml_unpacked_t</ref><sp/>*Unpacked<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__unpacked__t" kindref="compound">ml_unpacked_t</ref>);</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/>Unpacked-&gt;Type<sp/>=<sp/>MLUnpackedT;</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/>Unpacked-&gt;Iter<sp/>=<sp/>ml_chained(Count,<sp/>Args);</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Unpacked;</highlight></codeline>
<codeline lineno="2901"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"></highlight></codeline>
<codeline lineno="2903" refid="structml__folded__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter;</highlight></codeline>
<codeline lineno="2906"><highlight class="normal">}<sp/><ref refid="structml__folded__t" kindref="compound">ml_folded_t</ref>;</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"></highlight></codeline>
<codeline lineno="2908"><highlight class="normal">ML_TYPE(MLFoldedT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;folded&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"></highlight></codeline>
<codeline lineno="2911" refid="structml__folded__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__folded__state__t" kindref="compound">ml_folded_state_t</ref><sp/>{</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter;</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key;</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="2916"><highlight class="normal">}<sp/><ref refid="structml__folded__state__t" kindref="compound">ml_folded_state_t</ref>;</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"></highlight></codeline>
<codeline lineno="2918"><highlight class="normal">ML_TYPE(MLFoldedStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;folded-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"></highlight></codeline>
<codeline lineno="2921"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>folded_value(<ref refid="structml__folded__state__t" kindref="compound">ml_folded_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="2925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"></highlight></codeline>
<codeline lineno="2927"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>folded_iterate_value(<ref refid="structml__folded__state__t" kindref="compound">ml_folded_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)folded_value;</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="2932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"></highlight></codeline>
<codeline lineno="2934"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>folded_key(<ref refid="structml__folded__state__t" kindref="compound">ml_folded_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Key<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)folded_iterate_value;</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="2939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>folded_iterate_key(<ref refid="structml__folded__state__t" kindref="compound">ml_folded_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)folded_key;</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="2946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"></highlight></codeline>
<codeline lineno="2948"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLFoldedT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__folded__t" kindref="compound">ml_folded_t</ref><sp/>*Folded)<sp/>{</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__folded__state__t" kindref="compound">ml_folded_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__folded__state__t" kindref="compound">ml_folded_state_t</ref>);</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLFoldedStateT;</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)folded_iterate_key;</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Folded-&gt;Iter);</highlight></codeline>
<codeline lineno="2955"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"></highlight></codeline>
<codeline lineno="2957"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLFoldedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__folded__state__t" kindref="compound">ml_folded_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(State-&gt;Key);</highlight></codeline>
<codeline lineno="2959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"></highlight></codeline>
<codeline lineno="2961"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLFoldedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__folded__state__t" kindref="compound">ml_folded_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(State-&gt;Value);</highlight></codeline>
<codeline lineno="2963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"></highlight></codeline>
<codeline lineno="2965"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLFoldedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__folded__state__t" kindref="compound">ml_folded_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)folded_iterate_key;</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="2968"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"></highlight></codeline>
<codeline lineno="2970"><highlight class="normal">ML_FUNCTION(Fold)<sp/>{</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"></highlight><highlight class="comment">//@fold</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2972"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence:sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2973"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2974"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>sequence<sp/>that<sp/>treats<sp/>alternating<sp/>values<sp/>produced<sp/>by<sp/>:mini:`Sequence`<sp/>as<sp/>keys<sp/>and<sp/>values<sp/>respectively.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2975"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>map(fold(1<sp/>..<sp/>10))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__folded__t" kindref="compound">ml_folded_t</ref><sp/>*Folded<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__folded__t" kindref="compound">ml_folded_t</ref>);</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/>Folded-&gt;Type<sp/>=<sp/>MLFoldedT;</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/>Folded-&gt;Iter<sp/>=<sp/>ml_chained(Count,<sp/>Args);</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Folded;</highlight></codeline>
<codeline lineno="2981"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"></highlight></codeline>
<codeline lineno="2983" refid="structml__unfolded__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter;</highlight></codeline>
<codeline lineno="2986"><highlight class="normal">}<sp/><ref refid="structml__unfolded__t" kindref="compound">ml_unfolded_t</ref>;</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"></highlight></codeline>
<codeline lineno="2988"><highlight class="normal">ML_TYPE(MLUnfoldedT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;unfolded&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"></highlight></codeline>
<codeline lineno="2991" refid="structml__unfolded__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter;</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="2995"><highlight class="normal">}<sp/><ref refid="structml__unfolded__state__t" kindref="compound">ml_unfolded_state_t</ref>;</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"></highlight></codeline>
<codeline lineno="2997"><highlight class="normal">ML_TYPE(MLUnfoldedStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;unfolded-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"></highlight></codeline>
<codeline lineno="3000"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unfolded_iterate(<ref refid="structml__unfolded__state__t" kindref="compound">ml_unfolded_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iter<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="3005"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"></highlight></codeline>
<codeline lineno="3007"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLUnfoldedT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__unfolded__t" kindref="compound">ml_unfolded_t</ref><sp/>*Unfolded)<sp/>{</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__unfolded__state__t" kindref="compound">ml_unfolded_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__unfolded__state__t" kindref="compound">ml_unfolded_state_t</ref>);</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLUnfoldedStateT;</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)unfolded_iterate;</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/>++State-&gt;Index;</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Unfolded-&gt;Iter);</highlight></codeline>
<codeline lineno="3015"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"></highlight></codeline>
<codeline lineno="3017"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLUnfoldedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__unfolded__state__t" kindref="compound">ml_unfolded_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(State-&gt;Index));</highlight></codeline>
<codeline lineno="3019"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"></highlight></codeline>
<codeline lineno="3021"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLUnfoldedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__unfolded__state__t" kindref="compound">ml_unfolded_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Index<sp/>%<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key(Caller,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value(Caller,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3027"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"></highlight></codeline>
<codeline lineno="3029"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLUnfoldedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__unfolded__state__t" kindref="compound">ml_unfolded_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>++State-&gt;Index;</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>%<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(State);</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3036"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"></highlight></codeline>
<codeline lineno="3038"><highlight class="normal">ML_FUNCTION(Unfold)<sp/>{</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"></highlight><highlight class="comment">//@unfold</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3040"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence:sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3041"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3042"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>sequence<sp/>that<sp/>treats<sp/>produces<sp/>alternatively<sp/>the<sp/>keys<sp/>and<sp/>values<sp/>produced<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3043"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(unfold(&quot;cake&quot;))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__unfolded__t" kindref="compound">ml_unfolded_t</ref><sp/>*Unfolded<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__unfolded__t" kindref="compound">ml_unfolded_t</ref>);</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/>Unfolded-&gt;Type<sp/>=<sp/>MLUnfoldedT;</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/>Unfolded-&gt;Iter<sp/>=<sp/>ml_chained(Count,<sp/>Args);</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Unfolded;</highlight></codeline>
<codeline lineno="3049"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"></highlight></codeline>
<codeline lineno="3051"><highlight class="normal"></highlight></codeline>
<codeline lineno="3052" refid="structml__swapped__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="3055"><highlight class="normal">}<sp/><ref refid="structml__swapped__t" kindref="compound">ml_swapped_t</ref>;</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"></highlight></codeline>
<codeline lineno="3057"><highlight class="normal">ML_TYPE(MLSwappedT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;swapped&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"></highlight></codeline>
<codeline lineno="3060" refid="structml__swapped__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter;</highlight></codeline>
<codeline lineno="3063"><highlight class="normal">}<sp/><ref refid="structml__swapped__state__t" kindref="compound">ml_swapped_state_t</ref>;</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"></highlight></codeline>
<codeline lineno="3065"><highlight class="normal">ML_TYPE(MLSwappedStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;swapped-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"></highlight></codeline>
<codeline lineno="3068"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swapped_iterate(<ref refid="structml__swapped__state__t" kindref="compound">ml_swapped_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iter<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="3073"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"></highlight></codeline>
<codeline lineno="3075"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLSwappedT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__swapped__t" kindref="compound">ml_swapped_t</ref><sp/>*Swapped)<sp/>{</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__swapped__state__t" kindref="compound">ml_swapped_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__swapped__state__t" kindref="compound">ml_swapped_state_t</ref>);</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLSwappedStateT;</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)swapped_iterate;</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Swapped-&gt;Value);</highlight></codeline>
<codeline lineno="3082"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"></highlight></codeline>
<codeline lineno="3084"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLSwappedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__swapped__state__t" kindref="compound">ml_swapped_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value(Caller,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="3086"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"></highlight></codeline>
<codeline lineno="3088"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLSwappedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__swapped__state__t" kindref="compound">ml_swapped_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key(Caller,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="3090"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"></highlight></codeline>
<codeline lineno="3092"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLSwappedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__swapped__state__t" kindref="compound">ml_swapped_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="3094"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"></highlight></codeline>
<codeline lineno="3096"><highlight class="normal">ML_FUNCTION(Swap)<sp/>{</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"></highlight><highlight class="comment">//@swap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3098"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence:sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3099"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>sequence<sp/>which<sp/>swaps<sp/>the<sp/>keys<sp/>and<sp/>values<sp/>produced<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3100"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>map(swap(&quot;cake&quot;))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__swapped__t" kindref="compound">ml_swapped_t</ref><sp/>*Swapped<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__swapped__t" kindref="compound">ml_swapped_t</ref>);</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*TArgs[3];</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_find_generic_parent(ml_typeof(Args[0]),<sp/>MLSequenceT,<sp/>3,<sp/>TArgs)<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TArgs[0]<sp/>=<sp/>MLSwappedT;</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*KeyType<sp/>=<sp/>TArgs[1];</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TArgs[1]<sp/>=<sp/>TArgs[2];</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TArgs[2]<sp/>=<sp/>KeyType;</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Swapped-&gt;Type<sp/>=<sp/>ml_generic_type(3,<sp/>TArgs);</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Swapped-&gt;Type<sp/>=<sp/>MLSwappedT;</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/>Swapped-&gt;Type<sp/>=<sp/>MLSwappedT;</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/>Swapped-&gt;Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Swapped;</highlight></codeline>
<codeline lineno="3120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"></highlight></codeline>
<codeline lineno="3122" refid="structml__key__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="3125"><highlight class="normal">}<sp/><ref refid="structml__key__t" kindref="compound">ml_key_t</ref>;</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"></highlight></codeline>
<codeline lineno="3127"><highlight class="normal">ML_TYPE(MLKeyT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"></highlight></codeline>
<codeline lineno="3130" refid="structml__key__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter;</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Iteration;</highlight></codeline>
<codeline lineno="3134"><highlight class="normal">}<sp/><ref refid="structml__key__state__t" kindref="compound">ml_key_state_t</ref>;</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"></highlight></codeline>
<codeline lineno="3136"><highlight class="normal">ML_TYPE(MLKeyStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;keys-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"></highlight></codeline>
<codeline lineno="3139"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>key_iterate(<ref refid="structml__key__state__t" kindref="compound">ml_key_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iter<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/>++State-&gt;Iteration;</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="3145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"></highlight></codeline>
<codeline lineno="3147"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLKeyT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__key__t" kindref="compound">ml_key_t</ref><sp/>*Key)<sp/>{</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__key__state__t" kindref="compound">ml_key_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__key__state__t" kindref="compound">ml_key_state_t</ref>);</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLKeyStateT;</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)key_iterate;</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Key-&gt;Value);</highlight></codeline>
<codeline lineno="3154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"></highlight></codeline>
<codeline lineno="3156"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLKeyStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__key__state__t" kindref="compound">ml_key_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(State-&gt;Iteration));</highlight></codeline>
<codeline lineno="3158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"></highlight></codeline>
<codeline lineno="3160"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLKeyStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__key__state__t" kindref="compound">ml_key_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key(Caller,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="3162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"></highlight></codeline>
<codeline lineno="3164"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLKeyStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__key__state__t" kindref="compound">ml_key_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="3166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"></highlight></codeline>
<codeline lineno="3168"><highlight class="normal">ML_FUNCTION(Key)<sp/>{</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"></highlight><highlight class="comment">//@key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3170"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence:sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>sequence<sp/>which<sp/>produces<sp/>the<sp/>keys<sp/>of<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3172"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(key({&quot;A&quot;<sp/>is<sp/>1,<sp/>&quot;B&quot;<sp/>is<sp/>2,<sp/>&quot;C&quot;<sp/>is<sp/>3}))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLSequenceT);</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__key__t" kindref="compound">ml_key_t</ref><sp/>*Key<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__key__t" kindref="compound">ml_key_t</ref>);</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/>Key-&gt;Type<sp/>=<sp/>MLKeyT;</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/>Key-&gt;Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Key;</highlight></codeline>
<codeline lineno="3179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"></highlight></codeline>
<codeline lineno="3181" refid="structml__batched__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__batched__t" kindref="compound">ml_batched_t</ref><sp/>{</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter,<sp/>*Function;</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size,<sp/>Shift;</highlight></codeline>
<codeline lineno="3185"><highlight class="normal">}<sp/><ref refid="structml__batched__t" kindref="compound">ml_batched_t</ref>;</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"></highlight></codeline>
<codeline lineno="3187"><highlight class="normal">ML_TYPE(MLBatchedT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;batched&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"></highlight></codeline>
<codeline lineno="3190" refid="structml__batched__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__batched__state__t" kindref="compound">ml_batched_state_t</ref><sp/>{</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter,<sp/>*Function,<sp/>*Value;</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size,<sp/>Shift,<sp/>Index,<sp/>Iteration;</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[];</highlight></codeline>
<codeline lineno="3195"><highlight class="normal">}<sp/><ref refid="structml__batched__state__t" kindref="compound">ml_batched_state_t</ref>;</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"></highlight></codeline>
<codeline lineno="3197"><highlight class="normal">ML_TYPE(MLBatchedStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;batched-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"></highlight></codeline>
<codeline lineno="3200"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>batched_iterate(<ref refid="structml__batched__state__t" kindref="compound">ml_batched_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"></highlight></codeline>
<codeline lineno="3202"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>batched_iter_value(<ref refid="structml__batched__state__t" kindref="compound">ml_batched_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[State-&gt;Index]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++State-&gt;Index<sp/>==<sp/>State-&gt;Size)<sp/>{</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++State-&gt;Iteration;</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(State);</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)batched_iterate;</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"></highlight></codeline>
<codeline lineno="3215"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>batched_iterate(<ref refid="structml__batched__state__t" kindref="compound">ml_batched_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Iter<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Index<sp/>&gt;<sp/>(State-&gt;Size<sp/>-<sp/>State-&gt;Shift))<sp/>{</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++State-&gt;Iteration;</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>MLNil);</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)batched_iter_value;</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="3227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"></highlight></codeline>
<codeline lineno="3229"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLBatchedT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__batched__t" kindref="compound">ml_batched_t</ref><sp/>*Batched)<sp/>{</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__batched__state__t" kindref="compound">ml_batched_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__batched__state__t" kindref="compound">ml_batched_state_t</ref>,<sp/>Batched-&gt;Size,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLBatchedStateT;</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)batched_iterate;</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Function<sp/>=<sp/>Batched-&gt;Function;</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Size<sp/>=<sp/>Batched-&gt;Size;</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Shift<sp/>=<sp/>Batched-&gt;Shift;</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iteration<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Batched-&gt;Iter);</highlight></codeline>
<codeline lineno="3240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"></highlight></codeline>
<codeline lineno="3242"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLBatchedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__batched__state__t" kindref="compound">ml_batched_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(State-&gt;Iteration));</highlight></codeline>
<codeline lineno="3244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"></highlight></codeline>
<codeline lineno="3246"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLBatchedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__batched__state__t" kindref="compound">ml_batched_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>State-&gt;Function,<sp/>State-&gt;Index,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="3248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"></highlight></codeline>
<codeline lineno="3250"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLBatchedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__batched__state__t" kindref="compound">ml_batched_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!State-&gt;Iter)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>State-&gt;Size,<sp/>Shift<sp/>=<sp/>State-&gt;Shift;</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Shift<sp/>&lt;<sp/>Size)<sp/>{</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Shift;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>State-&gt;Args[I<sp/>-<sp/>Shift]<sp/>=<sp/>State-&gt;Args[I];</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>Size<sp/>-<sp/>Shift;</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)batched_iterate;</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="3262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"></highlight></codeline>
<codeline lineno="3264"><highlight class="normal">ML_FUNCTION(Batch)<sp/>{</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"></highlight><highlight class="comment">//@batch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3266"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence:sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3267"><highlight class="normal"></highlight><highlight class="comment">//&lt;Size:integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3268"><highlight class="normal"></highlight><highlight class="comment">//&lt;Shift?:integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3269"><highlight class="normal"></highlight><highlight class="comment">//&lt;Function:function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3270"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>sequence<sp/>that<sp/>calls<sp/>:mini:`Function`<sp/>with<sp/>each<sp/>batch<sp/>of<sp/>:mini:`Size`<sp/>values<sp/>produced<sp/>by<sp/>:mini:`Sequence`<sp/>and<sp/>produces<sp/>the<sp/>results.<sp/>If<sp/>a<sp/>:mini:`Shift`<sp/>is<sp/>provided<sp/>then<sp/>:mini:`Size<sp/>-<sp/>Shift`<sp/>values<sp/>of<sp/>each<sp/>batch<sp/>come<sp/>from<sp/>the<sp/>previous<sp/>batch.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3272"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(batch(1<sp/>..<sp/>20,<sp/>4,<sp/>tuple))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3273"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(batch(1<sp/>..<sp/>20,<sp/>4,<sp/>2,<sp/>tuple))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(3);</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__batched__t" kindref="compound">ml_batched_t</ref><sp/>*Batched<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__batched__t" kindref="compound">ml_batched_t</ref>);</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/>Batched-&gt;Type<sp/>=<sp/>MLBatchedT;</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/>Batched-&gt;Iter<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/>Batched-&gt;Size<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(2,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Batched-&gt;Shift<sp/>=<sp/>ml_integer_value(Args[2]);</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Batched-&gt;Shift<sp/>&lt;=<sp/>0<sp/>||<sp/>Batched-&gt;Shift<sp/>&gt;<sp/>Batched-&gt;Size)<sp/>{</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>shift<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Batched-&gt;Function<sp/>=<sp/>Args[3];</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Batched-&gt;Shift<sp/>=<sp/>Batched-&gt;Size;</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Batched-&gt;Function<sp/>=<sp/>Args[2];</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Batched;</highlight></codeline>
<codeline lineno="3291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"></highlight></codeline>
<codeline lineno="3293" refid="structml__iterator__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter;</highlight></codeline>
<codeline lineno="3296"><highlight class="normal">}<sp/><ref refid="structml__iterator__t" kindref="compound">ml_iterator_t</ref>;</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"></highlight></codeline>
<codeline lineno="3298"><highlight class="normal">ML_TYPE(MLIteratorT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;iterator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"></highlight><highlight class="comment">//@iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>iterator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3301"><highlight class="normal"></highlight></codeline>
<codeline lineno="3302"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_iterator_run(<ref refid="structml__iterator__t" kindref="compound">ml_iterator_t</ref><sp/>*Iterator,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Iterator-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator-&gt;Iter<sp/>=<sp/>Iter;</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iter<sp/>==<sp/>MLNil)<sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Iter))<sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iterator);</highlight></codeline>
<codeline lineno="3308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"></highlight></codeline>
<codeline lineno="3310"><highlight class="normal">ML_FUNCTIONX(MLIterate)<sp/>{</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"></highlight><highlight class="comment">//@iterate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3312"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence:sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3313"><highlight class="normal"></highlight><highlight class="comment">//&gt;iterator|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>iterator<sp/>for<sp/>:mini:`Sequence`.<sp/>Returns<sp/>:mini:`nil`<sp/>is<sp/>:mini:`Sequence`<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__iterator__t" kindref="compound">ml_iterator_t</ref><sp/>*Iterator<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__iterator__t" kindref="compound">ml_iterator_t</ref>);</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator-&gt;Base.Type<sp/>=<sp/>MLIteratorT;</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_iterator_run;</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Iterator,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="3322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"></highlight></codeline>
<codeline lineno="3324"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;next&quot;</highlight><highlight class="normal">,<sp/>MLIteratorT)<sp/>{</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"></highlight><highlight class="comment">//&lt;Iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3326"><highlight class="normal"></highlight><highlight class="comment">//&gt;iterator|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3327"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Advances<sp/>:mini:`Iterator`,<sp/>returning<sp/>:mini:`nil`<sp/>if<sp/>it<sp/>is<sp/>finished.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__iterator__t" kindref="compound">ml_iterator_t</ref><sp/>*Iterator<sp/>=<sp/>(<ref refid="structml__iterator__t" kindref="compound">ml_iterator_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Iterator,<sp/>Iterator-&gt;Iter);</highlight></codeline>
<codeline lineno="3332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"></highlight></codeline>
<codeline lineno="3334"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/>MLIteratorT)<sp/>{</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"></highlight><highlight class="comment">//&lt;Iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3336"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3337"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>key<sp/>produced<sp/>by<sp/>:mini:`Iterator`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__iterator__t" kindref="compound">ml_iterator_t</ref><sp/>*Iterator<sp/>=<sp/>(<ref refid="structml__iterator__t" kindref="compound">ml_iterator_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key(Caller,<sp/>Iterator-&gt;Iter);</highlight></codeline>
<codeline lineno="3340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"></highlight></codeline>
<codeline lineno="3342"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>MLIteratorT)<sp/>{</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"></highlight><highlight class="comment">//&lt;Iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3344"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>value<sp/>produced<sp/>by<sp/>:mini:`Iterator`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__iterator__t" kindref="compound">ml_iterator_t</ref><sp/>*Iterator<sp/>=<sp/>(<ref refid="structml__iterator__t" kindref="compound">ml_iterator_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value(Caller,<sp/>Iterator-&gt;Iter);</highlight></codeline>
<codeline lineno="3348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"></highlight></codeline>
<codeline lineno="3350" refid="structml__split__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Seq,<sp/>*Fn;</highlight></codeline>
<codeline lineno="3353"><highlight class="normal">}<sp/><ref refid="structml__split__t" kindref="compound">ml_split_t</ref>;</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"></highlight></codeline>
<codeline lineno="3355"><highlight class="normal">ML_TYPE(MLSplitT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;split&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"></highlight></codeline>
<codeline lineno="3357" refid="structml__split__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>Inner;</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Fn;</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter;</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[1];</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Skip,<sp/>Index;</highlight></codeline>
<codeline lineno="3364"><highlight class="normal">}<sp/><ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref>;</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"></highlight></codeline>
<codeline lineno="3366"><highlight class="normal">ML_TYPE(MLSplitStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;split-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"></highlight></codeline>
<codeline lineno="3369"><highlight class="normal">ML_TYPE(MLSplitInnerT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;split-inner&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"></highlight></codeline>
<codeline lineno="3372"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_split_state_first_iter(<ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter);</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"></highlight></codeline>
<codeline lineno="3374"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_split_state_first_split(<ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_deref(Value)<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_split_state_first_iter;</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Skip<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/>++State-&gt;Index;</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="3383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"></highlight></codeline>
<codeline lineno="3385"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_split_state_first_value(<ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_split_state_first_split;</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>State-&gt;Fn,<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="3390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"></highlight></codeline>
<codeline lineno="3392"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_split_state_first_iter(<ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Iter))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Iter);</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iter<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Iter);</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_split_state_first_value;</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Iter);</highlight></codeline>
<codeline lineno="3397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"></highlight></codeline>
<codeline lineno="3399"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLSplitT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__split__t" kindref="compound">ml_split_t</ref><sp/>*Split)<sp/>{</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref>);</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLSplitStateT;</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_split_state_first_iter;</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Fn<sp/>=<sp/>Split-&gt;Fn;</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Skip<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Inner.Type<sp/>=<sp/>MLSplitInnerT;</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Split-&gt;Seq);</highlight></codeline>
<codeline lineno="3410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"></highlight></codeline>
<codeline lineno="3412"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_split_state_skip_iter(<ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter);</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"></highlight></codeline>
<codeline lineno="3414"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_split_state_skip_split(<ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_deref(Value)<sp/>!=<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_split_state_skip_iter;</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_split_state_first_iter;</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="3422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"></highlight></codeline>
<codeline lineno="3424"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_split_state_skip_value(<ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_split_state_skip_split;</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>State-&gt;Fn,<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="3429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"></highlight></codeline>
<codeline lineno="3431"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_split_state_skip_iter(<ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Iter))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Iter);</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iter<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Iter);</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_split_state_skip_value;</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Iter);</highlight></codeline>
<codeline lineno="3436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"></highlight></codeline>
<codeline lineno="3438"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLSplitStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Iter<sp/>==<sp/>MLNil)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Skip)<sp/>{</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_split_state_skip_iter;</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_split_state_first_iter;</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="3448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"></highlight></codeline>
<codeline lineno="3450"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLSplitStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(State-&gt;Index));</highlight></codeline>
<codeline lineno="3452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"></highlight></codeline>
<codeline lineno="3454"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLSplitStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(&amp;State-&gt;Inner);</highlight></codeline>
<codeline lineno="3456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"></highlight></codeline>
<codeline lineno="3458"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLSplitInnerT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref><sp/>*State<sp/>=<sp/>(<ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref><sp/>*)((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Iter<sp/>-<sp/>offsetof(<ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref>,<sp/>Inner));</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Iter<sp/>==<sp/>MLNil)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="3462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"></highlight></codeline>
<codeline lineno="3464"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLSplitInnerT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref><sp/>*State<sp/>=<sp/>(<ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref><sp/>*)((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Iter<sp/>-<sp/>offsetof(<ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref>,<sp/>Inner));</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key(Caller,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="3467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"></highlight></codeline>
<codeline lineno="3469"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLSplitInnerT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref><sp/>*State<sp/>=<sp/>(<ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref><sp/>*)((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Iter<sp/>-<sp/>offsetof(<ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref>,<sp/>Inner));</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value(Caller,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="3472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"></highlight></codeline>
<codeline lineno="3474"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_split_state_inner_split(<ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_deref(Value)<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Skip<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>MLNil);</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>&amp;State-&gt;Inner);</highlight></codeline>
<codeline lineno="3481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"></highlight></codeline>
<codeline lineno="3483"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_split_state_inner_value(<ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_split_state_inner_split;</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>State-&gt;Fn,<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="3488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"></highlight></codeline>
<codeline lineno="3490"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_split_state_inner_iter(<ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Iter))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Iter);</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iter<sp/>=<sp/>Iter;</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iter<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Iter);</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_split_state_inner_value;</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Iter);</highlight></codeline>
<codeline lineno="3496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"></highlight></codeline>
<codeline lineno="3498"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLSplitInnerT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref><sp/>*State<sp/>=<sp/>(<ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref><sp/>*)((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Iter<sp/>-<sp/>offsetof(<ref refid="structml__split__state__t" kindref="compound">ml_split_state_t</ref>,<sp/>Inner));</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_split_state_inner_iter;</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="3504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"></highlight></codeline>
<codeline lineno="3506"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;split&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__split__t" kindref="compound">ml_split_t</ref><sp/>*Split<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__split__t" kindref="compound">ml_split_t</ref>);</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/>Split-&gt;Type<sp/>=<sp/>MLSplitT;</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/>Split-&gt;Seq<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/>Split-&gt;Fn<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Split;</highlight></codeline>
<codeline lineno="3512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"></highlight></codeline>
<codeline lineno="3514" refid="structml__grouped__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Seq,<sp/>*Fn;</highlight></codeline>
<codeline lineno="3517"><highlight class="normal">}<sp/><ref refid="structml__grouped__t" kindref="compound">ml_grouped_t</ref>;</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"></highlight></codeline>
<codeline lineno="3519"><highlight class="normal">ML_TYPE(MLGroupedT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;grouped&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"></highlight></codeline>
<codeline lineno="3521" refid="structml__grouped__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>Inner;</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Current,<sp/>*Next;</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Fn;</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter;</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[2];</highlight></codeline>
<codeline lineno="3528"><highlight class="normal">}<sp/><ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref>;</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"></highlight></codeline>
<codeline lineno="3530"><highlight class="normal">ML_TYPE(MLGroupedStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;grouped::state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"></highlight></codeline>
<codeline lineno="3533"><highlight class="normal">ML_TYPE(MLGroupedInnerT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;grouped::inner&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"></highlight></codeline>
<codeline lineno="3536"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_grouped_state_first_group(<ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Current<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="3541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"></highlight></codeline>
<codeline lineno="3543"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_grouped_state_first_value(<ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_grouped_state_first_group;</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>State-&gt;Fn,<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="3548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"></highlight></codeline>
<codeline lineno="3550"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_grouped_state_first_iter(<ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Iter))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Iter);</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iter<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Iter);</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_grouped_state_first_value;</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Iter);</highlight></codeline>
<codeline lineno="3555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"></highlight></codeline>
<codeline lineno="3557"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLGroupedT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__grouped__t" kindref="compound">ml_grouped_t</ref><sp/>*Grouped)<sp/>{</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref>);</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLGroupedStateT;</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_grouped_state_first_iter;</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Fn<sp/>=<sp/>Grouped-&gt;Fn;</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Inner.Type<sp/>=<sp/>MLGroupedInnerT;</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Grouped-&gt;Seq);</highlight></codeline>
<codeline lineno="3566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"></highlight></codeline>
<codeline lineno="3568"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_grouped_state_skip_iter(<ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter);</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"></highlight></codeline>
<codeline lineno="3570"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_grouped_state_skip_check(<ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>!=<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_grouped_state_skip_iter;</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Current<sp/>=<sp/>State-&gt;Next;</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State);</highlight></codeline>
<codeline lineno="3579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"></highlight></codeline>
<codeline lineno="3581"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_grouped_state_skip_group(<ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>State-&gt;Current;</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>State-&gt;Next<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_grouped_state_skip_check;</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>EqualMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="3587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"></highlight></codeline>
<codeline lineno="3589"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_grouped_state_skip_value(<ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_grouped_state_skip_group;</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>State-&gt;Fn,<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="3594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"></highlight></codeline>
<codeline lineno="3596"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_grouped_state_skip_iter(<ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Iter))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Iter);</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iter<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Iter);</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_grouped_state_skip_value;</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Iter);</highlight></codeline>
<codeline lineno="3601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"></highlight></codeline>
<codeline lineno="3603"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLGroupedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Iter<sp/>==<sp/>MLNil)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Current)<sp/>{</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_grouped_state_skip_iter;</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Current<sp/>=<sp/>State-&gt;Next;</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(State);</highlight></codeline>
<codeline lineno="3614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"></highlight></codeline>
<codeline lineno="3616"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLGroupedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(State-&gt;Current);</highlight></codeline>
<codeline lineno="3618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"></highlight></codeline>
<codeline lineno="3620"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLGroupedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(&amp;State-&gt;Inner);</highlight></codeline>
<codeline lineno="3622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"></highlight></codeline>
<codeline lineno="3624"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLGroupedInnerT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*State<sp/>=<sp/>(<ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*)((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Iter<sp/>-<sp/>offsetof(<ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref>,<sp/>Inner));</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Iter<sp/>==<sp/>MLNil)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="3628"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"></highlight></codeline>
<codeline lineno="3630"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLGroupedInnerT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*State<sp/>=<sp/>(<ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*)((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Iter<sp/>-<sp/>offsetof(<ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref>,<sp/>Inner));</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key(Caller,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="3633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"></highlight></codeline>
<codeline lineno="3635"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLGroupedInnerT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*State<sp/>=<sp/>(<ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*)((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Iter<sp/>-<sp/>offsetof(<ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref>,<sp/>Inner));</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value(Caller,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="3638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"></highlight></codeline>
<codeline lineno="3640"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_grouped_state_inner_check(<ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Current<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>MLNil);</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>&amp;State-&gt;Inner);</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"></highlight></codeline>
<codeline lineno="3650"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_grouped_state_inner_group(<ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>State-&gt;Current;</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>State-&gt;Next<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_grouped_state_inner_check;</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>EqualMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="3656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"></highlight></codeline>
<codeline lineno="3658"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_grouped_state_inner_value(<ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_grouped_state_inner_group;</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>State-&gt;Fn,<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="3663"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"></highlight></codeline>
<codeline lineno="3665"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_grouped_state_inner_iter(<ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Iter))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Iter);</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Iter<sp/>=<sp/>Iter;</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iter<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Iter);</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_grouped_state_inner_value;</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Iter);</highlight></codeline>
<codeline lineno="3671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"></highlight></codeline>
<codeline lineno="3673"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLGroupedInnerT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*State<sp/>=<sp/>(<ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref><sp/>*)((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Iter<sp/>-<sp/>offsetof(<ref refid="structml__grouped__state__t" kindref="compound">ml_grouped_state_t</ref>,<sp/>Inner));</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_grouped_state_inner_iter;</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="3679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"></highlight></codeline>
<codeline lineno="3681"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;group&quot;</highlight><highlight class="normal">,<sp/>MLSequenceT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__grouped__t" kindref="compound">ml_grouped_t</ref><sp/>*Grouped<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__grouped__t" kindref="compound">ml_grouped_t</ref>);</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/>Grouped-&gt;Type<sp/>=<sp/>MLGroupedT;</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/>Grouped-&gt;Seq<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/>Grouped-&gt;Fn<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Grouped;</highlight></codeline>
<codeline lineno="3687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"></highlight></codeline>
<codeline lineno="3689"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_sequence_init(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Globals)<sp/>{</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/>MLSomeT-&gt;call<sp/>=<sp/>ml_some_call;</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/>MLFunctionT-&gt;Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLChained;</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/>MLSequenceT-&gt;Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLChained;</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_sequence_init.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3694"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_rule(MLChainedT,<sp/>MLSequenceT,<sp/>ML_TYPE_ARG(1),<sp/>ML_TYPE_ARG(2),<sp/>NULL);</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_rule(MLDoubledT,<sp/>MLSequenceT,<sp/>ML_TYPE_ARG(1),<sp/>ML_TYPE_ARG(2),<sp/>NULL);</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_rule(MLRepeatedT,<sp/>MLSequenceT,<sp/>ML_TYPE_ARG(1),<sp/>ML_TYPE_ARG(2),<sp/>NULL);</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_rule(MLSequencedT,<sp/>MLSequenceT,<sp/>ML_TYPE_ARG(1),<sp/>ML_TYPE_ARG(2),<sp/>NULL);</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_rule(MLLimitedT,<sp/>MLSequenceT,<sp/>ML_TYPE_ARG(1),<sp/>ML_TYPE_ARG(2),<sp/>NULL);</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_rule(MLProvidedT,<sp/>MLSequenceT,<sp/>ML_TYPE_ARG(1),<sp/>ML_TYPE_ARG(2),<sp/>NULL);</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_rule(MLSkippedT,<sp/>MLSequenceT,<sp/>ML_TYPE_ARG(1),<sp/>ML_TYPE_ARG(2),<sp/>NULL);</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_rule(MLSwappedT,<sp/>MLSequenceT,<sp/>ML_TYPE_ARG(1),<sp/>ML_TYPE_ARG(2),<sp/>NULL);</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_rule(MLUniqueT,<sp/>MLSequenceT,<sp/>ML_TYPE_ARG(1),<sp/>ML_TYPE_ARG(2),<sp/>NULL);</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_rule(MLPairedT,<sp/>MLSequenceT,<sp/>ML_TYPE_ARG(1),<sp/>ML_TYPE_ARG(2),<sp/>NULL);</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;min&quot;</highlight><highlight class="normal">,<sp/>Min);</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;max&quot;</highlight><highlight class="normal">,<sp/>Max);</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Globals)<sp/>{</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;chained&quot;</highlight><highlight class="normal">,<sp/>MLChainedT);</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">,<sp/>ml_method(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;first2&quot;</highlight><highlight class="normal">,<sp/>ml_method(</highlight><highlight class="stringliteral">&quot;first2&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">,<sp/>ml_method(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;last2&quot;</highlight><highlight class="normal">,<sp/>ml_method(</highlight><highlight class="stringliteral">&quot;last2&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;all&quot;</highlight><highlight class="normal">,<sp/>All);</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;iterate&quot;</highlight><highlight class="normal">,<sp/>MLIterate);</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;count&quot;</highlight><highlight class="normal">,<sp/>ml_method(</highlight><highlight class="stringliteral">&quot;count&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;count2&quot;</highlight><highlight class="normal">,<sp/>Count2);</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;random&quot;</highlight><highlight class="normal">,<sp/>ml_method(</highlight><highlight class="stringliteral">&quot;random&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;reduce&quot;</highlight><highlight class="normal">,<sp/>Reduce);</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;distill&quot;</highlight><highlight class="normal">,<sp/>Distill);</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;min&quot;</highlight><highlight class="normal">,<sp/>Min);</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;max&quot;</highlight><highlight class="normal">,<sp/>Max);</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;sum&quot;</highlight><highlight class="normal">,<sp/>Sum);</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;prod&quot;</highlight><highlight class="normal">,<sp/>Prod);</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;reduce2&quot;</highlight><highlight class="normal">,<sp/>Reduce2);</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;min2&quot;</highlight><highlight class="normal">,<sp/>Min2);</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;max2&quot;</highlight><highlight class="normal">,<sp/>Max2);</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;unique&quot;</highlight><highlight class="normal">,<sp/>Unique);</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;zip&quot;</highlight><highlight class="normal">,<sp/>Zip);</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;zip2&quot;</highlight><highlight class="normal">,<sp/>Zip2);</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;grid&quot;</highlight><highlight class="normal">,<sp/>Grid);</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;pair&quot;</highlight><highlight class="normal">,<sp/>Pair);</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;weave&quot;</highlight><highlight class="normal">,<sp/>Weave);</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;unpack&quot;</highlight><highlight class="normal">,<sp/>Unpack);</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;fold&quot;</highlight><highlight class="normal">,<sp/>Fold);</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;unfold&quot;</highlight><highlight class="normal">,<sp/>Unfold);</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;swap&quot;</highlight><highlight class="normal">,<sp/>Swap);</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/>Key);</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;batch&quot;</highlight><highlight class="normal">,<sp/>Batch);</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3741"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ml_sequence.c"/>
  </compounddef>
</doxygen>
